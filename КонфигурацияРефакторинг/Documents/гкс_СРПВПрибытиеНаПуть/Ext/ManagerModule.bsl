#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает ссылку на документ по идентификатору отправки
//
// Параметры:
//  Идентификатор - СправочникСсылка.гкс_КлючиАналитикиСРПВ - идентификатор отправки по данным СРПВ.
// 
// Возвращаемое значение:
//  ДокументСсылка.гкс_СРПВПрибытиеНаПуть - ссылка на документ.
//
Функция ПолучитьСсылкуПоИдентификаторуОтправки(Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
   |	СРПВПрибытиеНаПуть.Ссылка КАК Ссылка
   |ИЗ
   |	Документ.гкс_СРПВПрибытиеНаПуть КАК СРПВПрибытиеНаПуть
   |ГДЕ
   |	СРПВПрибытиеНаПуть.ИдентификаторОтправки = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);	
	РезультатЗапроса = Запрос.Выполнить();	
		
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.Ссылка;
	Иначе	
		Результат = ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// Возвращает таблицу правил конвертации объекта
// см. гкс_ИнтеграцияСРПВ.ИнициализацияПравилКонвертацийСвойств()
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с заполненными строками правил конвертации реквизитов.
//
Функция ИнициализацияПравилКонвертацийСвойств() Экспорт
	
	ПравилаКонвертации = гкс_ИнтеграцияСРПВ.ИнициализацияПравилКонвертацийСвойств();
	
	гкс_ИнтеграцияСРПВ.ДобавитьПКС(ПравилаКонвертации, "ТочкаМаршрута", "ID_PLK", 1, "ПКС_ТочкаМаршрута");
	гкс_ИнтеграцияСРПВ.ДобавитьПКС(ПравилаКонвертации, "Дата", "RailTrackPDate");
	гкс_ИнтеграцияСРПВ.ДобавитьПКС(ПравилаКонвертации, "ИдентификаторОтправки", "ИдентификаторОтправки");
	гкс_ИнтеграцияСРПВ.ДобавитьПКС(ПравилаКонвертации, "Груженый", "IsLoaded");
	
	Возврат ПравилаКонвертации;
		
КонецФункции

// Обработчик формирования данных для заполнения документа. Вызывается из гкс_ИнтеграцияСРПВ
//
// Параметры:
//  ПравилоКонвертации - СтрокаТаблицыЗначений - определяет текущие правило заполнения.
//  ПолученныеДанные - Структура - структура с полученными данными.
//  ДанныеЗаполнения - Структура - итоговая структура данных для заполнения.
//
Процедура ВыполнитьПроцедуруОбработчикаЗаполнения(ПравилоКонвертации, ПолученныеДанные, ДанныеЗаполнения) Экспорт

	ЗначениеЗаполнения = Неопределено;
	ПолученноеЗначение = Неопределено;
	Если ПолученныеДанные.Свойство(ПравилоКонвертации.СвойствоИсточника) Тогда
		ПолученноеЗначение = ПолученныеДанные[ПравилоКонвертации.СвойствоИсточника];
	КонецЕсли;
	
	Если ПравилоКонвертации.ПравилоКонвертацииСвойства = "ПКС_ТочкаМаршрута" Тогда 
		ПКС_ТочкаМаршрута(ПолученноеЗначение, ПолученныеДанные, ЗначениеЗаполнения);	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеЗаполнения) Тогда
		ДанныеЗаполнения.Вставить(ПравилоКонвертации.СвойствоКонфигурации, ЗначениеЗаполнения);
	КонецЕсли;

КонецПроцедуры

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив из Строка - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("УчетВагоновСРПВ");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = гкс_ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		// Создадим запрос инициализации движений		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ, ДопПараметры);
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаТранспортныеДокументыЖДПолученные(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСРПВСтатусыОформленияВагонов(ТекстыЗапроса, Регистры);
		
	КонецЕсли;
	
	// Получим таблицы для движений
	Возврат гкс_ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ТочкаМаршрута)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.ИдентификаторОтправки КАК ИдентификаторОтправки,
	|	КлючиАналитикиСРПВ.НомерВагона КАК НомерВагона,
	|	ДанныеДокумента.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ДанныеДокумента.Груженый КАК Груженый,
	|	ДанныеДокумента.Проведен КАК Проведен
	|ИЗ
	|	Документ.гкс_СРПВПрибытиеНаПуть КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гкс_КлючиАналитикиСРПВ КАК КлючиАналитикиСРПВ
	|		ПО ДанныеДокумента.ИдентификаторОтправки = КлючиАналитикиСРПВ.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла; 
	
	МестнаяДата = Справочники.гкс_ТочкиМаршрута.
		ПолучитьМестнуюДатуПоТочкеМаршрута(Реквизиты.ТочкаМаршрута);
		
	Запрос.УстановитьПараметр("МестнаяДата", МестнаяДата);	
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаСРПВСтатусыОформленияВагонов(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "гкс_СРПВСтатусыОформленияВагонов";
	
	Если Не гкс_ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли; 
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&МестнаяДата КАК МестнаяДата,
	|	&Период КАК ДатаОперации,
	|	&Ссылка КАК Основание,
	|	&ИдентификаторОтправки КАК КлючАналитикиСРПВ,
	|	&НомерВагона КАК НомерВагона,
	|	ЗНАЧЕНИЕ(Перечисление.гкс_СРПВСтатусыВагонов.Прибыл) КАК Статус
	|ИЗ
	|	Документ.гкс_СРПВПрибытиеНаПуть КАК ПрибытиеНаПуть
	|ГДЕ
	|	ПрибытиеНаПуть.Ссылка = &Ссылка
	|	И ПрибытиеНаПуть.Проведен
	|	И ПрибытиеНаПуть.Груженый";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
		
КонецПроцедуры

Процедура ТекстЗапросаТаблицаТранспортныеДокументыЖДПолученные(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "гкс_СРПВТранспортныеДокументыЖДПолученные";
	
	Если Не гкс_ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = РегистрыСведений.гкс_СРПВТранспортныеДокументыЖДПолученные
		.ТекстЗапросаДанныхДокументаДляПроведения();
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
		
КонецПроцедуры
	
#КонецОбласти

Процедура ПКС_ТочкаМаршрута(ПолученноеЗначение, ПолученныеДанные, ЗначениеЗаполнения)
	
	ЗначениеЗаполнения = РегистрыСведений.гкс_СоответствияОбъектовСРПВ
		.ТочкаМаршрутаПоИдентификаторуСРПВ(ПолученноеЗначение);
			
КонецПроцедуры
	
#КонецОбласти


#КонецЕсли
