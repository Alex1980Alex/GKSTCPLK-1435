#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеВидимостьюДоступностью();
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
			
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекущаяПозицияТовараПриИзменении(Элемент)
	Если ТекущаяПозицияТовара = 0 Тогда
		Элементы.КачественныеПоказатели.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Товары.ТекущаяСтрока = ТекущаяПозицияТовара - 1;
		Элементы.КачественныеПоказатели.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторСтроки", Элементы.Товары.ТекущиеДанные.ИдентификаторСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "СтраницаКачественныеПоказатели"  Тогда
		Элементы.ТекущаяПозицияТовара.СписокВыбора.Очистить();
		Элементы.ТекущаяПозицияТовара.СписокВыбора.Добавить(0, "Все");
		Для Каждого СтрокаТоваров Из Объект.Товары Цикл
			ПредставлениеСтроки = Строка(СтрокаТоваров.НомерСтроки) + ", " + СтрокаТоваров.Номенклатура;
			Элементы.ТекущаяПозицияТовара.СписокВыбора.Добавить(СтрокаТоваров.НомерСтроки, ПредставлениеСтроки);
			
			СтрокиКачественныеПоказатели = Объект.КачественныеПоказатели.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТоваров.ИдентификаторСтроки));
			Для Каждого СтрокаКачественныеПоказатели Из СтрокиКачественныеПоказатели Цикл
				СтрокаКачественныеПоказатели.Товар = ПредставлениеСтроки;
			КонецЦикла;
			
		КонецЦикла;
		Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
			ТекущаяПозицияТовара = Элементы.Товары.ТекущиеДанные.НомерСтроки;
		ИначеЕсли Элементы.ТекущаяПозицияТовара.СписокВыбора.Количество() > 1 Тогда 
			ТекущаяПозицияТовара = 1;
		КонецЕсли;
	КонецЕсли;   

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Товары

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Элементы.КачественныеПоказатели.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторСтроки", Элемент.ТекущиеДанные.ИдентификаторСтроки);
		ТекущаяПозицияТовара = Элемент.ТекущиеДанные.НомерСтроки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	                          
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ОчиститьСтрокиПоИдентификатору(ТекущаяСтрока.ИдентификаторСтроки, "КачественныеПоказатели");	
	 	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_КачественныеПоказатели

&НаКлиенте
Процедура КачественныеПоказателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока и Элемент.ОтборСтрок <> Неопределено 
		И Элемент.ОтборСтрок.Свойство("ИдентификаторСтроки") И ЗначениеЗаполнено(Элемент.ОтборСтрок.ИдентификаторСтроки) Тогда
		Элемент.ТекущиеДанные.ИдентификаторСтроки = Элемент.ОтборСтрок.ИдентификаторСтроки;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	Элементы.ТоварыГруппаЦена.Видимость = Пользователи.ЭтоПолноправныйПользователь() 
			Или ПравоДоступа("Изменение", Метаданные.Документы.гкс_НормативнаяСертификацияНоменклатуры);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ОчиститьСтрокиПоИдентификатору(ИдентификаторСтроки, Таблица, УдалятьФиксированныеСтроки = Ложь)
	
	СтрокиУдалить = Объект[Таблица].НайтиСтроки(Новый Структура("ИдентификаторСтроки",ИдентификаторСтроки));
	
	СтрокиУдалены = Ложь;
	
	Для каждого Строка ИЗ СтрокиУдалить Цикл
						
		Объект[Таблица].Удалить(Объект[Таблица].Индекс(Строка));
		СтрокиУдалены = Истина;
		           
	КонецЦикла; 	
	
	Если СтрокиУдалены Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Внимание! Удалились связаные строки из таблицы %1'"),  
			?(Таблица="КачественныеПоказатели", НСтр("ru = 'Параметры номенклатуры'"), Таблица));    			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);  		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти