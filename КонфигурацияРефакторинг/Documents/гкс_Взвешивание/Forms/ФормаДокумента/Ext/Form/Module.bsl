
#Область ОписаниеПеременных

&НаКлиенте
Перем ИдентификаторЗамераПроведение;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПроверитьВозможностьРедактированияФормы(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ИнициализироватьРеквизитыФормы();
	ИнициализироватьЭлементыФормы();
	УстановитьВидимостьДоступностьЭлементовФормы(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		ТипРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументРегистрации, "ТипРегистрации");
		
		Если ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда
			гкс_УправлениеДоступом.ОпределитьДоступностьВозможностьИзмененияДокументаПоРеестру(ЭтотОбъект, Объект);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
        ИдентификаторЗамераПроведение = 
                ОценкаПроизводительностиКлиент.ЗамерВремени("ПроведениеДокумента.Интерактивно.Взвешивание", Истина);
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Ссылка.Пустая() Тогда
		Если ЗначениеЗаполнено(ЧасовойПоясПЛК) Тогда
			ТекущийОбъект.МестнаяДата = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПоясПЛК);
		Иначе
			ТекущийОбъект.МестнаяДата = ТекущийОбъект.Дата;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСостояниеПослеВзвешивания(ТекущийОбъект);
	
	// при записи документа из формы проверку запрета для Отгрузки не проверяем
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НеПроверятьЗапретРедактированияОтгрузки", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзменениеРегистрацииВеса");
	УстановитьВидимостьДоступностьДат(); 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ТранспортныеСредства" Тогда
		ИнициализироватьДанныеРегистрации();
		ОбновитьИнформациюОПревышенииВесаАвтомобиля();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументРегистрацииПриИзменении(Элемент)

	Элементы.ДокументРегистрации.Видимость = Не ЗначениеЗаполнено(Объект.ДокументРегистрации);
	ДокументРегистрацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыПриИзменении(Элемент)

	УстановитьВидимостьДоступностьКомандСервисаВзвешивания();	
	
КонецПроцедуры
		
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВвестиВесВручную(Команда)
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("Вес", Объект.Вес);
	
	ОповещениеОЗакрытии	= Новый ОписаниеОповещения("ВвестиВесВручную_Закрытие", ЭтотОбъект);
	
	ОткрытьФорму("Документ.гкс_Взвешивание.Форма.ФормаВводаВесаВручную", ПараметрыФормы, 
					ЭтотОбъект , , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Весы) Тогда
		ТекстСообщения = НСтр("ru = 'Не указаны весы для взвешивания'");					
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		Ошибки = Неопределено;
		ПолучитьВесНаСервере(Ошибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОчередьОтвета(Команда)
	
	УдалитьОчередьОтветаНаСервере(); 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
 
&НаСервере
Процедура ПроверитьВозможностьРедактированияФормы(Отказ)
	
	ИзАРМа = Параметры.Свойство("ИзАРМа") И Параметры.ИзАРМа;
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	Если Параметры.Ключ.Пустая() И Не ЭтоПолноправныйПользователь И Не ИзАРМа Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Документ не предназначен для ручного создания'"));
	КонецЕсли;	
	
КонецПроцедуры                                      
 
&НаСервере
Процедура ИнициализироватьРеквизитыФормы()

	ИнициализироватьДанныеРегистрации();	
	ИнициализироватьТипВзвешивания();
	
	Если ЗначениеЗаполнено(Объект.ДокументРегистрации) Тогда
		ИнициализироватьЧасовойПояс();	
	КонецЕсли;
		
	ОбновитьИнформациюПоВесам();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоВесам()
		
	ДанныеПоВесу = гкс_ПриемкаНаПЛКСервер.ПоказанияВесовПоРегистрации(Объект.ДокументРегистрации);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеПоВесу);
	
	// перезаполним информацию по текущему значению веса
	Если ЗначениеЗаполнено(ТипРегистрации) Тогда
		ВидВеса = Перечисления.гкс_ТипыВзвешивания.ВидВеса(Объект.ТипВзвешивания, ТипРегистрации);
		ЭтотОбъект[СтрШаблон("%1%2", ВидВеса, "Факт")] = Объект.Вес;	
	КонецЕсли;
		
	ОбновитьОтклонениеПоВесам();
	ОбновитьИнформациюОПревышенииВесаАвтомобиля();
		
КонецПроцедуры
 
 &НаСервере
Процедура ОбновитьОтклонениеПоВесам()
	 
	Если БруттоФакт > 0 И ТараФакт > 0 Тогда
		НеттоФакт = БруттоФакт - ТараФакт;
	Иначе
		НеттоФакт = 0;	
	КонецЕсли;	
			
	БруттоРазница 	= БруттоФакт - БруттоДок;
	ТараРазница		= ТараФакт - ТараДок;
	НеттоРазница 	= НеттоФакт - НеттоДок;
	 	 	
КонецПроцедуры
 
&НаСервере
Процедура ИнициализироватьЧасовойПояс()
	
	ЧасовойПоясПЛК = Документы.гкс_РегистрацияНаПЛК.ЧасовойПоясРегистрации(Объект.ДокументРегистрации);

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТипВзвешивания()
	
	Если Не ЗначениеЗаполнено(Объект.ТипВзвешивания) Тогда
		Объект.ТипВзвешивания = Перечисления.гкс_ТипыВзвешивания.Въезд;
	КонецЕсли;      	
	
КонецПроцедуры 

&НаСервере
Функция ПроверятьМаксимальноДопустимуюМассуАвто()
	
	Если Не ПолучитьФункциональнуюОпцию("гкс_ИспользоватьКонтрольПревышенияВесаАвтомобиля") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка
		И Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЭтоАвтоПеревозка(ВидПеревозки)
		И Объект.ТипВзвешивания = Перечисления.гкс_ТипыВзвешивания.Въезд Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
			
КонецФункции	
 
&НаСервере
Процедура ИнициализироватьДанныеРегистрации()
	
	Если Не ЗначениеЗаполнено(Объект.ДокументРегистрации) Тогда		
		Возврат;		
	КонецЕсли; 
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ТипРегистрации");
	СтруктураРеквизитов.Вставить("ВидПеревозки");
	СтруктураРеквизитов.Вставить("ТипРегистрации");
	СтруктураРеквизитов.Вставить("ТранспортноеСредство");
	СтруктураРеквизитов.Вставить("Номенклатура");
	СтруктураРеквизитов.Вставить("Контрагент");
	СтруктураРеквизитов.Вставить("НомерРегистрации", "Номер");
	
	РеквизитыРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументРегистрации, СтруктураРеквизитов);
	
	Если ЗначениеЗаполнено(РеквизитыРегистрации) Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыРегистрации);
		КоличествоОсей = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранспортноеСредство, "КоличествоОсей");
	КонецЕсли; 		

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьЭлементыФормы()
	
	ИнициализироватьСписокВыбораТочекМаршрута();	

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокВыбораТочекМаршрута()
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(); 
	Если ЭтоПолноправныйПользователь Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерРегистра = РегистрыСведений.гкс_НастройкиПользователейПриемкаНаПЛК;
	МассивТочекМаршрута = МенеджерРегистра.НастроенныеТочкиМаршрутаПользователя();
	
	Элементы.ТочкаМаршрута.СписокВыбора.ЗагрузитьЗначения(МассивТочекМаршрута);
	
	Если Параметры.Ключ.Пустая() И  Элементы.ТочкаМаршрута.СписокВыбора.Количество() = 1 Тогда
		Объект.ТочкаМаршрута = Элементы.ТочкаМаршрута.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры
 
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовФормы(Отказ)
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	СуществующийДокументОткрытИзАРМа = СуществующийДокументОткрытИзАРМа(); 
	
	УстановитьВидимостьДоступностьДокументРегистрации(СуществующийДокументОткрытИзАРМа);
	УстановитьВидимостьДоступностьТочкиМаршрута(СуществующийДокументОткрытИзАРМа, ЭтоПолноправныйПользователь);
	УстановитьДоступностьКнопкиЗаписать(ЭтоПолноправныйПользователь);	
	УстановитьВидимостьДоступностьДат();
	УстановитьВидимостьДоступностьОстальныхЭлементов(ЭтоПолноправныйПользователь);
	УстановитьВидимостьДоступностьКомандСервисаВзвешивания();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКнопкиЗаписать(ЭтоПолноправныйПользователь)
	
	Если Не ЭтоПолноправныйПользователь Тогда
		Элементы.ТочкаМаршрута.РежимВыбораИзСписка = Истина; 
		КнопкаЗаписать = КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаЗаписать");
		Если КнопкаЗаписать <> Неопределено Тогда
			КнопкаЗаписать.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;       	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьДокументРегистрации(СуществующийДокументОткрытИзАРМа)
	
	Если СуществующийДокументОткрытИзАРМа Тогда
		Элементы.ДокументРегистрации.ТолькоПросмотр = Истина;  
	КонецЕсли;
	Элементы.ДокументРегистрации.Видимость = Не ЗначениеЗаполнено(Объект.ДокументРегистрации);  	

КонецПроцедуры        

&НаСервере
Процедура УстановитьВидимостьДоступностьТочкиМаршрута(СуществующийДокументОткрытИзАРМа, ЭтоПолноправныйПользователь)
	
	Элементы.ТочкаМаршрута.Видимость = Не ЗначениеЗаполнено(Объект.ТочкаМаршрута);
	Элементы.ТочкаМаршрута.РежимВыбораИзСписка = НЕ ЭтоПолноправныйПользователь; 
	
	Если СуществующийДокументОткрытИзАРМа Тогда
		Возврат;
	КонецЕсли;
		
	Пользователь = Пользователи.ТекущийПользователь();
	ЭтоПользовательСРольюАдминистраторПЛК =
	     гкс_ПриемкаТранспорта.ЭтоПользовательСРольюАдминистраторПЛК(Неопределено, 
	                                  Новый Структура("ТочкаМаршрута", Объект.ТочкаМаршрута));
	
	Элементы.ТочкаМаршрута.ТолькоПросмотр = НЕ ЭтоПользовательСРольюАдминистраторПЛК И НЕ ЭтоПолноправныйПользователь;
	
	Если ЭтоПользовательСРольюАдминистраторПЛК Тогда

		МассивТочекМаршрута = РегистрыСведений
		                         .гкс_НастройкиПользователейПриемкаНаПЛК
		                         .НастроенныеТочкиМаршрутаПользователя(Пользователь);

		Элементы.ТочкаМаршрута.СписокВыбора.ЗагрузитьЗначения(МассивТочекМаршрута);
		Элементы.ТочкаМаршрута.РежимВыбораИзСписка = Истина;

	КонецЕсли;
		
КонецПроцедуры
    
&НаСервере
Процедура УстановитьВидимостьДоступностьОстальныхЭлементов(ЭтоПолноправныйПользователь)
	
	Элементы.Номер.Доступность = ЭтоПолноправныйПользователь;
	Элементы.Дата.Доступность = ЭтоПолноправныйПользователь;
	
	Элементы.ТипВзвешивания.Доступность = ЭтоПолноправныйПользователь 
		ИЛИ ПравоДоступа("Изменение", Метаданные.Документы.гкс_Взвешивание);   
		
	Элементы.НадписьКачествоНеПринято.Видимость = Объект.КачествоНеПринято; 	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьДат()
	
	МестнаяДатаЗаполнена = ЗначениеЗаполнено(Объект.МестнаяДата);
	Элементы.Дата.Видимость = НЕ МестнаяДатаЗаполнена;
	Элементы.МестнаяДата.Видимость = МестнаяДатаЗаполнена;
	
КонецПроцедуры
 
&НаСервере
Процедура УстановитьВидимостьДоступностьКомандСервисаВзвешивания()
	
	УдалитьОчередьОтветаВидимость = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Весы) Тогда 	
		АвтоудалениеОчередиОтвета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Весы, "АвтоудалениеОчередиОтвета");
		УдалитьОчередьОтветаВидимость = НЕ АвтоудалениеОчередиОтвета;	
	КонецЕсли;
	
	Элементы.УдалитьОчередьОтвета.Видимость = УдалитьОчередьОтветаВидимость;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеПослеВзвешивания(ТекущийОбъект)
	
	ОбновитьИнформациюОПревышенииВесаАвтомобиля();	
	Если ЗначениеПревышенияМассыАвто > 0 Тогда	
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Состояние", 
			Перечисления.гкс_СостоянияРегистрации.НеПринятоПоПревышениюМаксимальногоВеса); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДокументРегистрацииПриИзмененииНаСервере()
	
	Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументРегистрации, "Организация");
	
	ИнициализироватьДанныеРегистрации();
	
	ОбновитьИнформациюПоВесам();
	
КонецПроцедуры 

// Оповещение после ввода веса
//
// Параметры:
//  Результат - Структура.
//  Параметры - Структура.
//
&НаКлиенте
Процедура ВвестиВесВручную_Закрытие(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.ВесИзменен Тогда
		
		Модифицированность = Истина;
		
		Объект.Вес = Результат.Вес;
		Объект.ВесВведенВручную	= Истина;
		
		ОчиститьСообщения();		
		ОбновитьИнформациюПоВесам();
						
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СуществующийДокументОткрытИзАРМа()
	
	Возврат ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") 
			И Параметры.Свойство("ИзАРМа") 
			И Не Параметры.Ключ.Пустая();
	
КонецФункции 
		                         
#Область ПроцедурыКоманд 

&НаСервере
Процедура ПолучитьВесНаСервере(Ошибки)
	
	Если ЗначениеЗаполнено(Объект.Весы) Тогда

		Попытка
			ДанныеСВесов = гкс_ОбменДаннымиСВесами.РезультатыВзвешивания(УникальныйИдентификатор, Объект.Весы);
		Исключение
			ТекстОшибки = НСтр("ru = 'Ошибка получения веса от сервиса весов'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстОшибки);
		КонецПопытки;
		
		Если ТипЗнч(ДанныеСВесов) = Тип("Массив") И ЗначениеЗаполнено(ДанныеСВесов) Тогда	
			Объект.Вес = ДанныеСВесов[0];
			Объект.ВесВведенВручную = Ложь;
			
			ОбновитьИнформациюПоВесам();
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОчередьОтветаНаСервере()
	
	гкс_ОбменДаннымиСВесами.УдалитьОчередьСообщений(Объект.Весы);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьИнформациюОПревышенииВесаАвтомобиля()
	 
	Если Не ПроверятьМаксимальноДопустимуюМассуАвто() Тогда
		Возврат;
	КонецЕсли;
	
	МассивПодстрок = Новый Массив;
	
	ТекстОшибки = "";
	Если Не гкс_ПриемкаТранспорта.ПроверкаЗаполненияДляКонтроляПревышенияВесаАвтомобиля(
		ТранспортноеСредство, ТекстОшибки) Тогда
		
		МаксимальнаяМассаАвто = 0;
		ЗначениеПревышенияМассыАвто = 0;
		Объект.Комментарий = ТекстОшибки;
		
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(ТекстОшибки));		
		Элементы.ИнформацияОПревышенииВесаАвтомобиля.ЦветТекста = ЦветаСтиля.ЦветТекстаОтрицательногоЗначения;
		
	Иначе
				
		МаксимальнаяМассаАвто = гкс_ПриемкаТранспорта.МаксимальныйДопустимыйВес(ВидПеревозки, КоличествоОсей);
		ПроверкаДопустимогоВесаАвтомобиля = ПроверкаДопустимогоВесаАвтомобиля();
							
		СтрокаИнформации = СтрШаблон(НСтр("ru = '%1; max.m.: %2 %3'"), 
			КоличествоОсей, МаксимальнаяМассаАвто, гкс_ПриемкаТранспорта.ПолучитьЕдиницуИзмеренияВесаПриемки());
			
		Объект.Комментарий = "";	
		
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(СтрокаИнформации));
		
		Элементы.ИнформацияОПревышенииВесаАвтомобиля.ЦветТекста = ЦветаСтиля.ЦветТекстаВнимание;
		
	КонецЕсли;
	
	ИнформацияОПревышенииВесаАвтомобиля = Новый ФорматированнаяСтрока(МассивПодстрок);
	 
КонецПроцедуры

&НаСервере
Функция ПроверкаДопустимогоВесаАвтомобиля()
	
	
	ЗначениеПревышенияМассыАвто = Объект.Вес - МаксимальнаяМассаАвто;
	
	Если ЗначениеПревышенияМассыАвто > 0 Тогда

		ТекстСообщения = НСтр("ru = 'Вес брутто превышает максимально допустимый. 
		|При проведении регистрация будет переведена в состояние ""Не принято по весу""'");
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	Иначе	
		Возврат Истина;	
	КонецЕсли;
	
КонецФункции
	
#КонецОбласти

