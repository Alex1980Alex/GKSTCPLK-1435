#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда 

#Область ПрограммныйИнтерфейс

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - см. УправлениеПечатьюПереопределяемый.ПриПечати.МассивОбъектов
//  ПараметрыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//  КоллекцияПечатныхФорм - см. УправлениеПечатьюПереопределяемый.ПриПечати.КоллекцияПечатныхФорм
//  ОбъектыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//  ПараметрыВывода - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыВывода
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
		
	СтруктураТипов = гкс_ОбщегоНазначенияПЛК.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТТНГоризонтальнаяЛокализация_by") Тогда
		
		ПараметрыПечати.Вставить("ИмяПараметровПечати", "ПФ_MXL_ТТНГоризонтальнаяЛокализация_by");
		ПараметрыПечати.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Ландшафт);
		ПараметрыПечати.Вставить("ДвусторонняяПечать", ТипДвустороннейПечати.ПереворотВверх);
		ПараметрыПечати.Вставить("ПолныйПутьКМакету", 
			"Обработка.гкс_ПечатьТТН_Беларусь.ПФ_MXL_ТТНГоризонтальнаяЛокализация_by");
	
		ТабличныйДокумент = ПечатнаяФормаТТН(СтруктураТипов, ОбъектыПечати, ПараметрыПечати);
		 
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ТТНГоризонтальнаяЛокализация_by",
			НСтр("ru='ТТН (Беларусь)'"), 
			ТабличныйДокумент);
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТТНВертикальнаяЛокализация_by") Тогда
		
		ПараметрыПечати.Вставить("ИмяПараметровПечати", "ПФ_MXL_ТТНВертикальнаяЛокализация_by");
		ПараметрыПечати.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Портрет);
		ПараметрыПечати.Вставить("ДвусторонняяПечать", ТипДвустороннейПечати.ПереворотВлево);
		ПараметрыПечати.Вставить("ПолныйПутьКМакету", 
			"Обработка.гкс_ПечатьТТН_Беларусь.ПФ_MXL_ТТНВертикальнаяЛокализация_by");
		
		ТабличныйДокумент = ПечатнаяФормаТТН(СтруктураТипов, ОбъектыПечати, ПараметрыПечати);
		 
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ТТНВертикальнаяЛокализация_by",
			НСтр("ru='ТТН (Беларусь)'"), 
			ТабличныйДокумент);
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти	
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПечатнаяФормаТТН(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ПараметрыПечати.Свойство("ИмяПараметровПечати", ТабличныйДокумент.ИмяПараметровПечати);
	ПараметрыПечати.Свойство("ОриентацияСтраницы", ТабличныйДокумент.ОриентацияСтраницы);
		
	УстановитьПривилегированныйРежим(Истина);
			
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл

		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = гкс_ЛокализацияСервер.МодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		КонецЕсли;
		
		ДанныеДляПечати = МенеджерОбъекта.
			ДанныеДляПечатнойФормыТТНБеларусь(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		Если Не ДанныеДляПечати = Неопределено Тогда
			ЗаполнитьТабличныйДокументТТНБеларусь(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции	

// Процедура заполняет табличный документ "ТТН"
//
Процедура ЗаполнитьТабличныйДокументТТНБеларусь(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати)
	
	ДанныеПечати = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам	= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДанныеШапки = СтруктураПоРезультатуЗапроса(ДанныеДляПечати.РезультатПоШапке);
	ДанныеСтроки = СтруктураПоРезультатуЗапроса(ДанныеДляПечати.РезультатПоТабличнойЧасти);
	
	ДанныеДополнительные = Новый Структура;
	ПараметрыПечати.Свойство("ДанныеПечати", ДанныеДополнительные); 
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПараметрыПечати.ПолныйПутьКМакету);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка; 
		
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеШапки, ДанныеПечати);
		
		// Найдем в выборке товары по текущему документу
		СтруктураПоиска = Новый Структура("ДокументРегистрации", ДанныеШапки.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		КоличествоСтрок = СтрокаТовары.Количество(); 
		
		Если КоличествоСтрок = 0 Тогда
			ТекстШаблон = НСтр("ru='В документе %1 и %2 не соответствуют номенклатуры, 
			| либо дата документа не попадает в период отгрузки заказа.'");	
			ТекстСообщения = СтрШаблон(ТекстШаблон, ДанныеШапки.Ссылка, ДанныеШапки.ЗаявкаНаОтгрузку);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДанныеШапки.Ссылка);
			Продолжить;	
		КонецЕсли;
			
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь; 
		
		ИтоговыеСуммы = ИнициализацияСуммИтогов();
		
		ВывестиШапку(ДанныеШапки, Макет, ТабличныйДокумент); 
		
		Если СтрокаТовары.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТовары);
			ВывестиСтроки(ДанныеШапки, ДанныеСтроки, Макет, ТабличныйДокумент, ИтоговыеСуммы);
		КонецЕсли;	
			
		ВывестиИтого(Макет, ТабличныйДокумент, ИтоговыеСуммы);
		
		// Выводим подвал документа
		ВывестиПодвал(ДанныеШапки, Макет, ТабличныйДокумент, ИтоговыеСуммы, ДанныеДополнительные);
				
		Если ПараметрыПечати.Свойство("ОриентацияСтраницы") 
			И ПараметрыПечати.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
				
		ОбластьЛист2 = Макет.ПолучитьОбласть("Лист2");
		
		СтрокаШаблон = "товарно-транспортная накладная №%1, удостоверение о качестве";		
		ОбластьЛист2.Параметры.ГрузоДокументы = СтрШаблон(СтрокаШаблон, ДанныеШапки.НомерНакладной);
		
		ТабличныйДокумент.Вывести(ОбластьЛист2);
	
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, ДанныеШапки.Ссылка);

	КонецЦикла; // Конец цикла обхода выборки "ДанныеПечати"
	
КонецПроцедуры

Процедура ВывестиШапку(ДанныеПечати, Макет, ТабличныйДокумент)
	
	ПереопределитьПунктПогрузки(ДанныеПечати);
	ПереопределитьПунктРазгрузки(ДанныеПечати);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);	
	
	ОбластьМакета.Параметры.Автомобиль = СтрШаблон("%1, %2", ДанныеПечати.МаркаТС, ДанныеПечати.ТранспортноеСредство);	
		
	ТабличныйДокумент.Вывести(ОбластьМакета);		
	
КонецПроцедуры

Процедура ВывестиСтроки(ДанныеПечати, СтрокаТовары, Макет, ТабличныйДокумент, ИтоговыеСуммы)
	
	ПереопределитьНаименованиеНоменклатуры(СтрокаТовары);
	
	РазрядностьСуммы = 2;
	
	ДанныеВзвешивания = гкс_ПриемкаНаПЛКСервер.ПоказанияВесовПоРегистрации(ДанныеПечати.Ссылка, Истина);
	ЕдиницаТонна = гкс_ПриемкаТранспортаПовтИсп.ПолучитьЕдиницуИзмеренияТранспортногоДокумента();
	
	Если ДанныеВзвешивания = Неопределено Тогда
		Возврат;
	КонецЕсли;		
			
	СуммаСНДС = 0;

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
	
	ТипРасчетов = ТипРасчетов(ДанныеПечати);
	
	Если ТипРасчетов = "РучноеУказаниеЦен" Тогда
		Цена = СтрокаТовары.ЦенаРучВНацВалюте;
		
	ИначеЕсли ТипРасчетов = "ЗаказВВалютеНациональногоУчета" Тогда
        Цена = СтрокаТовары.Цена;
		
	ИначеЕсли ТипРасчетов = "ОплатаПоКурсуНаДатуНакладной" Тогда
						
		Цена = РаботаСКурсамиВалют.ПересчитатьВВалюту(СтрокаТовары.Цена,
			ДанныеПечати.ВалютаЗаказа, ДанныеПечати.ВалютаРегламентированногоУчета, ДанныеПечати.ДатаДокумента);
		Цена = Окр(Цена, РазрядностьСуммы);
	Иначе	
		Цена = 0;
	КонецЕсли;
		
	Если ТипРасчетов = "РучноеУказаниеЦен" Тогда
		Стоимость = СтрокаТовары.СтоимостьРучВНацВалюте;
	Иначе
		Стоимость = Окр(Цена * ДанныеВзвешивания.НеттоФакт, РазрядностьСуммы);
	КонецЕсли;
	
	ЗначениеСтавкиНДС = Перечисления.СтавкиНДС.ПроцентСтавкиНДС(СтрокаТовары.СтавкаНДС);
	
	СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Стоимость, Истина, 
		ДанныеПечати.СуммаВключаетНДС, ЗначениеСтавкиНДС);
	
	СуммаНДС = Окр(СуммаНДС, РазрядностьСуммы);
	Если ДанныеПечати.СуммаВключаетНДС Тогда
		СуммаСНДС = Стоимость;
	Иначе
		СуммаСНДС = Стоимость + СуммаНДС;	
	КонецЕсли;
		   
	Если ТипРасчетов = "РучноеУказаниеЦен" Или ТипРасчетов = "ОплатаПоКурсуНаДатуНакладной" Тогда		
		СуммаСНДСЗаказа = РаботаСКурсамиВалют.ПересчитатьВВалюту(СуммаСНДС, 
																	ДанныеПечати.ВалютаРегламентированногоУчета, 
																	ДанныеПечати.ВалютаЗаказа, 
																	ДанныеПечати.ДатаДокумента);	
	ИначеЕсли ТипРасчетов = "ЗаказВВалютеНациональногоУчета" Тогда
		СуммаСНДСЗаказа = СуммаСНДС;			
	Иначе		
		СуммаСНДСЗаказа = 0;
	КонецЕсли;
	
	Если ТипРасчетов = "ОплатаПоКурсуНаДатуНакладной"
		Или ТипРасчетов = "РучноеУказаниеЦен" Тогда
		Примечание = СтрШаблон("Стоимость %1 с НДС %2", 
							   ДанныеПечати.ВалютаЗаказа, Формат(СуммаСНДСЗаказа, "ЧДЦ=2"));	
	Иначе
		Примечание = "";	
	КонецЕсли;
	
    ОбластьМакета.Параметры.Цена 		= Цена;
	ОбластьМакета.Параметры.СуммаБезНДС = Стоимость;
	ОбластьМакета.Параметры.СтавкаНДС 	= СтрокаТовары.СтавкаНДС;
	ОбластьМакета.Параметры.СуммаНДС 	= СуммаНДС;
	ОбластьМакета.Параметры.СуммаСНДС 	= СуммаСНДС;
	
	ОбластьМакета.Параметры.КоличествоМест 	= "-";
	ОбластьМакета.Параметры.ЕдиницаИзмерения = ЕдиницаТонна;
	ОбластьМакета.Параметры.Количество = ДанныеВзвешивания.НеттоФакт;
	ОбластьМакета.Параметры.Масса = ДанныеВзвешивания.НеттоФакт;		
	ОбластьМакета.Параметры.Примечание = Примечание;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьВСоставе = Макет.ПолучитьОбласть("всоставе");
	ОбластьВСоставе.Параметры.СтрПрочее = "страна происхождения - " + ДанныеПечати.СтранаРегистрации;
	ТабличныйДокумент.Вывести(ОбластьВСоставе);
	
	ИтоговыеСуммы.Стоимость 	= ИтоговыеСуммы.Стоимость + Стоимость;
	ИтоговыеСуммы.СуммаНДС 		= ИтоговыеСуммы.СуммаНДС + СуммаНДС;
	ИтоговыеСуммы.СтоимостьСНДС = ИтоговыеСуммы.СтоимостьСНДС + Стоимость + СуммаНДС;
	ИтоговыеСуммы.Масса 		= ИтоговыеСуммы.Масса + ДанныеВзвешивания.НеттоФакт;
 		
КонецПроцедуры

Процедура ВывестиИтого(Макет, ТабличныйДокумент, ИтоговыеСуммы)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ПараметрыОбласти = ОбластьМакета.Параметры; 
		
	ПараметрыОбласти.ИтогоСумма = ИтоговыеСуммы.Стоимость;
	ПараметрыОбласти.ИтогоНДС = ИтоговыеСуммы.СуммаНДС;
	ПараметрыОбласти.ИтогоСуммаСНДС = ИтоговыеСуммы.СтоимостьСНДС;
	ПараметрыОбласти.ИтогоКоличество = ИтоговыеСуммы.Масса;
	ПараметрыОбласти.ИтогоМасса = ИтоговыеСуммы.Масса;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
		
КонецПроцедуры 

Процедура ВывестиПодвал(ДанныеПечати, Макет, ТабличныйДокумент, ИтоговыеСуммы, ДанныеДополнительные)
		
	ОбластьМакета =	Макет.ПолучитьОбласть("Подвал");
	ПараметрыОбласти = ОбластьМакета.Параметры;
	ПараметрыОбласти.Заполнить(ДанныеПечати);
	ПараметрыОбласти.Заполнить(ДанныеДополнительные);
	
	ПараметрыОбласти.ИтогоНДСП = РаботаСКурсамиВалютУТ.
		СформироватьСуммуПрописью(Цел(ИтоговыеСуммы.СуммаНДС), ДанныеПечати.ВалютаРегламентированногоУчета, Истина, "ru");
		
	ПараметрыОбласти.ИтогоНДСПЦифрами = ДробнаяЧастьСтрокой(ИтоговыеСуммы.СуммаНДС);
	
	ПараметрыОбласти.ИтогоСуммаСНДСП = РаботаСКурсамиВалютУТ.
		СформироватьСуммуПрописью(Цел(ИтоговыеСуммы.СтоимостьСНДС), ДанныеПечати.ВалютаРегламентированногоУчета, Истина, "ru");
	
	ПараметрыОбласти.ИтогоСуммаСНДСПЦифрами = ДробнаяЧастьСтрокой(ИтоговыеСуммы.СтоимостьСНДС);
		
	// Подвал
	Если Цел(ИтоговыеСуммы.Масса) = ИтоговыеСуммы.Масса Тогда
		ПарПредмета = "тонна,тонны,тонн,ж,,,,,0";
	Иначе
		ПарПредмета = "тонна,тонны,тонн,ж,килограмм,килограмма,килограммов,м,3";
	КонецЕсли;
			
	ОбластьМакета.Параметры.ИтогоМассаКгП = ЧислоПрописью(ИтоговыеСуммы.Масса, "Л = ru_RU; ДП = Истина", ПарПредмета);		
	ОбластьМакета.Параметры.КоличествоМестП = "Насыпью";

	ОбластьМакета.Параметры.ГрузПринял = СтрШаблон("Водитель %1", ДанныеПечати.Водитель);									
	ОбластьМакета.Параметры.КонтрагентНаименование = ДанныеПечати.КонтрагентЗаказа;							
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
		
КонецПроцедуры

Функция ИнициализацияСуммИтогов()
	
	ИтоговыеСуммы = Новый Структура;
	ИтоговыеСуммы.Вставить("Стоимость", 0);
	ИтоговыеСуммы.Вставить("СуммаНДС", 0);
	ИтоговыеСуммы.Вставить("СтоимостьСНДС", 0);
	ИтоговыеСуммы.Вставить("Масса", 0);
	
	Возврат ИтоговыеСуммы;
	
КонецФункции

Функция ТипРасчетов(ДанныеПечати)

	Результат = "";
	ВалютыСовпадают = ?(ДанныеПечати.ВалютаРегламентированногоУчета = ДанныеПечати.ВалютаЗаказа, Истина, Ложь);
	
	Если ДанныеПечати.РучныеЦеныТТН Тогда
		Результат = "РучноеУказаниеЦен";	
	Иначе
		Если ВалютыСовпадают Тогда
			Результат = "ЗаказВВалютеНациональногоУчета";											
		Иначе
			Результат = "ОплатаПоКурсуНаДатуНакладной";																									   
		КонецЕсли;			
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции	

Функция ДробнаяЧастьСтрокой(Сумма)
	
	РазрядностьСуммы = 2;

	Возврат Прав(Формат(Сумма, "ЧДЦ=2; ЧН=00"), РазрядностьСуммы);
		
КонецФункции	
	
Функция СтруктураПоРезультатуЗапроса(РезультатЗапроса)
	
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

Процедура ПереопределитьПунктПогрузки(ДанныеПечати)
	
	Если ДанныеПечати.Свойство("ПунктПогрузки") 
		И ДанныеПечати.Свойство("ГрузоотправительЮрАдрес") Тогда
		
		ДанныеПечати.ПунктПогрузки = ?(ЗначениеЗаполнено(ДанныеПечати.ПунктПогрузки), 
			ДанныеПечати.ПунктПогрузки, ДанныеПечати.ГрузоотправительЮрАдрес); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПереопределитьПунктРазгрузки(ДанныеПечати)
	
	Если ДанныеПечати.Свойство("ПунктРазгрузки") 
		И ДанныеПечати.Свойство("КонтрагентРегистрацииЮрАдрес") Тогда
		
		ДанныеПечати.ПунктРазгрузки = ?(ЗначениеЗаполнено(ДанныеПечати.ПунктРазгрузки), 
			ДанныеПечати.ПунктРазгрузки, ДанныеПечати.КонтрагентРегистрацииЮрАдрес); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПереопределитьНаименованиеНоменклатуры(ДанныеПечати)
	
	Если ДанныеПечати.Свойство("ТоварНаименование") 
		И ДанныеПечати.Свойство("ТоварНаименованиеПолное") Тогда
		
		ДанныеПечати.ТоварНаименование = ?(ЗначениеЗаполнено(ДанныеПечати.ТоварНаименование), 
			ДанныеПечати.ТоварНаименование, ДанныеПечати.ТоварНаименованиеПолное); 
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

