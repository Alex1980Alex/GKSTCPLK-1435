#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	АдресСервиса = Константы.АдресВебСервиса1СДокументооборот.Получить();
	ЭтоПользовательЗаданияОбмена = ИнтеграцияС1СДокументооборотВызовСервера.ЭтоПользовательЗаданияОбмена();
	Параметры.Свойство("ВызовДляПользователяЗаданияОбмена", ВызовДляПользователяЗаданияОбмена);
	
	Если ВызовДляПользователяЗаданияОбмена
		Или ЭтоПользовательЗаданияОбмена Тогда
		ИмяПользователя = Константы.ИнтеграцияС1СДокументооборотИмяПользователяДляОбмена.Получить();
		Пароль = Константы.ИнтеграцияС1СДокументооборотПарольДляОбмена.Получить();
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
	// Добавим в список выбора имя пользователя ИС.
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Элементы.ИмяПользователя.СписокВыбора.Добавить(ПользовательИБ.Имя);
	Элементы.ИмяПользователя.КнопкаВыпадающегоСписка = Истина;
	#КонецЕсли

	// Определим, доступна ли аутентификация ОС.
	ПроверитьИспользованиеАутентификацииОС();
	
	// Если вызов - автоматический, при проверке подключения, и аутентификация ОС оказалась успешной,
	// то форму открывать не нужно.
	Если Параметры.АвтоматическийВызовПриПроверкеПодключения
		И ИспользуетсяАутентификацияОС Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	// гкс+[GMFM-66] Свист П.А. от 24.10.2022. Добавлено:{
	гкс_УправлениеФормой(); // } гкс-

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПарольСохранен = Ложь;
	СохраненноеИспользуетсяАутентификацияОС = Ложь;
	
	Если Не ВызовДляПользователяЗаданияОбмена
		Или ЭтоПользовательЗаданияОбмена Тогда
		ИнтеграцияС1СДокументооборотКлиент.ПрочитатьНастройкиАвторизации(
			ИмяПользователя, ПарольСохранен, Пароль, СохраненноеИспользуетсяАутентификацияОС);
		// гкс+[GMFM-66] Свист П.А. от 24.10.2022. Добавлено:{
		Если ЭтотОбъект["гкс_ИспользуетсяСервисАутентификации"] Тогда
			ПодключитьОбработчикОжидания("гкс_ПроверитьАутентификацию", 1, Истина);
		КонецЕсли;
		// } гкс-
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Если Не ЗначениеЗаполнено(ИмяПользователя)
		И Не ИспользуетсяАутентификацияОС Тогда
		ТекущийЭлемент = Элементы.ИмяПользователя;
		ПоказатьПредупреждение(, НСтр("ru = 'Не заполнено имя пользователя 1С:Документооборота.'"));
		Возврат;
	КонецЕсли;
	
	ТекстСообщенияОбОшибке = "";
	Если ИнтеграцияС1СДокументооборотВызовСервера.ПроверитьПодключение(
			ИмяПользователя,
			Пароль,
			ТекстСообщенияОбОшибке,
			Не ЗначениеЗаполнено(ИмяПользователя)) Тогда
		
		Если ВызовДляПользователяЗаданияОбмена
			Или	ЭтоПользовательЗаданияОбмена Тогда
			
			ИнтеграцияС1СДокументооборотВызовСервера.СохранитьНастройкиАвторизацииДляОбмена(ИмяПользователя, Пароль);
			
		КонецЕсли;
		
		Если Не ВызовДляПользователяЗаданияОбмена
			Или ЭтоПользовательЗаданияОбмена Тогда
			
			ИнтеграцияС1СДокументооборотКлиент.СохранитьНастройкиАвторизации(ИмяПользователя,
				Пароль,
				Не ЗначениеЗаполнено(ИмяПользователя));
			ИнтеграцияС1СДокументооборотВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса();
			Оповестить("ИнтеграцияС1СДокументооборотом_УспешноеПодключение", , ВладелецФормы);
			
		КонецЕсли;
		
		Закрыть(Истина);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОКЗавершение", ЭтотОбъект, ТекстСообщенияОбОшибке);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ОК", "ОК");
		Кнопки.Добавить("Подробнее", "Подробнее...");
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Не удалось подключиться к 1С:Документообороту с указанным
			|именем пользователя и паролем. Обратитесь к администратору.'"), Кнопки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОКЗавершение(Результат, ТекстСообщенияОбОшибке) Экспорт

	Если Результат = "Подробнее" Тогда
		ПоказатьПредупреждение(, ТекстСообщенияОбОшибке);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет, можно ли использовать аутентификацию ОС при подключении к ДО. Настраивает
// форму в зависимости от результата.
//
&НаСервере
Процедура ПроверитьИспользованиеАутентификацииОС()
	
	Если ИнтеграцияС1СДокументооборот.ПоддерживаетсяАутентификацияОС() Тогда
		ТекстСообщенияОбОшибке = "";
		Если ИнтеграцияС1СДокументооборотВызовСервера.ПроверитьПодключение(
				"", // без имени пользователя
				"", // и пароля
				ТекстСообщенияОбОшибке,
				Истина) Тогда
			ИспользуетсяАутентификацияОС = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДекорацияИспользуетсяАутентификацияОС.Видимость = ИспользуетсяАутентификацияОС;
	Элементы.ИмяПользователя.АвтоОтметкаНезаполненного = Не ИспользуетсяАутентификацияОС;
	КлючСохраненияПоложенияОкна = Строка(ИспользуетсяАутентификацияОС);
	
КонецПроцедуры

// гкс+[GMFM-66] Свист П.А. от 24.10.2022. Добавлено:{
//
&НаСервере
Процедура гкс_УправлениеФормой()
	
	НовыеРеквизиты = Новый Массив;
	НовыеРеквизиты.Добавить(Новый РеквизитФормы("гкс_ИспользуетсяСервисАутентификации", 
	Новый ОписаниеТипов("Булево")));
	
	ИзменитьРеквизиты(НовыеРеквизиты);
	
	ЭтотОбъект["гкс_ИспользуетсяСервисАутентификации"] = 
	ПолучитьФункциональнуюОпцию("гкс_ИспользоватьСервисАутентификации1СДокументооборот");
	
	Если ЭтотОбъект["гкс_ИспользуетсяСервисАутентификации"] Тогда
		НовыйЭлемент			= Элементы.Добавить("гкс_ДекорацияОжидание", Тип("ДекорацияФормы"));
		НовыйЭлемент.Вид		= ВидДекорацииФормы.Картинка;
		НовыйЭлемент.Картинка	= БиблиотекаКартинок.ДлительнаяОперация48;
		НовыйЭлемент.Видимость	= Ложь;
		
		Элементы.гкс_ДекорацияОжидание.Видимость	= Истина;
		Элементы.ИмяПользователя.Видимость	= Ложь;
		Элементы.Пароль.Видимость			= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// гкс+[GMFM-66] Свист П.А. от 24.10.2022. Добавлено:{
//
&НаКлиенте
Процедура гкс_ПроверитьАутентификацию()
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотВызовСервера.ВерсияСервиса();
	
	Если гкс_ПроверитьПодключение() Тогда
		Если ВерсияСервиса = "0.0.0.0" ИЛИ 
			ВерсияСервиса = "" Тогда
			
			ИнтеграцияС1СДокументооборотВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса();
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("гкс_ЗакрытьФормуПослеУспешнойАвторизации", 1, Истина);
		
	Иначе		
		
		Если гкс_Интеграция1СДокументооборотКлиент.УстановитьАвторизациюТекущегоПользователя(
			ИмяПользователя, Пароль) Тогда
			
			Оповестить("ИнтеграцияС1СДокументооборотом_УспешноеПодключение", , ВладелецФормы);
			ПодключитьОбработчикОжидания("гкс_ЗакрытьФормуПослеУспешнойАвторизации", 1, Истина);
			
		Иначе
			
			Элементы.гкс_ДекорацияОжидание.Видимость = Ложь;
			Элементы.ИмяПользователя.Видимость	= Истина;
			Элементы.Пароль.Видимость			= Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// гкс+[GMFM-66] Свист П.А. от 24.10.2022. Добавлено:{
//
&НаКлиенте
Процедура гкс_ЗакрытьФормуПослеУспешнойАвторизации()
	
	Закрыть(Истина);
	
КонецПроцедуры

// гкс+[GMFM-66] Свист П.А. от 24.10.2022. Добавлено:{
//
&НаКлиенте
Функция гкс_ПроверитьПодключение()
	
	ТекстСообщенияОбОшибке = "";
	Возврат ИнтеграцияС1СДокументооборотВызовСервера.ПроверитьПодключение(
		ИмяПользователя, 
		Пароль, 
		ТекстСообщенияОбОшибке);
	
КонецФункции

#КонецОбласти