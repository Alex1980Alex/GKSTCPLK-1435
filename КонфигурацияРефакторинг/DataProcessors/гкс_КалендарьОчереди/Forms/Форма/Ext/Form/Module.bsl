
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьРеквизитыФормы();
	ВыполнитьНастройкуПланировщикаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	ПодключитьОбработчикОжидания("ОбработатьОбновлениеЭлементовПланировщика", 60);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаКалендаряПриИзменении(Элемент)
	
	ИнтервалДатаПриИзменении();
	
	ОбновитьЗаписиПланировщика();	
	НастроитьПланировщик(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалПриИзменении(Элемент)
	
	ИнтервалДатаПриИзменении();
	
	ОбновитьЗаписиПланировщика();	
	НастроитьПланировщик(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаКалендаряПриВыводеПериода(Элемент, ОформлениеПериода)
	
	Период = Новый Структура("НачалоПериода, КонецПериода");
	ЗаполнитьЗначенияСвойств(Период, ОформлениеПериода);
		
	// уровни загрузки в часах
	НизкаяЗагрузка = 8;
	СредняяЗагрузка = 16;
	ВысокаяЗагрузка = 24;
	
	ИмяРегистраОснования = ИмяРегистраОснования();
	СписокЗагрузки = ПолучитьСписокЗагрузки(Период, ИмяРегистраОснования);
	
	Для каждого ДатаПериода Из ОформлениеПериода.Даты Цикл
		
		ЗагрузкаНаДату = СписокЗагрузки.Получить(День(ДатаПериода.Дата));
		ЗагрузкаНаДату = ЗагрузкаНаДату.Значение;
		
		Если Не ЗначениеЗаполнено(ЗагрузкаНаДату) Тогда
			ДатаПериода.ЦветФона = WebЦвета.Белый;
		ИначеЕсли ЗагрузкаНаДату < НизкаяЗагрузка Тогда
			ДатаПериода.ЦветФона = WebЦвета.ШелковыйОттенок;
		ИначеЕсли ЗагрузкаНаДату < СредняяЗагрузка Тогда
			ДатаПериода.ЦветФона = WebЦвета.Персиковый;
		ИначеЕсли ЗагрузкаНаДату <= ВысокаяЗагрузка Тогда
			ДатаПериода.ЦветФона = WebЦвета.ЛососьСветлый;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)
	
	НастроитьПланировщик();
	ОбновитьЗаписиПланировщика();
	УстановитьВидимость();  
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОчередиПриИзменении(Элемент)
	
	ВидОчередиПриИзмененииНаСервере();	
	ОбновитьЗаписиПланировщика();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПланировщик

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// сравним конец периода с отображением текущей даты планировщика
	Если Конец >= ОбщегоНазначенияКлиент.ДатаСеанса() + РазницаСоВременемСеансаВСек Тогда
		ОткрытьФормуРедактирования(Элемент, Начало, Конец, Значения["Номенклатура"]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактирования(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	Если Элемент.ВыделенныеЭлементы.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуРедактирования(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактирования(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	СписокЗаписейПланировщика = Элемент.ВыделенныеЭлементы;
	
	СписокЗаписей = Новый СписокЗначений;
	Для Каждого ТекЗапись Из СписокЗаписейПланировщика Цикл
		
		ПараметрыЗаписи = ПараметрыЗаписиВОчередь(ТекЗапись);		
		Если ЕстьСвязанныеДокументы(ПараметрыЗаписи, Отказ) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокЗаписей.Добавить(ТекЗапись.Значение);
	КонецЦикла;
	
	Если СписокЗаписей.Количество() > 0 Тогда
		
		УИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("КалендарьОчереди.ОтменаЗаписей");
		ОценкаПроизводительностиКлиент.УстановитьВесЗамера(УИДЗамера, СписокЗаписей.Количество());
		ОтменитьЗаписиНаСервере(СписокЗаписей);
		ОбновитьЗаписиПланировщика();      			
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастроек", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.гкс_КалендарьОчереди.Форма.ФормаНастроек", 
					, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиБрутто(Команда)
	
	ПараметрыОткрытия = Новый Структура("ТочкаМаршрута", ТочкаМаршрута);
	ОткрытьФорму("РегистрСведений.гкс_КонтрольПревышенияВесаБрутто.Форма.ФормаНастройкаКонтроляПревышенияБрутто", 
		ПараметрыОткрытия, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекНоменклатуры(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбработчикОжиданияОбновитьФорму", ЭтотОбъект);
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("ТочкаМаршрута", ТочкаМаршрута);
	ЗначенияЗаполнения.Вставить("ТипРегистрации", ТипРегистрации);
	ЗначенияЗаполнения.Вставить("ВидПеревозки", 
		ПредопределенноеЗначение("Перечисление.гкс_ТипыТранспортныхСредствДоставки.Автомобиль"));
		
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Обработка.гкс_КалендарьОчереди.Форма.ФормаНастройкиНоменклатуры", 
		ПараметрыФормы, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАнализПредварительнойЗаписи(Команда)

	ПараметрыФормы = ПараметрыОткрытияАнализПредварительнойЗаписи();
	ОткрытьФорму("Отчет.гкс_АнализПредварительнойЗаписи.ФормаОбъекта", 
				ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьРеквизитыФормы()
	
	ЧасовойПоясСеанса = ЧасовойПоясСеанса();
	Пользователь = Пользователи.ТекущийПользователь();
	
	ДоступныеТочкиМаршрута = РегистрыСведений.гкс_НастройкиПользователейПриемкаНаПЛК.
							 НастроенныеТочкиМаршрутаПользователя();
	                           
	Элементы.ТочкаМаршрута.СписокВыбора.ЗагрузитьЗначения(ДоступныеТочкиМаршрута);
	Если ДоступныеТочкиМаршрута.Количество() > 0 Тогда
		ТочкаМаршрута = ДоступныеТочкиМаршрута[0];
	КонецЕсли;
		
	Объект.РежимРаботы = Перечисления.гкс_РежимРаботыКалендаряОчереди.Менеджер;
	ВидОчереди = "ПриемкаFCA";
	УстановитьУсловияПоВидуОчереди();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзмеренияПланировщикаПоТочкеМаршрута()
	
	#Область ПроверкаЗаполненияТочкиМаршрута
	
	ТекстСообщенияНеЗаполненаТочкаМаршрута = НСтр(
	"ru='Не установлена точка маршрута. Дальнейшая работа невозможна. Проверьте настройки подсистемы для пользователя'");
	
	КонтекстСообщенияНеЗаполненаТочкаМаршрута = НСтр("ru='АРМ ""Календарь очереди""'");
	
	ОбщегоНазначенияКлиентСервер
	       .Проверить(ЗначениеЗаполнено(ТочкаМаршрута),
	       ТекстСообщенияНеЗаполненаТочкаМаршрута,
	       КонтекстСообщенияНеЗаполненаТочкаМаршрута);
	
	#КонецОбласти       
	       	
	ПериодОтбора = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);	
	НоменклатураПринимаемаяНаПЛК = гкс_ЭлектроннаяОчередь.РабочаяНоменклатураПериода(
		ТипРегистрации, Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль, ПериодОтбора);
	
	#Область ПроверкаЗаполненияНоменклатурыПЛК
	
	ТекстСообщенияНеЗаполненаНоменклатураПЛК = НСтр(
	"ru='Для ПЛК не установлена принимаемая номенклатура. Дальнейшая работа невозможна'");
	
	КонтекстСообщенияНеЗаполненаТочкаМаршрута = НСтр("ru='АРМ ""Календарь очереди""'");
	
	ОбщегоНазначенияКлиентСервер.Проверить(ЗначениеЗаполнено(НоменклатураПринимаемаяНаПЛК),
		ТекстСообщенияНеЗаполненаНоменклатураПЛК,
	    КонтекстСообщенияНеЗаполненаТочкаМаршрута);
	
	#КонецОбласти    
	       
	Планировщик.Измерения.Очистить();       
	ИзмерениеНоменклатура = Планировщик.Измерения.Добавить("Номенклатура");
	
	СписокНоменклатуры.Очистить();
		
	Для Каждого ПозицияНоменклатурыПЛК Из НоменклатураПринимаемаяНаПЛК Цикл
		
		ИзмерениеНоменклатура.Элементы.Добавить(ПозицияНоменклатурыПЛК);
		
		НоваяНоменклатура = СписокНоменклатуры.Добавить();
		НоваяНоменклатура.Номенклатура = ПозицияНоменклатурыПЛК;
	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.Настройки.Видимость = ЗначениеЗаполнено(ТочкаМаршрута) 
		И Объект.РежимРаботы = ПредопределенноеЗначение("Перечисление.гкс_РежимРаботыКалендаряОчереди.Диспетчер");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияОбновитьФорму(Результат, Параметры) Экспорт
	
	ВыполнитьНастройкуПланировщикаНаСервере();	
	ОбновитьЗаписиПланировщика();
	
КонецПроцедуры

&НаСервере
Процедура ВидОчередиПриИзмененииНаСервере()
	
	УстановитьУсловияПоВидуОчереди();
	ВыполнитьНастройкуПланировщикаНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловияПоВидуОчереди()
	
	Если ВидОчереди = "ПриемкаFCA" Тогда
		ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка;
		Объект.УсловиеПроезда = Справочники.гкс_УсловияПроезда.FCA;	
		
	ИначеЕсли ВидОчереди = "ПриемкаDAP" Тогда	
		ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка;
		Объект.УсловиеПроезда = Справочники.гкс_УсловияПроезда.DAP;
		
	ИначеЕсли ВидОчереди = "Отгрузка" Тогда	
		ТипРегистрации = Перечисления.гкс_ТипРегистрации.Отгрузка;
		Объект.УсловиеПроезда = Справочники.гкс_УсловияПроезда.ПустаяСсылка(); 
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный вид очереди в форме календаря'");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьНастройкуПланировщикаНаСервере()
	
	Если ЗначениеЗаполнено(ТочкаМаршрута) Тогда
		ЧасовойПоясПЛК = гкс_ПриемкаТранспорта.ЧасовойПоясПЛК(ТочкаМаршрута);
		ТекущаяДата = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПоясПЛК);
		РазницаСоВременемСеансаВСек = ОКР(ТекущаяДата - ТекущаяДатаСеанса(), -1);
	Иначе
		ТекущаяДата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДатаНачала = НачалоНедели(ТекущаяДата);
	ДатаОкончания = КонецНедели(ТекущаяДата);
	
	ЗаполнитьИзмеренияПланировщикаПоТочкеМаршрута();
	
	ДатаКалендаряНаФорме = ТекущаяДата;
	Периодичность = Перечисления.Периодичность.Неделя;
		
	// для полных прав не будем предзаполнять
	Если Не РольДоступна("ПолныеПрава") Тогда
		ЗаполнитьРежимРаботыОбработки(ТекущаяДата);
	КонецЕсли;
	
	ЗаполнитьПланировщикДанными();
	НастроитьПланировщик(Истина);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРежимРаботыОбработки(ТекущаяДата)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	гкс_НастройкиПользователейПриемкаНаПЛКСрезПоследних.РольПриПриемкеНаПЛК КАК РольПриПриемкеНаПЛК
	|ИЗ
	|	РегистрСведений.гкс_НастройкиПользователейПриемкаНаПЛК.СрезПоследних(, Пользователь = &Пользователь) КАК гкс_НастройкиПользователейПриемкаНаПЛКСрезПоследних
	|ГДЕ
	|	НЕ гкс_НастройкиПользователейПриемкаНаПЛКСрезПоследних.Отключен
	|
	|СГРУППИРОВАТЬ ПО
	|	гкс_НастройкиПользователейПриемкаНаПЛКСрезПоследних.РольПриПриемкеНаПЛК";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РолиПользователяПЛК = РезультатЗапроса.Выгрузить();
	
	РегистрацияЭлектроннойОчереди = Перечисления.гкс_РолиПриПриемкеНаПЛК.РегистрацияЭлектроннойОчереди;
	Регистрация = Перечисления.гкс_РолиПриПриемкеНаПЛК.Регистрация;
	ВсеРоли = Перечисления.гкс_РолиПриПриемкеНаПЛК.ВсеРоли;
	Диспетчер = Перечисления.гкс_РолиПриПриемкеНаПЛК.Диспетчер;
	
	Если Не РолиПользователяПЛК.Найти(ВсеРоли) = Неопределено Тогда
		
		Объект.РежимРаботы = Перечисления.гкс_РежимРаботыКалендаряОчереди.Менеджер;
		
	ИначеЕсли (Не РолиПользователяПЛК.Найти(РегистрацияЭлектроннойОчереди) = Неопределено
		Или Не РолиПользователяПЛК.Найти(Регистрация) = Неопределено)
		И Не РолиПользователяПЛК.Найти(Диспетчер) = Неопределено Тогда
		
		Объект.РежимРаботы = Перечисления.гкс_РежимРаботыКалендаряОчереди.Диспетчер;
        Периодичность = Перечисления.Периодичность.День;
		
		ДатаНачала = НачалоДня(ТекущаяДата);
		ДатаОкончания = КонецДня(ТекущаяДата);
		
	ИначеЕсли Не РолиПользователяПЛК.Найти(РегистрацияЭлектроннойОчереди) = Неопределено
		Или Не РолиПользователяПЛК.Найти(Регистрация) = Неопределено Тогда
		
		Объект.РежимРаботы = Перечисления.гкс_РежимРаботыКалендаряОчереди.Менеджер;
		Периодичность = Перечисления.Периодичность.День;

		Элементы.РежимРаботы.Видимость = Ложь;
		Элементы.Периодичность.Видимость = Ложь;
		
		ДатаНачала = НачалоДня(ТекущаяДата);
		ДатаОкончания = КонецДня(ТекущаяДата);
		
	ИначеЕсли Не РолиПользователяПЛК.Найти(Диспетчер) = Неопределено Тогда
		
		Объект.РежимРаботы = Перечисления.гкс_РежимРаботыКалендаряОчереди.Диспетчер;
		Элементы.РежимРаботы.Видимость = Ложь;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПланировщик(НачальноеЗаполнение = Ложь)
	
	Если НачальноеЗаполнение Тогда
		Планировщик.ТекущиеПериодыОтображения.Очистить();
		Планировщик.ТекущиеПериодыОтображения.Добавить(ДатаНачала, ДатаОкончания);
	КонецЕсли;
	
	Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
	Планировщик.КратностьПериодическогоВарианта = 24;
	Планировщик.ОтображатьТекущуюДату = Ложь;
	
	Если Объект.РежимРаботы = Перечисления.гкс_РежимРаботыКалендаряОчереди.Диспетчер Тогда
		
		// режим диспетчера
		ЭлементШкалыВремени = Планировщик.ШкалаВремени.Элементы[0];
		ЭлементШкалыВремени.Единица = ТипЕдиницыШкалыВремени.Минута;
		ЭлементШкалыВремени.Кратность = 30;
		ЭлементШкалыВремени.Формат = "ДФ='HH:mm'";
		
	ИначеЕсли Объект.РежимРаботы = Перечисления.гкс_РежимРаботыКалендаряОчереди.Менеджер Тогда
		// режим работы менеджера или кладовщика 
		ЭлементШкалыВремени = Планировщик.ШкалаВремени.Элементы[0];
		ЭлементШкалыВремени.Единица = ТипЕдиницыШкалыВремени.Час;
		ЭлементШкалыВремени.Кратность = 1;
		ЭлементШкалыВремени.Формат = "ДФ='HH:mm'"; 
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный режим работы в форме календаря'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПланировщикДанными()
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("НачалоПериода", ДатаНачала);
	ЗначенияЗаполнения.Вставить("ОкончаниеПериода", ДатаОкончания);
	ЗначенияЗаполнения.Вставить("ТипРегистрации", ТипРегистрации);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьПланировщикДанными(Планировщик, ЗначенияЗаполнения);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактирования(Элемент, Начало = Неопределено, Конец = Неопределено, 
									 Номенклатура = Неопределено)
	
	Если Элемент.ВыделенныеЭлементы.Количество() Тогда
		
		Если Объект.РежимРаботы = ПредопределенноеЗначение(
			"Перечисление.гкс_РежимРаботыКалендаряОчереди.Диспетчер") Тогда
			
			РедактируемыйЭлемент = Элемент.ВыделенныеЭлементы[0].Значение;
			Начало = Элемент.ВыделенныеЭлементы[0].Начало;
			Конец = Элемент.ВыделенныеЭлементы[0].Конец;
					
		ИначеЕсли Объект.РежимРаботы = ПредопределенноеЗначение(
			"Перечисление.гкс_РежимРаботыКалендаряОчереди.Менеджер") Тогда
			
			РедактируемыйЭлемент = Элемент.ВыделенныеЭлементы[0].Значение;
			Начало = НачалоЧаса(Элемент.ВыделенныеЭлементы[0].Начало);
			Конец = КонецЧаса(Элемент.ВыделенныеЭлементы[0].Начало);
			
		Иначе
			ВызватьИсключение НСтр("ru = 'Некорректный режим работы в форме календаря'");					
		КонецЕсли;
		
		Номенклатура = Элемент.ВыделенныеЭлементы[0].ЗначенияИзмерений["Номенклатура"];
	Иначе
		РедактируемыйЭлемент = Неопределено;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура("НачалоПериода, ОкончаниеПериода", Начало, Конец);	
	ЗначенияЗаполнения.Вставить("ТипРегистрации", ТипРегистрации);
	ЗначенияЗаполнения.Вставить("ТочкаМаршрута", ТочкаМаршрута);
	ЗначенияЗаполнения.Вставить("Номенклатура", Номенклатура);
	ЗначенияЗаполнения.Вставить("УсловиеПроезда", Объект.УсловиеПроезда);
	ЗначенияЗаполнения.Вставить("РазницаСоВременемСеансаВСек", РазницаСоВременемСеансаВСек);
	
	ПараметрыФормы = Новый Структура("Ключ, ЗначенияЗаполнения", РедактируемыйЭлемент, ЗначенияЗаполнения);
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыДокумента", ЭтотОбъект);
	ОткрытьФорму(ИмяФормыРедактированияЭлементаПланировщика(), ПараметрыФормы, ЭтотОбъект, , , ,
				 Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Функция ИмяФормыРедактированияЭлементаПланировщика()

	Если Объект.РежимРаботы = ПредопределенноеЗначение(
			"Перечисление.гкс_РежимРаботыКалендаряОчереди.Диспетчер") Тогда
		
		Если ТипРегистрации = ПредопределенноеЗначение("Перечисление.гкс_ТипРегистрации.Отгрузка") Тогда 
				ИмяОткрываемойФормы = "Документ.гкс_ЗаписьВГрафикОтгрузкиПЛК.ФормаОбъекта";
			Иначе
				ИмяОткрываемойФормы = "Документ.гкс_ЗаписьВГрафикПриемкиПЛК.ФормаОбъекта";
			КонецЕсли;
		
	ИначеЕсли Объект.РежимРаботы = ПредопределенноеЗначение(
			"Перечисление.гкс_РежимРаботыКалендаряОчереди.Менеджер") Тогда
		
		ИмяОткрываемойФормы = "Обработка.гкс_КалендарьОчереди.Форма.ФормаВспомогательногоПланировщика";
		
	Иначе
		ИмяОткрываемойФормы = "";		
	КонецЕсли;
	
	Возврат ИмяОткрываемойФормы;
	
КонецФункции	
								
&НаКлиенте
Процедура ПослеЗакрытияФормыДокумента(Результат, Параметры) Экспорт
	
	ОбновитьЗаписиПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаписиПланировщика()
	
	Если НЕ (ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания)) Тогда
		ДатаНачала = Планировщик.ТекущиеПериодыОтображения[0].Начало;
		ДатаОкончания = Планировщик.ТекущиеПериодыОтображения[0].Конец;
	КонецЕсли;
	
	Планировщик.Элементы.Очистить();
	Планировщик.ИнтервалыФона.Очистить();
	ЗаполнитьПланировщикДанными();
	Элементы.ДатаКалендаря.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ИнтервалДатаПриИзменении()
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		
		ДатаНачала = НачалоДня(ДатаКалендаряНаФорме);
		ДатаОкончания = КонецДня(ДатаКалендаряНаФорме);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		
		ДатаНачала = НачалоНедели(ДатаКалендаряНаФорме);
		ДатаОкончания = КонецНедели(ДатаКалендаряНаФорме);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ИмяРегистраОснования()

	ТаблицаРежимов = ИнициализироватьТаблицуРежимов();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("РежимРаботы", Объект.РежимРаботы);
	ПараметрыОтбора.Вставить("ТипРегистрации", ТипРегистрации);
	
	НайденныеСтроки = ТаблицаРежимов.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ИмяРегистра = НайденныеСтроки[0].ИмяРегистра;
	Иначе
		ИмяРегистра = "";
	КонецЕсли;	
	
	Возврат ИмяРегистра;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнициализироватьТаблицуРежимов()
	
	ТаблицаРежимов = Новый ТаблицаЗначений;
	ТаблицаРежимов.Колонки.Добавить("РежимРаботы");
	ТаблицаРежимов.Колонки.Добавить("ТипРегистрации");
	ТаблицаРежимов.Колонки.Добавить("ИмяРегистра");
	
	ИнициализироватьСтрокуТаблицыРежимов(ТаблицаРежимов.Добавить(), 
		Перечисления.гкс_ТипРегистрации.Приемка, 
		Перечисления.гкс_РежимРаботыКалендаряОчереди.Диспетчер, "гкс_ГрафикПриемкиПЛК");
										
	ИнициализироватьСтрокуТаблицыРежимов(ТаблицаРежимов.Добавить(), 
		Перечисления.гкс_ТипРегистрации.Приемка,
		Перечисления.гкс_РежимРаботыКалендаряОчереди.Менеджер, "гкс_ОчередьПриемкиПЛК");
										
	ИнициализироватьСтрокуТаблицыРежимов(ТаблицаРежимов.Добавить(), 
		Перечисления.гкс_ТипРегистрации.Отгрузка, 
		Перечисления.гкс_РежимРаботыКалендаряОчереди.Диспетчер, "гкс_ГрафикОтгрузкиПЛК");
										
	ИнициализироватьСтрокуТаблицыРежимов(ТаблицаРежимов.Добавить(), 
		Перечисления.гкс_ТипРегистрации.Отгрузка, 
		Перечисления.гкс_РежимРаботыКалендаряОчереди.Менеджер, "гкс_ОчередьОтгрузкиПЛК");
	
	Возврат ТаблицаРежимов;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ИнициализироватьСтрокуТаблицыРежимов(СтрокаТаблицы, ТипРегистрации, РежимРаботы, ИмяРегистра)
	
	СтрокаТаблицы.ТипРегистрации = ТипРегистрации;
	СтрокаТаблицы.РежимРаботы = РежимРаботы;	
	СтрокаТаблицы.ИмяРегистра = ИмяРегистра;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокЗагрузки(Период, ИмяРегистра)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаРегистра.НачалоПериода, ДЕНЬ) КАК РабочийДень,
	|	СУММА(РАЗНОСТЬДАТ(ТаблицаРегистра.НачалоПериода, ТаблицаРегистра.ОкончаниеПериода, ЧАС)) КАК КоличествоЗанятыхЧасов
	|ПОМЕСТИТЬ ВТ_Количество
	|ИЗ
	|	&ТаблицаРегистра КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Активность
	|	И ТаблицаРегистра.НачалоПериода <= &ОкончаниеПериода
	|	И ТаблицаРегистра.ОкончаниеПериода >= &НачалоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ТаблицаРегистра.НачалоПериода, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДЕНЬ(ВТ_Количество.РабочийДень) КАК РабочийДень,
	|	ВТ_Количество.КоличествоЗанятыхЧасов КАК КоличествоЗанятыхЧасов
	|ИЗ
	|	ВТ_Количество КАК ВТ_Количество";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст , "&ТаблицаРегистра", "РегистрСведений." + ИмяРегистра);
	
	Запрос.УстановитьПараметр("НачалоПериода", Период.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Период.КонецПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СписокЗагрузки = Новый СписокЗначений;
	ДнейВМесяце = 31;
	Для Н = 0 По ДнейВМесяце Цикл
		СписокЗагрузки.Добавить();
	КонецЦикла;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокЗагрузки.Вставить(ВыборкаДетальныеЗаписи.РабочийДень, ВыборкаДетальныеЗаписи.КоличествоЗанятыхЧасов);
	КонецЦикла;
	
	Возврат СписокЗагрузки;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыНастроек(Результат, Параметры) Экспорт
	
	ОбновитьЗаписиПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкаМаршрутаПриИзменении(Элемент)
	
	ВыполнитьНастройкуПланировщикаНаСервере();	
	ОбновитьЗаписиПланировщика();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОбновлениеЭлементовПланировщика()
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("КалендарьОчереди.ОбновлениеПланировщика");	
	ОбновитьЗаписиПланировщика();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьЗаписиНаСервере(СписокЗаписей)
	
	Обработки.гкс_КалендарьОчереди.ОтменитьЗаписиВКалендаре(СписокЗаписей);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЗаписиВОчередь(ТекЗапись)
		
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Номенклатура");
	ПараметрыЗаписи.Вставить("ТочкаМаршрута", ТочкаМаршрута);
	ПараметрыЗаписи.Вставить("НачалоПериода", ТекЗапись.Начало);
	ПараметрыЗаписи.Вставить("ОкончаниеПериода", ТекЗапись.Конец);
	ПараметрыЗаписи.Вставить("ДокументЗаписьВГрафик", ТекЗапись.Значение);
	
	Возврат ПараметрыЗаписи;	
	
КонецФункции 

&НаСервере
Функция ЕстьСвязанныеДокументы(ПараметрыЗаписи, Отказ)
	
	Документ = ПараметрыЗаписи.ДокументЗаписьВГрафик;
	ЕстьСвязанныеДокументы = Ложь;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.гкс_ЗаписьВГрафикПриемкиПЛК")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.гкс_ЗаписьВГрафикОтгрузкиПЛК") Тогда
		
		ПараметрыЗаписи.Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Номенклатура");
		ЕстьСвязанныеДокументы =  ЕстьЗаписиВОчереди(ТипРегистрации, ПараметрыЗаписи);
		
		Если ЕстьСвязанныеДокументы Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'На основании графика %1 уже оформлены записи в очередь приемки'"), Документ), , , ,Отказ);
		КонецЕсли;
			
	КонецЕсли; 
	
	Возврат ЕстьСвязанныеДокументы;
	
КонецФункции

&НаСервере
Функция ЕстьЗаписиВОчереди(ТипРегистрации, ДанныеОчереди)
	
	Если ТипРегистрации = Перечисления.гкс_ТипРегистрации.Отгрузка Тогда
		Результат = РегистрыСведений.гкс_ОчередьОтгрузкиПЛК.ЕстьЗаписьВОчередь(ДанныеОчереди);
		
	ИначеЕсли ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда
		Результат = РегистрыСведений.гкс_ОчередьПриемкиПЛК.ЕстьЗаписьВОчередь(ДанныеОчереди);
		
	Иначе	
		ВызватьИсключение НСтр("ru = 'Некорректный тип регистрации в форме календаря'");
	КонецЕсли;	
	
	Возврат Результат; 
	
КонецФункции

&НаСервере
Функция ПараметрыОткрытияАнализПредварительнойЗаписи()
	
	ПараметрыОтчета = Новый Структура("Период", Новый СтандартныйПериод(ДатаКалендаряНаФорме, ДатаКалендаряНаФорме));	
	ПараметрыФормы = Отчеты.гкс_АнализПредварительнойЗаписи.ПараметрыОткрытияОтчета(ПараметрыОтчета);
	
	Возврат ПараметрыФормы;
		
КонецФункции	

#КонецОбласти