#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ДанныеФормата(Формат) Экспорт
	
	ДанныеФормата = Новый Структура("Версия, Тип, Ссылка, ПространствоИмен");
	
	Если НЕ ЗначениеЗаполнено(Формат) Тогда		
		Возврат ДанныеФормата;		
	КонецЕсли;
	
	ДанныеФормата = гкс_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Формат, "Версия, Тип, Ссылка, ПространствоИмен");
	
	Возврат ДанныеФормата;
	
КонецФункции

Функция ДанныеФорматаПоИмени(ИмяФормата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеФорматаПоИмени();	
	Запрос.УстановитьПараметр("ИмяФормата", ИмяФормата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ДанныеФормата = Новый Структура("Формат, ТипФормата, ВерсияФормата");
	
	ЗаполнитьЗначенияСвойств(ДанныеФормата, Выборка);
	
	Возврат ДанныеФормата;
	
КонецФункции

#Область ПредопределенныеФорматы

// Проверяет, является ли переданный формат обмена - специальным, внутренним форматом типа ED. 
// Этот формат используется для формирования служебных сообщений об успешной обработке или об ошибках,
// возникающих в процессе формирования/обработки сообщений.
//
// Возвращаемое значение:
// 	Булево - 
//
Функция ЭтоСлужебныйФорматОбменаEnterpriseData(Формат) Экспорт
	
	Возврат Формат = EnterpriseDataService;
	
КонецФункции

Функция ЭтоСтандартнаяСериализацияXML(Формат) Экспорт
	
	Возврат Формат = СтандартнаяСериализацияXML;
	
КонецФункции

Функция ЭтоСтандартнаяСериализацияXDTOJSON(Формат) Экспорт
	
	Возврат Формат = СтандартнаяСериализацияXDTOJSON;
	
КонецФункции

Функция ЭтоСтандартнаяСериализацияXDTOXML(Формат) Экспорт
	
	Возврат Формат = СтандартнаяСериализацияXDTOXML;
	
КонецФункции

#КонецОбласти

Функция ПоследнийФормат(ОписаниеФормата) Экспорт

	Если ОписаниеФормата.ТипФормата = Перечисления.гкс_ТипыФорматовОбменаRMQ.ED Тогда
		Возврат ПолучитьПоследнийФорматДляТипаED(ОписаниеФормата); 	
	КонецЕсли;
	
	Возврат ОписаниеФормата.Формат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСФорматаED

Функция МладшаяЧастьВерсииФорматаED(ВерсияФормата) Экспорт
	
	ВерсияФорматаМассив = СтрРазделить(ВерсияФормата, ".");
	
	Возврат ВерсияФорматаМассив[1];
	
КонецФункции

Функция ПорядокСортировкиМладшейЧастиВерсииФорматаED(ВерсияФормата) Экспорт
	
	ВерсияВМассиве = СтрРазделить(ВерсияФормата, ".");	
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	Возврат ТипЧисло.ПривестиЗначение(СокрЛП(ВерсияВМассиве[1]));
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПоследнийФорматДляТипаED(ОписаниеФормата)
		
	СтаршаяЧасть = СтаршаяЧастьВерсииФорматаED(ОписаниеФормата.ВерсияФормата);
			
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтаршаяЧастьВерсии", СтаршаяЧасть + ".%");
	Запрос.Текст = ТекстЗапросаПоискПоследнегоФорматаED();
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Новый Структура("Формат, ВерсияФормата", 
	                        Выборка.Формат, 
	                        Выборка.ВерсияФормата);
	
КонецФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаТысячаФорматовОбмена() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ВсеФорматы.Ссылка КАК Объект
	|ИЗ
	|	Справочник.гкс_ФорматыОбменаИАС КАК ВсеФорматы
	|ГДЕ
	|	НЕ ВсеФорматы.Предопределенный";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныеФорматаПоИмени()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Форматы.Ссылка КАК Формат,
	|	Форматы.Тип КАК ТипФормата,
	|	Форматы.Версия КАК ВерсияФормата
	|ИЗ
	|	Справочник.гкс_ФорматыОбменаИАС КАК Форматы
	|ГДЕ
	|	Форматы.Наименование = &ИмяФормата
	|	И Форматы.Активен";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоискПоследнегоФорматаED()
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВсеФорматы.Ссылка КАК Формат,
	|	ВсеФорматы.Версия КАК ВерсияФормата
	|ИЗ
	|	Справочник.гкс_ФорматыОбменаИАС КАК ВсеФорматы
	|ГДЕ
	|	ВсеФорматы.Тип = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыФорматовОбменаRMQ.ED)
	|	И НЕ ВсеФорматы.ВыбиратьПоследний
	|	И НЕ ВсеФорматы.ПометкаУдаления
	|	И ВсеФорматы.Версия ПОДОБНО &СтаршаяЧастьВерсии
	|	И ВсеФорматы.Активен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВсеФорматы.Порядок УБЫВ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти
	
#КонецЕсли

Функция СтаршаяЧастьВерсииФорматаED(ВерсияФормата) Экспорт
	
	ВерсияФорматаМассив = СтрРазделить(ВерсияФормата, ".");
	
	Возврат ВерсияФорматаМассив[0];
	
КонецФункции

// Возвращает базовое имя пространства по пего полному имени
// предполагается что пространства имен заданы в той же логике, 
// что и "типовые" пространства, используемые фирмой 1С
// Например: Пространство имен -  http:/edi/edi_stnd/EnterpriseData/1.1
// тогда базовое пространство будет - http:/edi/edi_stnd/EnterpriseData
// то есть для получения базового имени отбрасывается часть после "крайнего" символа ""/"" 
// Функция не проверяет корректность переданного пространства имен
//
// Параметры:
// 	ПространствоИмен - Строка - полное имя пространства
//
// Возвращаемое значение:
// 	Строка - базовая часть имени 
//
Функция БазовоеИмяПространства(ПространствоИмен) Экспорт
	
	ПространствоИменВМассиве = СтрРазделить(ПространствоИмен, "/");
	
	Возврат Сред(ПространствоИмен, 
	            1, 
			    СтрДлина(ПространствоИмен) 
				- СтрДлина(ПространствоИменВМассиве[ПространствоИменВМассиве.ВГраница()])
				- 1);
	
КонецФункции

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если Данные.ВыбиратьПоследний Тогда
		
		СтандартнаяОбработка = Ложь;	
		
		
		Представление = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2, Latest)", 
                                                БазовоеИмяПространства(Данные.ПространствоИмен),
												СтаршаяЧастьВерсииФорматаED(Данные.Версия)); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	 СтандартнаяОбработка = Ложь;
	 
	 Поля.Добавить("Тип");
	 Поля.Добавить("Версия");
	 Поля.Добавить("Наименование");	
	 Поля.Добавить("ПространствоИмен"); 
	 Поля.Добавить("ВыбиратьПоследний");
	 
КонецПроцедуры
