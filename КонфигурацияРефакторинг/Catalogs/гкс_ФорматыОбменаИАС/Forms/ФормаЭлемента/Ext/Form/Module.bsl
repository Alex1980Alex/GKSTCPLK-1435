
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьСвойстваЭлементаФормыНаименование();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнициализироватьФормуНаКлиенте();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипПриИзменении(Элемент)
	              
	ОчиститьЗначенияПараметров();
	УстановитьВидимостьДоступностьПолейФормы();
	
	ТипПриИзмененииНаСервере();
			
КонецПроцедуры

&НаКлиенте
Процедура ПространствоИменПриИзменении(Элемент)
	
	ОбработатьПараметрыПриИзмененииПространстваИмен();	
	УстановитьВидимостьДоступностьПолейФормы();	
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура ОбщиеНастройкиФормата(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		гкс_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ru='Необходимо записать элемент'");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыЗаписи = Новый Структура;
	
	ОбщиеНастройки = ОбщиеНастройкиДляФормированияКлюча();
	
	Если ЗначениеЗаполнено(ОбщиеНастройки) Тогда
		
		ИзмеренияКлюча = Новый Структура("Тип, Формат");
		ЗаполнитьЗначенияСвойств(ИзмеренияКлюча, ОбщиеНастройки, "Тип, Формат");
		
		МассивКонструктораКлюча = Новый Массив;
		МассивКонструктораКлюча.Добавить(ИзмеренияКлюча);
	
		КлючЗаписи = Новый ("РегистрСведенийКлючЗаписи.гкс_НастройкиФорматовОбменаОбщие", МассивКонструктораКлюча);
		
		ПараметрыФормыЗаписи.Вставить("Ключ", КлючЗаписи);
		
	Иначе
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Тип", Объект.Тип);
		ЗначенияЗаполнения.Вставить("Формат", Объект.Ссылка);
		
		ПараметрыФормыЗаписи.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.гкс_НастройкиФорматовОбменаОбщие.Форма.ФормаЗаписи", ПараметрыФормыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиФорматаОбменаED(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		гкс_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ru='Необходимо записать элемент'");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыЗаписи = Новый Структура;
	
	НастройкиED = НастройкиEDДляФормированияКлюча();
	
	Если ЗначениеЗаполнено(НастройкиED) Тогда
		
		ИзмеренияКлюча = Новый Структура("Период, Формат");
		ЗаполнитьЗначенияСвойств(ИзмеренияКлюча, НастройкиED, "Период, Формат");
		
		МассивКонструктораКлюча = Новый Массив;
		МассивКонструктораКлюча.Добавить(ИзмеренияКлюча);
	
		КлючЗаписи = Новый ("РегистрСведенийКлючЗаписи.гкс_НастройкиФорматовОбменаED", МассивКонструктораКлюча);
		
		ПараметрыФормыЗаписи.Вставить("Ключ", КлючЗаписи);
		
	Иначе
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Формат", Объект.Ссылка);
		
		ПараметрыФормыЗаписи.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.гкс_НастройкиФорматовОбменаED.Форма.ФормаЗаписи", ПараметрыФормыЗаписи);

КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция НастройкиEDДляФормированияКлюча()
	
	Возврат РегистрыСведений.гкс_НастройкиФорматовОбменаED.ПолучитьНастройкиФорматаДляФормированияКлюча(Объект.Ссылка);
	
КонецФункции

&НаСервере
Функция ОбщиеНастройкиДляФормированияКлюча()
	
	Возврат РегистрыСведений.гкс_НастройкиФорматовОбменаОбщие.ПолучитьНастройкиФорматаДляФормированияКлюча(Объект.Ссылка);
	
КонецФункции

&НаСервере
Процедура ТипПриИзмененииНаСервере()
	
	УстановитьСвойстваЭлементаФормыНаименование();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементаФормыНаименование()
	
	Если РазрешеноРедактироватьНаименование() Тогда
		Элементы.Наименование.Доступность = Истина;
		Элементы.Наименование.ПодсказкаВвода = "";
	Иначе
		Элементы.Наименование.Доступность = Ложь; 
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru='Устанавливается автоматически при записи'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазрешеноРедактироватьНаименование()
	
	Возврат НЕ Перечисления.гкс_ТипыФорматовОбменаRMQ.ЭтоТипФорматаED(Объект.Тип) 
	ИЛИ Справочники.гкс_ФорматыОбменаИАС.ЭтоСлужебныйФорматОбменаEnterpriseData(Объект.Ссылка);
	
конецФункции

&НаКлиенте
Процедура ОчиститьЗначенияПараметров()
	
	Объект.ВыбиратьПоследний = Ложь;		
	Объект.Порядок = 0;
	Объект.Версия = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПараметрыПриИзмененииПространстваИмен()
	
	Объект.ПространствоИмен = СокрЛП(Объект.ПространствоИмен);
	Объект.Порядок = 0;	
	
	ПространствоИменМассив = СтрРазделить(Объект.ПространствоИмен, "/");
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	ВерсияЧисло = ТипЧисло.ПривестиЗначение(ПространствоИменМассив[ПространствоИменМассив.ВГраница()]);
	ВерсияСтрока = Формат(ВерсияЧисло, "ЧРД=.; ЧГ=0;");
	Если ВерсияЧисло - Цел(ВерсияЧисло) = 0 Тогда
		ВерсияСтрока = ВерсияСтрока+".0";
	КонецЕсли;

	Объект.Версия = ВерсияСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьФормуНаКлиенте()
	
	УстановитьВидимостьДоступностьПолейФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьПолейФормы()
	
	УстановитьВидимостьПолейУниверсальногоФормата(ЭтоТипУниверсальныйФормат());
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПолейУниверсальногоФормата(Видимость)
	
	Элементы.ГруппаНастройкиДляТипаФорматаED.Видимость = Видимость;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоТипУниверсальныйФормат()
	
	Возврат Объект.Тип = ПредопределенноеЗначение("Перечисление.гкс_ТипыФорматовОбменаRMQ.ED");
	
КонецФункции

#КонецОбласти

