
#Область ОписаниеПеременных

&НаКлиенте
Перем УдаляемыйИдентификатор;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ДекорацияТекущаяБаза.Заголовок = ИмяТекущегоПриложения();
			
	УстановитьПараметрыТочкиОбмена();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьПредставленияУсловийВыгрузки(ТекущийОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	//@skip-warning
	ЭтоУправляемаяФорма = (ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма"));
	Если ЭтоУправляемаяФорма Тогда
		
		ТекущиеДанные = Элементы.ВыгружаемыеДанные.ТекущиеДанные;
		Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.гкс_ВыборМетаданных" И 			
			ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			ВыбранноеЗначение.Свойство("АдресДереваМетаданных", АдресДереваМетаданных);				
			ТекущиеДанные.ТипМетаданных = ВыбранноеЗначение.ПолноеИмя;
			
		ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.гкс_ПолучателиДанныхRMQ.Форма.КонструкторКлючаМаршрутизации" Тогда			
			ТекущиеДанные.КлючМаршрутизации = ВыбранноеЗначение;			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого СтрокаВыгрДанные Из ТекущийОбъект.ВыгружаемыеДанные Цикл
		
		ИндексСтроки = ТекущийОбъект.ВыгружаемыеДанные.Индекс(СтрокаВыгрДанные);
		АдресНастроек = Объект.ВыгружаемыеДанные[ИндексСтроки]["УсловиеВыгрузкиЗначение"];
		
		Если ЗначениеЗаполнено(АдресНастроек) И ЭтоАдресВременногоХранилища(АдресНастроек) Тогда 		
			УсловиеВыгрузки = ПолучитьИзВременногоХранилища(АдресНастроек);			
		Иначе			
			УсловиеВыгрузки = Неопределено;			
		КонецЕсли;	
		
		СтрокаВыгрДанные.Условие = УсловиеВыгрузки;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьПредставленияУсловийВыгрузки(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
	ТекстСообщения = НСтр("ru='Полноценная настройка возможно только в тонком или толстом клиенте'");
	гкс_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Отказ = Истина;
	#КонецЕсли
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	
	УстановитьДоступностьКлючаМаршрутизации();
	УстановитьВидимостьОчередиСервисныхСообщений();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтотОбъект.ПубликоватьРезультатОбработки Тогда
		
		ПроверяемыеРеквизиты.Добавить("ИмяОчередиОтвета");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ОбновитьДекорациюТекущаяБаза()
	
	Элементы.ДекорацияТекущаяБаза.Заголовок = ИмяТекущегоПриложения();
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекущаяБазаНажатие(Элемент)
		
	ПараметрыФормы = Новый Структура;
	
	ОбратныйВызов = Новый ОписаниеОповещения("ДекорацияТекущаяБазаНажатиеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.гкс_УчастникиОбменаRMQ.ФормаСписка", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор,
	, , ОбратныйВызов, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкаОбменаПриИзменении(Элемент)
	
	ТочкаОбменаПриИзмененииСервер();
	ОбработатьИзменениеТочкиОбмена();
	УстановитьВидимостьЭлементов();
		
КонецПроцедуры

&НаКлиенте
Процедура ПубликоватьРезультатОбработкиПриИзменении(Элемент)
	
	УстановитьВидимостьОчередиСервисныхСообщений();
	
	Если НЕ ЭтотОбъект.ПубликоватьРезультатОбработки Тогда
		
		Объект.ИмяОчередиОтвета = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыгружаемыеДанные

&НаКлиенте
Процедура ВыгружаемыеДанныеФорматПриИзменении(Элемент)
	УстановитьВидимостьРеквизитовСтрокиВыгружаемыхДанных();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеДанныеПриАктивизацииСтроки(Элемент)
	//@skip-warning
	ПодключитьОбработчикОжидания("Подключаемый_ВыгружаемыеДанныеПриАктивизацииСтроки", 0.3 ,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеДанныеВыгружатьСсылкиИзОбъектаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыгружаемыеДанные.ТекущиеДанные;
	Если НЕ ТекущиеДанные.ВыгружатьСсылкиИзОбъекта Тогда 
		ТекущиеДанные.ГлубинаВыгрузкиСсылок = 0;
	Иначе
		ТекущиеДанные.ГлубинаВыгрузкиСсылок = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеДанныеТипМетаданныхПриИзменении(Элемент)
	
	ТекДанные = Элементы.ВыгружаемыеДанные.ТекущиеДанные;
	ТекДанные.УсловиеВыгрузкиПредставление = НСтр("ru='Не задано'");
	ТекДанные.УсловиеВыгрузкиЗначение = Неопределено;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеДанныеТипМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыгружаемыеДанные.ТекущиеДанные;
	ТолькоСсылочныеТипы = Ложь;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Формат) Тогда
		
		ДанныеФормата = ДанныеФормата(ТекущиеДанные.Формат);
		
		ТолькоСсылочныеТипы =
		ДанныеФормата["Тип"] = ПредопределенноеЗначение("Перечисление.гкс_ТипыФорматовОбменаRMQ.ED");
	
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресДереваМетаданных", АдресДереваМетаданных);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ИдентификаторВладельца", УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ТолькоСсылочныеТипы", ТолькоСсылочныеТипы);
		
	ОткрытьФорму("ОбщаяФорма.гкс_ВыборМетаданных",
		ПараметрыФормы,
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеДанныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Элемент.ТекущиеДанные.УсловиеВыгрузкиПредставление = "Не задано";
		Элемент.ТекущиеДанные.УсловиеВыгрузкиЗначение = "";
		
		ИД = Элемент.ТекущиеДанные.ПолучитьИдентификатор();
		#Если НЕ ВебКлиент Тогда
		Объект.ВыгружаемыеДанные.НайтиПоИдентификатору(ИД).ИдентифкаторСтроки =
		                                      СериализаторXDTO.XMLСтрока(Новый УникальныйИдентификатор);	                                      	
		#КонецЕсли

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеДанныеУсловиеВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ВыгружаемыеДанные.ТекущиеДанные; 
	ТипМетаданных  = ТекДанные.ТипМетаданных;
	
	Если НЕ ЗначениеЗаполнено(ТипМетаданных) Тогда
		
		ТекстСообщения = НСтр("ru='Не выбран тип объекта метаданных!'");
		ШаблонСтроки = СтрЗаменить("Объект.ВыгружаемыеДанные[%1].ТипМетаданных", "%1", ТекДанные.НомерСтроки - 1);
		гкс_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ШаблонСтроки);
		Возврат;
		
	КонецЕсли;
	
	УсловиеВыгрузкиЗначение = ТекДанные.УсловиеВыгрузкиЗначение;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяОбъектаМетаданных", ТипМетаданных);
	
	ИмяФормыВыбора = "Справочник.гкс_ПолучателиДанныхRMQ.Форма.УсловиеВыгрузкиСКД";
			
	Если ЗначениеЗаполнено(УсловиеВыгрузкиЗначение) Тогда
		
		ПараметрыФормы.Вставить("НастройкиСКД", УсловиеВыгрузкиЗначение); 
		
	КонецЕсли;
	
	ОбратныйВызов = Новый ОписаниеОповещения("ВыборУсловиеВыгрузкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор, , , 
	ОбратныйВызов, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеДанныеКлючМаршрутизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЭтоТочкаОбменаDirect(ТипТочкиОбмена) Тогда		
		Возврат;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипТочкиОбмена) Тогда
		
		ТекстСообщения = НСтр("ru='Не указана точка обмена'");
		гкс_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВыгружаемыеДанные.ТекущиеДанные;
	ТекущийКлюч = ТекущиеДанные.КлючМаршрутизации;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючМаршрутизации", ТекущийКлюч);
	
	ОткрытьФорму("Справочник.гкс_ПолучателиДанныхRMQ.Форма.КонструкторКлючаМаршрутизации", ПараметрыФормы, ЭтотОбъект, 
	ЭтотОбъект.УникальныйИдентификатор, , , Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеДанныеПередУдалением(Элемент, Отказ)
	
	УдаляемыйИдентификатор = Элемент.ТекущиеДанные.ИдентифкаторСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеДанныеПослеУдаления(Элемент)
	
	СтрокиКУдалению = Объект.НастройкиВыгрузкиВФорматеED.НайтиСтроки(Новый Структура("ИдентифкаторСтроки", 
	УдаляемыйИдентификатор));
	
	Если СтрокиКУдалению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		Объект.НастройкиВыгрузкиВФорматеED.Удалить(УдаляемаяСтрока);	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьВыгрузкуОбъектов(Команда)
	
	ТекущиеДанные = Элементы.ВыгружаемыеДанные.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыгрузкиОбъектов = ПодготовитьПараметрыВыгрузки(ТекущиеДанные);

	Если НЕ ВозможнаНастройкаВыгружаемыхДанных(ПараметрыВыгрузкиОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТипФормата", ПараметрыВыгрузкиОбъектов.ТипФормата);
	
	ОбратныйВызов = Новый ОписаниеОповещения("НастроитьВыгрузкуОбъектовЗавершение", 
	                                         ЭтотОбъект,
											 ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыВыгрузкиОбъектов", ПараметрыВыгрузкиОбъектов);
	
	ОткрытьФорму(ПараметрыВыгрузкиОбъектов.ИмяОткрываемойФормы, 
	             ПараметрыФормы, 
				 ЭтотОбъект, 
				 ЭтотОбъект.УникальныйИдентификатор,
				 ,
				 Неопределено,
				 ОбратныйВызов,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыиФункции

#Область ПодключаемыеОбработчики

&НаКлиенте
Процедура Подключаемый_ВыгружаемыеДанныеПриАктивизацииСтроки()
	
	УстановитьВидимостьРеквизитовСтрокиВыгружаемыхДанных();
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВидимостиРеквизитовТаблицыВыгружаемыеДанные

&НаКлиенте
Процедура УстановитьВидимостьРеквизитовСтрокиВыгружаемыхДанных()

	ТекущиеДанные = Элементы.ВыгружаемыеДанные.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДанныеВыгружаютсяВФорматеED = ДанныеВыгружаютсяВФорматеED(ТекущиеДанные);

	ВидимостьДоступнаВыгрузкаСсылок = ДанныеВыгружаютсяВФорматеED;
	ВидимостьДоступнаНастройкаУсловия = ДанныеВыгружаютсяВФорматеED;
		
	Элементы.ГруппаВыгрузкаСсылокИзОбъекта.Видимость = ВидимостьДоступнаВыгрузкаСсылок;
	Элементы.ВыгружаемыеДанныеУсловиеВыгрузки.Видимость = ВидимостьДоступнаНастройкаУсловия;

КонецПроцедуры

&НаКлиенте
Функция ДанныеВыгружаютсяВФорматеED(ВыгружаемыеДанные)
	
	Если ЗначениеЗаполнено(ВыгружаемыеДанные.Формат) Тогда
		ДанныеФормата = ДанныеФормата(ВыгружаемыеДанные.Формат);
		Возврат ДанныеФормата["Тип"] = ПредопределенноеЗначение("Перечисление.гкс_ТипыФорматовОбменаRMQ.ED");
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ДанныеФормата(Формат)
	Возврат Справочники.гкс_ФорматыОбменаИАС.ДанныеФормата(Формат);
КонецФункции

&НаСервере
Процедура ТочкаОбменаПриИзмененииСервер()
	УстановитьПараметрыТочкиОбмена();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКлючаМаршрутизации()
	
	Элементы.ВыгружаемыеДанныеКлючМаршрутизации.ТолькоПросмотр = ЭтоFanout;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыТочкиОбмена()
	
	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("СерверRMQ", "Владелец");
	ИменаРеквизитов.Вставить("ТипТочкиОбмена", "ТипТочкиОбмена");

	Реквизиты = гкс_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ТочкаОбмена, ИменаРеквизитов);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты, "СерверRMQ, ТипТочкиОбмена");
	
	ЭтоFanout = ЭтоТочкаОбменаFanout(Реквизиты.ТипТочкиОбмена);
	
	ЭтотОбъект.ПубликоватьРезультатОбработки = ЗначениеЗаполнено(Объект.ИмяОчередиОтвета);

КонецПроцедуры
 
&НаКлиенте
Процедура ОбработатьИзменениеТочкиОбмена()
		
	Если ЭтоFanout Тогда
		
		Для Каждого ВыгружаемыйОбъект Из Объект.ВыгружаемыеДанные Цикл
			
			ВыгружаемыйОбъект.КлючМаршрутизации = "";
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоТочкаОбменаFanout(ТипТочкиОбмена)
	
	ЭтоFanout = (ТипТочкиОбмена = Перечисления.гкс_ТипыТочекОбменаRMQ.Fanout);
	
	Возврат ЭтоFanout;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоТочкаОбменаDirect(ТипТочкиОбмена)
	
	ЭтоDirect = (ТипТочкиОбмена = Перечисления.гкс_ТипыТочекОбменаRMQ.Direct);
	
	Возврат ЭтоDirect;
	
КонецФункции

&НаКлиенте
Процедура ДекорацияТекущаяБазаНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьДекорациюТекущаяБаза();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборУсловиеВыгрузкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ТекстПредставления = "Не задано";
		
		Если Результат.Свойство("АдресНастроек") Тогда
			
			ТекстПредставления = "Задано";
			//@skip-warning
			Элементы.ВыгружаемыеДанные.ТекущиеДанные.УсловиеВыгрузкиЗначение = Результат["АдресНастроек"];
			
		КонецЕсли;
		
		Если Результат.Свойство("ОчиститьНастройки") Тогда
			
			Элементы.ВыгружаемыеДанные.ТекущиеДанные.УсловиеВыгрузкиЗначение = Неопределено;         
			
		КонецЕсли;

		Элементы.ВыгружаемыеДанные.ТекущиеДанные.УсловиеВыгрузкиПредставление = ТекстПредставления; 
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставленияУсловийВыгрузки(ТекущийОбъект)
	
	Для Каждого СтрокаОбъекта Из ТекущийОбъект.ВыгружаемыеДанные Цикл
		
		УсловиеВыгрузки = СтрокаОбъекта.Условие;
		ТекстПредставления = "Не задано";
		Индекс = ТекущийОбъект.ВыгружаемыеДанные.Индекс(СтрокаОбъекта);
		
		Если ЗначениеЗаполнено(УсловиеВыгрузки) И ТипЗнч(УсловиеВыгрузки) = Тип("ХранилищеЗначения") 
			И ТипЗнч(УсловиеВыгрузки.Получить()) = Тип("НастройкиКомпоновкиДанных") Тогда
			
			ТекстПредставления = "Задано";
			
			Объект.ВыгружаемыеДанные[Индекс]["УсловиеВыгрузкиЗначение"] = 
			ПоместитьВоВременноеХранилище(УсловиеВыгрузки, ЭтотОбъект.УникальныйИдентификатор);
			
		КонецЕсли;
		
		Объект.ВыгружаемыеДанные[Индекс]["УсловиеВыгрузкиПредставление"] = ТекстПредставления;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяТекущегоПриложения()
	
	ИмяПриложенияТекст = НСтр("ru='Текущее приложение не установлено'");
	
	ТекущееПриложение = Справочники.гкс_УчастникиОбменаRMQ.ТекущееПриложение(Ложь);
	
	Если ЗначениеЗаполнено(ТекущееПриложение) Тогда 
		
		Шаблон = НСтр("ru='Текущее приложение (информационная база): %1'");
		
		ИмяПриложенияТекст = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Шаблон, ТекущееПриложение.Наименование);
		
	КонецЕсли;
	
	Возврат ИмяПриложенияТекст;
		
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьОчередиСервисныхСообщений()
	
	Элементы.ИмяОчередиОтвета.Видимость = ЭтотОбъект.ПубликоватьРезультатОбработки;
	        
КонецПроцедуры

#Область НастройкаВыгрузкиОбъектов

&НаКлиенте
Функция ВозможнаНастройкаВыгружаемыхДанных(ПараметрыВыгрузкиОбъектов)
	
	ВозможнаНастройка = Истина;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузкиОбъектов.ТипФормата) Тогда
		
		ТекстСообщения = НСтр("ru='У формата не указан тип. Настройка невозможна!'");		
		гкс_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ВозможнаНастройка = Ложь;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыВыгрузкиОбъектов.ИмяОткрываемойФормы) Тогда
		
		ШаблонСообщения = НСтр("ru='Для формата %1 не определена дополнительная настройка'");
		ТекстСообщения = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
		                                                                             ПараметрыВыгрузкиОбъектов.Формат); 
		
		гкс_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ВозможнаНастройка = Ложь;
		
	КонецЕсли;
	
	Возврат ВозможнаНастройка;
	
КонецФункции

&НаКлиенте
Процедура НастроитьВыгрузкуОбъектовЗавершение(Результат, ДополнительныеПараметры) Экспорт
		
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("БезИзменений") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ТипФормата = 
		ПредопределенноеЗначение("Перечисление.гкс_ТипыФорматовОбменаRMQ.ED") Тогда
		ОбработатьНастройкуВыгрузкиВФорматеED(Результат);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНастройкуВыгрузкиВФорматеED(Результат)
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("ИдентифкаторСтроки", Результат.ИдентифкаторСтроки);
	
	ИзменяемыеСтроки = Объект.НастройкиВыгрузкиВФорматеED.НайтиСтроки(ОтборСтрок);
	Если ИзменяемыеСтроки.Количество() > 0 Тогда
		
		Для Каждого ИзменяемаяСтрока Из ИзменяемыеСтроки Цикл
			ЗаполнитьЗначенияСвойств(ИзменяемаяСтрока, Результат); 
		КонецЦикла;
		
	Иначе
		
		НоваяСтрока = Объект.НастройкиВыгрузкиВФорматеED.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
		
	КонецЕсли;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьПараметрыВыгрузки(ВыгружаемыеДанные)
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ИдентифкаторСтроки", ВыгружаемыеДанные.ИдентифкаторСтроки);
	
	ПараметрыВыгрузки.Вставить("Формат", ВыгружаемыеДанные.Формат);
	ПараметрыВыгрузки.Вставить("ТипФормата");
	Если ЗначениеЗаполнено(ВыгружаемыеДанные.Формат) Тогда
		ПараметрыВыгрузки.Вставить("ТипФормата", ДанныеФормата(ВыгружаемыеДанные.Формат)["Тип"]);		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ИмяОткрываемойФормы");
	Если ПараметрыВыгрузки.ТипФормата = 
		ПредопределенноеЗначение("Перечисление.гкс_ТипыФорматовОбменаRMQ.ED") Тогда
		
		ПараметрыВыгрузки.Вставить("ИмяОткрываемойФормы", 
								   "Справочник.гкс_ПолучателиДанныхRMQ.Форма.НастройкаВыгрузкиВФорматеED");
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("ИдентифкаторСтроки", ВыгружаемыеДанные.ИдентифкаторСтроки);
		НайденныеСтроки = Объект.НастройкиВыгрузкиВФорматеED.НайтиСтроки(ОтборСтрок);
		
		ИмяПОД = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].ИмяПОД, Неопределено);
		
		ПараметрыВыгрузки.Вставить("ИмяПОД", ИмяПОД);		
		
	КонецЕсли;
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

#КонецОбласти

#КонецОбласти