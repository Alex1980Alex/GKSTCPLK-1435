#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьИОбновитьОбработчики() Экспорт 
	
	Обработчики = АсинхронныеСервисыСлужебный.НоваяКоллекцияРегистрацииОбработчиков();
	ПолучениеСообщенийПереопределяемый.ПриРегистрацииОбработчиковСообщений(Обработчики);
	АсинхронныеСервисыПереопределяемый.ПриРегистрацииОбработчиковСообщений(Обработчики);
	
	СоздатьОбработчики(Обработчики);
	
КонецПроцедуры

Процедура СоздатьОбработчики(Знач Обработчики)
	Если Не ЗначениеЗаполнено(Обработчики) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбработчикиСобытий.МетодОбработчик КАК МетодОбработчик,
	|	ОбработчикиСобытий.ВерсияПротокола КАК ВерсияПротокола,
	|	ОбработчикиСобытий.ИмяСервиса КАК ИмяСервиса,
	|	ОбработчикиСобытий.ИмяМетода КАК ИмяМетода,
	|	ОбработчикиСобытий.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбработчикиСобытийRMQ КАК ОбработчикиСобытий";
	
	СуществующиеОбработчики = Запрос.Выполнить().Выгрузить();
	ЗарегистрированныеОбработчики = Обработчики;
	
	ТаблицаРегистрируемых = СопоставитьСправочникИРегистрациюИзКода(
				СуществующиеОбработчики, 
				ЗарегистрированныеОбработчики);
					
	НачатьТранзакцию();			
	Попытка
		Для Каждого Обработчик Из ТаблицаРегистрируемых Цикл
			Если Обработчик.Действие = -1 Тогда
				Фильтр = Новый Структура("МетодОбработчик,ВерсияПротокола,ИмяСервиса,ИмяМетода");
				ЗаполнитьЗначенияСвойств(Фильтр, Обработчик);
				Существующий = СуществующиеОбработчики.НайтиСтроки(Фильтр)[0];
				Объект = Существующий.Ссылка.ПолучитьОбъект();
				Объект.ПометкаУдаления = Истина;
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.Записать();
			ИначеЕсли Обработчик.Действие > 0 Тогда
				ЭлементОбработчик = Справочники.ОбработчикиСобытийRMQ.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(ЭлементОбработчик, Обработчик);
				ЭлементОбработчик.Записать();
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

Функция СопоставитьСправочникИРегистрациюИзКода(СуществующиеОбработчики, ЗарегистрированныеОбработчики)

	Результат = СуществующиеОбработчики.Скопировать();
	Результат.Колонки.Добавить("Действие", Новый ОписаниеТипов("Число"));
	Результат.ЗаполнитьЗначения(-1, "Действие");
	Для Каждого Стр Из ЗарегистрированныеОбработчики Цикл
		Обработчик = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(Обработчик, Стр);
		Обработчик.Действие = 1;
	КонецЦикла;
	
	Результат.Свернуть("МетодОбработчик,ВерсияПротокола,ИмяСервиса,ИмяМетода","Действие");
	Возврат Результат;

КонецФункции // СопоставитьСправочникИРегистрациюИзКода()

// Функция - Найти обработчик события
//
// Параметры:
//  МетодОбработчик - Строка
// 
// Возвращаемое значение:
//  СправочникСсылка.ОбработчикиСобытийRMQ, Неопределено - найденный обработчик или Неопределено, если не найдено
//
Функция НайтиОбработчик(Знач МетодОбработчик) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбработчикиСобытий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбработчикиСобытийRMQ КАК ОбработчикиСобытий
		|ГДЕ
		|	(ВЫРАЗИТЬ(ОбработчикиСобытий.МетодОбработчик КАК СТРОКА(1000))) = &МетодОбработчик";
	
	Запрос.УстановитьПараметр("МетодОбработчик", МетодОбработчик);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();

	Возврат Выборка.Ссылка;
	
КонецФункции

#КонецОбласти

#КонецЕсли
