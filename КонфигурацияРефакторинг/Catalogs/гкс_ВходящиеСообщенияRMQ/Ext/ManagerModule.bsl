#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Функция СоздатьНовоеСообщениеПоПодписке(Текст, СвойстваСообщения, Подписка) Экспорт

	Сообщение = Справочники.гкс_ВходящиеСообщенияRMQ.СоздатьЭлемент();
	Сообщение.Заполнить(СтруктураЗаполненияНовогоСообщения(Текст, СвойстваСообщения, Подписка));

	Попытка			
		Сообщение.Записать();		
	Исключение
		ИсключениеОшибкаСозданияНовогоСообщенияПоПодписке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Подписка);
	КонецПопытки;
	
	Возврат Сообщение.Ссылка;
			
КонецФункции

Процедура ЗаблокироватьСообщение(Сообщение) Экспорт
	гкс_ОбщегоНазначения.УстановитьУпрБлокировкуПоЗначениюИПолю(Сообщение);	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область УправлениеСостоянием

Процедура ОтметитьПринятиеВОбработку(Сообщение) Экспорт
	
	ДатаИзмененияСостояния = ТекущаяДатаСеанса();
	
	СообщениеОбъект = Сообщение.ПолучитьОбъект();
	СообщениеОбъект.ДатаПринятияВОбработку = ДатаИзмененияСостояния;
	
	ДополнительныеСвойства = СообщениеОбъект.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ОповеститьОбОбработке", Ложь);
	ДополнительныеСвойства.Вставить("ОтметитьОбработку", Истина);
	ДополнительныеСвойства.Вставить("ДатаИзмененияСостояния", ДатаИзмененияСостояния);
	ДополнительныеСвойства.Вставить("Состояние", Перечисления.гкс_СостоянияВходящихСообщенийRMQ.ВОбработке);	
		
	СообщениеОбъект.Записать();   
	
КонецПроцедуры

Процедура ОтметитьОбработку(Сообщение, РезультатыОбработки) Экспорт
	
	Перем ЗагруженныеОбъекты; 
	
	ДатаИзмененияСостояния = ТекущаяДатаСеанса();
	
	СообщениеОбъект = Сообщение.ПолучитьОбъект();
	СообщениеОбъект.ДатаОбработки = ДатаИзмененияСостояния;

	ДополнительныеСвойства = СообщениеОбъект.ДополнительныеСвойства;		
	ДополнительныеСвойства.Вставить("ОповеститьОбОбработке", Истина);
	ДополнительныеСвойства.Вставить("ОчиститьОшибки", Истина);
	ДополнительныеСвойства.Вставить("Состояние", Перечисления.гкс_СостоянияВходящихСообщенийRMQ.Обработано);
	ДополнительныеСвойства.Вставить("ДатаИзмененияСостояния", ДатаИзмененияСостояния);
	
	Если ТипЗнч(РезультатыОбработки) = Тип("Структура") 
		И РезультатыОбработки.Свойство("ЗагруженныеОбъекты", ЗагруженныеОбъекты) 
		И ЗначениеЗаполнено(ЗагруженныеОбъекты) Тогда
		
		ДополнительныеСвойства.Вставить("ЗагруженныеОбъекты", ЗагруженныеОбъекты);
		СообщениеОбъект.ЗаполнитьЗагруженныеОбъекты(ЗагруженныеОбъекты);
		
	КонецЕсли;
	
	СообщениеОбъект.Записать();    
	
КонецПроцедуры

Процедура УстановитьСостояниеСообщения(ПараметрыСообщения) Экспорт
	
	Перем СсылкаНаСообщение, Состояние, ДатаИзмененияСостояния;
	
	ПараметрыСообщения.Свойство("Состояние", Состояние);
	ПараметрыСообщения.Свойство("СсылкаНаСообщение", СсылкаНаСообщение);
	ПараметрыСообщения.Свойство("ДатаИзмененияСостояния", ДатаИзмененияСостояния);
	
	Если ЗначениеЗаполнено(Состояние) Тогда
		гкс_ОчередьСообщенийRMQВызовСервера.УстановитьСостояниеВходящегоСообщения(СсылкаНаСообщение, 
		                                                                          Состояние, 
																				  ДатаИзмененияСостояния);		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОчередьВходящихСообщений

	
Процедура ОпределитьПотокСобытийПриПолучении(СвойстваНовогоСообщенияВСтруктуре)
	ПотокСобытий = Неопределено;
	гкс_ОчередьСообщенийRMQПереопределяемый
	           .ПриОпределенииПотокаСобытийВходящегоСообщения(СвойстваНовогоСообщенияВСтруктуре,  
	                                                          ПотокСобытий);
	Если ЗначениеЗаполнено(ПотокСобытий) Тогда
		СвойстваНовогоСообщенияВСтруктуре.Вставить("ПотокСобытий", ПотокСобытий);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьСообщениеВОчереди(ПараметрыСообщения) Экспорт
	
	Перем ЗафиксироватьВОчереди, Порядок, СсылкаНаСообщение, КлючОбъекта, ПотокСобытий;
		
	ПараметрыСообщения.Свойство("Порядок", Порядок);	
	ПараметрыСообщения.Свойство("СсылкаНаСообщение", СсылкаНаСообщение);
	ПараметрыСообщения.Свойство("КлючОбъекта", КлючОбъекта);
	ПараметрыСообщения.Свойство("ЗафиксироватьВОчереди", ЗафиксироватьВОчереди);
	ПараметрыСообщения.Свойство("ПотокСобытий", ПотокСобытий);
	
	Если гкс_ОчередьСообщенийRMQСлужебный.ПривестиЗначениеКБулево(ЗафиксироватьВОчереди) Тогда		
		гкс_ОчередьСообщенийRMQВызовСервера.ЗафиксироватьСообщениеВОчереди(СсылкаНаСообщение, 
		                                                                   КлючОбъекта, 
		                                                                   Порядок,
		                                                                   ПотокСобытий);		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьОбработкуСообщенияВОчереди(ПараметрыСообщения) Экспорт
	
	Перем СсылкаНаСообщение, ОтметитьОбработку;
		
	ПараметрыСообщения.Свойство("СсылкаНаСообщение", СсылкаНаСообщение);
	ПараметрыСообщения.Свойство("ОтметитьОбработку", ОтметитьОбработку);

	Если гкс_ОчередьСообщенийRMQСлужебный.ПривестиЗначениеКБулево(ОтметитьОбработку) Тогда				
		гкс_ОчередьСообщенийRMQВызовСервера.ОтметитьОбработкуСообщенияВОчереди(СсылкаНаСообщение);		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПроблемыОбработки

Процедура ЗафиксироватьПроблемуОбработкиОбъекта(ПараметрыСообщения) Экспорт
	
	Перем ОписаниеПроблемыОбмена;
	
	Если ПараметрыСообщения.Свойство("ПроблемаОбмена", ОписаниеПроблемыОбмена) 
		И ЗначениеЗаполнено(ОписаниеПроблемыОбмена) Тогда
		
		гкс_ОчередьСообщенийRMQВызовСервера.ЗафиксироватьПроблемуОбработкиОбъекта(ОписаниеПроблемыОбмена);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОчиститьПроблемыОбъекта(ПараметрыСообщения) Экспорт
	
	Перем СсылкаНаСообщение;
	
	ПараметрыСообщения.Свойство("СсылкаНаСообщение", СсылкаНаСообщение);

	Если ПараметрыСообщения.Свойство("ОчиститьОшибки") 
		И гкс_ОчередьСообщенийRMQВызовСервера.ЕстьПроблемыПоОбъекту(СсылкаНаСообщение) Тогда
		
		гкс_ОчередьСообщенийRMQВызовСервера.ОчиститьПроблемыОбъекта(СсылкаНаСообщение);
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПроблемуОбработки(ОписаниеПроблемы) Экспорт
	
	Перем Сообщение;
	
	ОписаниеПроблемы.Свойство("ПроблемныйОбъект", Сообщение);
	
	Если НЕ ЗначениеЗаполнено(Сообщение) Тогда	
		Возврат;		
	КонецЕсли;
	
	ДатаИзмененияСостояния = ТекущаяДатаСеанса();
	
	СообщениеОбъект = Сообщение.ПолучитьОбъект();
	
	ДополнительныеСвойства = СообщениеОбъект.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ПроблемаОбмена", ОписаниеПроблемы);
	ДополнительныеСвойства.Вставить("ОповеститьОбОбработке", Истина);
	ДополнительныеСвойства.Вставить("Состояние", Перечисления.гкс_СостоянияВходящихСообщенийRMQ.ОшибкаОбработки);
	ДополнительныеСвойства.Вставить("ДатаИзмененияСостояния", ДатаИзмененияСостояния);
	ДополнительныеСвойства.Вставить("ТекстОшибкиОбработки", ОписаниеПроблемы.Текст);
	
	СообщениеОбъект.Записать();
		
КонецПроцедуры

#КонецОбласти

#Область ОповещенияСостоянийОбработки

Процедура СоздатьОповещениеОСтатусеОбработки(Сообщение) Экспорт
	
	Перем ОповеститьОбОбработке;
	
	МенеджерФормированияСообщений = Обработки.гкс_ФормировательСообщенийRMQ;
	
	ДополнительныеСвойства = Сообщение.ДополнительныеСвойства;    
	ДополнительныеСвойства.Свойство("ОповеститьОбОбработке", ОповеститьОбОбработке);
	
	Если НЕ ОповеститьОбОбработке = Истина ИЛИ НЕ ЕстьАдресОтвета(Сообщение) Тогда		
		Возврат;		
	КонецЕсли;
	
	МенеджерФормированияСообщений.ИнициализироватьСвойстваОбъекта(Сообщение, ДополнительныеСвойства);
	
	ДополнитьСвойстваОповещения(Сообщение, ДополнительныеСвойства);
	
	ДополнительныеСвойства.ДанныеСинхронизацииRMQ.Вставить("Получатели", ПолучателиОповещения(Сообщение));
	ДополнительныеСвойства.ДанныеСинхронизацииRMQ.Вставить("ФильтрПоУсловиюВыгрузки", Ложь);
		
	гкс_ОчередьСообщенийRMQ.СоздатьСообщенияПоСобытиюОбъекта("ОповещениеОбОбработке", Сообщение); 

КонецПроцедуры

Функция ПолучателиОповещения(Сообщение)
	
	Получатели = Новый Массив;
	
	Получатель = Справочники.гкс_ПолучателиДанныхRMQ.ОписаниеПолучателя();
	СвойстваСообщения = СодержимоеВСтруктуру(Сообщение.Содержимое)["СвойстваСообщения"];
	СерверRMQ = гкс_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение.Подписка, "СерверОчередей"); 
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("ТочкаОбмена", "");
	СтруктураЗаполнения.Вставить("СерверRMQ", СерверRMQ);
	СтруктураЗаполнения.Вставить("СсылкаНаОбъект", Сообщение.Ссылка);
	СтруктураЗаполнения.Вставить("ТипМетаданных", Сообщение.Метаданные().ПолноеИмя());
	СтруктураЗаполнения.Вставить("КлючСоответствия", Сообщение.ИдентификаторСообщения);
	СтруктураЗаполнения.Вставить("КлючМаршрутизации", СвойстваСообщения["ОбратныйАдрес"]);
	СтруктураЗаполнения.Вставить("Формат", Справочники.гкс_ФорматыОбменаИАС.EnterpriseDataService);
	СтруктураЗаполнения.Вставить("ВыгружатьСсылкиИзОбъекта", Ложь);
				
	ЗаполнитьЗначенияСвойств(Получатель, СтруктураЗаполнения);
	Получатель.КлючФормата = Справочники.гкс_ПолучателиДанныхRMQ.КлючФормата(Получатель);
	
	Получатели.Добавить(Получатель);		
	гкс_ОчередьСообщенийRMQПереопределяемый.ПриОпределенииАдресатовОповещенийОбОбработке(Сообщение, Получатели);
	
	Возврат Получатели;
		
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Исключения

Процедура ИсключениеОшибкаСозданияНовогоСообщенияПоПодписке(ПодробноеПредставлениеОшибки, Подписка)
	
	ТекстОшибки = 
	    СтрШаблон(НСтр("ru = 'Ошибка создания нового сообщения по подписке %1.'"), Строка(Подписка))
		+ "|" 
		+ ПодробноеПредставлениеОшибки;
	
	ВызватьИсключение ТекстОшибки;
	
КонецПроцедуры
			
#КонецОбласти

#Область ФормированиеСообщенийПоПодписке

Функция СтруктураЗаполненияНовогоСообщения(Текст, СвойстваСообщения, Подписка)
	
	ДатаИзмененияСостояния = ТекущаяДатаСеанса();
	УниверсальнаяДатаВМС = ОчередьСообщенийВызовСервера.ТекущаяУниверсальнаяДатаВМиллисекундахНаСервере();
	Порядок = ОтметкаВремениНовогоСообщения(СвойстваСообщения, УниверсальнаяДатаВМС);
	КорневойИдентификаторСообщения =  КорневойИдентификаторСообщения(СвойстваСообщения);
	ТипЦелоеЧисло = Новый ОписаниеТипов("Число"); 
	Заголовки = СвойстваСообщения["Заголовки"];
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Порядок", Порядок);
	СтруктураЗаполнения.Вставить("Подписка", Подписка);
	СтруктураЗаполнения.Вставить("ДатаПолучения", ДатаИзмененияСостояния);
	СтруктураЗаполнения.Вставить("ТипКонтракта", СвойстваСообщения["Тип"]);
	СтруктураЗаполнения.Вставить("ДатаИзмененияСостояния", ДатаИзмененияСостояния);
	СтруктураЗаполнения.Вставить("ИдентификаторСообщения", СвойстваСообщения["НомерСообщения"]);
	СтруктураЗаполнения.Вставить("УниверсальнаяДатаСобытияВМиллисекундах", УниверсальнаяДатаВМС);
	СтруктураЗаполнения.Вставить("КорневойИдентификаторСообщения", КорневойИдентификаторСообщения); 
	СтруктураЗаполнения.Вставить("Содержимое", СодержимоеПоДаннымСообщения(Текст, СвойстваСообщения));
	СтруктураЗаполнения.Вставить("КлючОбъекта", Заголовки.Получить("КлючОбъекта"));
	СтруктураЗаполнения.Вставить("Состояние", Перечисления.гкс_СостоянияВходящихСообщенийRMQ.Зарегистрировано);		
	СтруктураЗаполнения.Вставить("Хоп", ТипЦелоеЧисло.ПривестиЗначение(Заголовки.Получить("Hop"))+1);
	
	ОпределитьПотокСобытийПриПолучении(СтруктураЗаполнения);
	
	Возврат СтруктураЗаполнения;

КонецФункции

#КонецОбласти

Функция СодержимоеВСтруктуру(Содержимое) Экспорт
	
	СодержимоеСтруктура = Новый Структура("Текст, СвойстваСообщения");
	СодержимоеДанные = Содержимое.Получить();
	
	Если ТипЗнч(СодержимоеДанные) = Тип("Структура") Тогда		
		ЗаполнитьЗначенияСвойств(СодержимоеСтруктура, СодержимоеДанные);	
	КонецЕсли;		
	
	Возврат СодержимоеСтруктура;
	
КонецФункции

Процедура ДополнитьСвойстваОповещения(Сообщение, ДополнительныеСвойства)
	
	СвойстваСообщения = СодержимоеВСтруктуру(Сообщение.Содержимое)["СвойстваСообщения"];
	Заголовки = СвойстваСообщения["Заголовки"];
	
	СинхронныйОтвет = (Заголовки.Получить("SyncCallback") = Истина);
	
	Если СинхронныйОтвет Тогда		
		ДополнительныеСвойства.ДанныеСинхронизацииRMQ.Вставить("Синхронно", Истина);	
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьАдресОтвета(Знач Сообщение)
	
	Перем ОбратныйАдрес;
	
	Свойства = СодержимоеВСтруктуру(Сообщение.Содержимое)["СвойстваСообщения"];
	Если ЗначениеЗаполнено(Свойства) Тогда
		Свойства.Свойство("ОбратныйАдрес", ОбратныйАдрес);
	КонецЕсли;

	Возврат ЗначениеЗаполнено(ОбратныйАдрес);
		
КонецФункции

Функция ОтметкаВремениНовогоСообщения(СвойстваСообщения, УниверсальнаяДатаВМС)
	
	Перем ОтметкаВремени;
	
	СвойстваСообщения.Свойство("ОтметкаВремени", ОтметкаВремени);
	Если НЕ ЗначениеЗаполнено(ОтметкаВремени) Тогда
		ОтметкаВремени = УниверсальнаяДатаВМС;
	КонецЕсли;
	
	Возврат ОтметкаВремени;
	
КонецФункции

Функция КорневойИдентификаторСообщения(СвойстваСообщения)
	
	КорневойИдентификаторСообщения = СвойстваСообщения["Заголовки"].Получить("КорневойИдентификаторСообщения");
	Если НЕ ЗначениеЗаполнено(КорневойИдентификаторСообщения) Тогда
		КорневойИдентификаторСообщения = СвойстваСообщения["НомерСообщения"];
	КонецЕсли;
	
	Возврат КорневойИдентификаторСообщения;
	
КонецФункции

Функция СодержимоеПоДаннымСообщения(Текст, СвойстваСообщения)
	
	Содержимое = Новый Структура("Текст, СвойстваСообщения", Текст, СвойстваСообщения);
	
	Возврат Новый ХранилищеЗначения(Содержимое, Новый СжатиеДанных(9));
	
КонецФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаТысячаВходящихСообщений() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ВходящиеСообщения.Ссылка КАК Объект
	|ИЗ
	|	Справочник.гкс_ВходящиеСообщенияRMQ КАК ВходящиеСообщения";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОчисткиУстаревшихСообщений() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Сообщение,
	|	Таблица.ДатаОбработки КАК ДатаОбработки
	|ПОМЕСТИТЬ ВТОтборСообщений
	|ИЗ
	|	Справочник.гкс_ВходящиеСообщенияRMQ КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_НастройкиИнтеграционногоАдаптера КАК Настройки
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Таблица.ДатаОбработки < ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, ВЫБОР
	|		КОГДА ЕСТЬNULL(Настройки.СрокХраненияВходящихСообщений, 0) = 0
	|			ТОГДА -1
	|		ИНАЧЕ ЕСТЬNULL(Настройки.СрокХраненияВходящихСообщений, 0)
	|	КОНЕЦ * -1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследниеСостояния.Сообщение КАК Сообщение,
	|	МАКСИМУМ(ПоследниеСостояния.УниверсальнаяДатаСобытияВМиллисекундах) КАК УниверсальнаяДатаСобытияВМиллисекундах
	|ПОМЕСТИТЬ ВТМаксимальныеДатыСостояний
	|ИЗ
	|	РегистрСведений.гкс_СостоянияВходящихСообщений.СрезПоследних КАК ПоследниеСостояния
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборСообщений КАК ВТОтборСообщений
	|		ПО ПоследниеСостояния.Сообщение = ВТОтборСообщений.Сообщение
	|СГРУППИРОВАТЬ ПО
	|	ПоследниеСостояния.Сообщение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ВТОтборСообщений.Сообщение КАК Сообщение
	|ИЗ
	|	ВТОтборСообщений КАК ВТОтборСообщений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СостоянияВходящихСообщений КАК ВсеСостояния
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМаксимальныеДатыСостояний КАК ВТМаксимальныеДатыСостояний
	|			ПО ВсеСостояния.Сообщение = ВТМаксимальныеДатыСостояний.Сообщение
	|			И
	|				ВсеСостояния.УниверсальнаяДатаСобытияВМиллисекундах = ВТМаксимальныеДатыСостояний.УниверсальнаяДатаСобытияВМиллисекундах
	|		ПО ВТОтборСообщений.Сообщение = ВсеСостояния.Сообщение
	|ГДЕ
	|	ЕСТЬNULL(ВсеСостояния.Состояние, ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияВходящихСообщенийRMQ.Пропущено)) В
	|	(ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияВходящихСообщенийRMQ.Пропущено),
	|		ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияВходящихСообщенийRMQ.Обработано),
	|		ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияВходящихСообщенийRMQ.ОшибкаОбработкиЗакрыто))
	|СГРУППИРОВАТЬ ПО
	|	ВТОтборСообщений.Сообщение,
	|	ВТОтборСообщений.ДатаОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТОтборСообщений.ДатаОбработки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли