#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Процедура добавляет запись в регистр по переданным значениям структуры.
Процедура ДобавитьЗапись(СтруктураЗаписи) Экспорт
	
    гкс_ОбменДаннымиСервер.ДобавитьЗаписьВРегистрСведений(
    	СтруктураЗаписи, "гкс_СвязьРегистрацииИТранспортногоДокумента");
		
КонецПроцедуры

// Удаляет набор записей в регистре по переданным значениям структуры.
//
// Параметры:
//  Запись - Структура - структура, по значениям которой необходимо удалить набор записей.
//  Загрузка - Булево - признак, выполнять загрузку в режиме обмена или нет
// 
Процедура УдалитьЗапись(Запись, Загрузка = Ложь) Экспорт
    гкс_ОбменДаннымиСервер.УдалитьНаборЗаписейВРегистреСведений(Запись, "гкс_СвязьРегистрацииИТранспортногоДокумента",
    	Загрузка);
КонецПроцедуры

#КонецОбласти

// Получает транспортный документ и транспорт для регистрации.
// 
// Параметры:
//  ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК - 
// 
// Возвращаемое значение:
//  Структура:
//  	* ТранспортныйДокумент - ДокументСсылка.гкс_ТранспортныйДокумент 
// 		* ТраснпортноеСредство - СправочникСсылка.ТранспортныеСредства  
//
Функция ПолучитьСвязьСТранспортнымДокументом(Знач ДокументРегистрации) Экспорт
	
	СтруктураСвязи = Новый Структура("ТранспортныйДокумент, ТраснпортноеСредство", 
		Документы.гкс_ТранспортныйДокумент.ПустаяСсылка(), Справочники.ТранспортныеСредства.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязьРегистрацииИТранспортногоДокумента.ТранспортныйДокумент КАК ТранспортныйДокумент,
	|	СвязьРегистрацииИТранспортногоДокумента.ТранспортноеСредство КАК ТранспортноеСредство
	|ИЗ
	|	РегистрСведений.гкс_СвязьРегистрацииИТранспортногоДокумента КАК СвязьРегистрацииИТранспортногоДокумента
	|ГДЕ
	|	СвязьРегистрацииИТранспортногоДокумента.ДокументРегистрации = &Регистрация";
	
	Запрос.УстановитьПараметр("Регистрация", ДокументРегистрации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураСвязи, Выборка); 
	КонецЕсли;
	
	Возврат СтруктураСвязи;
	
КонецФункции

// Проверка существования связи регистрации, транспорного документа и транспорта.
// 
// Параметры:
//  Регистрация - ДокументСсылка.гкс_РегистрацияНаПЛК - 
//  Регистрация - ДокументСсылка.гкс_ТранспортныйДокумент - 
//  Регистрация - СправочникСсылка.ТранспортныеСредства - 
// 
// Возвращаемое значение:
//  Булево - Истина,  когда есть привязка регистрации и транспортного документа, иначе - Ложь 
//
Функция ДублированиеТДВРегистрации(Регистрация, ТранспортныйДокумент, ТранспортноеСредство) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	СвязьРегистрацииИТранспортногоДокумента.ДокументРегистрации КАК ДокументРегистрации,
	|	СвязьРегистрацииИТранспортногоДокумента.ТранспортныйДокумент КАК ТранспортныйДокумент
	|ИЗ
	|	РегистрСведений.гкс_СвязьРегистрацииИТранспортногоДокумента КАК СвязьРегистрацииИТранспортногоДокумента
	|ГДЕ
	|	НЕ СвязьРегистрацииИТранспортногоДокумента.ДокументРегистрации = &Регистрация
	|	И СвязьРегистрацииИТранспортногоДокумента.ТранспортныйДокумент = &ТранспортныйДокумент
	|	И СвязьРегистрацииИТранспортногоДокумента.ТранспортноеСредство = &ТранспортноеСредство";
	
	Запрос.УстановитьПараметр("Регистрация", Регистрация);
	Запрос.УстановитьПараметр("ТранспортныйДокумент", ТранспортныйДокумент);
	Запрос.УстановитьПараметр("ТранспортноеСредство", ТранспортноеСредство);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Зарегистрировать данные для обработки переноса связей
// 
// Параметры:
//  Параметры - Структура - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеДляЗаполненияТС(Параметры) Экспорт

	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = 
		Метаданные.РегистрыСведений.гкс_СвязьРегистрацииИТранспортногоДокумента.ПолноеИмя();
	Данные = ДанныеКОбработкеДляЗаполненияТС();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
		
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке.
//
Процедура ОбработатьДанныеДляЗаполненияТС(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.гкс_СвязьРегистрацииИТранспортногоДокумента;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта, ДополнительныеПараметры);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("ДокументРегистрации", Выборка.ДокументРегистрации);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Набор = РегистрыСведений.гкс_СвязьРегистрацииИТранспортногоДокумента.СоздатьНаборЗаписей();
			Набор.Отбор.ДокументРегистрации.Установить(Выборка.ДокументРегистрации);
			Набор.Прочитать();
			
			ЗаполнитьТранспортноеСредствоВНаборе(Набор);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = КоличествоДанныхКОбработкеДляЗаполненияТС();
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов  = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов  + Выборка.Количество();
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИБ

Функция ДанныеКОбработкеДляЗаполненияТС()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвязьРегистрацииИТранспортногоДокумента.ДокументРегистрации КАК ДокументРегистрации
	|ИЗ
	|	РегистрСведений.гкс_СвязьРегистрацииИТранспортногоДокумента КАК СвязьРегистрацииИТранспортногоДокумента
	|ГДЕ
	|	НЕ
	|		СвязьРегистрацииИТранспортногоДокумента.ТранспортныйДокумент = ЗНАЧЕНИЕ(Документ.гкс_ТранспортныйДокумент.ПустаяСсылка)
	|	И
	|		СвязьРегистрацииИТранспортногоДокумента.ТранспортноеСредство = ЗНАЧЕНИЕ(Справочник.ТранспортныеСредства.ПустаяСсылка)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция КоличествоДанныхКОбработкеДляЗаполненияТС()
	Данные = ДанныеКОбработкеДляЗаполненияТС();
	Возврат Данные.Количество();
КонецФункции

Процедура ЗаполнитьТранспортноеСредствоВНаборе(Набор)
	
	Для Каждого Запись Из Набор Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.ДокументРегистрации) 
			Или ЗначениеЗаполнено(Запись.ТранспортноеСредство) Тогда
			Продолжить;
		КонецЕсли;
		
		ТСРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.ДокументРегистрации, "ТранспортноеСредство");
		Если ЗначениеЗаполнено(ТСРегистрации) Тогда
			Запись.ТранспортноеСредство = ТСРегистрации;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли