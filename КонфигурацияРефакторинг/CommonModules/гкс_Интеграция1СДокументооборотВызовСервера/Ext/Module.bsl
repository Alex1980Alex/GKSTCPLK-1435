#Область ПрограммныйИнтерфейс

// Гкс+[ERP-98] Коннова Н.В. от 13.01.2020. Добавлено:{
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка - ссылка на документ интегрированный с ДО
// 
// Возвращаемое значение:
//  Дата - дата согласования в ДО
//
Функция ПолучитьДатуСогласованияДО(ДокументСсылка) Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СостоянияСогласования.Состояние КАК Состояние,
		|	СостоянияСогласования.ДатаУстановки КАК ДатаУстановки
		|ИЗ 
		|	РегистрСведений.СостоянияСогласованияВДокументообороте КАК СостоянияСогласования
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом
		|ПО
		|	СостоянияСогласования.ИдентификаторОбъектаДО 
		|		= ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО
		|ГДЕ 
		|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект = &ДокументИБ
		|	И СостоянияСогласования.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСогласованияВДокументообороте.Согласован)
		|");
	Запрос.УстановитьПараметр("ДокументИБ", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();

	Результат = Неопределено;
	Пока Выборка.Следующий() Цикл
		Результат = Выборка.ДатаУстановки;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции  // } Гкс-[ERP-98]

// Возвращает данные файлов документооборота объектов из 
// РС ОбъектыИнтегрированныеС1СДокументооборотом
// для ссылок, переданных в параметре
//
// Параметры:
// МассивСсылок - Массив - массив ссылок для получения данных
//
// Возвращаемое значение:
// Массив - массив структу с данными РС ОбъектыИнтегрированныеС1СДокументооборотом 
//
Функция ПолучитьДанныеФайловОбъектовДокументооборота(МассивСсылок) Экспорт
	
	МассивДляВозврата	= Новый Массив;
	
	Запрос	= Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект КАК Объект,
	|	ОбъектыИнтегрированныеС1СДокументооборотом.ТипОбъектаДО КАК ТипОбъектаДО,
	|	ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО КАК ИдентификаторОбъектаДО
	|ИЗ
	|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом
	|ГДЕ
	|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект В(&МассивСсылок)"
	;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Выборка	= Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ФайлыПоВладельцу = ИнтеграцияС1СДокументооборотВызовСервера.ФайлыПоВладельцу(
		Выборка.ИдентификаторОбъектаДО,
		"",
		Выборка.ТипОбъектаДО);
		
		Для Каждого Файл Из ФайлыПоВладельцу.files Цикл
			
			ДанныеФайла	= Новый Структура("Идентификатор, Имя, Расширение");
			
			ДанныеФайла.Идентификатор	= Файл.objectID.id;
			ДанныеФайла.Имя				= Файл.name;
			ДанныеФайла.Расширение		= Файл.extension;
			
			МассивДляВозврата.Добавить(ДанныеФайла);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивДляВозврата;
	
КонецФункции

// Гкс+[ERP-427] Коннова Н.В. от 10.06.2020. Добавлено:{
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка - ссылка на документ интегрированный с ДО
// 
// Возвращаемое значение:
//  Структура - Структура ("СостояниеСогласованияДО, ДатаУстановки")
//
Функция ПолучитьСостояниеСогласованияДО(ДокументСсылка) Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО КАК ИдентификаторОбъектаДО,
		|	ЕСТЬNULL(СостоянияСогласования.Состояние, НЕОПРЕДЕЛЕНО) КАК СостояниеСогласованияДО,
		|	ЕСТЬNULL(СостоянияСогласования.ДатаУстановки, НЕОПРЕДЕЛЕНО) КАК ДатаУстановки
		|ИЗ
		|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСогласованияВДокументообороте КАК СостоянияСогласования
		|		ПО СостоянияСогласования.ИдентификаторОбъектаДО = ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО
		|ГДЕ
		|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект = &ДокументИБ");
	Запрос.УстановитьПараметр("ДокументИБ", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();

	Результат = Новый Структура("ИдентификаторОбъектаДО, СостояниеСогласованияДО, ДатаУстановки");
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции  // } Гкс-[ERP-427]

#Область СервисАвторизации

// См. гкс_Интеграция1СДокументооборот.УстановитьАвторизациюТекущегоПользователя()
Функция УстановитьАвторизациюТекущегоПользователя() Экспорт

	Возврат гкс_Интеграция1СДокументооборот.УстановитьАвторизациюТекущегоПользователя();	

КонецФункции

Функция ПолучитьВладельцевФайловПоТипуДокумента(ДокументСсылка) Экспорт
	
	СтруктураВладельцев = Новый Структура;
	
	//Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.гкс_ДвижениеЗапасов") Тогда
	//	
	//	ДокументОснование = Документы.гкс_ДвижениеЗапасов.ДокументОснованиеДляУчетногоДокумента(ДокументСсылка);
	//	Если ЗначениеЗаполнено(ДокументОснование) Тогда
	//		СтруктураВладельцев.Вставить("ВладелецФайла", ДокументОснование);
	//		СтруктураВладельцев.Вставить("гкс_ОбщийВладелецПрисоединенныхФайлов", ДокументСсылка);
	//	Иначе
	//		ШаблонСообщения = НСтр("ru = 'Для документа %1 не сформирован документ ""Основание для учетного документа""'");
	//		ТекстОшибки = СтрШаблон(ШаблонСообщения, ДокументСсылка);
	//		
	//		ВызватьИсключение ТекстОшибки
	//	КонецЕсли;	
	//	
	//Иначе
		СтруктураВладельцев.Вставить("ВладелецФайла", ДокументСсылка);
	//КонецЕсли;	
		
	Возврат СтруктураВладельцев;

КонецФункции

#КонецОбласти 

#КонецОбласти 
