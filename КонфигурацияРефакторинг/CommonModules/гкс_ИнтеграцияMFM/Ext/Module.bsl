#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.РегламентныеЗадания

// Определяет зависимости регламентных заданий и их дополнительные свойства.
//
// Параметры:
//  Настройки - ТаблицаЗначений:
//    * РегламентноеЗадание - ОбъектМетаданныхРегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданныхФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ - Булево - если регламентное задание зависит более чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево
//                                              - Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - Неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево
//                                  - Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - Неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево
//                                      - Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - Неопределено.
//    * ДоступноВМоделиСервиса - Булево
//                             - Неопределено - Ложь, если необходимо блокировать выполнение регламентного
//        задания (в т.ч. задания очереди) в информационной базе с включенным использованием разделителя.
//        Значение Неопределено трактуется как Истина.
//        По умолчанию - Неопределено.
//    * РаботаетСВнешнимиРесурсами - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.). Не следует устанавливать
//        значение Истина для регламентных заданий, не модифицирующих данные во внешних источниках.
//        Например, регламентное задание ЗагрузкаКурсовВалют. Регламентные задания, работающие с внешними ресурсами,
//        автоматически отключаются в копии информационной базы. По умолчанию - Ложь.
//    * Параметризуется - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.гкс_ПолучениеОстатковНаСкладахMFM;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.гкс_ИспользоватьКонтрольВместимостиСкладов;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.ДоступноВМоделиСервиса = Ложь;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РегламентныеЗадания

#КонецОбласти
  
// Получение остатов по списку складов
Процедура ОстаткиНаСкладахПоДаннымМФМ() Экспорт
		
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.гкс_ПолучениеОстатковНаСкладахMFM);
	
	Ресурс = Справочники.гкс_РесурсыВебСервисов.BalanceWarehouses;
	ВебСервис = гкс_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ресурс, "Подключение");
	Если Не ЗначениеЗаполнено(ВебСервис) Тогда
		ВызватьИсключение НСтр("ru = 'Не настроено подключение веб-сервиса.'");
	КонецЕсли;
	
	Соединение = СоединениеКСервису(ВебСервис); 
	
	ОстаткиПоСкладам = ПолучитьОстаткиПоСкладам(Ресурс, Соединение); 
	
	Если ЗначениеЗаполнено(ОстаткиПоСкладам)
		И ОстаткиПоСкладам.Свойство("BalanceWarehouses") Тогда
		
		ОбновитьДанныеПоОстатка(ОстаткиПоСкладам.BalanceWarehouses);
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеОстатковМФМ

Процедура ОбновитьДанныеПоОстатка(ОстаткиПоСкладам)
	
	УстановитьПривилегированныйРежим(Истина);
	Набор = РегистрыСведений.гкс_ОстаткиТочекМаршрутаMFM.СоздатьНаборЗаписей();
	
	Для каждого Остаток из ОстаткиПоСкладам цикл                                    
		Идентификатор = Новый УникальныйИдентификатор(Остаток.IdWareHouse);
		ТочкаМаршрута = Справочники.гкс_ТочкиМаршрута.ПолучитьСсылку(Идентификатор);
		Набор.Отбор.ТочкаМаршрута.Установить(ТочкаМаршрута);
		Если Набор.Количество() <> 0 Тогда
			Набор.Очистить();
		КонецЕсли;
		Запись = Набор.Добавить();
		Запись.Количество = Остаток.Balance;  
		Запись.ТочкаМаршрута = ТочкаМаршрута;  
		Набор.Записать();

	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОстаткиПоСкладам(ВебСервис, Соединение)
	
	ПараметрыЛогирования = НовыеПараметрыЛогирования(ВебСервис);
	ПараметрыЛогирования.Вставить("Дата", ТекущаяДатаСеанса());
	
	РеквизитыВыполнения = РеквизитыВыполненияВебСервиса(ВебСервис);
	
	СтрокаJSON = ДанныеПоСкладамДляПолученияОстатков();
	Если СтрокаJSON = Неопределено Тогда
		ТекстСообщенияШаблон = НСтр("ru = 'Нет складов для получения остатков.");
		ЗаписатьВЖурналРегистрацииОбмен(ТекстСообщенияШаблон, ВебСервис);
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = ЗапросКСервису(Соединение, РеквизитыВыполнения.СтрокаЗапроса, СтрокаJSON);
	
	НачатьЗамер(ПараметрыЛогирования);
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(РеквизитыВыполнения.ИмяМетода, Запрос);
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ТекстСообщенияШаблон = НСтр("ru = 'Не удалось получить данные по остаткам.
								|Описание ошибки: %1'");
		ТекстСообщенияПодробно = СтрШаблон(ТекстСообщенияШаблон, ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо));
		
		ВызватьИсключение ТекстСообщенияПодробно;
		
	КонецПопытки;
	
	ЗакончитьЗамер(ПараметрыЛогирования);
	
	ЛогироватьСобытие(ПараметрыЛогирования, Запрос, Ответ);
	
	ДанныеОтвета = Неопределено;
	Если ЭтоОтветУспех(Ответ.КодСостояния) Тогда
		СтруктураОтвета = ОтветСервисаВСтруктуру(Ответ);
		ДанныеОтвета =  СтруктураОтвета.ДанныеОтвета;
	Иначе
		ТекстСообщенияШаблон = НСтр("ru = 'Ошибка выполнения запроса к сервису.
								|Запрос: %1.
								|Код состояния: %2.
								|Описание ошибки:
								| %3'");
		ТекстСообщения = СтрШаблон(ТекстСообщенияШаблон, ВебСервис, Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
		ЗаписатьВЖурналРегистрацииОбмен(ТекстСообщения);
	КонецЕсли;
	
	Возврат ДанныеОтвета;
	
КонецФункции

Функция ДанныеПоСкладамДляПолученияОстатков()
	
	МассивСкладов = РегистрыСведений.гкс_ОстаткиТочекМаршрутаMFM.ТочкиМаршрутаДляПолученияОстатков();
	Если МассивСкладов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("IdWareHouses");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Для каждого Склад из МассивСкладов цикл
		ЗаписьJSON.ЗаписатьЗначение(Строка(Склад));
	КонецЦикла;
	ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ПодключениеКСервису 

Функция СоединениеКСервису(ВебСервис)
	
	Соединение = Неопределено;
	
	ИменаРеквизитовПодключения = "Сервер, Порт, Таймаут, ИспользоватьЗащищенноеСоединение";
	РеквизитыПодключения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВебСервис, ИменаРеквизитовПодключения);
	
	Попытка
		Схема = СхемаВебСервиса(РеквизитыПодключения.ИспользоватьЗащищенноеСоединение);
		Прокси = ПроксиСоединения(ВебСервис, Схема);
		Порт = ПортПоПротоколу(РеквизитыПодключения.Порт, Схема);
		ТаймаутРекомендация = 60;
		Таймаут = ?(РеквизитыПодключения.Таймаут = 0, ТаймаутРекомендация, РеквизитыПодключения.Таймаут);
		ЗащищенноеСоединение = 
			?(РеквизитыПодключения.ИспользоватьЗащищенноеСоединение, 
				ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(),
				Неопределено);
		Аутентификация = ЛогинПарольПользователя(ВебСервис);

		Соединение = Новый HTTPСоединение(РеквизитыПодключения.Сервер, Порт, 
			Аутентификация.Пользователь, Аутентификация.Пароль, 
			Прокси, Таймаут, ЗащищенноеСоединение, 
			Аутентификация.ИспользоватьАутентификациюОС);
	Исключение
		
		Инфо = ИнформацияОбОшибке();   
		СообщениеОшибка = ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо);
		ТекстОшибки = СтрШаблон("%1%2%3",
			НСтр("ru='Не удалось соединиться с сервером.'"), 
			Символы.ПС,СообщениеОшибка);
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрацииИнтеграция(),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;  
	
	Возврат Соединение;

КонецФункции

Функция РеквизитыВыполненияВебСервиса(ВебСервис)
	
	ИменаРеквизитов = Новый Структура();
	ИменаРеквизитов.Вставить("СтрокаЗапроса", "URL");
	ИменаРеквизитов.Вставить("ИмяМетода", "Метод");
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВебСервис, ИменаРеквизитов);
	
КонецФункции

Функция СформироватьПустуюСтрокуJSON()
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	
	ЗаписатьJSON(ЗаписьJSON, Новый Структура);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции    

Функция ЗапросКСервису(Соединение, СтрокаЗапроса, СтрокаJSON = Неопределено)
	
	Ресурс = СтрокаЗапроса;
	СтрокаАвторизации = СтрокаАвторизацииЗапроса(Соединение);
	Заголовки = ЗаголовокЗапроса(СтрокаАвторизации);
	
	Запрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	Если СтрокаJSON <> Неопределено Тогда
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
	КонецЕсли;
	
	Возврат Запрос;

КонецФункции    

Функция СтрокаАвторизацииЗапроса(ПараметрыПодключения)
	
	ИмяПользователя = ПараметрыПодключения.Пользователь;
	Пароль = ПараметрыПодключения.Пароль;
	
	ШаблонСтроки = "%1:%2";
	СтрокаАвторизации = СтрШаблон(ШаблонСтроки, ИмяПользователя, Пароль);
	ДвоичныеДанныеСтроки = 
		ПолучитьДвоичныеДанныеИзСтроки(СтрокаАвторизации, КодировкаТекста.UTF8, Ложь);
		
	Возврат 
		СтрШаблон("%1%2", "Basic " , ПолучитьBase64СтрокуИзДвоичныхДанных(ДвоичныеДанныеСтроки));
		
КонецФункции

Функция ЛогинПарольПользователя(ВебСервис)
	
	ИспользоватьАутентификациюОС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВебСервис,
		"ИспользоватьАутентификациюОС");
	
	Аутентификация = Новый Структура("ИспользоватьАутентификациюОС, Пользователь, Пароль",
		ИспользоватьАутентификациюОС, "", "");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяПароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ВебСервис, "ИмяПарольПользователя");
	
	Если ЗначениеЗаполнено(ИмяПароль) Тогда
		
		Аутентификация.Пользователь = ИмяПароль.ИмяПользователя;
		Аутентификация.Пароль = ИмяПароль.ПарольПользователя;
		
	КонецЕсли;
	
	Возврат Аутентификация;
	
КонецФункции

Функция ПортПоПротоколу(Порт, Протокол)
	
	ЗначениеПорта = Порт;
	Если Не ЗначениеЗаполнено(Порт) Тогда
		Кодhttps = 443;
		Кодhttp = 80;
		ЗначениеПорта = ?(Протокол = "https", Кодhttps, Кодhttp);
	КонецЕсли;
	
	Возврат ЗначениеПорта;
	
КонецФункции	

Функция ПроксиСоединения(ВебСервис, Схема)
	
	ИменаРеквизитовПодключения = "ИспользоватьПрокси, ПроксиСервер, ПроксиПорт";
	РеквизитыПодключения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВебСервис, ИменаРеквизитовПодключения);
	
	Если РеквизитыПодключения.ИспользоватьПрокси Тогда
		Прокси = Новый ИнтернетПрокси();
		Прокси.Установить(Схема, РеквизитыПодключения.ПроксиСервер, РеквизитыПодключения.ПроксиПорт, , , Истина);
	Иначе
		Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(Схема);
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Функция СхемаВебСервиса(ИспользоватьЗащищенноеСоединение)
	
	Возврат
		?(ИспользоватьЗащищенноеСоединение, "https", "http");
		
КонецФункции

Функция ЗаголовокЗапроса(СтрокаАвторизации)
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json"); // "application/json; charset=utf-8"
	Заголовки.Вставить("Authorization", СтрокаАвторизации);
	Заголовки.Вставить("Accept", "application/json"); // "application/json; charset=utf-8"
	
	Возврат Заголовки;

КонецФункции      

#КонецОбласти

#Область Логирование 

Функция НовыеПараметрыЛогирования(РесурсВебСервиса)
	
	ПараметрыЛогирования = Новый Структура();
	
	ПараметрыЛогирования.Вставить("РесурсВебСервиса", РесурсВебСервиса);
	ПараметрыЛогирования.Вставить("НачалоЗамера", гкс_ОбщегоНазначенияКлиентСервер.ПустаяДата());
	ПараметрыЛогирования.Вставить("Длительность", 0);
	
	Логировать = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РесурсВебСервиса, "Логировать");
	ПараметрыЛогирования.Вставить("Логировать", Логировать);
		
	Возврат ПараметрыЛогирования;
	
КонецФункции

Процедура НачатьЗамер(ПараметрыЛогирования)
	
	ПараметрыЛогирования.НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
КонецПроцедуры

Процедура ЗакончитьЗамер(ПараметрыЛогирования)
	
	ПараметрыЛогирования.Длительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - ПараметрыЛогирования.НачалоЗамера;
	
КонецПроцедуры

Процедура ЛогироватьСобытие(ПараметрыЛогирования, Запрос, Ответ, ТелоЗапроса = Неопределено)
	
	Если Не ПараметрыЛогирования.Логировать Тогда
		Возврат;
	КонецЕсли;
	
	СобытиеЛога = гкс_РаботаСВебСервисами.СобытиеЛога(ПараметрыЛогирования.РесурсВебСервиса);
	СобытиеЛога.КодСостояния = Ответ.КодСостояния;
	СобытиеЛога.Длительность = ПараметрыЛогирования.Длительность;  
	Если ПараметрыЛогирования.Свойство("Дата") Тогда
		СобытиеЛога.Дата = ПараметрыЛогирования.Дата;
	КонецЕсли;	
	
	ЗаголовокContentType = КоннекторHTTP.ЗначениеЗаголовка("content-type", Ответ.Заголовки);
	Если ЗаголовокContentType = Ложь Тогда
		ЗаголовокContentType = "";
	КонецЕсли;
	СобытиеЛога.ТипСодержимого = ЗаголовокContentType;
	
	МаксимальнаяСтепеньСжатия = 9;
	АлгоритмСжатия = Новый СжатиеДанных(МаксимальнаяСтепеньСжатия);
	
	ЗаполнитьХранилищеЗапроса(ТелоЗапроса, АлгоритмСжатия, СобытиеЛога);
	
	Тело = Ответ.ПолучитьТелоКакДвоичныеДанные();
	Если Тело <> Неопределено Тогда
		
		СтруктураОтвета = Новый Структура();
		СтруктураОтвета.Вставить("Кодировка", КодировкаТекста.UTF8);
		СтруктураОтвета.Вставить("Тело", Тело);
		СтруктураОтвета.Вставить("Заголовки", Ответ.Заголовки);
		
		ТелоОтветаВСтроке = КоннекторHTTP.КакТекст(СтруктураОтвета);
		Если ТипЗнч(ТелоОтветаВСтроке) = Тип("Строка") Тогда
			СобытиеЛога.ХранилищеОтвета = Новый ХранилищеЗначения(ТелоОтветаВСтроке, АлгоритмСжатия);
		КонецЕсли;
	
	КонецЕсли;
	
	Если ТипЗнч(Ответ.Заголовки) = Тип("Соответствие") Тогда 
		СобытиеЛога.ХранилищеЗаголовковОтвета = Новый ХранилищеЗначения(Ответ.Заголовки, АлгоритмСжатия);
	КонецЕсли;
	
	Если ТипЗнч(Запрос.Заголовки) = Тип("Соответствие") Тогда 
		СобытиеЛога.ХранилищеЗаголовковЗапроса = Новый ХранилищеЗначения(Запрос.Заголовки, АлгоритмСжатия);
	КонецЕсли;
	
	гкс_РаботаСВебСервисами.Логировать(СобытиеЛога);
	
КонецПроцедуры 

Процедура ЗаполнитьХранилищеЗапроса(ТелоЗапроса, АлгоритмСжатия, СобытиеЛога)
	
	Если ТелоЗапроса <> Неопределено Тогда
		
		Если ТипЗнч(ТелоЗапроса) = Тип("ДвоичныеДанные") Тогда
			ЗначениеТела = ПолучитьСтрокуИзДвоичныхДанных(ТелоЗапроса);
		Иначе
			// тип Строка
			ЗначениеТела = ТелоЗапроса;
		КонецЕсли;
		
		СобытиеЛога.ХранилищеЗапроса = Новый ХранилищеЗначения(ЗначениеТела, АлгоритмСжатия);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее  

// Преобразует HTTPОтвет сервиса в структуру.
// 
// Параметры:
//  ОтветСервиса - HTTPОтвет - Ответ сервиса
// 
// Возвращаемое значение:
//  Структура - структура ответа сервиса Умная логистика.
//
Функция ОтветСервисаВСтруктуру(ОтветСервиса)
	
	СтрокаJSON = ОтветСервиса.ПолучитьТелоКакСтроку();
	
	Если ПустаяСтрока(СтрокаJSON) Тогда
		СтрокаJSON = СформироватьПустуюСтрокуJSON();
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	СтруктураОтвета = Новый Структура();
	СтруктураОтвета.Вставить("ДанныеОтвета", ПрочитатьJSON(ЧтениеJSON));
	СтруктураОтвета.Вставить("КодСостояния", ОтветСервиса.КодСостояния);
	
	ЧтениеJSON.Закрыть();
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ЭтоОтветУспех(КодСостояния)
	
	КодыСостоянияHTTP = КоннекторHTTP.КодыСостоянияHTTP();
	
	Возврат КодСостояния >= КодыСостоянияHTTP.ОК_200
		И КодСостояния < КодыСостоянияHTTP.МножествоВыборов_300;
	
КонецФункции

Процедура ЗаписатьВЖурналРегистрацииОбмен(Комментарий, Данные = Неопределено, Ошибка = Истина)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Данные)) Тогда
		ОбъектМетаданных = Данные.Метаданные();
	Иначе
		ОбъектМетаданных = Метаданные.Справочники.гкс_РесурсыВебСервисов;
	КонецЕсли;
	
	Если Ошибка Тогда
		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
	Иначе
		УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрацииИнтеграция(),
		УровеньЖурнала,
		ОбъектМетаданных,
		Данные,
		Комментарий);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрацииИнтеграция()
	
	Возврат НСтр("ru = 'Интеграция. МФМ'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции  

#КонецОбласти

#КонецОбласти