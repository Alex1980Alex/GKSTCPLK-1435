////////////////////////////////////////////////////////////////////////////////
// Напоминания пользователя сервер (гкс): Функционал, который создает 
// напоминания по объектам перечисленные в определяемых типах "ПредметНапоминания" 
// и "ПредметНапоминанияОбъект". Настройки хранятся в регистре сведений
// "гкс_НастройкиНапоминанияПользователя".
// В этом модули только адаптация. Основной функционал взят из БСП 3.1 и 
// находится в типовых объектах конфигурации.
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Регистрирует новое напоминание пользователям. 
// 
// Параметры:
//  ОбъектСсылка - ОпределяемыеТипы.ПредметНапоминания - Ссылка на объект напоминания 
//	Состояние - ПеречислениеСсылка.гкс_СостоянияРегистрации, Неопределено  - состояние регистрации
//
Процедура ЗарегистрироватьНапоминаниеПользователя(ОбъектСсылка, Состояние = Неопределено) Экспорт
	
	Если Состояние = Неопределено Тогда
		Состояние = РегистрыСведений.гкс_СостоянияРегистрации.ТекущееСостояниеПоРегистрации(ОбъектСсылка);
	КонецЕсли;
	
	ПараметрыНапоминания = ПодготовитьПараметрыНапоминания(ОбъектСсылка, Состояние);
	
	НастройкиНапоминания = РегистрыСведений
	.гкс_НастройкиНапоминанияПользователя.ПолучитьНастройкиНапоминания(ПараметрыНапоминания.Идентификатор);
	
	Если Не ЗначениеЗаполнено(НастройкиНапоминания) Тогда 
		Возврат;
	КонецЕсли;
	
	ПроверитьНастройкиСоздатьНапоминания(ПараметрыНапоминания, НастройкиНапоминания);	

КонецПроцедуры 

// Заполняет параметры напоминания
// 
// Параметры:
//  ОбъектСсылка - ОпределяемыеТипы.ПредметНапоминания - Ссылка на объект напоминания 
//	Состояние - ПеречислениеСсылка.гкс_СостоянияРегистрации, Неопределено  - состояние регистрации
//
// Возвращаемое значение:
//  Структура - заполненную структуру напоминания.
//
Функция ПодготовитьПараметрыНапоминания(ОбъектСсылка, Состояние = Неопределено) Экспорт
    
    СтруктураНапоминания = СтруктураНапоминания(); 
	СтруктураНапоминания.Вставить("ОбъектСсылка", 		ОбъектСсылка);
	СтруктураНапоминания.Вставить("ПараметрПроверки", 	Состояние); 
	 
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектСсылка));
	ИдентификаторОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеОбъекта);
	
	СтруктураНапоминания.Вставить("Идентификатор", 		ИдентификаторОбъекта);
	СтруктураНапоминания.Вставить("СинонимДокумента", 	МетаданныеОбъекта.Синоним);
	
	Если ЗначениеЗаполнено(Состояние) Тогда		
		ИмяРеквизитаИсточника = ПреобразоватьСсылкуВСтрокуПоФормату(Состояние);
	Иначе 
		ИмяРеквизитаИсточника = "";
	КонецЕсли;	
	СтруктураНапоминания.Вставить("ИмяРеквизитаИсточника", 	ИмяРеквизитаИсточника);

    Возврат СтруктураНапоминания;
    
КонецФункции

// Возвращает структуру с настройками напоминания
// 
// Параметры:
//  Объект - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка идентификатора 
//
// Возвращаемое значение:
//  Структура - заполненные настройки напоминания.
//
Функция ПодготовитьНастройкиНапоминания(Объект) Экспорт
	
	Настройки = РегистрыСведений.гкс_НастройкиНапоминанияПользователя.ПолучитьНастройкиНапоминания(Объект);	
	
	Если ЗначениеЗаполнено(Настройки) Тогда
		СостоянияРегистрации 	= Настройки.СостоянияРегистрации;
		Получатель 				= Настройки.Получатель;
		ИнтервалВремени 		= Настройки.ИнтервалВремениНапоминания; 
	Иначе
		СостоянияРегистрации 	= Новый Массив;
		Получатель 				= Новый Массив;
		ИнтервалВремени 		= 0;
	КонецЕсли;
	
	НастройкиНапоминания 		= Новый Структура;
	НастройкиНапоминания.Вставить("Получатель", Получатель);
	НастройкиНапоминания.Вставить("СостоянияРегистрации", СостоянияРегистрации);
	НастройкиНапоминания.Вставить("Объект", Объект);
	НастройкиНапоминания.Вставить("ИнтервалВремениНапоминания", ИнтервалВремени);
	
	Возврат НастройкиНапоминания;
	
КонецФункции

// Возвращает список напоминаний пользователя.
//
// Параметры:
//	Пользователь - 
//  Предмет - ЛюбаяСсылка
//          - Массив - предмет или предметы напоминания.
//  ИмяРеквизита - Строка - уточняет предмет напоминания, например, "ДеньРождения".
//
// Возвращаемое значение:
//    Массив - коллекция напоминаний в виде структур с полями, соответствующими полям регистра сведений НапоминанияПользователя.
//
Функция НайтиНапоминанияПользователя(Пользователь, Знач Предмет = Неопределено, ИмяРеквизита = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НапоминанияПользователя.Пользователь КАК Пользователь,
	|	НапоминанияПользователя.ВремяСобытия КАК ВремяСобытия,
	|	НапоминанияПользователя.Источник КАК Источник,
	|	НапоминанияПользователя.СрокНапоминания КАК СрокНапоминания,
	|	НапоминанияПользователя.Описание КАК Описание,
	|	НапоминанияПользователя.СпособУстановкиВремениНапоминания КАК СпособУстановкиВремениНапоминания,
	|	НапоминанияПользователя.ИнтервалВремениНапоминания КАК ИнтервалВремениНапоминания,
	|	НапоминанияПользователя.ИмяРеквизитаИсточника КАК ИмяРеквизитаИсточника,
	|	НапоминанияПользователя.ПредставлениеИсточника КАК ПредставлениеИсточника,
	|	НапоминанияПользователя.Идентификатор КАК Идентификатор,
	|	НапоминанияПользователя.Расписание КАК Расписание
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	|ГДЕ
	|	НапоминанияПользователя.Пользователь = &Пользователь
	|	И &ОтборПоПредмету
	|	И &ОтборПоИмяРеквизита";
	
	ОтборПоПредмету = "ИСТИНА";
	Если ЗначениеЗаполнено(Предмет) Тогда
		ОтборПоПредмету = "НапоминанияПользователя.Источник В (&Предмет)";
	КонецЕсли;
	
	ОтборПоИмяРеквизита = "ИСТИНА";
	Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
		ОтборПоИмяРеквизита = "НапоминанияПользователя.ИмяРеквизитаИсточника = &ИмяРеквизитаИсточника";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоПредмету", ОтборПоПредмету);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоИмяРеквизита", ОтборПоИмяРеквизита);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("ИмяРеквизитаИсточника", ИмяРеквизита);
	
	ТаблицаНапоминаний = Запрос.Выполнить().Выгрузить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаНапоминаний);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру напоминания
//
// Возвращаемое значение:
//  Структура - структура напоминания.
//
Функция СтруктураНапоминания()
    
    СтруктураНапоминания = Новый Структура;
	
	СтруктураНапоминания.Вставить("ОбъектСсылка");
    СтруктураНапоминания.Вставить("ПараметрПроверки");
	СтруктураНапоминания.Вставить("Идентификатор");
	СтруктураНапоминания.Вставить("СинонимДокумента");
	СтруктураНапоминания.Вставить("ИмяРеквизитаИсточника");

    Возврат СтруктураНапоминания;
    
КонецФункции 

// Возвращает строку полученную из ссылки с нужным форматом. 
// Например: было "Качество принято", стало "КачествоПринято".
//
// Возвращаемое значение:
//  Строка - Сформированная строка из ссылки.
//
Функция ПреобразоватьСсылкуВСтрокуПоФормату(ЗначениеСсылка)
    
    ЗначениеСтрока 			= Строка(ЗначениеСсылка);	
	СтрокаЗаглБуквы 		= ТРег(ЗначениеСтрока);
	ФорматированнаяСтрока 	= СтрЗаменить(СтрокаЗаглБуквы, " ", "");

    Возврат ФорматированнаяСтрока;
    
КонецФункции

Процедура ПроверитьНастройкиСоздатьНапоминания(ПараметрыНапоминания, НастройкиНапоминания)
	
	ТипСсылки = ТипЗнч(ПараметрыНапоминания.ОбъектСсылка);
	
	Если ТипСсылки = Тип("ДокументСсылка.гкс_РегистрацияНаПЛК") Тогда
		
		Если ПроверитьСотояниеРегистрации(ПараметрыНапоминания.ПараметрПроверки, НастройкиНапоминания) Тогда
			
			ПараметрыНапоминания.Вставить("НомерТранспорта", ПараметрыНапоминания.ОбъектСсылка.ТранспортноеСредство);
			СозданиеНапоминанияПользователя(ПараметрыНапоминания, НастройкиНапоминания.Получатель, 
			НастройкиНапоминания.ИнтервалВремениНапоминания);	
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры

Функция ПроверитьСотояниеРегистрации(ПараметрПроверки, НастройкиНапоминания)
    
	МассивСостояний 	= НастройкиНапоминания.СостоянияРегистрации;	
	СостояниеНайдено 	= МассивСостояний.Найти(ПараметрПроверки);
	
    Возврат СостояниеНайдено <> Неопределено;
    
КонецФункции

Процедура СозданиеНапоминанияПользователя(ПараметрыНапоминания, МассивПолучатели, ИнтервалВремениНапоминания)
	
	Для Каждого ЭлементПолучатель Из МассивПолучатели Цикл
		
		Если ТипЗнч(ЭлементПолучатель) = Тип("СправочникСсылка.ГруппыДоступа") Тогда
			
			ПолучателиГруппыДоступа = ЭлементПолучатель.Пользователи.ВыгрузитьКолонку("Пользователь");
			СозданиеНапоминанияПользователя(ПараметрыНапоминания, ПолучателиГруппыДоступа, ИнтервалВремениНапоминания);			
		Иначе
			// ЭлементПолучатель - СправочникСсылка.Пользователи
			ПодключитьПроизвольноеНапоминание(ПараметрыНапоминания, ЭлементПолучатель, ИнтервалВремениНапоминания);			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПодключитьПроизвольноеНапоминание(ПараметрыНапоминания, Получатель, ИнтервалВремениНапоминания)
	
	Если ПроверитьСозданиеНапоминаниеПоКлючевымПолям(ПараметрыНапоминания, Получатель) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыНапоминания.Свойство("НомерТранспорта") И 
		ЗначениеЗаполнено(ПараметрыНапоминания.НомерТранспорта) Тогда
		
		ТекстТранспорта = СтрШаблон(" Транспорт №%1", ПараметрыНапоминания.НомерТранспорта);
	Иначе 
		ТекстТранспорта = "";	
	КонецЕсли;
		
	НомерДокумента 	= ПараметрыНапоминания.ОбъектСсылка.Номер;	
	ТекстШаблон 	= НСтр("ru = '%1 №%2%3 перешла в статус %4'", ОбщегоНазначения.КодОсновногоЯзыка());	
	Описание 		= СтрШаблон(ТекстШаблон, 
									ПараметрыНапоминания.СинонимДокумента, 
									НомерДокумента, 
									ТекстТранспорта, 
									ПараметрыНапоминания.ПараметрПроверки); 
		
	ДанныеНапоминания = Новый Структура;
	ДанныеНапоминания.Вставить("Пользователь", 						Получатель);
	ДанныеНапоминания.Вставить("Описание", 							Описание);	
	ДанныеНапоминания.Вставить("Источник", 							ПараметрыНапоминания.ОбъектСсылка);
	ДанныеНапоминания.Вставить("Идентификатор", 					ПараметрыНапоминания.Идентификатор);
	ДанныеНапоминания.Вставить("ИнтервалВремениНапоминания",		ИнтервалВремениНапоминания);
	ДанныеНапоминания.Вставить("ИмяРеквизитаИсточника",				ПараметрыНапоминания.ИмяРеквизитаИсточника);
	
	Напоминание = СоздатьНапоминание(ДанныеНапоминания);
	НапоминанияПользователяСлужебный.ПодключитьНапоминание(Напоминание);
	
КонецПроцедуры 

// Возвращает структуру нового напоминания для последующего подключения.
Функция СоздатьНапоминание(ПараметрыНапоминания)
	
	Напоминание = НапоминанияПользователяКлиентСервер.ОписаниеНапоминания(ПараметрыНапоминания, Истина);
	
	Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
	Напоминание.ВремяСобытия = ТекущаяДатаСеанса() + Напоминание.ИнтервалВремениНапоминания;
	Напоминание.СрокНапоминания = Напоминание.ВремяСобытия;
	Напоминание.ИнтервалВремениНапоминания = 0;
		
	Напоминание.Расписание = Новый ХранилищеЗначения(Напоминание.Расписание, Новый СжатиеДанных(9));
	
	Возврат Напоминание;
	
КонецФункции

Функция ПроверитьСозданиеНапоминаниеПоКлючевымПолям(ПараметрыНапоминания, Получатель)
	
	МассивНапминаний = НайтиНапоминанияПользователя(
						Получатель, 
						ПараметрыНапоминания.ОбъектСсылка, 
						ПараметрыНапоминания.ИмяРеквизитаИсточника);
	
	Если ЗначениеЗаполнено(МассивНапминаний) Тогда
		НеСоздавать = Истина;
	Иначе
		НеСоздавать = Ложь;
	КонецЕсли;
	
    Возврат НеСоздавать;
    
КонецФункции

#КонецОбласти
