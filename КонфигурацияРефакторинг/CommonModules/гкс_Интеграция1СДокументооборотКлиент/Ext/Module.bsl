////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль содержит дополнения клиентских методов для реализации задач текущей конфигурации
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Устанавливает параметры авторизации пользователя, если включено 
// использование сервиса авторизации
//
// Параметры:
// ИмяПользователя - Строка - строка для возврата имени пользователя
//
// Пароль - Строка - строка для возврата пароля
//
// Возвращаемое значение:
// Булево - Истина - авторизация успешно установлена, Ложь - не установлена
//
Функция УстановитьАвторизациюТекущегоПользователя(ИмяПользователя, Пароль) Экспорт

	Результат = Ложь;
	
	ДанныеАвторизации	= гкс_Интеграция1СДокументооборотВызовСервера.УстановитьАвторизациюТекущегоПользователя();
	Если ЗначениеЗаполнено(ДанныеАвторизации.Пользователь) 
		И ЗначениеЗаполнено(ДанныеАвторизации.Пароль) Тогда
		
		ИмяПользователя = ДанныеАвторизации.Пользователь;
		Пароль = ДанныеАвторизации.Пароль;
		
		Если ДанныеАвторизации.ЕстьПравоНаВывод Тогда
			ИнтеграцияС1СДокументооборотКлиент.СохранитьНастройкиАвторизации(
				ИмяПользователя,
				Пароль);
		КонецЕсли;
			
		ИнтеграцияС1СДокументооборотВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса();
	
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // УстановитьАвторизациюТекщегоПользователя()

// См. гкс_Интеграция1СДокументооборот.ПриОпределенииКомандПодключенныхКОбъекту
Процедура Подключаемый_ПрисоединенныеФайлы1СДокументоборот(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт 
	
	ОткрытьПрисоединенныеФайлы(ПараметрКоманды,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Форма.УникальныйИдентификатор);
	
КонецПроцедуры

// Открывает список файлов, присоединенных к объекту ИС.
//
// Параметры:
//   Источник - ЛюбаяСсылка - источник команды, объект ИС-владелец файлов.
//   Владелец - ФормаКлиентскогоПриложения - форма, из которой вызвана команда.
//   Уникальность - Произвольный - ключ уникальности, с которым должна быть открыта форма присоединенных файлов.
//   Окно - ОкноКлиентскогоПриложения - необязательный параметр, окно формы-владельца.
//
Процедура ОткрытьПрисоединенныеФайлы(Источник, Владелец = Неопределено, Уникальность = Неопределено,
		Окно = Неопределено) Экспорт

	ВладельцыФайла = гкс_Интеграция1СДокументооборотВызовСервера.ПолучитьВладельцевФайловПоТипуДокумента(Источник);	
			
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ПрисоединенныеФайлы", ВладельцыФайла,
		Владелец, Уникальность, Окно);
	
КонецПроцедуры

//
// Типовое начало создания файла из файла на диске дополнено параметром ОбщийВладелец.
// 
// Параметры:
//  УникальныйИдентификаторФормы - уникальный идентификатор управляемой формы объекта.
//  ID - Строка - идентификатор владельца файла в Документообороте.
//  Тип - тип XDTO владельца файла в Документообороте.
//  Представление - Строка - представление владельца файла.
//  Владелец - ЛюбаяСсылка - владелец файла.
//  ОбщийВладелец - ДокументСсылка, СправочникСсылка - служит для записи в РС.СвязиОбъектовИнтегрированныхПодсистем Документооборота
//  ОписаниеОповещения - Неопределено - - описание оповещения, вызываемого при успешном создании файла.
//  ЯвляетсяСканКопией - Булево - Является скан копией
//
Процедура СоздатьФайлСДиска(УникальныйИдентификаторФормы, ID, Тип, Представление,
	Владелец, ОбщийВладелец, ОписаниеОповещения = Неопределено, ЯвляетсяСканКопией = Ложь) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ID", ID);
	Параметры.Вставить("Тип", Тип);
	Параметры.Вставить("Представление", Представление);
	Параметры.Вставить("Владелец", Владелец);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("ЯвляетсяСканКопией", ЯвляетсяСканКопией);
	Параметры.Вставить("ПолныеИменаФайлов", Новый Массив);
	Параметры.Вставить("ПомещенныеФайлы", Новый Массив);
	Параметры.Вставить("ОбщийВладелец", ОбщийВладелец);
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения(
		"СоздатьФайлСДискаПослеПодключенияРасширения",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры));
	
КонецПроцедуры

// Проверяет подключение к 1С:Документообороту, при необходимости запрашивая имя пользователя и пароль.
//
// Параметры:
//
//   ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызываемого после проверки подключения с параметром
//     типа Булево, Истина - в случае удачного подключения и Ложь в противном случае.
//   ФормаВладелец - Неопределено, ФормаКлиентскогоПриложения - форма, в которой следует вызвать повторную попытку
//     подключения, Неопределено, если подключение следует выполнить синхронно без повторений.
//   ИмяОбработчика - Неопределено, Строка - имя процедуры модуля формы, содержащей обработчик повторной попытки, или
//     Неопределено, если подключение следует выполнить синхронно.
//   ПовторноПоказыватьОкноАвторизации - Булево - Истина, если при отсутствии подключения необходимо
//     повторно показать окно авторизации, даже если оно было показано ранее.
//
Процедура ПроверитьПодключение(ОписаниеОповещения, ФормаВладелец = Неопределено,
		ИмяОбработчика = Неопределено, ПовторноПоказыватьОкноАвторизации = Ложь) Экспорт
	
	// Если получение пароля не требуется, сразу инициируем подключение обращением к версии сервиса.
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ПарольИзвестен()
		Или ИнтеграцияС1СДокументооборотКлиентПовтИсп.ИспользуетсяАутентификацияОС() Тогда
		
		Таймаут = Неопределено;
		ВерсияСервиса = ИнтеграцияС1СДокументооборотВызовСервера.ВерсияСервиса(Таймаут);
		
		Если ВерсияСервиса = "" Тогда // версия неизвестна, в процессе получения фоновым заданием
			
			Если ФормаВладелец <> Неопределено И ИмяОбработчика <> Неопределено Тогда // асинхронно
				ФормаВладелец.ПодключитьОбработчикОжидания(ИмяОбработчика, 1, Истина)
				
			Иначе // синхронная проверка, ждем завершения фонового задания
				
				ДатаВремяВызова = ТекущаяДата(); // Использование оправдано: расчет длительности.
				Пока ВерсияСервиса = "" И ТекущаяДата() - ДатаВремяВызова < Таймаут Цикл // Использование оправдано: расчет длительности.
					ВерсияСервиса = ИнтеграцияС1СДокументооборотВызовСервера.ВерсияСервиса();
				КонецЦикла;
				
				Если ВерсияСервиса <> "" И ВерсияСервиса <> "0.0.0.0" Тогда // версия получена
					ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ВерсияСервиса <> "0.0.0.0" Тогда // версия получена
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
			Возврат;
			
		КонецЕсли;
		
		Если Не ПовторноПоказыватьОкноАвторизации Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
			Возврат;
		КонецЕсли;
		
	КонецЕсли; // пароль известен
	
	ИмяПользователя = Неопределено;
	Пароль = Неопределено;
	ПарольСохранен = Неопределено;
	ИспользуетсяАутентификацияОС = Ложь;
	
	ИнтеграцияС1СДокументооборотКлиент.ПрочитатьНастройкиАвторизации(ИмяПользователя, ПарольСохранен, Пароль, ИспользуетсяАутентификацияОС);
	
	ТекстСообщенияОбОшибке = "";
	Если ИспользуетсяАутентификацияОС Тогда // проверим подключение с аутентификацией ОС
		
		Если Не ИнтеграцияС1СДокументооборотВызовСервера.
				ПроверитьПодключение("", "", ТекстСообщенияОбОшибке, Истина) Тогда
			ИспользуетсяАутентификацияОС = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяПользователя <> Неопределено // проверим подключение с аутентификацией 1С:Предприятия
		И ПарольСохранен Тогда

		Если ИнтеграцияС1СДокументооборотВызовСервера.ПроверитьПодключение(
			ИмяПользователя,
			Пароль,
			ТекстСообщенияОбОшибке) Тогда
			ПовторноПоказыватьОкноАвторизации = Ложь;
		ИначеЕсли гкс_Интеграция1СДокументооборотКлиент.УстановитьАвторизациюТекущегоПользователя(
			ИмяПользователя, Пароль) Тогда
			ПовторноПоказыватьОкноАвторизации = Ложь;
			ПарольСохранен 					= Истина;
			ИспользуетсяАутентификацияОС	= Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользуетсяАутентификацияОС Тогда
		#Если ВебКлиент Тогда
		ИмяКомпьютера = Неопределено;
		#Иначе
		ИмяКомпьютера = ИмяКомпьютера();
		#КонецЕсли
		ИнтеграцияС1СДокументооборотВызовСервера.СохранитьНастройкиИспользованияАутентификацииОС(ИмяКомпьютера,
			Истина);
		
	Иначе
		
		// Предлагаем окно авторизации, лишь если из контекста вызова известно, что пользователь явно
		// инициировал обращение к функционалу ДО.
		Если ПовторноПоказыватьОкноАвторизации
				Или ((ИмяПользователя = Неопределено Или Не ПарольСохранен) И Не ИнтеграцияС1СДокументооборотКлиент.АвторизацияПредложена()) Тогда
			
			ИнтеграцияС1СДокументооборотКлиент.СохранитьАвторизацияПредложена();
			
			ПараметрыФормыАвторизации = Новый Структура;
			ПараметрыФормыАвторизации.Вставить("ИмяПользователя", ИмяПользователя);
			ПараметрыФормыАвторизации.Вставить("ПарольСохранен", ПарольСохранен);
			ПараметрыФормыАвторизации.Вставить("Пароль", Пароль);
			ПараметрыФормыАвторизации.Вставить("АвтоматическийВызовПриПроверкеПодключения", Истина);
			
			ПараметрыПроверкиПодключения = Новый Структура;
			ПараметрыПроверкиПодключения.Вставить("ФормаВладелец", ФормаВладелец);
			ПараметрыПроверкиПодключения.Вставить("ИмяОбработчика", ИмяОбработчика);
			ПараметрыПроверкиПодключения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодключениеПослеОкнаАвторизации", 
				ИнтеграцияС1СДокументооборотКлиент, ПараметрыПроверкиПодключения); //ЭтотОбъект, ПараметрыПроверкиПодключения);
			
			ФормаАвторизации = ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.АвторизацияВ1СДокументооборот", 
				ПараметрыФормыАвторизации,
				ФормаВладелец,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
			// В случае успешной аутентификации ОС форма не откроется.
			Если ФормаАвторизации = Неопределено Тогда
				ИспользуетсяАутентификацияОС = Истина;
				#Если ВебКлиент Тогда
				ИмяКомпьютера = Неопределено;
				#Иначе
				ИмяКомпьютера = ИмяКомпьютера();
				#КонецЕсли
				ИнтеграцияС1СДокументооборотВызовСервера.СохранитьНастройкиИспользованияАутентификацииОС(ИмяКомпьютера,
					Истина);
			Иначе // открылась форма авторизации
				Возврат; // с асинхронным продолжением после нажатия ОК.
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
		ИмяПользователя, Пароль, ИспользуетсяАутентификацияОС);
	
	// Случай, когда версия сервиса в параметрах сеанса установлена в 0.0.0.0 из-за недоступности
	// сервиса, а сейчас аутентификация ОС оказалась успешной. Получим версию заново.
	Если ИспользуетсяАутентификацияОС И ВерсияСервиса = "0.0.0.0" Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса();
	КонецЕсли;
	
	Таймаут = Неопределено;
	ВерсияСервиса = ИнтеграцияС1СДокументооборотВызовСервера.ВерсияСервиса(Таймаут);
	
	Если ВерсияСервиса = "" Тогда // в процессе получения версии фоновым заданием
		
		Если ФормаВладелец <> Неопределено И ИмяОбработчика <> Неопределено Тогда // асинхронно
			ФормаВладелец.ПодключитьОбработчикОжидания(ИмяОбработчика, 1, Истина);
			Возврат;
			
		Иначе // синхронная проверка, ждем завершения фонового задания
			
			ДатаВремяВызова = ТекущаяДата(); // Использование оправдано: расчет длительности.
			Пока ВерсияСервиса = "" И ТекущаяДата() - ДатаВремяВызова < Таймаут Цикл // Использование оправдано: расчет длительности.
				ВерсияСервиса = ИнтеграцияС1СДокументооборотВызовСервера.ВерсияСервиса();
			КонецЦикла;
			
			Если ВерсияСервиса <> "" И ВерсияСервиса <> "0.0.0.0" Тогда  // версия получена
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВерсияСервиса <> "0.0.0.0" Тогда  // версия получена
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	
КонецПроцедуры

#КонецОбласти 
