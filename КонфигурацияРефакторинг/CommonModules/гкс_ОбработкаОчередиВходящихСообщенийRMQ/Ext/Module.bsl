#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработатьОчередь(ПараметрыОбработки) Экспорт
	
	Перем ПакетСообщений, ПотокСобытий;
	
	ПараметрыОбработки.Свойство("ПакетСообщений", ПакетСообщений);
	ПараметрыОбработки.Свойство("ПотокСобытий", ПотокСобытий);
	
	ЭтоФайловаяБаза = гкс_ОбщегоНазначенияКлиентСервер.ИнформационнаяБазаФайловая();
	
	Если ЭтоФайловаяБаза Тогда		
		ОбработатьСообщенияОчереди(ПакетСообщений, ПотокСобытий);		
	Иначе
		ЗапуститьОбработкуСообщенийОчередиВОтдельномПотоке(ПакетСообщений, ПотокСобытий);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСообщенияОчереди(Знач ПакетСообщений = Неопределено, Знач ПотокСобытий = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыОбработки = ПараметрыОбработкиСообщенийИзОчереди(ПотокСобытий);

	Обработчик = Обработки.гкс_ОбработчикСообщенийRMQ.Создать();
	Обработчик.Инициализировать(ПараметрыОбработки);
	
	Если ЗначениеЗаполнено(ПакетСообщений) Тогда	
		// Для пакета сообщений не учитываем поток, даже если он передан
		// Считаем что пользователю важно обработать именно те сообщения, которые он явно передал	
		Обработчик.ОбработкаПакетаСообщенийRMQ(ПакетСообщений);		
	Иначе		
		Обработчик.ОбработатьСообщенияОчереди();		
	КонецЕсли;
	
	Обработчик = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗапуститьОбработкуСообщенийОчередиВОтдельномПотоке(ПакетСообщений, ПотокСобытий)

	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьПотокСобытияНаПериодЗапускаОбработкиСообщенийИзОчереди(ПотокСобытий);

		ПараметрыЗадания = Обработки.гкс_ОбработчикСообщенийRMQ.ПараметыМетодаОбработки(ПотокСобытий);

		Отбор = Новый Структура;
		Отбор.Вставить("Ключ", ПараметрыЗадания.Ключ);
		Отбор.Вставить("ИмяМетода", ПараметрыЗадания.ИмяМетода);
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);

		АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);

		Если АктивныеЗадания.Количество() = 0 Тогда

			ПараметрыМетода = Новый Массив;
			ПараметрыМетода.Добавить(ПакетСообщений);
			ПараметрыМетода.Добавить(ПотокСобытий);

			ФоновыеЗадания.Выполнить(ПараметрыЗадания.ИмяМетода, ПараметрыМетода, ПараметрыЗадания.Ключ,
				ПараметрыЗадания.Наименование);

		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПостояннаяЧастьСообщения = НСтр("ru='Произошла ошибка запуска обработки входящих сообщений: '");
		ТекстСообщения = ПостояннаяЧастьСообщения
		                 + Символы.ПС
		                 + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		                 
		ТекстСообщенияДляЖурнала = ПостояннаяЧастьСообщения
					               + Символы.ПС
					               + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке); 
		                 
		ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Ошибка,
		                           Метаданные.РегламентныеЗадания.гкс_ОбработкаОчередиВходящихСообщений,
		                           ТекстСообщенияДляЖурнала);

		ВызватьИсключение ТекстСообщения; 

	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаблокироватьПотокСобытияНаПериодЗапускаОбработкиСообщенийИзОчереди(ПотокСобытий)
	
	Если НЕ ЗначениеЗаполнено(ПотокСобытий) Тогда
		ПотокСобытий = Справочники.гкс_ПотокиСобытий.ОсновнойПотокПоУмолчанию();		
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить("Справочник.гкс_ПотокиСобытий");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ПотокСобытий);
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ЗаписатьВЖурналРегистрации(Уровень, ОбъектМетаданных, ТекстСообщения)
	
	ЗаписьЖурналаРегистрации("ИнтеграционныйАдаптер.ОбработкаОчередиВходящихСообщений",
	                         Уровень,
	                         ОбъектМетаданных,
	                         Неопределено,
	                         ТекстСообщения);
	
КонецПроцедуры

Функция ПараметрыОбработкиСообщенийИзОчереди(ПотокСобытий)
	
	ПараметрыОбработки = Новый Структура;
	
	Если ЗначениеЗаполнено(ПотокСобытий) Тогда
		ПараметрыОбработки.Вставить("ПотокСобытий", ПотокСобытий);
	КонецЕсли;
	
	Возврат ПараметрыОбработки;
	 
КонецФункции

#КонецОбласти