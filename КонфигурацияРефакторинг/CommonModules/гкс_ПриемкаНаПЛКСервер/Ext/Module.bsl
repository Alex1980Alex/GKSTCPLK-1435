#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - ФиксированнаяСтруктура - свойства документа (См. ПроведениеДокументов.СвойстваДокумента).
//
// Возвращаемое значение:
//  Структура - параметры учетного механизма (См. ПроведениеДокументов.ПараметрыУчетногоМеханизма()).
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = гкс_ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	ТипЗнчДокумента = ТипЗнч(Документ);
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
		Параметры.НезависимыеРегистры.Добавить(Метаданные.РегистрыСведений.гкс_СостоянияРегистрации);
		
		Если ТипЗнчДокумента = Тип("ДокументОбъект.гкс_УстановкаНастроекНазначенияРазгрузки") Тогда
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.гкс_НастройкиНазначенияРазгрузки);
		КонецЕсли;	
		
	КонецЕсли;
	
	Параметры.ЕстьПроизводныеДвижения = Истина;
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	гкс_ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "гкс_НастройкиНазначенияРазгрузки");
	
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
КонецПроцедуры

Процедура ПередЗаписьюДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗнчДокументаСсылка = ТипЗнч(Документ.Ссылка);
										
	ЭтоОтменаПроведенияДокумента = Документ.ДополнительныеСвойства.ПроведениеДокументов.
		СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;									
	
	ТипДокументовПриемки = гкс_ПриемкаТранспорта.ТипыДокументовПриемкиПЛК();
	
	Если ЭтоОтменаПроведенияДокумента И ТипДокументовПриемки.Найти(ТипЗнчДокументаСсылка) <> Неопределено Тогда 
		
		ДокументРегистрации = РегистрыСведений.гкс_СостоянияРегистрации.ДокументРегистрации(Документ.Ссылка);

		Набор = РегистрыСведений.гкс_СостоянияРегистрации.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(Документ.Дата);
		Набор.Отбор.ДокументРегистрации.Установить(ДокументРегистрации);
		
		Набор.Записать();

		РегистрыСведений.гкс_АРМПриемкиНаПЛКСписокРегистраций.ЗарегистрироватьВАРМПриемкиНаПЛК(
			ДокументРегистрации);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования движений по независимым регистрам основных средств.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Документ - ДокументСсылка - ссылка на документ
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ЗаписатьДанные(ТаблицыДляДвижений, Документ, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицыДляДвижений.Свойство("Таблицагкс_СостоянияРегистрации") Тогда
		
		СостоянияРегистрации = РегистрыСведений.гкс_СостоянияРегистрации;	
		ДокументРегистрации = СостоянияРегистрации.ДокументРегистрации(Документ);
		
		Если СостоянияРегистрации.УжеУбыл(ДокументРегистрации) Тогда
			Возврат;
		КонецЕсли;	
		
		Набор = СостоянияРегистрации.СоздатьНаборЗаписей();
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.гкс_ЛабораторныйАнализ") 
			И ЗначениеЗаполнено(Документ.гкс_ДатаПолученияАнализа) Тогда
			
			ДатаНабора = Документ.гкс_ДатаПолученияАнализа;
		Иначе
			ДатаНабора = Документ.Дата;
		КонецЕсли;	
			
		Набор.Отбор.Период.Установить(ДатаНабора);
		Набор.Отбор.ДокументРегистрации.Установить(ДокументРегистрации);
		Набор.Заполнить(Документ);
		
		Набор.Загрузить(ТаблицыДляДвижений["Таблицагкс_СостоянияРегистрации"]);
		
		Если СостоянияРегистрации.ВозможностьИзмененияСтатуса(Набор) Тогда
			Набор.Записать();		
			РегистрыСведений.гкс_АРМПриемкиНаПЛКСписокРегистраций.ЗарегистрироватьВАРМПриемкиНаПЛК(ДокументРегистрации);
			гкс_НапоминанияПользователяСервер.ЗарегистрироватьНапоминаниеПользователя(ДокументРегистрации);
		КонецЕсли;	 
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.гкс_Взвешивание") Тогда
		Если Не гкс_ПриемкаТранспорта.УстанавливатьСостояниеПоВзвешиванию(Документ) Тогда
			РегистрыСведений.гкс_АРМПриемкиНаПЛКСписокРегистраций.ЗарегистрироватьВАРМПриемкиНаПЛК(
				Документ.ДокументРегистрации);
			гкс_НапоминанияПользователяСервер.ЗарегистрироватьНапоминаниеПользователя(Документ.ДокументРегистрации);	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

// Возвращает вид перевозки по умолчанию для текущего пользователя.
//
// Параметры:
//  ТочкаМаршрута - СправочникСсылка.гкс_ТочкиМаршрута - ПЛК, для которого определяется вид перевозки по умолчанию
//
// Возвращаемое значение:
//  ПеречислениеСсылка.гкс_ТипыТранспортныхСредствДоставки - вид перевозки по умолчанию.
//
Функция ПолучитьВидПеревозкиПоУмолчанию(ТочкаМаршрута) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	МАКСИМУМ(НастройкиПользователейПриемкаНаПЛКСрезПоследних.Период) КАК Период,
		|	НастройкиПользователейПриемкаНаПЛКСрезПоследних.ВидПеревозки КАК ВидПеревозки
		|ИЗ
		|	РегистрСведений.гкс_НастройкиПользователейПриемкаНаПЛК.СрезПоследних(
		|			&ТекущаяДата,
		|			ТочкаМаршрута = &ТочкаМаршрута
		|				И Пользователь = &Пользователь) КАК НастройкиПользователейПриемкаНаПЛКСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	НастройкиПользователейПриемкаНаПЛКСрезПоследних.ВидПеревозки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ВидПеревозкиПоУмолчанию = ВыборкаДетальныеЗаписи.ВидПеревозки;
	Иначе
		ВидПеревозкиПоУмолчанию = Неопределено;
	КонецЕсли;
	
	Возврат ВидПеревозкиПоУмолчанию;

КонецФункции

// Возвращает список регистраций для включения в композитную пробу
//
// Параметры:
//   СтруктураПараметров - Структура - структура с отбором
//
// Возвращаемое значение:
//  ТаблицаЗначения - перечень документов регистраций.
//
Функция ПолучитьСписокРегистрацийВКомпозит(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РССостоянияРегистрации.ДокументРегистрации КАК ДокументРегистрации
	|ПОМЕСТИТЬ ВТ_СостоянияРегистрации
	|ИЗ
	|	РегистрСведений.гкс_СостоянияРегистрации.СрезПоследних(&КонецПериода, ТочкаМаршрута = &ТочкаМаршрута
	|	И ВидПеревозки = &ВидПеревозки
	|	И ТипРегистрации = &ТипРегистрацииПриемка
	|	И Состояние В (&СписокСостояний)
	|	И (Период МЕЖДУ &НачалоПериода И &КонецПериода)) КАК РССостоянияРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияРегистрации.ДокументРегистрации КАК ДокументРегистрации,
	|	МАКСИМУМ(ЕСТЬNULL(КомпозитныеПробы.КомпозитнаяПроба, &ФормированиеНомераПробыПустая)) КАК КомпозитнаяПроба,
	|	РегистрацияНаПЛК.ВесНетто КАК ВесНетто,
	|	ЕСТЬNULL(СвязьРегистрацииИТранспортногоДокумента.ТранспортныйДокумент, &ТранспортныйДокументПустая) КАК
	|		ТранспортныйДокумент,
	|	РегистрацияНаПЛК.ОтправительПолучатель КАК Грузоотправитель
	|ПОМЕСТИТЬ ВТ_СписокРегистраций
	|ИЗ
	|	ВТ_СостоянияРегистрации КАК СостоянияРегистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ПО СостоянияРегистрации.ДокументРегистрации = РегистрацияНаПЛК.Ссылка
	|		И (РегистрацияНаПЛК.Контрагент = &Контрагент)
	|		И (РегистрацияНаПЛК.Номенклатура = &Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_КомпозитныеПробы КАК КомпозитныеПробы
	|		ПО СостоянияРегистрации.ДокументРегистрации = КомпозитныеПробы.ДокументРегистрации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СвязьРегистрацииИТранспортногоДокумента КАК
	|			СвязьРегистрацииИТранспортногоДокумента
	|		ПО СостоянияРегистрации.ДокументРегистрации = СвязьРегистрацииИТранспортногоДокумента.ДокументРегистрации
	|СГРУППИРОВАТЬ ПО
	|	СостоянияРегистрации.ДокументРегистрации,
	|	РегистрацияНаПЛК.ВесНетто,
	|	ЕСТЬNULL(СвязьРегистрацииИТранспортногоДокумента.ТранспортныйДокумент, &ТранспортныйДокументПустая),
	|	РегистрацияНаПЛК.ОтправительПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияРегистрацииСрезПоследних.ДокументРегистрации КАК ДокументРегистрации,
	|	СостоянияРегистрацииСрезПоследних.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТ_КорректныеСостояния
	|ИЗ
	|	РегистрСведений.гкс_СостоянияРегистрации.СрезПоследних(&КонецПериода, ДокументРегистрации В
	|		(ВЫБРАТЬ
	|			Таб.ДокументРегистрации
	|		ИЗ
	|			ВТ_СписокРегистраций КАК Таб)) КАК СостоянияРегистрацииСрезПоследних
	|ГДЕ
	|	НЕ СостоянияРегистрацииСрезПоследних.Состояние В (&СостоянияНеПринято)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокРегистраций.ДокументРегистрации КАК ДокументРегистрации,
	|	ВТ_СписокРегистраций.КомпозитнаяПроба КАК КомпозитнаяПроба,
	|	ВТ_СписокРегистраций.ВесНетто КАК ВесНетто,
	|	ВТ_СписокРегистраций.Грузоотправитель КАК Грузоотправитель,
	|	ВТ_СписокРегистраций.ТранспортныйДокумент КАК ТранспортныйДокумент,
	|	ЕСТЬNULL(ДокТранспортныйДокумент.Отправитель, &КонтрагентыПустая) КАК Отправитель,
	|	ЕСТЬNULL(ДокТранспортныйДокумент.ПунктПогрузки, &ТочкаМаршрутаПустая) КАК ПунктПогрузки,
	|	ЕСТЬNULL(СпрТочкиМаршрута.КодСтанцииЖД, &КлассификаторСтанцийЖДПустая) КАК КодСтанцииЖДПогрузки,
	|	ЕСТЬNULL(ДокРегистрацияНаПЛК.ОтправительПолучатель, &КонтрагентыПустая) КАК ОтправительПолучатель,
	|	ЕСТЬNULL(ДокРегистрацияНаПЛК.ПунктПогрузки, &ТочкаМаршрутаПустая) КАК ПунктПогрузкиРегистрации
	|ПОМЕСТИТЬ ВТ_СписокРегистрацийКорректные
	|ИЗ
	|	ВТ_СписокРегистраций КАК ВТ_СписокРегистраций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КорректныеСостояния КАК ВТ_КорректныеСостояния
	|		ПО ВТ_СписокРегистраций.ДокументРегистрации = ВТ_КорректныеСостояния.ДокументРегистрации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ТранспортныйДокумент КАК ДокТранспортныйДокумент
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_ТочкиМаршрута КАК СпрТочкиМаршрута
	|			ПО ДокТранспортныйДокумент.ПунктПогрузки = СпрТочкиМаршрута.Ссылка
	|		ПО ВТ_СписокРегистраций.ТранспортныйДокумент = ДокТранспортныйДокумент.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК ДокРегистрацияНаПЛК
	|		ПО ВТ_СписокРегистраций.ДокументРегистрации = ДокРегистрацияНаПЛК.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокРегистрацийКорректные.ДокументРегистрации КАК ДокументРегистрации,
	|	МАКСИМУМ(НаправлениеНаРазгрузку.Ссылка) КАК ДокументНаРазгрузку,
	|	ВТ_СписокРегистрацийКорректные.КомпозитнаяПроба КАК КомпозитнаяПроба,
	|	ВТ_СписокРегистрацийКорректные.ВесНетто КАК ВесНетто,
	|	ВТ_СписокРегистрацийКорректные.Грузоотправитель КАК Грузоотправитель
	|ПОМЕСТИТЬ ВТ_НаправленияНаРазгрузку
	|ИЗ
	|	ВТ_СписокРегистрацийКорректные КАК ВТ_СписокРегистрацийКорректные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_НаправлениеНаРазгрузку КАК НаправлениеНаРазгрузку
	|		ПО ВТ_СписокРегистрацийКорректные.ДокументРегистрации = НаправлениеНаРазгрузку.ДокументРегистрации
	|		И (НаправлениеНаРазгрузку.СлужебнаяНоменклатура = &СлужебнаяНоменклатура)
	|ГДЕ
	|	ВТ_СписокРегистрацийКорректные.КомпозитнаяПроба = &ФормированиеНомераПробыПустая
	|	И ВЫБОР
	|		КОГДА &РежимГруппировки = ИСТИНА
	|			ТОГДА ВТ_СписокРегистрацийКорректные.ПунктПогрузкиРегистрации = &ПунктПогрузки
	|		КОГДА &ЭтоВидПеревозкиЖД
	|			ТОГДА ВТ_СписокРегистрацийКорректные.Грузоотправитель = &Грузоотправитель
	|			И ВТ_СписокРегистрацийКорректные.КодСтанцииЖДПогрузки = &СтанцияОтправления
	|		КОГДА &ЭтоВидПеревозкиАвто
	|			ТОГДА ВТ_СписокРегистрацийКорректные.Грузоотправитель = &Грузоотправитель
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СписокРегистрацийКорректные.ДокументРегистрации,
	|	ВТ_СписокРегистрацийКорректные.КомпозитнаяПроба,
	|	ВТ_СписокРегистрацийКорректные.ВесНетто,
	|	ВТ_СписокРегистрацийКорректные.Грузоотправитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НаправленияНаРазгрузку.ДокументРегистрации КАК ДокументРегистрации,
	|	ВТ_НаправленияНаРазгрузку.ВесНетто КАК ВесНетто
	|ИЗ
	|	ВТ_НаправленияНаРазгрузку КАК ВТ_НаправленияНаРазгрузку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_НаправлениеНаРазгрузку КАК ДокНаправлениеНаРазгрузку
	|		ПО ВТ_НаправленияНаРазгрузку.ДокументНаРазгрузку = ДокНаправлениеНаРазгрузку.Ссылка
	|ГДЕ
	|	ВЫБОР
	|		КОГДА &Силос = ЗНАЧЕНИЕ(Справочник.гкс_ТочкиМаршрута.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ДокНаправлениеНаРазгрузку.Склад = &Силос
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("ВидПеревозки", 			СтруктураПараметров.ВидПеревозки);
	Запрос.УстановитьПараметр("СписокСостояний", 		СтруктураПараметров.СписокСостояний);
	Запрос.УстановитьПараметр("ТочкаМаршрута", 			СтруктураПараметров.ТочкаМаршрута);
	Запрос.УстановитьПараметр("Номенклатура", 			СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Контрагент", 			СтруктураПараметров.Контрагент);
	Запрос.УстановитьПараметр("Силос", 					СтруктураПараметров.Силос);
	Запрос.УстановитьПараметр("НачалоПериода", 			СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 			СтруктураПараметров.КонецПериода);
	Запрос.УстановитьПараметр("Грузоотправитель", 		СтруктураПараметров.Грузоотправитель);
	Запрос.УстановитьПараметр("СтанцияОтправления", 	СтруктураПараметров.СтанцияОтправления);
	Запрос.УстановитьПараметр("СлужебнаяНоменклатура", 	СтруктураПараметров.СлужебнаяНоменклатура);
	
	// Установка параметров для группировки по пункту погрузки
	РежимГруппировки = 0;
	ПунктПогрузки = Неопределено;
	Если СтруктураПараметров.Свойство("РежимГруппировки", РежимГруппировки) И СтруктураПараметров.РежимГруппировки Тогда
		Запрос.УстановитьПараметр("РежимГруппировки", Истина);
	Иначе 
		Запрос.УстановитьПараметр("РежимГруппировки", Ложь);
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ПунктПогрузки", ПунктПогрузки) Тогда
		Запрос.УстановитьПараметр("ПунктПогрузки", ПунктПогрузки);
	КонецЕсли;
	
	
	ЭтоВидПеревозкиАвто = 
		(СтруктураПараметров.ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль);
	ЭтоВидПеревозкиЖД = 
		(СтруктураПараметров.ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт); 
	
	Запрос.УстановитьПараметр("ТранспортныйДокументПустая", 	Документы.гкс_ТранспортныйДокумент.ПустаяСсылка());
	Запрос.УстановитьПараметр("ФормированиеНомераПробыПустая", 	Документы.гкс_ФормированиеНомераПробы.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТочкаМаршрутаПустая", 			Справочники.гкс_ТочкиМаршрута.ПустаяСсылка());
	Запрос.УстановитьПараметр("КонтрагентыПустая", 				Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("КлассификаторСтанцийЖДПустая", 	Справочники.гкс_КлассификаторСтанцийЖД.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТипРегистрацииПриемка", 			Перечисления.гкс_ТипРегистрации.Приемка);
	Запрос.УстановитьПараметр("СостоянияНеПринято", 			СостоянияНеПринято());
	Запрос.УстановитьПараметр("ЭтоВидПеревозкиАвто", 			ЭтоВидПеревозкиАвто);
	Запрос.УстановитьПараметр("ЭтоВидПеревозкиЖД", 				ЭтоВидПеревозкиЖД); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаРегистраций = РезультатЗапроса.Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);

	Возврат ТаблицаРегистраций;
КонецФункции

// Записывает настройки для ПЛК по печати формирования проб
//
// Параметры:
//  НовыеНастройки - ТаблицаЗначений - новые настройки 
//  ТочкаМаршрута - СправочникСсылка.гкс_ТочкиМаршрута - ПЛК.
// 
Процедура УстановитьНастройкиПечатиФормированияПроб(НовыеНастройки, ТочкаМаршрута) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	НовыеНастройки.Колонки.Добавить("ТочкаМаршрута", Новый ОписаниеТипов("СправочникСсылка.гкс_ТочкиМаршрута"));
	НовыеНастройки.ЗаполнитьЗначения(ТочкаМаршрута, "ТочкаМаршрута");
	НаборЗаписей = РегистрыСведений.гкс_НастройкиПечатиФормированияПроб.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТочкаМаршрута.Установить(ТочкаМаршрута);
	НаборЗаписей.Загрузить(НовыеНастройки);
	НаборЗаписей.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры	

// Возвращает настройки для печати этикеток
//
// Параметры:
//  ТочкаМаршрута - СправочникСсылка.гкс_ТочкиМаршрута - ПЛК.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с настройками.
//
Функция ПолучитьТекущиеНастройкиПечатиФормированияПроб(ТочкаМаршрута) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПечати.ВидПеревозки КАК ВидПеревозки,
		|	НастройкиПечати.Номенклатура КАК Номенклатура,
		|	НастройкиПечати.ТипПробы КАК ТипПробы,
		|	НастройкиПечати.КоличествоЭтикеток КАК КоличествоЭтикеток,
		|	НастройкиПечати.ОбъемПробы КАК ОбъемПробы
		|ИЗ
		|	РегистрСведений.гкс_НастройкиПечатиФормированияПроб КАК НастройкиПечати
		|ГДЕ
		|	НастройкиПечати.ТочкаМаршрута = &ТочкаМаршрута";
	
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаНастроекПечати = РезультатЗапроса.Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ТаблицаНастроекПечати;
	
КонецФункции	

// Возвращает приращение для отступа от даты регистрации для определения даты начала поиска транспортного документа
// 
// Возвращаемое значение:
//  Число - приращение в днях.
//
Функция ПриращениеНачалаПодбораТранспортныхДокументов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат -1 * Константы.гкс_ИнтервалПодбораТранспортныхДокументов.Получить();
	
КонецФункции

// Возвращает первую яму разгрузки, удовлетворяющую отбору
//
// Параметры:
//  ТочкаМаршрута - ПеречислениеСсылка.СправочникСсылка.гкс_ТочкиМаршрута - ПЛК.
//  ВидПеревозки - ПеречислениеСсылка.гкс_ТипыТранспортныхСредствДоставки - Отбор по виду перевозки.
//  Номенклатура - СправочникСсылка.Номенклатура - Отбор по номенклатуре.
//  Силос - СправочникСсылка.гкс_ТочкиМаршрута - силос/склад.
// 
// Возвращаемое значение:
//  СправочникСсылка.гкс_ТочкиМаршрута - Первая яма разгрузки.
//
Функция ПолучитьЯмуРазгрузкиПриРучномИзмененииСклада(ПЛК, ВидПеревозки, Номенклатура, Силос) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиНазначенияРазгрузки.ЯмаРазгрузки КАК ЯмаРазгрузки
	|ИЗ
	|	РегистрСведений.гкс_НастройкиНазначенияРазгрузки.СрезПоследних(
	|			,
	|			ТочкаМаршрута = &ТочкаМаршрута
	|				И ВидПеревозки = &ВидПеревозки
	|				И Номенклатура = &Номенклатура) КАК НастройкиНазначенияРазгрузки
	|ГДЕ
	|	НастройкиНазначенияРазгрузки.Силос = &Силос
	|	И НастройкиНазначенияРазгрузки.Действует";
	
	Запрос.УстановитьПараметр("ТочкаМаршрута", ПЛК);
	Запрос.УстановитьПараметр("ВидПеревозки", ВидПеревозки);
    Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Силос", Силос);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ЯмаРазгрузки = ВыборкаДетальныеЗаписи.ЯмаРазгрузки;
	Иначе
		ЯмаРазгрузки = Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЯмаРазгрузки;
	
КонецФункции

// Возвращает пересечения по качественным показателя с другими документами с одинакавыми параметрами.
//
// Параметры:
//  СсылкаНаОбъект - ДокументОбъект.гкс_НормативнаяСертификацияНоменклатуры - нормативная сертификация номенклатуры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с пересечениями.
//
Функция ПолучитьПересекаемостьНормативныхПоказателейСерификации(СсылкаНаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормативнаяСертификацияНоменклатурыАнализы.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|	НормативнаяСертификацияНоменклатурыАнализы.МаксЗначениеПоказателя КАК МаксимальноеЗначение,
	|	НормативнаяСертификацияНоменклатурыАнализы.ПоказательАнализа КАК ПоказательАнализа,
	|	НормативнаяСертификацияНоменклатуры.Дата КАК ПериодС,
	|	ВЫБОР
	|		КОГДА НормативнаяСертификацияНоменклатуры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(2999, 1, 1)
	|		ИНАЧЕ НормативнаяСертификацияНоменклатуры.ДатаОкончания
	|	КОНЕЦ КАК ПериодПо,
	|	ИСТИНА КАК ЕстьПересечение
	|ПОМЕСТИТЬ ВТ_НовыйНабор
	|ИЗ
	|	Документ.гкс_НормативнаяСертификацияНоменклатуры КАК НормативнаяСертификацияНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_НормативнаяСертификацияНоменклатуры.Анализы КАК НормативнаяСертификацияНоменклатурыАнализы
	|		ПО НормативнаяСертификацияНоменклатуры.Ссылка = НормативнаяСертификацияНоменклатурыАнализы.Ссылка
	|ГДЕ
	|	НормативнаяСертификацияНоменклатуры.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_НовыйНабор.ПоказательАнализа КАК ПоказательАнализа
	|ПОМЕСТИТЬ ВТ_ПоказателиСертификации
	|ИЗ
	|	ВТ_НовыйНабор КАК ВТ_НовыйНабор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СегментацияКачестваНоменклатуры.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_ОсновнаяНоменклатура
	|ИЗ
	|	РегистрСведений.гкс_СегментацияКачестваНоменклатуры КАК СегментацияКачестваНоменклатуры
	|ГДЕ
	|	СегментацияКачестваНоменклатуры.СлужебнаяНоменклатура = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиНазначенияРазгрузки.СлужебнаяНоменклатура КАК СлужебнаяНоменклатура
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	ВТ_ОсновнаяНоменклатура КАК ВТ_ОсновнаяНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гкс_НастройкиНазначенияРазгрузки.СрезПоследних КАК НастройкиНазначенияРазгрузки
	|		ПО (НастройкиНазначенияРазгрузки.Номенклатура = ВТ_ОсновнаяНоменклатура.Номенклатура)
	|			И (НастройкиНазначенияРазгрузки.Действует)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыНормативнойСертификацииНоменклатуры.Регистратор КАК Регистратор,
	|	РезультатыНормативнойСертификацииНоменклатуры.ПоказательАнализа КАК ПоказательАнализа,
	|	РезультатыНормативнойСертификацииНоменклатуры.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|	РезультатыНормативнойСертификацииНоменклатуры.МаксимальноеЗначение КАК МаксимальноеЗначение,
	|	РезультатыНормативнойСертификацииНоменклатуры.Номенклатура КАК Номенклатура,
	|	РезультатыНормативнойСертификацииНоменклатуры.ПериодС КАК ПериодС,
	|	ВЫБОР
	|		КОГДА РезультатыНормативнойСертификацииНоменклатуры.ПериодПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(2999, 1, 1, 0, 0, 0)
	|		ИНАЧЕ РезультатыНормативнойСертификацииНоменклатуры.ПериодПо
	|	КОНЕЦ КАК ПериодПо
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	РегистрСведений.гкс_РезультатыНормативнойСертификацииНоменклатуры КАК РезультатыНормативнойСертификацииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО РезультатыНормативнойСертификацииНоменклатуры.Номенклатура = ВТ_Номенклатура.СлужебнаяНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоказателиСертификации КАК ВТ_ПоказателиСертификации
	|		ПО РезультатыНормативнойСертификацииНоменклатуры.ПоказательАнализа = ВТ_ПоказателиСертификации.ПоказательАнализа
	|ГДЕ
	|	РезультатыНормативнойСертификацииНоменклатуры.ТочкаМаршрута = &ТочкаМаршрута
	|	И РезультатыНормативнойСертификацииНоменклатуры.гкс_НазначениеИспользованияКачества = &НазначениеИспользованияКачества
	|	И РезультатыНормативнойСертификацииНоменклатуры.гкс_ВидПеревозки = &ВидПеревозки
	|	И РезультатыНормативнойСертификацииНоменклатуры.Регистратор <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Показатели.Номенклатура КАК Номенклатура,
	|	ВТ_Показатели.Регистратор КАК Регистратор,
	|	ВТ_Показатели.ПоказательАнализа КАК ПоказательАнализа,
	|	ЕСТЬNULL(ВТ_НовыйНабор.ЕстьПересечение, ЛОЖЬ) КАК ЕстьПересечение
	|ПОМЕСТИТЬ ВТ_ПоискПересечений
	|ИЗ
	|	ВТ_Показатели КАК ВТ_Показатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НовыйНабор КАК ВТ_НовыйНабор
	|		ПО ВТ_Показатели.ПоказательАнализа = ВТ_НовыйНабор.ПоказательАнализа
	|			И ВТ_Показатели.ЗначениеПоказателя <= ВТ_НовыйНабор.ЗначениеПоказателя
	|			И ВТ_Показатели.МаксимальноеЗначение >= ВТ_НовыйНабор.ЗначениеПоказателя
	|			И ВТ_Показатели.ПериодС <= ВТ_НовыйНабор.ПериодС
	|			И ВТ_Показатели.ПериодПо >= ВТ_НовыйНабор.ПериодС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Показатели.Номенклатура,
	|	ВТ_Показатели.Регистратор,
	|	ВТ_Показатели.ПоказательАнализа,
	|	ЕСТЬNULL(ВТ_НовыйНабор.ЕстьПересечение, ЛОЖЬ)
	|ИЗ
	|	ВТ_Показатели КАК ВТ_Показатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НовыйНабор КАК ВТ_НовыйНабор
	|		ПО ВТ_Показатели.ПоказательАнализа = ВТ_НовыйНабор.ПоказательАнализа
	|			И ВТ_Показатели.ЗначениеПоказателя <= ВТ_НовыйНабор.ЗначениеПоказателя
	|			И ВТ_Показатели.МаксимальноеЗначение >= ВТ_НовыйНабор.ЗначениеПоказателя
	|			И ВТ_Показатели.ПериодС <= ВТ_НовыйНабор.ПериодПо
	|			И ВТ_Показатели.ПериодПо >= ВТ_НовыйНабор.ПериодПо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Показатели.Номенклатура,
	|	ВТ_Показатели.Регистратор,
	|	ВТ_Показатели.ПоказательАнализа,
	|	ЕСТЬNULL(ВТ_НовыйНабор.ЕстьПересечение, ЛОЖЬ)
	|ИЗ
	|	ВТ_Показатели КАК ВТ_Показатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НовыйНабор КАК ВТ_НовыйНабор
	|		ПО ВТ_Показатели.ПоказательАнализа = ВТ_НовыйНабор.ПоказательАнализа
	|			И ВТ_Показатели.ЗначениеПоказателя <= ВТ_НовыйНабор.МаксимальноеЗначение
	|			И ВТ_Показатели.МаксимальноеЗначение >= ВТ_НовыйНабор.МаксимальноеЗначение
	|			И ВТ_Показатели.ПериодС <= ВТ_НовыйНабор.ПериодС
	|			И ВТ_Показатели.ПериодПо >= ВТ_НовыйНабор.ПериодС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Показатели.Номенклатура,
	|	ВТ_Показатели.Регистратор,
	|	ВТ_Показатели.ПоказательАнализа,
	|	ЕСТЬNULL(ВТ_НовыйНабор.ЕстьПересечение, ЛОЖЬ)
	|ИЗ
	|	ВТ_Показатели КАК ВТ_Показатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НовыйНабор КАК ВТ_НовыйНабор
	|		ПО ВТ_Показатели.ПоказательАнализа = ВТ_НовыйНабор.ПоказательАнализа
	|			И ВТ_Показатели.ЗначениеПоказателя <= ВТ_НовыйНабор.МаксимальноеЗначение
	|			И ВТ_Показатели.МаксимальноеЗначение >= ВТ_НовыйНабор.МаксимальноеЗначение
	|			И ВТ_Показатели.ПериодС <= ВТ_НовыйНабор.ПериодПо
	|			И ВТ_Показатели.ПериодПо >= ВТ_НовыйНабор.ПериодПо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоискПересечений.Номенклатура КАК Номенклатура,
	|	ВТ_ПоискПересечений.Регистратор КАК Регистратор,
	|	ВТ_ПоискПересечений.ПоказательАнализа КАК ПоказательАнализа,
	|	МАКСИМУМ(ВТ_ПоискПересечений.ЕстьПересечение) КАК ЕстьПересечение
	|ПОМЕСТИТЬ ВТ_РезультатПоискаПересечений
	|ИЗ
	|	ВТ_ПоискПересечений КАК ВТ_ПоискПересечений
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПоискПересечений.Номенклатура,
	|	ВТ_ПоискПересечений.Регистратор,
	|	ВТ_ПоискПересечений.ПоказательАнализа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_РезультатПоискаПересечений.Номенклатура КАК Номенклатура,
	|	ВТ_РезультатПоискаПересечений.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_РезультатСПересечениями
	|ИЗ
	|	ВТ_РезультатПоискаПересечений КАК ВТ_РезультатПоискаПересечений
	|ГДЕ
	|	ВТ_РезультатПоискаПересечений.ЕстьПересечение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_РезультатПоискаПересечений.Регистратор КАК Регистратор,
	|	ВТ_РезультатПоискаПересечений.Номенклатура КАК Номенклатура,
	|	ВТ_РезультатПоискаПересечений.ЕстьПересечение КАК ЕстьПересечение
	|ПОМЕСТИТЬ ВТ_РезультатБезПересечения
	|ИЗ
	|	ВТ_РезультатПоискаПересечений КАК ВТ_РезультатПоискаПересечений
	|ГДЕ
	|	НЕ ВТ_РезультатПоискаПересечений.ЕстьПересечение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РезультатСПересечениями.Номенклатура КАК Номенклатура,
	|	ВТ_РезультатСПересечениями.Регистратор КАК Регистратор
	|ИЗ
	|	ВТ_РезультатСПересечениями КАК ВТ_РезультатСПересечениями
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РезультатБезПересечения КАК ВТ_РезультатБезПересечения
	|		ПО ВТ_РезультатСПересечениями.Регистратор = ВТ_РезультатБезПересечения.Регистратор
	|			И ВТ_РезультатСПересечениями.Номенклатура = ВТ_РезультатБезПересечения.Номенклатура
	|ГДЕ
	|	ЕСТЬNULL(ВТ_РезультатБезПересечения.ЕстьПересечение, ИСТИНА)";
	
	Запрос.УстановитьПараметр("Номенклатура", СсылкаНаОбъект.Номенклатура);
	Запрос.УстановитьПараметр("Организация", СсылкаНаОбъект.Организация);
	Запрос.УстановитьПараметр("ТочкаМаршрута", СсылкаНаОбъект.ТочкаМаршрута);
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("НазначениеИспользованияКачества", СсылкаНаОбъект.гкс_НазначениеИспользованияКачества);
	Запрос.УстановитьПараметр("ВидПеревозки", СсылкаНаОбъект.гкс_ВидПеревозки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПеречислений = РезультатЗапроса.Выгрузить();

	УстановитьПривилегированныйРежим(Ложь);
	Возврат ТаблицаПеречислений;
	
КонецФункции

// Заполняет структуру доступов для работы в АРМе приемки и отгрузки на ПЛК.
//
// Параметры:
//  ОтборТочкаМаршрута - СправочникСсылка.гкс_ТочкиМаршрута - Отбор по ПЛК.
//  ОтборВидПеревозки - ПеречислениеСсылка.гкс_ТипыТранспортныхСредствДоставки - Отбор по виду перевозки.
//  Пользователь - СправочникСсылка.Пользователи - пользователь, для которого выполняется заполнение.
//  ЭтоПолноправныйПользователь - Булево - является ли пользователь полноправным.
// 
// Возвращаемое значение:
//  Структура - структура доступов.
//
Функция ПолучитьРолиНаПЛК(ОтборТочкаМаршрута, ОтборВидПеревозки, Пользователь, ЭтоПолноправныйПользователь) Экспорт
	
	СтруктураДоступов = ИнициализироватьСтруктуруДоступовПриемкаПЛК();
	
	ЭтоАдминистраторПЛК = гкс_ПриемкаТранспорта.ЭтоПользовательСРольюАдминистраторПЛК(Пользователь, 
	            Новый Структура("ТочкаМаршрута, ВидПеревозки", ОтборТочкаМаршрута, ОтборВидПеревозки));
	      
	Если ЭтоАдминистраторПЛК ИЛИ ЭтоПолноправныйПользователь Тогда
		
	    Для Каждого Элемент Из СтруктураДоступов Цикл
	        СтруктураДоступов[Элемент.Ключ] = Истина;
	    КонецЦикла;	
	    	
		Возврат СтруктураДоступов;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыДоступов = Новый Структура;
	ПараметрыДоступов.Вставить("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	ПараметрыДоступов.Вставить("ТекущийПользователь", Пользователь);
	ПараметрыДоступов.Вставить("ТочкаМаршрута", ОтборТочкаМаршрута);
	ПараметрыДоступов.Вставить("ВидПеревозки", ОтборВидПеревозки);

	ВсеДоступы = РегистрыСведений.гкс_НастройкиПользователейПриемкаНаПЛК.ВсеДоступыПользователяПоПараметрам(ПараметрыДоступов);
	Если ЗначениеЗаполнено(ВсеДоступы) Тогда	
		ЗаполнитьЗначенияСвойств(СтруктураДоступов, ВсеДоступы);
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураДоступов;
	
КонецФункции

// Инициализирует структуру доступов для работы в АРМе приемки и отгрузки на ПЛК.
//
// Возвращаемое значение:
//  Структура - пустая структура доступов.
//
Функция ИнициализироватьСтруктуруДоступовПриемкаПЛК() Экспорт
	
	СтруктураДоступов = Новый Структура();
	
	СтруктураДоступов.Вставить("ДоступенРегистрация", Ложь);
	СтруктураДоступов.Вставить("ДоступенВзвешиваниеНаВъезде", Ложь);
	СтруктураДоступов.Вставить("ДоступенВзвешиваниеНаВыезде", Ложь);
	СтруктураДоступов.Вставить("ДоступенОтборПроб", Ложь);
	СтруктураДоступов.Вставить("ДоступенЛабАнализ", Ложь);
	СтруктураДоступов.Вставить("ДоступенДиспетчер", Ложь);
	СтруктураДоступов.Вставить("ДоступенПодтверждениеРазгрузки", Ложь);
	СтруктураДоступов.Вставить("ДоступенПереносВЭлектроннойОчереди", Ложь);
	СтруктураДоступов.Вставить("ДоступенОформлениеПриемки", Ложь);
	СтруктураДоступов.Вставить("ДоступенНастройкаНазначениеЯмРазгрузки", Ложь);
	СтруктураДоступов.Вставить("ДоступенРазблокироватьРегистрацию", Ложь);
	СтруктураДоступов.Вставить("ДоступенПринятиеПроб", Ложь);	
	
	СтруктураДоступов.Вставить("ДоступенДопускФумигационный", 
	                           РольДоступна("гкс_ВозможностьМенятьДопускФумигационныйВАРМеПриемкиНаПЛК"));
							   
	СтруктураДоступов.Вставить("ДоступенДопускФитосанитарный", 
	                           РольДоступна("гкс_ВозможностьМенятьДопускФитосанитарныйВАРМеПриемкиНаПЛК"));
							   
	СтруктураДоступов.Вставить("ДоступенДопускПретензионный", 
	                           РольДоступна("гкс_ВозможностьМенятьДопускПретензионныйВАРМеПриемкиНаПЛК"));
					   
	 СтруктураДоступов.Вставить("ДоступенДопускаКВскрытиюВагонов",  
	                            СтруктураДоступов.ДоступенДопускФумигационный 
								ИЛИ СтруктураДоступов.ДоступенДопускФитосанитарный 
								ИЛИ СтруктураДоступов.ДоступенДопускПретензионный);
								
	Возврат СтруктураДоступов;
	
КонецФункции

// Проверяет является ли пользователь администратором на ПЛК в АРМе приемки и отгрузки на ПЛК. 
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, для которого делается проверка.
//  ТочкаМаршрута - СправочникСсылка.гкс_ТочкиМаршрута - Отбор по ПЛК.
//  ВидПеревозки - ПеречислениеСсылка.гкс_ТипыТранспортныхСредствДоставки - Отбор по виду перевозки.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - перечень ПЛК, на которых пользователь является администратором.
//
Функция ЭтоАдминистраторНаПЛК(Пользователь, ТочкаМаршрута = Неопределено, ВидПеревозки = Неопределено) Экспорт
	
	АдминистраторНаПЛК = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПользователей.ТочкаМаршрута КАК ТочкаМаршрута
	|ИЗ
	|	РегистрСведений.гкс_НастройкиПользователейПриемкаНаПЛК.СрезПоследних(
	|			&ТекущаяДатаСеанса,
	|			//ТочкаМаршрута = &ТочкаМаршрута И
	|			//ВидПеревозки = &ВидПеревозки И
	|			Пользователь = &ТекущийПользователь
	|				И РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.АдминистраторНаПЛК)) КАК НастройкиПользователей
	|ГДЕ
	|	НЕ НастройкиПользователей.Отключен";
	
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь);
	
	Если ЗначениеЗаполнено(ТочкаМаршрута) Тогда
		Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ТочкаМаршрута", "ТочкаМаршрута");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПеревозки) Тогда
		Запрос.УстановитьПараметр("ВидПеревозки", ВидПеревозки);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВидПеревозки", "ВидПеревозки");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ДоступныеТочкиМаршрута = Неопределено;
	Иначе
		ДоступныеТочкиМаршрута = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДоступныеТочкиМаршрута;
КонецФункции

// Возвращает превую спецификацию удовлетворяющую отбору.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Отбор по организации.
//  Контрагент - СправочникСсылка.Контрагенты - Отбор по Контрагенту.
//  Номенклатура - СправочникСсылка.Номенклатура - Отбор по Номенклатуре.
// 
// Возвращаемое значение:
//  ДокументСсылка.гкс_СпецификацияКДоговоруКонтрагента - первая подходящая спецификация.
//
Функция ПолучитьПроизвольнуюСпецификацию(Организация, Контрагент, Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦБТ_СпецификацияКДоговоруКонтрагента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.гкс_СпецификацияКДоговоруКонтрагента КАК ЦБТ_СпецификацияКДоговоруКонтрагента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_СпецификацияКДоговоруКонтрагента.Товары КАК ЦБТ_СпецификацияКДоговоруКонтрагентаТовары
	|		ПО ЦБТ_СпецификацияКДоговоруКонтрагента.Ссылка = ЦБТ_СпецификацияКДоговоруКонтрагентаТовары.Ссылка
	|ГДЕ
	|	ЦБТ_СпецификацияКДоговоруКонтрагента.Организация = &Организация
	|	И ЦБТ_СпецификацияКДоговоруКонтрагента.Контрагент = &Контрагент
	|	И ЦБТ_СпецификацияКДоговоруКонтрагента.Проведен
	|	И ЦБТ_СпецификацияКДоговоруКонтрагента.Статус = Значение(Перечисление.гкс_СтатусыСпецификацийКДоговорамКонтрагентов.Действует)
	|	И ЦБТ_СпецификацияКДоговоруКонтрагентаТовары.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦБТ_СпецификацияКДоговоруКонтрагента.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Спецификация = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Спецификация = Неопределено;
	КонецЕсли;
	
	Возврат Спецификация;
	
КонецФункции

// Возвращает список регистраций у которых не сформирован ЗПП
//
// Параметры:
//   КомпозитнаяПроба - ДокументСсылка.гкс_ФормированиеНомераПроб - Композитная проба
//   ЛабораторныйАнализ - ДокументСсылка.гкс_ЛабораторныйАнализ - Лабораторный анализ
//
// Возвращаемое значение:
//  ТаблицаРегистраций - ТаблицаЗначения - перечень документов регистраций.
//
Функция ПолучитьСписокРегистрацийБезЗПП(КомпозитнаяПроба, ЛабораторныйАнализ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФормированиеНомераПробы.ДокументРегистрации КАК ДокументРегистрации
	|ПОМЕСТИТЬ ВТ_СписокРегистрацийКомпозит
	|ИЗ
	|	Документ.гкс_ФормированиеНомераПробы.СписокРегистраций КАК ФормированиеНомераПробы
	|ГДЕ
	|	ФормированиеНомераПробы.Ссылка = &КомпозитнаяПроба
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(РеестрНакладных.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Реестр
	|ИЗ
	|	Документ.гкс_РеестрНакладныхЗПП3 КАК РеестрНакладных
	|ГДЕ
	|	РеестрНакладных.Анализ = &ЛабораторныйАнализ
	|	И НЕ РеестрНакладных.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеестрНакладныхНакладные.ДокументРегистрации КАК ДокументРегистрации
	|ПОМЕСТИТЬ ВТ_СписокРегистрацийРеестр
	|ИЗ
	|	ВТ_Реестр КАК ВТ_Реестр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_РеестрНакладныхЗПП3.Накладные КАК РеестрНакладныхНакладные
	|		ПО ВТ_Реестр.Ссылка = РеестрНакладныхНакладные.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокРегистрацийКомпозит.ДокументРегистрации КАК ДокументРегистрации,
	|	ЕСТЬNULL(ВТ_СписокРегистрацийРеестр.ДокументРегистрации, НЕОПРЕДЕЛЕНО) КАК ДокументРегистрацииВРеестре
	|ИЗ
	|	ВТ_СписокРегистрацийКомпозит КАК ВТ_СписокРегистрацийКомпозит
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокРегистрацийРеестр КАК ВТ_СписокРегистрацийРеестр
	|		ПО ВТ_СписокРегистрацийКомпозит.ДокументРегистрации = ВТ_СписокРегистрацийРеестр.ДокументРегистрации
	|ГДЕ
	|	ЕСТЬNULL(ВТ_СписокРегистрацийРеестр.ДокументРегистрации, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("КомпозитнаяПроба", КомпозитнаяПроба);
	Запрос.УстановитьПараметр("ЛабораторныйАнализ", ЛабораторныйАнализ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаРегистраций = РезультатЗапроса.Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаРегистраций;

КонецФункции

// Получает таблицу значений показаний взвешивания для списка документов РегистрацияНаПЛК
//
// Параметры:
//  ДокументыРегистрации  - Массив - документы гкс_РегистрацияНаПЛК
//                 
//  УникальныйИдентификаторФормы  - УникальныйИдентификатор - идентификатор вызывающей формы 
//
// Возвращаемое значение:
//   Строка   - адрес во временном хранилище
//
Функция ПоказанияВесовДляСпискаРегистраций(ДокументыРегистрации, УникальныйИдентификаторФормы, 
		ПересчитыватьВТонны = Истина) Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегистрацияНаПЛК.Ссылка КАК Ссылка,
	|	РегистрацияНаПЛК.ЕдиницаИзмеренияВеса КАК ЕдиницаИзмеренияВеса,
	|	РегистрацияНаПЛК.ТипРегистрации КАК ТипРегистрации
	|ПОМЕСТИТЬ ВТ_ДокументыРегистрации
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|ГДЕ
	|	РегистрацияНаПЛК.Ссылка В (&СписокДокументовРегистрации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыРегистрации.Ссылка КАК ДокументРегистрации,
	|	ДокументыРегистрации.ЕдиницаИзмеренияВеса КАК ЕдиницаИзмеренияВеса,
	|	СУММА(ВЫБОР
	|		КОГДА ДокументыРегистрации.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка)
	|		И ЕСТЬNULL(Взвешивание.ТипВзвешивания, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Въезд)
	|			ТОГДА ЕСТЬNULL(Взвешивание.Вес, 0)
	|		КОГДА ДокументыРегистрации.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Отгрузка)
	|		И ЕСТЬNULL(Взвешивание.ТипВзвешивания, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Выезд)
	|			ТОГДА ЕСТЬNULL(Взвешивание.Вес, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК Брутто,
	|	СУММА(ВЫБОР
	|		КОГДА ДокументыРегистрации.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка)
	|		И ЕСТЬNULL(Взвешивание.ТипВзвешивания, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Выезд)
	|			ТОГДА ЕСТЬNULL(Взвешивание.Вес, 0)
	|		КОГДА ДокументыРегистрации.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Отгрузка)
	|		И ЕСТЬNULL(Взвешивание.ТипВзвешивания, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Въезд)
	|			ТОГДА ЕСТЬNULL(Взвешивание.Вес, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК Тара
	|ИЗ
	|	ВТ_ДокументыРегистрации КАК ДокументыРегистрации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_Взвешивание КАК Взвешивание
	|		ПО (Взвешивание.ДокументРегистрации = ДокументыРегистрации.Ссылка)
	|		И (Взвешивание.Проведен)
	|СГРУППИРОВАТЬ ПО
	|	ДокументыРегистрации.Ссылка,
	|	ДокументыРегистрации.ЕдиницаИзмеренияВеса";
	
	Запрос.УстановитьПараметр("СписокДокументовРегистрации", ДокументыРегистрации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДанных = Новый Структура();
	ТаблицаДанных = НовыйТаблицаРегистраций();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ЕдиницаТонна = гкс_ПриемкаТранспортаПовтИсп.ПолучитьЕдиницуИзмеренияТранспортногоДокумента();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ПересчитыватьВТонны Тогда
				Коэффициент = гкс_ПриемкаТранспортаПовтИсп.ПолучитьКоэффициентПересчетаЕдиниц(
					Выборка.ЕдиницаИзмеренияВеса, ЕдиницаТонна);
			Иначе
				Коэффициент = 1;	
			КонецЕсли;		
			
			СтрокаТаблицы = ТаблицаДанных.Добавить(); 
			
			СтрокаТаблицы.ДокументРегистрации = Выборка.ДокументРегистрации;
			СтрокаТаблицы.Брутто = Коэффициент * Выборка.Брутто;
			СтрокаТаблицы.Тара = Коэффициент * Выборка.Тара;
			Если СтрокаТаблицы.Брутто > 0 И СтрокаТаблицы.Тара > 0 Тогда
				СтрокаТаблицы.Нетто = СтрокаТаблицы.Брутто - СтрокаТаблицы.Тара;
			КонецЕсли;	
			
		КонецЦикла;
		
		// Заполним возвращаемую структуру
		СтруктураДанных.Вставить("ЗначенияВесовРегистраций", ТаблицаДанных);
		СтруктураДанных.Вставить("Успешно", Истина);
		
	Иначе	
		СтруктураДанных.Вставить("Успешно", Ложь);
	КонецЕсли;
		
	Возврат ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификаторФормы);

КонецФункции

// Получает показания взвешивания для документа РегистрацияНаПЛК
//
// Параметры:
//  ДокументыРегистрации  - ДокументСсылка.гкс_РегистрацияНаПЛК - документ регистрации
//
//  ПересчитыватьВТонны  - Булево - перечситывать результаты веса в тонны
//
// Возвращаемое значение:
//   Структура  - структура с информацией о весах по регистрации
//
Функция ПоказанияВесовПоРегистрации(ДокументРегистрации, ПересчитыватьВТонны = Ложь) Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Взвешивание.ДокументРегистрации КАК Регистрация,
	|	ВЫБОР
	|		КОГДА Взвешивание.ТипВзвешивания = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Въезд)
	|			ТОГДА Взвешивание.Дата
	|	КОНЕЦ КАК ДатаВъезда,
	|	ВЫБОР
	|		КОГДА Взвешивание.ТипВзвешивания = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Выезд)
	|			ТОГДА Взвешивание.Дата
	|	КОНЕЦ КАК ДатаВыезда,
	|	ВЫБОР
	|		КОГДА Взвешивание.ТипВзвешивания = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Въезд)
	|			ТОГДА Взвешивание.Вес
	|	КОНЕЦ КАК ВесВъезда,
	|	ВЫБОР
	|		КОГДА Взвешивание.ТипВзвешивания = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Выезд)
	|			ТОГДА Взвешивание.Вес
	|	КОНЕЦ КАК ВесВыезда
	|ПОМЕСТИТЬ ВТ_Взвешивание
	|ИЗ
	|	Документ.гкс_Взвешивание КАК Взвешивание
	|ГДЕ
	|	Взвешивание.ДокументРегистрации = &Регистрация
	|	И Взвешивание.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Взвешивание.Регистрация КАК Регистрация,
	|	РегистрацияНаПЛК.ТипРегистрации КАК ТипРегистрации,
	|	МАКСИМУМ(ВТ_Взвешивание.ДатаВъезда) КАК ДатаВъезда,
	|	МАКСИМУМ(ВТ_Взвешивание.ДатаВыезда) КАК ДатаВыезда
	|ПОМЕСТИТЬ ВТ_ДатыВзвешивания
	|ИЗ
	|	ВТ_Взвешивание КАК ВТ_Взвешивание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ПО ВТ_Взвешивание.Регистрация = РегистрацияНаПЛК.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Взвешивание.Регистрация,
	|	РегистрацияНаПЛК.ТипРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_ДатыВзвешивания.Регистрация КАК Регистрация,
	|	МАКСИМУМ(ВТ_ДатыВзвешивания.ДатаВъезда) КАК ДатаВъезда,
	|	МАКСИМУМ(ВТ_ДатыВзвешивания.ДатаВыезда) КАК ДатаВыезда,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДатыВзвешивания.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка)
	|				ТОГДА ЕСТЬNULL(ВТ_ВзвешиваниеВъезда.ВесВъезда, 0)
	|			КОГДА ВТ_ДатыВзвешивания.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Отгрузка)
	|				ТОГДА ЕСТЬNULL(ВТ_ВзвешиваниеВыезда.ВесВыезда, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БруттоФакт,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДатыВзвешивания.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка)
	|				ТОГДА ЕСТЬNULL(ВТ_ВзвешиваниеВыезда.ВесВыезда, 0)
	|			КОГДА ВТ_ДатыВзвешивания.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Отгрузка)
	|				ТОГДА ЕСТЬNULL(ВТ_ВзвешиваниеВъезда.ВесВъезда, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТараФакт
	|ПОМЕСТИТЬ ВТ_ВесаФакт
	|ИЗ
	|	ВТ_ДатыВзвешивания КАК ВТ_ДатыВзвешивания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Взвешивание КАК ВТ_ВзвешиваниеВъезда
	|		ПО ВТ_ДатыВзвешивания.ДатаВъезда = ВТ_ВзвешиваниеВъезда.ДатаВъезда
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Взвешивание КАК ВТ_ВзвешиваниеВыезда
	|		ПО ВТ_ДатыВзвешивания.ДатаВыезда = ВТ_ВзвешиваниеВыезда.ДатаВыезда
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДатыВзвешивания.Регистрация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Взвешивание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДатыВзвешивания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрацияНаПЛК.ТипРегистрации КАК ТипРегистрации,
	|	РегистрацияНаПЛК.ЕдиницаИзмеренияВеса КАК ЕдиницаИзмеренияВеса,
	|	РегистрацияНаПЛК.ВесБрутто КАК БруттоДок,
	|	РегистрацияНаПЛК.ВесНетто КАК НеттоДок,
	|	РегистрацияНаПЛК.ВесТары КАК ТараДок,
	|	ЕСТЬNULL(ВТ_ВесаФакт.ДатаВъезда, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВъезда,
	|	ЕСТЬNULL(ВТ_ВесаФакт.ДатаВыезда, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВыезда,
	|	ЕСТЬNULL(ВТ_ВесаФакт.БруттоФакт, 0) КАК БруттоФакт,
	|	ЕСТЬNULL(ВТ_ВесаФакт.ТараФакт, 0) КАК ТараФакт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_ВесаФакт.БруттоФакт, 0) > 0
	|				И ЕСТЬNULL(ВТ_ВесаФакт.ТараФакт, 0) > 0
	|			ТОГДА ВТ_ВесаФакт.БруттоФакт - ВТ_ВесаФакт.ТараФакт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НеттоФакт
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВесаФакт КАК ВТ_ВесаФакт
	|		ПО (ВТ_ВесаФакт.Регистрация = РегистрацияНаПЛК.Ссылка)
	|ГДЕ
	|	РегистрацияНаПЛК.Ссылка = &Регистрация";
	
	Запрос.УстановитьПараметр("Регистрация", ДокументРегистрации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ТипРегистрации");
	СтруктураДанных.Вставить("ЕдиницаИзмеренияВеса");
	СтруктураДанных.Вставить("ДатаВъезда");
	СтруктураДанных.Вставить("ДатаВыезда");
    СтруктураДанных.Вставить("БруттоФакт", 0);
	СтруктураДанных.Вставить("БруттоДок", 0);	
    СтруктураДанных.Вставить("ТараФакт", 0);
	СтруктураДанных.Вставить("ТараДок", 0);
	СтруктураДанных.Вставить("НеттоФакт", 0);
	СтруктураДанных.Вставить("НеттоДок", 0);
		
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ЕдиницаТонна = гкс_ПриемкаТранспортаПовтИсп.ПолучитьЕдиницуИзмеренияТранспортногоДокумента();
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
			
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
						
		Если ПересчитыватьВТонны Тогда
			
			Коэффициент = гкс_ПриемкаТранспортаПовтИсп.ПолучитьКоэффициентПересчетаЕдиниц(
				Выборка.ЕдиницаИзмеренияВеса, ЕдиницаТонна);
				
				СтруктураДанных.БруттоДок 	= Коэффициент * СтруктураДанных.БруттоДок; 
				СтруктураДанных.БруттоФакт	= Коэффициент * СтруктураДанных.БруттоФакт;
				СтруктураДанных.ТараДок 	= Коэффициент * СтруктураДанных.ТараДок;
				СтруктураДанных.ТараФакт	= Коэффициент * СтруктураДанных.ТараФакт;		
				СтруктураДанных.НеттоДок 	= Коэффициент * СтруктураДанных.НеттоДок;	
				СтруктураДанных.НеттоФакт 	= Коэффициент * СтруктураДанных.НеттоФакт;				
		КонецЕсли;						                                          	
	КонецЕсли;
		
	Возврат СтруктураДанных;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйТаблицаРегистраций()
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ДокументРегистрации", 
									   Новый ОписаниеТипов("ДокументСсылка.гкс_РегистрацияНаПЛК"));
									   
	ТаблицаДокументов.Колонки.Добавить("Брутто", ОписаниеТиповВес());
	ТаблицаДокументов.Колонки.Добавить("Нетто", ОписаниеТиповВес());
	ТаблицаДокументов.Колонки.Добавить("Тара", ОписаниеТиповВес());
	
	Возврат ТаблицаДокументов;
	
КонецФункции

Функция ОписаниеТиповВес()
	
	Разрядность = 15;
	РазрядностьДробнойЧасти = 3;
	
	Возврат ОбщегоНазначения.ОписаниеТипаЧисло(Разрядность, РазрядностьДробнойЧасти);
	
КонецФункции	

Функция СостоянияНеПринято()
	
	СостоянияНеПринято = Новый Массив;
	СостоянияНеПринято.Добавить(Перечисления.гкс_СостоянияРегистрации.НеПринято);
	СостоянияНеПринято.Добавить(Перечисления.гкс_СостоянияРегистрации.НеПринятоПоПревышениюМаксимальногоВеса);
	
	Возврат СостоянияНеПринято;
	
КонецФункции	
	
#КонецОбласти
