#Область ПрограммныйИнтерфейс

#Область РегламентныеЗадания

// Обработчик регламентного задания "гкс_ПолучениеДанныхWarehouse".
//
Процедура ПолучениеДанныхWarehouse() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.гкс_ПолучениеДанныхWarehouse);
		
	Если Не ПолучитьФункциональнуюОпцию("гкс_ИспользоватьИнтеграциюСWarehouse") Тогда
		ВызватьИсключение НСтр("ru = 'Регламентное задание недоступно по функциональным опциям.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолучитьДанныеWarehouse();
		
КонецПроцедуры

// Обработчик регламентного задания "гкс_ОбработкаВходящихДанныхWarehouse".
//
Процедура ОбработкаВходящихДанныхWarehouse() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.гкс_ОбработкаВходящихДанныхWarehouse);
		
	Если Не ПолучитьФункциональнуюОпцию("гкс_ИспользоватьИнтеграциюСWarehouse") Тогда
		ВызватьИсключение НСтр("ru = 'Регламентное задание недоступно по функциональным опциям.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработатьВходящиеДанныеWarehouse();
		
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.РегламентныеЗадания

// Определяет зависимости регламентных заданий и их дополнительные свойства.
//
// Параметры:
//  Настройки - ТаблицаЗначений:
//    * РегламентноеЗадание - ОбъектМетаданныхРегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданныхФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ - Булево - если регламентное задание зависит более чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево
//                                              - Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - Неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево
//                                  - Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - Неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево
//                                      - Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - Неопределено.
//    * ДоступноВМоделиСервиса - Булево
//                             - Неопределено - Ложь, если необходимо блокировать выполнение регламентного
//        задания (в т.ч. задания очереди) в информационной базе с включенным использованием разделителя.
//        Значение Неопределено трактуется как Истина.
//        По умолчанию - Неопределено.
//    * РаботаетСВнешнимиРесурсами - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.). Не следует устанавливать
//        значение Истина для регламентных заданий, не модифицирующих данные во внешних источниках.
//        Например, регламентное задание ЗагрузкаКурсовВалют. Регламентные задания, работающие с внешними ресурсами,
//        автоматически отключаются в копии информационной базы. По умолчанию - Ложь.
//    * Параметризуется - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.гкс_ПолучениеДанныхWarehouse;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.гкс_ИспользоватьИнтеграциюСWarehouse;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.гкс_ОбработкаВходящихДанныхWarehouse;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.гкс_ИспользоватьИнтеграциюСWarehouse;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РегламентныеЗадания

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеВнешнихДанных

Процедура ПолучитьДанныеWarehouse(ПараметрПериоды = Неопределено) Экспорт
	
	ПараметрыЗапроса = ПараметрыПериодыИОрганизации(ПараметрПериоды);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		
		ЗагрузитьДанныеВнешниеПробы(ПараметрЗапроса);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеВнешниеПробы(ПараметрЗапроса)
	 
	МассивДанныхВнешниеПробы 	= ПолучитьВнешниеПробыПоВыбронномуAPI(ПараметрЗапроса);
	ДатаСоздания 				= ТекущаяДатаСеанса();
	
	Для Каждого ВнешняяПроба Из МассивДанныхВнешниеПробы Цикл
		
		ДанныеЗаполнения 		= Справочники.гкс_ВходящиеДанныеWarehouse.ИнициализироватьСтруктураНовогоЭлемента();
		ПодготовитьЗаполнениеВходящихДанных(ДанныеЗаполнения, ВнешняяПроба);
		ВходящиеДанныеСсылка 	= Справочники.гкс_ВходящиеДанныеWarehouse.НовыйЭлемент(ДанныеЗаполнения);
		
		РегистрыСведений
			.гкс_ОчередьОбработкиВходящихДанныхWarehouse
				.ЗафиксироватьНовыеВходящиеДанныеВОчереди(ВходящиеДанныеСсылка, ДатаСоздания);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВнешниеПробыПоВыбронномуAPI(ПараметрЗапроса)
	
	Результат 	= Неопределено;
	Сервис 		= Справочники.гкс_РесурсыВебСервисов.GetBetweenUpdDatesFilteredByClientIdOrStation;
	Ответ 		= гкс_РаботаСВебСервисами.ВыполнитьЗапрос(Сервис, ПараметрЗапроса);
	
	ИсключениеПриОшибкеОбращенияКWarehouse(Ответ);
	
	ЧтениеJSON 	= Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ.ТелоВСтроке);
	
	Попытка
		Результат = ПрочитатьJSON(ЧтениеJSON, Ложь, ИменаСвойствСоЗначениемДаты(), ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть();
	Исключение
		Комментарий = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ИнтеграцияWarehouse.ПолучитьВнешниеПробы",
		                         УровеньЖурналаРегистрации.Ошибка, 
		                         Неопределено, 
		                         Неопределено, 
		                         Комментарий);
		
		ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыПериодыИОрганизации(ПараметрПериоды = Неопределено)
	
	МассивПараметрыЗапроса 	= Новый Массив;
	НастройкиИнтеграции 	= Справочники.гкс_НастройкиИнтеграцииWarehouse.НастройкиИнтеграции();
	ТаблицаОрганизации 		= НастройкиИнтеграции.ОтборПоОрганизации.Выгрузить();
	МенеджерИд 				= РегистрыСведений.гкс_ИдентификаторыСинхронизируемыхОбъектовWarehouse;
	
	ФорматДаты 				= ФорматДатыJSON.ISO;
	ВариантЗаписи 			= ВариантЗаписиДатыJSON.УниверсальнаяДата;
	ТекДата 				= ТекущаяУниверсальнаяДата();
	
	Если ЗначениеЗаполнено(ПараметрПериоды) Тогда
		ДатаНачала 	= ЗаписатьДатуJSON(ПараметрПериоды.ДатаНачала, ФорматДаты, ВариантЗаписи);
		ДатаКонец 	= ЗаписатьДатуJSON(ПараметрПериоды.ДатаКонец, ФорматДаты, ВариантЗаписи);
	Иначе	
		ДатаНачала 	= ЗаписатьДатуJSON(НачалоДня(ТекДата), ФорматДаты, ВариантЗаписи);
		ДатаКонец 	= ЗаписатьДатуJSON(КонецДня(ТекДата), ФорматДаты, ВариантЗаписи);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТаблицаОрганизации Цикл
		
		ИдОрганизации = МенеджерИд.ИдентификаторПоСсылкеНаОбъекта(ТекСтрока.Организация);
		
		Если ПустаяСтрока(ИдОрганизации) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("clientId", 		ИдОрганизации);
		ПараметрыВыполнения.Вставить("stationDestId", 	Неопределено);
		ПараметрыВыполнения.Вставить("updatedDateFrom", ДатаНачала);
		ПараметрыВыполнения.Вставить("updatedDateTo", 	ДатаКонец);
								 
		ПараметрЗапроса = Новый Структура;							 
		ПараметрЗапроса.Вставить("ПараметрыЗапроса", ПараметрыВыполнения);
		
		МассивПараметрыЗапроса.Добавить(ПараметрЗапроса);
		
	КонецЦикла;
	
	Возврат МассивПараметрыЗапроса;
	
КонецФункции

Процедура ПодготовитьЗаполнениеВходящихДанных(ДанныеЗаполнения, ДанныеПробы)
	
	РеквизитыШапкиВСервисе 	= СоответствиеРеквизитовШапкиВходящихДанных();
	ТипыВходящихДанных 		= СоответствиеТиповВходящихДанных();
	
	Для Каждого КлючИЗначение Из ДанныеПробы Цикл
		
		Если НайтиРеквизитШапки(КлючИЗначение, РеквизитыШапкиВСервисе) Тогда
			
			ЗаполнитьРеквизитШапки(ДанныеЗаполнения, КлючИЗначение, РеквизитыШапкиВСервисе);
			
			// Если значение есть в шапке элемента справочника, то в табличную часть не добавляем.
			Продолжить; 
			
		КонецЕсли;
		
		ЗаполнитьТабличнуюЧасть(ДанныеЗаполнения.ТекстыСообщения, КлючИЗначение, ТипыВходящихДанных);
		
	КонецЦикла; 
		
КонецПроцедуры

Процедура ЗаполнитьРеквизитШапки(ДанныеЗаполнения, КлючИЗначение, НаименованияВСервисе)
	
	РеквизитШапки 					= НаименованияВСервисе.Получить(КлючИЗначение.Ключ);
	ДанныеЗаполнения[РеквизитШапки] = КлючИЗначение.Значение;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧасть(ТалицаЗаполнения, КлючИЗначение, ТипыВходящихДанных)
	
	ТипЗначения = ТипЗнч(КлючИЗначение.Значение);
		
	Если ТипЗначения = Тип("Структура") Или ТипЗначения = Тип("Массив") Тогда
		СобратьЗначениеВСтрокуJSON(ТалицаЗаполнения, КлючИЗначение, ТипыВходящихДанных);
	Иначе
		ДобавитьСтрокуВТаблицуЗаполнения(ТалицаЗаполнения, КлючИЗначение, ТипыВходящихДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура СобратьЗначениеВСтрокуJSON(ТалицаЗаполнения, КлючИЗначение, ТипыВходящихДанных)
	
	ЗаписьJSON 		= Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, КлючИЗначение.Значение); 
	Результат 		= ЗаписьJSON.Закрыть();
	
	ЗначениеСборки 	= Новый Структура;
	ЗначениеСборки.Вставить("Ключ", 	КлючИЗначение.Ключ);
	ЗначениеСборки.Вставить("Значение", Результат);
	
	ДобавитьСтрокуВТаблицуЗаполнения(ТалицаЗаполнения, ЗначениеСборки, ТипыВходящихДанных);
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуЗаполнения(ТалицаЗаполнения, КлючИЗначение, ТипыВходящихДанных)
	
	НоваяСтрока 			= ТалицаЗаполнения.Добавить();
	НоваяСтрока.ТипОбъекта 	= ТипыВходящихДанных.Получить(КлючИЗначение.Ключ);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, 	КлючИЗначение);
	
КонецПроцедуры

Функция СоответствиеРеквизитовШапкиВходящихДанных()
		
	НаименованияВСервисе = Новый Соответствие;
 	НаименованияВСервисе.Вставить("date", 				"ДатаПробы");
	НаименованияВСервисе.Вставить("loadDate", 			"ДатаПогрузки");
	НаименованияВСервисе.Вставить("updatedOn", 			"ДатаИзменения");
	НаименованияВСервисе.Вставить("groupId", 			"ИДКомпозитнойПробы");
	НаименованияВСервисе.Вставить("id", 				"ИДПробы");
	НаименованияВСервисе.Вставить("commentary", 		"Комментарий");
	НаименованияВСервисе.Вставить("inspectionPlace", 	"МестоИнспекции");
	НаименованияВСервисе.Вставить("refId", 				"НомерДокумента");
	НаименованияВСервисе.Вставить("orderNumber", 		"НомерЗаявки");
	
	Возврат НаименованияВСервисе;
	
КонецФункции

Функция СоответствиеТиповВходящихДанных()
	
	МенеджерТипы 	= Перечисления.гкс_ТипыОбъектовWarehouse;
	
	ТипыОбъктов = Новый Соответствие;
 	ТипыОбъктов.Вставить("client", 						МенеджерТипы.Организация);
	ТипыОбъктов.Вставить("clientId", 					МенеджерТипы.Организация);
	ТипыОбъктов.Вставить("contractor", 					МенеджерТипы.Сюрвейер);
	ТипыОбъктов.Вставить("contractorId", 				МенеджерТипы.Сюрвейер);
	ТипыОбъктов.Вставить("elevator", 					МенеджерТипы.Элеватор);
	ТипыОбъктов.Вставить("elevatorId", 					МенеджерТипы.Элеватор);
	ТипыОбъктов.Вставить("goodId", 						МенеджерТипы.Продукция);
	ТипыОбъктов.Вставить("goodName", 					МенеджерТипы.Продукция);
	ТипыОбъктов.Вставить("goodShortName", 				МенеджерТипы.Продукция);
	ТипыОбъктов.Вставить("stationDestId", 				МенеджерТипы.СтанцияНазначения);
	ТипыОбъктов.Вставить("stationDestName", 			МенеджерТипы.СтанцияНазначения);
	ТипыОбъктов.Вставить("stationId", 					МенеджерТипы.СтанцияОтправления);
	ТипыОбъктов.Вставить("stationName", 				МенеджерТипы.СтанцияОтправления);
	ТипыОбъктов.Вставить("transport", 					МенеджерТипы.ТранспортноеСредство);
	ТипыОбъктов.Вставить("qualityIndicatorId", 			МенеджерТипы.Показатель);
	ТипыОбъктов.Вставить("priorityExSampleTypeName", 	МенеджерТипы.ВидПробы);
	ТипыОбъктов.Вставить("externalSampleTestResults", 	МенеджерТипы.ТаблицаПоказателиКачества);
	
	Возврат ТипыОбъктов;
	
КонецФункции

#КонецОбласти

#Область ОбработкаВоходящихДанных

Процедура ОбработатьВходящиеДанныеWarehouse(ПараметрОбработки = Неопределено) Экспорт
	
	ОбработатьВходящиеДанные(ПараметрОбработки);
	
КонецПроцедуры

Процедура ОбработатьВходящиеДанные(ПараметрОбработки)
	
	МенеджерВходящиеДанные 	= Справочники.гкс_ВходящиеДанныеWarehouse;
	МенеджерОбработка 		= РегистрыСведений.гкс_ОчередьОбработкиВходящихДанныхWarehouse;
	Объекты 				= МенеджерОбработка.ВыборкаИзОчереди(ПараметрОбработки);
	
	Пока Объекты.Следующий() Цикл
		
		// Проверка на битую ссылку.
		ОбъектВходящиеДанные = Объекты.ВходящиеДанные.ПолучитьОбъект();
		
		Если ОбъектВходящиеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВнешняяПробаСоздана = Ложь;
		ДанныеОбработки 	= МенеджерОбработка.СтруктураЗаписи();
		ЗаполнитьЗначенияСвойств(ДанныеОбработки, Объекты);
		
		НачатьТранзакцию();
		Попытка
			ВыполнитьОбработкуОбъекта(Объекты, ДанныеОбработки, ВнешняяПробаСоздана);
			
			Если ВнешняяПробаСоздана Тогда
				
				МенеджерОбработка.УдалитьОбработкуВходящихДанныхВОчереди(Объекты.ВходящиеДанные, Объекты.Порядок);
				
				МенеджерВходящиеДанные.ЗаблокироватьДанныеПоСсылке(Объекты.ВходящиеДанные);
				МенеджерВходящиеДанные.УстановитьПризнакОбработан(Объекты.ВходящиеДанные);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекОшибкаИнформация = ИнформацияОбОшибке();
			ОписаниеОшибки 		= ОбработкаОшибок.ПодробноеПредставлениеОшибки(ТекОшибкаИнформация);
			
			ЗапистьОшибкуОбработки(ДанныеОбработки, ОписаниеОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапистьОшибкуОбработки(ДанныеОбработки, ОписаниеОшибки)
	
	МенеджерОбработка = РегистрыСведений.гкс_ОчередьОбработкиВходящихДанныхWarehouse;
	
	Если ПустаяСтрока(ДанныеОбработки.СообщениеОбОшибкеОбработки) Тогда
		Разделитель = "";
	Иначе
		Разделитель = Символы.ПС;
	КонецЕсли;
	
	ТекДата = ТекущаяДатаСеанса();
	Отступ 	= "
			|";
	
	СообщениеОбОшибкеОбработки = Новый Массив;
	СообщениеОбОшибкеОбработки.Добавить(ДанныеОбработки.СообщениеОбОшибкеОбработки);
	Если ЗначениеЗаполнено(ДанныеОбработки.СообщениеОбОшибкеОбработки) Тогда
		СообщениеОбОшибкеОбработки.Добавить(Отступ);
	КонецЕсли;
	СообщениеОбОшибкеОбработки.Добавить(ТекДата);
	СообщениеОбОшибкеОбработки.Добавить(ОписаниеОшибки);
	
	ДанныеОбработки.СообщениеОбОшибкеОбработки 		= СтрСоединить(СообщениеОбОшибкеОбработки, Разделитель);
	ДанныеОбработки.КоличествоНеудачныхОбработок 	= ДанныеОбработки.КоличествоНеудачныхОбработок + 1;
	
	МенеджерОбработка.ЗафиксироватьИзмененияВходящихДанныхВОчереди(ДанныеОбработки);
	
КонецПроцедуры

Процедура ВыполнитьОбработкуОбъекта(Объекты, ДанныеОбработки, ВнешняяПробаСоздана)
	
	РезультатЗапроса 			= гкс_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объекты.ВходящиеДанные, "ТекстыСообщения");
	ТаблицаТестыСообщения 		= РезультатЗапроса.Выгрузить();
	
	МенеджерВнешниеПробы 		= РегистрыСведений.гкс_ВнешниеПробы;
	ТаблицаВнешняяПроба 		= МенеджерВнешниеПробы.ИнициализироватьТаблицуВнешнейПробы();
	
	ОсновноеДанныеВнешнейПробы 	= МенеджерВнешниеПробы.СтруктураЗаписи();
	
	
	ЗаполнитьПростыеЗначенияВСтрокуВнешняяПроба(
		Объекты.ВходящиеДанные, 
		ТаблицаТестыСообщения, 
		ОсновноеДанныеВнешнейПробы);
	
	ЗаполнитьОрганизацияВСтрокуВнешняяПроба(ТаблицаТестыСообщения, 			ОсновноеДанныеВнешнейПробы);											
	ЗаполнитьПродукциюВСтрокуВнешняяПроба(ТаблицаТестыСообщения, 			ОсновноеДанныеВнешнейПробы);
	ЗаполнитьСюрвейерВСтрокуВнешняяПроба(ТаблицаТестыСообщения, 			ОсновноеДанныеВнешнейПробы);
	ЗаполнитьЭлеваторВСтрокуВнешняяПроба(ТаблицаТестыСообщения, 			ОсновноеДанныеВнешнейПробы);
	ЗаполнитьСтанцииЖДВСтрокуВнешняяПроба(ТаблицаТестыСообщения, 			ОсновноеДанныеВнешнейПробы);
	ЗаполнитьТранспортныеСредстваВСтрокуВнешняяПроба(ТаблицаТестыСообщения, ОсновноеДанныеВнешнейПробы);
	
	РеквизитыДляПровекри 		= СписокОсновныхРеквизитовДляПроверки();
		
	ПроверитьЗаполнениеРеквизитовВнешнейПробы(РеквизитыДляПровекри, 
											ОсновноеДанныеВнешнейПробы, 
											ВнешняяПробаСоздана, 
											ДанныеОбработки);
	
	Если Не ВнешняяПробаСоздана Тогда
		Возврат;
	КонецЕсли;
	
	МассивТаблицПоказателей = ТаблицыПоказателейКачества(ТаблицаТестыСообщения);
	
	Для Каждого ТекущаяТаблица Из МассивТаблицПоказателей Цикл
		
		ПрочитатьЗаполнитьПоТаблицеПоказателейКачества(
			ТекущаяТаблица, 
			ТаблицаВнешняяПроба, 
			ОсновноеДанныеВнешнейПробы,
			ДанныеОбработки,
			ВнешняяПробаСоздана);
	КонецЦикла;
	
	УбратьНулевыеЗначенияПоказателей(ТаблицаВнешняяПроба, ВнешняяПробаСоздана, ДанныеОбработки);
	
	Для Каждого ТекСтрока Из ТаблицаВнешняяПроба Цикл
		СтруктураЗаписи	= МенеджерВнешниеПробы.СтруктураЗаписи();
		ЗаполнитьЗначенияСвойств(СтруктураЗаписи, ТекСтрока);
		МенеджерВнешниеПробы.ДобавитьЗапись(СтруктураЗаписи);
	КонецЦикла;
	
КонецПроцедуры

#Область ПодборИЗаполнение

Процедура ЗаполнитьПростыеЗначенияВСтрокуВнешняяПроба(ВходящиеДанные, ТаблицаТестыСообщения, ВнешняяПроба)
	
	ВнешняяПроба.Период 		= ВходящиеДанные.ДатаСоздания;
	ВнешняяПроба.ВходящиеДанные = ВходящиеДанные;
	ЗаполнитьЗначенияСвойств(ВнешняяПроба, ВходящиеДанные);
	ЗаполнитьПоКлючуВСтрокуВнешняяПроба(ТаблицаТестыСообщения, ВнешняяПроба, "weightGross", "ВесБрутто");
	ЗаполнитьПоКлючуВСтрокуВнешняяПроба(ТаблицаТестыСообщения, ВнешняяПроба, "weightTare", 	"ВесТары");
	ЗаполнитьПоКлючуВСтрокуВнешняяПроба(ТаблицаТестыСообщения, ВнешняяПроба, "weightNet", 	"ВесНетто");
	
КонецПроцедуры

// Обработать Организация ("client")
//
Процедура ЗаполнитьОрганизацияВСтрокуВнешняяПроба(ТаблицаТестыСообщения, ДанныеПробы)
	
	МенеджерТипы = Перечисления.гкс_ТипыОбъектовWarehouse;
	
	ЗаполнитьЗначенияВСтрокуВнешнейПробы(ТаблицаТестыСообщения, 
										ДанныеПробы, 
										МенеджерТипы.Организация, 
										"Организация");
	
КонецПроцедуры

// Обработать Продукция("good")
//
Процедура ЗаполнитьПродукциюВСтрокуВнешняяПроба(ТаблицаТестыСообщения, ДанныеПробы)
	
	МенеджерТипы = Перечисления.гкс_ТипыОбъектовWarehouse;
	
	ЗаполнитьЗначенияВСтрокуВнешнейПробы(ТаблицаТестыСообщения, 
										ДанныеПробы, 
										МенеджерТипы.Продукция, 
										"Продукция");
	
КонецПроцедуры 

// Обработать сюрвейер("contractor")
//
Процедура ЗаполнитьСюрвейерВСтрокуВнешняяПроба(ТаблицаТестыСообщения, ДанныеПробы)
	
	МенеджерТипы = Перечисления.гкс_ТипыОбъектовWarehouse;
	
	ЗаполнитьЗначенияВСтрокуВнешнейПробы(ТаблицаТестыСообщения, 
										ДанныеПробы,
										МенеджерТипы.Сюрвейер, 
										"Сюрвейер");
	
КонецПроцедуры

// Обработать Элеватор("elevator")
//
Процедура ЗаполнитьЭлеваторВСтрокуВнешняяПроба(ТаблицаТестыСообщения, ДанныеПробы)
	
	МенеджерТипы = Перечисления.гкс_ТипыОбъектовWarehouse;
	
	ЗаполнитьЗначенияВСтрокуВнешнейПробы(ТаблицаТестыСообщения, 
										ДанныеПробы, 
										МенеджерТипы.Элеватор, 
										"Элеватор");
	
КонецПроцедуры 

// Обработать СтанцияОтправления, СтанцияНазначения("station", "stationDest")
//
Процедура ЗаполнитьСтанцииЖДВСтрокуВнешняяПроба(ТаблицаТестыСообщения, ДанныеПробы)
		
	МенеджерТипы = Перечисления.гкс_ТипыОбъектовWarehouse; 
	
	ЗаполнитьЗначенияВСтрокуВнешнейПробы(ТаблицаТестыСообщения, 
										ДанныеПробы, 
										МенеджерТипы.СтанцияОтправления, 
										"СтанцияОтправления");
	
	ЗаполнитьЗначенияВСтрокуВнешнейПробы(ТаблицаТестыСообщения, 
										ДанныеПробы, 
										МенеджерТипы.СтанцияНазначения, 
										"СтанцияНазначения");
	
КонецПроцедуры

// Обработать транспортное средство, номер ТС("transport")
//
Процедура ЗаполнитьТранспортныеСредстваВСтрокуВнешняяПроба(ТаблицаТестыСообщения, СтрокаВнешняяПроба)
	
	МенеджерТипы 			= Перечисления.гкс_ТипыОбъектовWarehouse;
	МенеджерТС 				= Справочники.ТранспортныеСредства;
	СвойствоЗначения 		= ТаблицаТестыСообщения.Найти(МенеджерТипы.ТранспортноеСредство, "ТипОбъекта");
	ТекстRUS 				= "RUS";
	ТранспортноеСредство 	= Справочники.ТранспортныеСредства.ПустаяСсылка();
	
	Если Не СвойствоЗначения = Неопределено Тогда
		
		Номер 				= УбратьСпецСимволы(СвойствоЗначения.Значение);
		ЭтоНомерЖДВагона 	= гкс_СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер);
		
		Если Не ЭтоНомерЖДВагона Тогда
			
			НомерЛатиница 			= МенеджерТС.НормироватьНомер(Номер);
			НомерЛатиницаRUS 		= НомерЛатиница + ТекстRUS;
			НомерКирилица       	= ИзменитьНомерНаКирилицу(Номер);
			НомерКирилицаRUS    	= НомерКирилица + ТекстRUS;
			
			РазныеВариантыНомера 	= Новый Структура;
			РазныеВариантыНомера.Вставить("НомерЛатиница", 		НомерЛатиница);
			РазныеВариантыНомера.Вставить("НомерЛатиницаRUS", 	НомерЛатиницаRUS);
			РазныеВариантыНомера.Вставить("НомерКирилица", 		НомерКирилица);
			РазныеВариантыНомера.Вставить("НомерКирилицаRUS", 	НомерКирилицаRUS);
			
			ТранспортноеСредство 	= ПоискТранспортныеСредстваПоНомерам(РазныеВариантыНомера);
			
		Иначе
			ТранспортноеСредство = МенеджерТС.ТранспортноеСредствоПоНомеру(Номер);
		КонецЕсли;
		
		СтрокаВнешняяПроба.ТранспортноеСредство = ТранспортноеСредство;
		СтрокаВнешняяПроба.НомерТС 				= Номер;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ТаблицыПоказателейКачества(ТаблицаТестыСообщения)
	
	МенеджерТипы 		= Перечисления.гкс_ТипыОбъектовWarehouse;
	Отбор 				= Новый Структура("ТипОбъекта", МенеджерТипы.ТаблицаПоказателиКачества);
	
	Возврат ТаблицаТестыСообщения.НайтиСтроки(Отбор);
	
КонецФункции

Процедура ПрочитатьЗаполнитьПоТаблицеПоказателейКачества(ТекущаяТаблица, 
														ТаблицаВнешняяПроба, 
														ОсновноеДанныеВнешнейПробы,
														ДанныеОбработки,
														ВнешняяПробаСоздана)
		
	МенеджерИд 		= РегистрыСведений.гкс_ИдентификаторыСинхронизируемыхОбъектовWarehouse;
	ДанныеТаблицы 	= ПрочитатьЗначениеИзСтрокиJSON(ТекущаяТаблица.Значение);
	
	Для Каждого ТекущаяСтрока Из ДанныеТаблицы Цикл
		
		СтрокаВнешняяПроба 						= ТаблицаВнешняяПроба.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВнешняяПроба, ОсновноеДанныеВнешнейПробы);
		
		ИДПоказателя 							= ТекущаяСтрока.qualityIndicatorId;
		СтрокаВнешняяПроба.ВидПробы 			= ВидПробыПоИмени(ТекущаяСтрока);
		СтрокаВнешняяПроба.Показатель 			= МенеджерИд.СсылкеОбъектаПоИдентификатору(ИДПоказателя);
		СтрокаВнешняяПроба.ЗначениеПоказателя 	= Число(ТекущаяСтрока.value);
		
		РеквизитыДляПровекри 					= СписокРеквизитовТаблицыДляПроверки();
		
		ПроверитьЗаполнениеРеквизитовВнешнейПробы(РеквизитыДляПровекри, 
												СтрокаВнешняяПроба, 
												ВнешняяПробаСоздана, 
												ДанныеОбработки);
	
		Если Не ВнешняяПробаСоздана Тогда
			ТаблицаВнешняяПроба.Удалить(СтрокаВнешняяПроба);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоКлючуВСтрокуВнешняяПроба(ТаблицаТестыСообщения, СтрокаВнешняяПроба, Ключ, ИмяЗначения)
	
	СвойствоЗначения = ТаблицаТестыСообщения.Найти(Ключ, "Ключ");
	
	Если Не СвойствоЗначения = Неопределено Тогда
		
		СтрокаВнешняяПроба[ИмяЗначения]	= Число(СвойствоЗначения.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияВСтрокуВнешнейПробы(ТаблицаТестыСообщения, СтрокаВнешняяПроба, ТипОбъекта, ИмяЗначения)
	
	МенеджерИдОбъекты 		= РегистрыСведений.гкс_ИдентификаторыСинхронизируемыхОбъектовWarehouse;
	
	Отбор 					= Новый Структура("ТипОбъекта", ТипОбъекта);
	МассивСвойствЗначений 	= ТаблицаТестыСообщения.НайтиСтроки(Отбор);
	
	Если Не МассивСвойствЗначений = Неопределено Тогда
		
		ЗаписьЗначения 				= МенеджерИдОбъекты.СтруктураЗаписи();
		
		ОбработатьМассивСвойствЗначений(МассивСвойствЗначений, ЗаписьЗначения);
		
		ЗаписьЗначения.ТипОбъекта 	= ТипОбъекта;
		ЕстьИдентификатор 			= ЗначениеЗаполнено(ЗаписьЗначения.Идентификатор);
		
		Если ЕстьИдентификатор Тогда
			ЗаписьЗначения.Ссылка = МенеджерИдОбъекты.СсылкеОбъектаПоИдентификатору(ЗаписьЗначения.Идентификатор);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаписьЗначения.Ссылка) Тогда
			СтрокаВнешняяПроба[ИмяЗначения] = ЗаписьЗначения.Ссылка;
		Иначе
			Если ЕстьИдентификатор Тогда 
				МенеджерИдОбъекты.ДобавитьЗапись(ЗаписьЗначения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьМассивСвойствЗначений(МассивСвойствЗначений, ЗаписьЗначения)
	
	Для Каждого Свойство Из МассивСвойствЗначений Цикл
		
		Если ЕстьShortВИмениСвойства(Свойство.Ключ) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЕстьIDВИмениСвойства(Свойство.Ключ) Тогда 
			ЗаписьЗначения.Идентификатор = Свойство.Значение;
		КонецЕсли;
		
		Если Свойство.Ключ = "contractor" Или Свойство.Ключ = "elevator" Тогда
			ДанныеContractor = ПрочитатьЗначениеИзСтрокиJSON(Свойство.Значение);
			ДанныеContractor.Свойство("name", ЗаписьЗначения.НаименованиеОбъекта);
		КонецЕсли;
				
		Если ЕстьNameВИмениСвойства(Свойство.Ключ) Тогда
			ЗаписьЗначения.НаименованиеОбъекта = Свойство.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПрочитатьЗначениеИзСтрокиJSON(ТелоВСтроке)	
	
	Если ПустаяСтрока(ТелоВСтроке) Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ЧтениеJSON 	= Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоВСтроке);
	
	Результат = ПрочитатьJSON(ЧтениеJSON, Ложь, ИменаСвойствСоЗначениемДаты(), ФорматДатыJSON.ISO);
	ЧтениеJSON.Закрыть();											
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьIDВИмениСвойства(ИмяСвойства)
	
	Возврат Не СтрНайти(ИмяСвойства, "Id") = 0;
	
КонецФункции 

Функция ЕстьNameВИмениСвойства(ИмяСвойства)
	
	Возврат Не СтрНайти(ИмяСвойства, "Name") = 0;
	
КонецФункции

Функция ЕстьShortВИмениСвойства(ИмяСвойства)
	
	Возврат Не СтрНайти(ИмяСвойства, "Short") = 0;
	
КонецФункции

Функция ВидПробыПоИмени(ТекущаяСтрока)
	
	ИмяВСервисе 			= "";
	МенеджерНазначения 		= Перечисления.гкс_НазначенияИспользованияКачества;
	ТипСтруктура 			= Тип("Структура");
	
	ЕстьExternalSampleType 	= ТипЗнч(ТекущаяСтрока) = ТипСтруктура 
								И ТекущаяСтрока.Свойство("externalSampleType")
								И ТипЗнч(ТекущаяСтрока.externalSampleType) = ТипСтруктура
								И ТекущаяСтрока.externalSampleType.Свойство("name_en");
	
	Если ЕстьExternalSampleType Тогда
		ИмяВСервисе = ТекущаяСтрока.externalSampleType.name_en;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяВСервисе) Тогда 
		Возврат МенеджерНазначения.ПустаяСсылка();
	КонецЕсли;
	
	СоответствиеПоИмени =  Новый Соответствие;
	СоответствиеПоИмени.Вставить("Express", 	МенеджерНазначения.ЛаборантВнешниеПробы);
	СоответствиеПоИмени.Вставить("Elevator", 	МенеджерНазначения.ЭлеваторВнешниеПробы);
	СоответствиеПоИмени.Вставить("Composite", 	МенеджерНазначения.КомпозитВнешниеПробыНаТысячуТон);
	
	Возврат СоответствиеПоИмени.Получить(ИмяВСервисе);
	
КонецФункции

#КонецОбласти

#Область ПровекраЗаполнения

Процедура ПроверитьЗаполнениеРеквизитовВнешнейПробы(РеквизитыДляПровекри, 
													ДанныеВнешняяПроба, 
													ПроверкаПройдена, 
													ДанныеОбработки)
	
	ОшибкиЗаполнения 	= Новый Массив;
	ШаблоныСообщения 	= ШаблоныСообщенияПроверкиЗаполнения();
	ШаблонОшибки 		= ШаблоныСообщения.ШаблонОшибки;
	НазваниеАРМа		= ШаблоныСообщения.НазваниеАРМа;
	СтрокаПричины	 	= ШаблоныСообщения.СтрокаПричины;
	СтрокаНеЗаполнен 	= ШаблоныСообщения.СтрокаНеЗаполнен;
	СтрокаСопоставить 	= ШаблоныСообщения.СтрокаСопоставить;
	
	Для Каждого ЭлементСписка Из РеквизитыДляПровекри Цикл
		
		Реквизит 				= ЭлементСписка.Значение;
		ЕстьОшибкаЗаполнения 	= НеЗаполненРеквизитВнешнейПробы(ДанныеВнешняяПроба, Реквизит);
		
		Если ЕстьОшибкаЗаполнения Тогда
			ОшибкиЗаполнения.Добавить(СтрШаблон(ШаблонОшибки, Реквизит));
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверкаПройдена = Не ЗначениеЗаполнено(ОшибкиЗаполнения);
	
	Если Не ПроверкаПройдена Тогда
		
		ОшибкиЗаполнения.Добавить(СтрокаПричины);
		ОшибкиЗаполнения.Добавить(СтрокаНеЗаполнен);
		ОшибкиЗаполнения.Добавить(СтрШаблон(СтрокаСопоставить, НазваниеАРМа));
		
		ОписаниеОшибки = СтрСоединить(ОшибкиЗаполнения, Символы.ПС);
		
		ЗапистьОшибкуОбработки(ДанныеОбработки, ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ШаблоныСообщенияПроверкиЗаполнения()
	
	ШаблоныСообщения = Новый Структура;
	ШаблоныСообщения.Вставить("ШаблонОшибки", 		НСтр("ru = 'Не удалось заполнить реквизит ""%1"".'"));
	ШаблоныСообщения.Вставить("НазваниеАРМа",		НСтр("ru = 'АРМ ""Соответствие идентификаторов Warehouse""'"));
	ШаблоныСообщения.Вставить("СтрокаПричины",	 	НСтр("ru = 'Причины:'"));
	ШаблоныСообщения.Вставить("НулевоеЗначение", 	
		НСтр("ru = 'Значение показателя равно 0. Нулевые значения показателей качества внешних проб не записываются.'"));
	ШаблоныСообщения.Вставить("СтрокаНеЗаполнен", 	
		НСтр("ru = '1. Возможно во ""Входящих дынных"" значение внешней пробы не заполнено.'"));
	ШаблоныСообщения.Вставить("СтрокаСопоставить", 	
		НСтр("ru = '2. Необходимо в %1 сопоставить значение и ссылку элемента справочника.'"));
	
	Возврат ШаблоныСообщения;
	
КонецФункции 

Функция НеЗаполненРеквизитВнешнейПробы(ДанныеПробы, Реквизит)
		
	Возврат Не ЗначениеЗаполнено(ДанныеПробы[Реквизит]);
	
КонецФункции 

Функция СписокОсновныхРеквизитовДляПроверки()
	
	СписокРеквизитов = Новый СписокЗначений;
	СписокРеквизитов.Добавить("ДатаПробы");
	СписокРеквизитов.Добавить("ДатаПогрузки");
	СписокРеквизитов.Добавить("ДатаИзменения");
	СписокРеквизитов.Добавить("ИДПробы");
	СписокРеквизитов.Добавить("МестоИнспекции");
	СписокРеквизитов.Добавить("НомерЗаявки");
	СписокРеквизитов.Добавить("Продукция");
	СписокРеквизитов.Добавить("СтанцияОтправления");
	СписокРеквизитов.Добавить("Сюрвейер");
	СписокРеквизитов.Добавить("ТранспортноеСредство");
	СписокРеквизитов.Добавить("Элеватор");
	СписокРеквизитов.Добавить("НомерТС");
	СписокРеквизитов.Добавить("ВесБрутто");
	СписокРеквизитов.Добавить("ВесТары");
	СписокРеквизитов.Добавить("ВесНетто");
	
	Возврат СписокРеквизитов;
	
КонецФункции

Функция СписокРеквизитовТаблицыДляПроверки()
	
	СписокРеквизитов = Новый СписокЗначений;
	СписокРеквизитов.Добавить("ВидПробы");
	СписокРеквизитов.Добавить("Показатель");
	
	Возврат СписокРеквизитов;
	
КонецФункции

Процедура УбратьНулевыеЗначенияПоказателей(ТаблицаВнешняяПроба, ВнешняяПробаСоздана, ДанныеОбработки)
	
	МассивУдаления 		= Новый Массив;
	
	Для Каждого ТекСтрока Из ТаблицаВнешняяПроба Цикл
		
		Если ТекСтрока.ЗначениеПоказателя = 0 Тогда
			МассивУдаления.Добавить(ТекСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из МассивУдаления Цикл
		
		ТаблицаВнешняяПроба.Удалить(ТекЭлемент);
		
	КонецЦикла;
	
	ВнешняяПробаСоздана = ТаблицаВнешняяПроба.Количество() <> 0;
	
	Если Не ВнешняяПробаСоздана Тогда
		
		ШаблоныСообщения 	= ШаблоныСообщенияПроверкиЗаполнения();
		ОписаниеОшибки 		= ШаблоныСообщения.НулевоеЗначение;
		ЗапистьОшибкуОбработки(ДанныеОбработки, ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СинхнронизацияПоказателейКачества

Процедура СинхнронизацияПоказателейКачества() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	МенеджерПоказатели 	= Справочники.гкс_ПоказателиКачестваWarehouse;
	МассивДанных 		= ПолучитьКачественныеПоказателиПоAPI();
    ТипОбъекта			= Перечисления.гкс_ТипыОбъектовWarehouse.Показатель;
	
	Для Каждого ДанныеПоказатель Из МассивДанных Цикл
		
		ДанныеЗаполнения 	= МенеджерПоказатели.ИнициализироватьСтруктураНовогоЭлемента();
		ПодготовитьЗаполнениеПоказателиКачества(ДанныеЗаполнения, ДанныеПоказатель);
		ПоказательСсылка	= МенеджерПоказатели.ПоказательПоИдентификатору(ДанныеЗаполнения.ИдентификаторWarehouse);
		
		Если Не ЗначениеЗаполнено(ПоказательСсылка) Тогда
			ПоказательСсылка = МенеджерПоказатели.НовыйЭлемент(ДанныеЗаполнения);
		Иначе
			ДополнитьПоказательКачестваПоНеобходимостиСсылочнымиРеквизитами(ДанныеЗаполнения, ПоказательСсылка); 
		КонецЕсли;
		
		ДобавитьВИдентификаторыСинхронизируемыхОбъектов(ДанныеЗаполнения, ПоказательСсылка, ТипОбъекта);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПодготовитьЗаполнениеПоказателиКачества(ДанныеЗаполнения, ДанныеПоказатель)
	
	РеквизитыШапкиВСервисе 	= СоответствиеРеквизитовПоказателейКачества();
	
	Для Каждого КлючИЗначение Из ДанныеПоказатель Цикл
		
		Если НайтиРеквизитШапки(КлючИЗначение, РеквизитыШапкиВСервисе) Тогда
			
			ЗаполнитьРеквизитШапкиПоказателей(ДанныеЗаполнения, КлючИЗначение, РеквизитыШапкиВСервисе); 
			
		КонецЕсли;
				
	КонецЦикла; 
		
КонецПроцедуры

Процедура ЗаполнитьРеквизитШапкиПоказателей(ДанныеЗаполнения, КлючИЗначение, РеквизитыШапкиВСервисе)
	
	ИмяРеквизита 		= РеквизитыШапкиВСервисе.Получить(КлючИЗначение.Ключ);
	ЗначениеЗаполнения 	= ДанныеЗаполнения[ИмяРеквизита];
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоЧисло(ЗначениеЗаполнения) Тогда
		ДанныеЗаполнения[ИмяРеквизита] = Число(КлючИЗначение.Значение);
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЗначениеЗаполнения)) Тогда
		ЗаполнитьЗначениеСсылкиВПоказателеКачества(ДанныеЗаполнения, КлючИЗначение, ИмяРеквизита);
	Иначе 
		ДанныеЗаполнения[ИмяРеквизита] = КлючИЗначение.Значение;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьЗначениеСсылкиВПоказателеКачества(ДанныеЗаполнения, КлючИЗначение, ИмяРеквизита)
	
	МенеджерИдОбъекты 	= РегистрыСведений.гкс_ИдентификаторыСинхронизируемыхОбъектовWarehouse;
	СсылкаПоИД 			= МенеджерИдОбъекты.СсылкеОбъектаПоИдентификатору(КлючИЗначение.Значение);
	
	Если ЗначениеЗаполнено(СсылкаПоИД) Тогда
		ДанныеЗаполнения[ИмяРеквизита] = СсылкаПоИД;
	Иначе
		Если ТипЗнч(ДанныеЗаполнения[ИмяРеквизита]) = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
			ЗаписатьЕдиницуИзмеренияВИдентификаторыСинхронизируемыхОбъектов(КлючИЗначение);
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры

Процедура ЗаписатьЕдиницуИзмеренияВИдентификаторыСинхронизируемыхОбъектов(КлючИЗначение)
	
	Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерИдОбъекты 		= РегистрыСведений.гкс_ИдентификаторыСинхронизируемыхОбъектовWarehouse;
	ДанныеЕдинициИзмерения 	= ПолучитьЕдиницуИзмеренияПоВыбронномуAPI(КлючИЗначение.Значение);
	
	ЗаписьЗначения 					= МенеджерИдОбъекты.СтруктураЗаписи();
	ЗаписьЗначения.Идентификатор 	= КлючИЗначение.Значение;
	ЗаписьЗначения.ТипОбъекта 		= Перечисления.гкс_ТипыОбъектовWarehouse.ЕдиницыИзмерения;
	
	Если ТипЗнч(ДанныеЕдинициИзмерения) = Тип("Структура") Тогда
		ДанныеЕдинициИзмерения.Свойство("name", ЗаписьЗначения.НаименованиеОбъекта);
	КонецЕсли;
	
	МенеджерИдОбъекты.ДобавитьЗапись(ЗаписьЗначения);
			
КонецПроцедуры

Процедура ДополнитьПоказательКачестваПоНеобходимостиСсылочнымиРеквизитами(ДанныеЗаполнения, ПоказательСсылка)
	
	ОбъектПоказатель = ПоказательСсылка.ПолучитьОбъект();
	
	ЗаполнитьЗначенияСвойств(ОбъектПоказатель, ДанныеЗаполнения,, "ЕдиницаИзмерения");
	
	Если Не ЗначениеЗаполнено(ОбъектПоказатель.ЕдиницаИзмерения) 
			И ЗначениеЗаполнено(ДанныеЗаполнения.ЕдиницаИзмерения) Тогда
			
		ОбъектПоказатель.ЕдиницаИзмерения 	= ДанныеЗаполнения.ЕдиницаИзмерения;
		
	КонецЕсли;
	
	ОбъектПоказатель.Записать();
		
КонецПроцедуры

Функция ПолучитьКачественныеПоказателиПоAPI()
	
	МассивУникальныхИД	= ПолучитьМаппингКачественныхПоказателей();
	МассивВсеПоказатели = ПолучитьВсеКачественныеПоказатели();
	МассивДанных 		= Новый Массив;
	
	Для Каждого Показатель Из МассивВсеПоказатели Цикл
		
		НайденИД = МассивУникальныхИД.Найти(Показатель.id);
		
		Если ЗначениеЗаполнено(НайденИД) Тогда
			МассивДанных.Добавить(Показатель);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции

Функция ПолучитьМаппингКачественныхПоказателей()
	
	МассивУникальныхИД 	= Новый Массив;
	Сервис 				= Справочники.гкс_РесурсыВебСервисов.QualityIndicatorCodes;
	ИмяСобытия 			= ИмяСобытияПолучитьКачественныеПоказатели();
    Результат 			= ВыполнитьHTTPЗапросИПрочитатьJSON(Сервис, ИмяСобытия);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Для Каждого Маппинг Из Результат Цикл
			
			Если ЗначениеЗаполнено(Маппинг.qualityIndicatorId) Тогда
				МассивУникальныхИД.Добавить(Маппинг.qualityIndicatorId);
			КонецЕсли;
			
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивУникальныхИД);
	КонецЕсли;
	
	Возврат МассивУникальныхИД;
	
КонецФункции

Функция ПолучитьВсеКачественныеПоказатели()
	
	Сервис 		= Справочники.гкс_РесурсыВебСервисов.QualityIndicators;
	ИмяСобытия 	= ИмяСобытияПолучитьКачественныеПоказатели();
	Возврат ВыполнитьHTTPЗапросИПрочитатьJSON(Сервис, ИмяСобытия);
	
КонецФункции

Функция СоответствиеРеквизитовПоказателейКачества()
		
	НаименованияВСервисе = Новый Соответствие;
 	НаименованияВСервисе.Вставить("name", 									"Наименование");
	НаименованияВСервисе.Вставить("shortName", 								"НаименованиеКороткое");
	НаименованияВСервисе.Вставить("unitId", 								"ЕдиницаИзмерения");
	НаименованияВСервисе.Вставить("standard", 								"Стандарт");
	НаименованияВСервисе.Вставить("precision", 								"Точность");
	НаименованияВСервисе.Вставить("dependentQualityIndicatorId", 			"ЗависимыйПоказатель");
	НаименованияВСервисе.Вставить("maxValueOfDependentQualityIndicator", 	"ВерхнийПределЗависимогоПоказателя");
	НаименованияВСервисе.Вставить("minValueOfDependentQualityIndicator", 	"НижнийПределЗависимогоПоказателя");
	НаименованияВСервисе.Вставить("code", 									"КодWarehouse");
	НаименованияВСервисе.Вставить("id", 									"ИдентификаторWarehouse");
	
	Возврат НаименованияВСервисе;
	
КонецФункции

Функция ИмяСобытияПолучитьКачественныеПоказатели()
	
	Возврат "ИнтеграцияWarehouse.ПолучитьКачественныеПоказатели";
	
КонецФункции

#КонецОбласти

#Область СинхнронизацияЕдиницИзмерения

Функция ПолучитьЕдиницуИзмеренияПоВыбронномуAPI(СтрокаИД)
	
	Результат 	= Неопределено;
	Сервис 		= Справочники.гкс_РесурсыВебСервисов.UnitsById;
	Ответ 		= гкс_РаботаСВебСервисами.ВыполнитьЗапрос(Сервис, ПараметрыУстановитьИД(СтрокаИД));
	
	ИсключениеПриОшибкеОбращенияКWarehouse(Ответ);
	
	ЧтениеJSON 	= Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ.ТелоВСтроке);
	
	Попытка
		Результат = ПрочитатьJSON(ЧтениеJSON, Ложь, ИменаСвойствСоЗначениемДаты(), ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть();
	Исключение
		Комментарий = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ИнтеграцияWarehouse.ПолучитьВнешниеПробы",
		                         УровеньЖурналаРегистрации.Ошибка, 
		                         Неопределено, 
		                         Неопределено, 
		                         Комментарий);
		
		ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыУстановитьИД(СтрокаИД)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Id", СтрокаИД);
	
	ПараметрыЗапроса = Новый Структура;							 
	ПараметрыЗапроса.Вставить("ПараметрыЗапроса", ПараметрыВыполнения); 
		
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область СинхнронизацияПродукции

Процедура СинхнронизацияПродукции() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	МенеджерПродукция 	= Справочники.гкс_ПродукцияWarehouse;
	МассивДанных 		= ПолучитьПродукциюПоAPI();
	ТипОбъекта			= Перечисления.гкс_ТипыОбъектовWarehouse.Продукция;
	
	Для Каждого ДанныеПоказатель Из МассивДанных Цикл
		
		ДанныеЗаполнения 	= МенеджерПродукция.ИнициализироватьСтруктураНовогоЭлемента();
		ПодготовитьЗаполнениеПродукции(ДанныеЗаполнения, ДанныеПоказатель);
		ПродукцияСсылка		= МенеджерПродукция.ПродукцияПоИдентификатору(ДанныеЗаполнения.ИдентификаторWarehouse);
		
		Если Не ЗначениеЗаполнено(ПродукцияСсылка) Тогда
			ПродукцияСсылка = МенеджерПродукция.НовыйЭлемент(ДанныеЗаполнения);
		Иначе
			ПерезаполнитьПродукциюИЗаписать(ДанныеЗаполнения, ПродукцияСсылка);
		КонецЕсли;
		
		ДобавитьВИдентификаторыСинхронизируемыхОбъектов(ДанныеЗаполнения, ПродукцияСсылка, ТипОбъекта);
		
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьПродукциюПоAPI()
	
	Сервис 		= Справочники.гкс_РесурсыВебСервисов.Goods;
	ИмяСобытия 	= ИмяСобытияПолучитьПродукцию();
	
	Возврат ВыполнитьHTTPЗапросИПрочитатьJSON(Сервис, ИмяСобытия);
	
КонецФункции

Процедура ПодготовитьЗаполнениеПродукции(ДанныеЗаполнения, ДанныеПродукции)
	
	РеквизитыШапкиВСервисе 	= СоответствиеРеквизитовПродукции();
	
	Для Каждого КлючИЗначение Из ДанныеПродукции Цикл
		
		Если НайтиРеквизитШапки(КлючИЗначение, РеквизитыШапкиВСервисе) Тогда
			
			ЗаполнитьРеквизитШапкиПродукции(ДанныеЗаполнения, КлючИЗначение, РеквизитыШапкиВСервисе); 
			
		КонецЕсли;
				
	КонецЦикла; 
		
КонецПроцедуры

Процедура ПерезаполнитьПродукциюИЗаписать(ДанныеЗаполнения, ПродукцияСсылка)
	
	ОбъектПродукция 	= ПродукцияСсылка.ПолучитьОбъект();
	
	ЗаполнитьЗначенияСвойств(ОбъектПродукция, ДанныеЗаполнения);
	
	ОбъектПродукция.Записать();
		
КонецПроцедуры

Процедура ЗаполнитьРеквизитШапкиПродукции(ДанныеЗаполнения, КлючИЗначение, РеквизитыШапкиВСервисе)
	
	ИмяРеквизита = РеквизитыШапкиВСервисе.Получить(КлючИЗначение.Ключ);
	
	ДанныеЗаполнения[ИмяРеквизита] = КлючИЗначение.Значение;
	
КонецПроцедуры

Функция СоответствиеРеквизитовПродукции()
		
	НаименованияВСервисе = Новый Соответствие;
	НаименованияВСервисе.Вставить("name", 									"Наименование");
	НаименованияВСервисе.Вставить("shortName", 								"НаименованиеКороткое");
	НаименованияВСервисе.Вставить("name_en", 								"НаименованиеEN");
	НаименованияВСервисе.Вставить("shortName_en", 							"НаименованиеКороткоеEN");
	НаименованияВСервисе.Вставить("normativeDocumentForSampling", 			"НормативныйДокумент");
	НаименованияВСервисе.Вставить("id", 									"ИдентификаторWarehouse");
	
	Возврат НаименованияВСервисе;
	
КонецФункции

Функция ИмяСобытияПолучитьПродукцию()
	
	Возврат "ИнтеграцияWarehouse.ПолучитьПродукцию";
	
КонецФункции

#КонецОбласти

#Область ОбщиеМетоды

Процедура ДобавитьВИдентификаторыСинхронизируемыхОбъектов(ДанныеЗаполнения, ОбъектСсылка, ТипОбъекта)
	
	МенеджерИдОбъекты = РегистрыСведений.гкс_ИдентификаторыСинхронизируемыхОбъектовWarehouse;
	
	Если Не МенеджерИдОбъекты.ЗаписьЕстьВРегистре(ОбъектСсылка) Тогда
		
		ЗаписьЗначения 						= МенеджерИдОбъекты.СтруктураЗаписи();
		ЗаписьЗначения.Ссылка 				= ОбъектСсылка;
		ЗаписьЗначения.Идентификатор 		= ДанныеЗаполнения.ИдентификаторWarehouse;
		ЗаписьЗначения.НаименованиеОбъекта 	= ДанныеЗаполнения.Наименование;
		ЗаписьЗначения.ТипОбъекта 			= ТипОбъекта;
		
		МенеджерИдОбъекты.ДобавитьЗапись(ЗаписьЗначения);
	КонецЕсли;
		
КонецПроцедуры

Функция ВыполнитьHTTPЗапросИПрочитатьJSON(Сервис, ИмяСобытия)
	
	Результат 	= Неопределено;
	Ответ 		= гкс_РаботаСВебСервисами.ВыполнитьЗапрос(Сервис, ПустойПараметрВебЗапроса());
	
	ИсключениеПриОшибкеОбращенияКWarehouse(Ответ);
	
	ЧтениеJSON 	= Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ.ТелоВСтроке);
	
	Попытка
		Результат 	= ПрочитатьJSON(ЧтениеJSON, Ложь, ИменаСвойствСоЗначениемДаты(), ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть();
	Исключение
		Комментарий = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытия,
		                         УровеньЖурналаРегистрации.Ошибка, 
		                         Неопределено, 
		                         Неопределено, 
		                         Комментарий);
		
		ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ИсключениеПриОшибкеОбращенияКWarehouse(Ответ)
	
	Коды = КоннекторHTTP.КодыСостоянияHTTP();
	
	Если Ответ.КодСостояния < Коды.ОК_200 Или Ответ.КодСостояния >= Коды.МножествоВыборов_300 Тогда
		ВызватьИсключение НСтр("ru='Ошибка обращение к Warehouse'");
	КонецЕсли;
	
КонецПроцедуры 

Функция НайтиРеквизитШапки(КлючИЗначение, НаименованияВСервисе)
		
	Возврат Не НаименованияВСервисе.Получить(КлючИЗначение.Ключ) = Неопределено;
	
КонецФункции

Функция ПустойПараметрВебЗапроса()
	
	Возврат Новый Структура;
	
КонецФункции

Функция ИменаСвойствСоЗначениемДаты()
	
	МассивДат = Новый Массив;
	МассивДат.Добавить("date");
	МассивДат.Добавить("loadDate");
	МассивДат.Добавить("updatedOn");
		
	Возврат МассивДат;
	
КонецФункции

Функция УбратьСпецСимволы(Номер) 
		
	ВсеСпецСимволы = "`~!@#$%^&*()-=+[](){}\|/<>?:;№' ";
	
	Для Инд = 1 По СтрДлина(Номер) Цикл
		
		ОдинСимвол = Сред(Номер, Инд, 1);
		
		Если СтрНайти(ВсеСпецСимволы, ОдинСимвол) > 0 Тогда
			Номер = СтрЗаменить(Номер, ОдинСимвол, "");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Номер;
	
КонецФункции

Функция ИзменитьНомерНаКирилицу(Номер)
	
	Результат = "";
	
	Для а = 1 По СтрДлина(Номер) Цикл
		
		СимволПроверки 	= Сред(Номер, а, 1);
		СимволПроверки 	= ВРег(СимволПроверки);
		
		КодСимвола 		= КодСимвола(СимволПроверки);
		                                         													
		ЭтоЦифра 		= СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СимволПроверки);
		ЭтоКириллица    = СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(СимволПроверки);
		ЭтоЛатиница     = СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(СимволПроверки);
		ЭтоБуква 		= ЭтоКириллица Или ЭтоЛатиница;
		
		Если ЭтоЦифра Или ЭтоКириллица Тогда
			
			Результат 		= Результат + СимволПроверки;
			
		ИначеЕсли ЭтоЛатиница Тогда         
			                                    
			ОбработатьСимволЕслиЭтоЛатиница(Результат, СимволПроверки);
			
		ИначеЕсли Не ЭтоБуква Тогда
			
			ОбработатьСимволЕслиЭтоНеБуква(Результат, СимволПроверки, КодСимвола);
						
		Иначе
			Продолжить;
		КонецЕсли;  			
		
	КонецЦикла;
	
	ЗаменитьДваПробелаНаОдин(Результат);	
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьСимволЕслиЭтоЛатиница(Результат, СимволПроверки)

	СимволПроверки 	= СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("A", СимволПроверки, "А");
	СимволПроверки 	= СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("B", СимволПроверки, "В");
	СимволПроверки 	= СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("C", СимволПроверки, "С");
	СимволПроверки 	= СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("E", СимволПроверки, "Е");
	СимволПроверки 	= СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("H", СимволПроверки, "Н");
	СимволПроверки 	= СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("M", СимволПроверки, "М");
	СимволПроверки 	= СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("O", СимволПроверки, "О");
	СимволПроверки 	= СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("P", СимволПроверки, "Р");
	СимволПроверки 	= СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("T", СимволПроверки, "Т");
	СимволПроверки 	= СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("X", СимволПроверки, "Х");
	СимволПроверки 	= СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("I", СимволПроверки, "І");
	СимволПроверки 	= СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("Y", СимволПроверки, "У");
	
	Результат 		= Результат + СимволПроверки;
	
КонецПроцедуры

Процедура ОбработатьСимволЕслиЭтоНеБуква(Результат, СимволПроверки, КодСимвола)

	ЭтоПробелИлиТире = КодСимвола = КодСимвола("-") Или КодСимвола = КодСимвола(" ");
	ЭтоДругиеСимволы = 
		КодСимвола = КодСимвола(".") 
		Или КодСимвола = КодСимвола(",")
		Или КодСимвола = КодСимвола("/")
		Или КодСимвола = КодСимвола(":")
		Или КодСимвола = КодСимвола("\")
		Или КодСимвола = КодСимвола("*")
		Или КодСимвола = КодСимвола(";");
	
	Если ЭтоПробелИлиТире Тогда				
		
		Результат = Результат + СимволПроверки;
		
	КонецЕсли;
		
	Если ЭтоДругиеСимволы Тогда
		
		Результат = Результат + ", ";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьДваПробелаНаОдин(Результат)

	Пока СтрНайти(Результат, "  ") > 0 Цикл
		Результат = СтрЗаменить(Результат, "  ", " ");		
	КонецЦикла; 
	
КонецПроцедуры

Функция ПоискТранспортныеСредстваПоНомерам(РазныеВариантыНомера)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоискТранспортныеСредстваПоНомерам();	
	Запрос.УстановитьПараметр("НомерЛатиница", 		РазныеВариантыНомера.НомерЛатиница);
	Запрос.УстановитьПараметр("НомерЛатиницаRUS", 	РазныеВариантыНомера.НомерЛатиницаRUS);
	Запрос.УстановитьПараметр("НомерКирилица", 		РазныеВариантыНомера.НомерКирилица);
	Запрос.УстановитьПараметр("НомерКирилицаRUS", 	РазныеВариантыНомера.НомерКирилицаRUS);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();                 	
	Выборка.Следующий();
	
	Возврат Выборка.ТранспортноеСредство;	
		
КонецФункции

Функция ТекстЗапросаПоискТранспортныеСредстваПоНомерам()
	
	Возврат 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаТС.Ссылка КАК ТранспортноеСредство
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК ТаблицаТС
	|ГДЕ
	|	ТаблицаТС.НомерТранспортногоСредства = &НомерЛатиница
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаТС.Ссылка
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК ТаблицаТС
	|ГДЕ
	|	ТаблицаТС.НомерТранспортногоСредства = &НомерЛатиницаRUS
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаТС.Ссылка
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК ТаблицаТС
	|ГДЕ
	|	ТаблицаТС.НомерТранспортногоСредства = &НомерКирилица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаТС.Ссылка
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК ТаблицаТС
	|ГДЕ
	|	ТаблицаТС.НомерТранспортногоСредства = &НомерКирилицаRUS";	
	
КонецФункции

#КонецОбласти

#КонецОбласти