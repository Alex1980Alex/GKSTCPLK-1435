// Конвертация ИнтеграционныйАдаптерСодр от 31.05.2021 8:46:47
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Справочник_ВходящиеСообщения_Отправка_mdm(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_МоделиДанныхXDTO_Отправка_mdm(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФорматыОбменаИАС_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Справочник_ВходящиеСообщения_Получение_mdm(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВходящиеСообщенияНовый_Получение_mdm(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_МоделиДанныхXDTO_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФорматыОбменаИАС_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Справочник_ВходящиеСообщения_Отправка_mdm
Процедура ДобавитьПОД_Справочник_ВходящиеСообщения_Отправка_mdm(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВходящиеСообщения_Отправка_mdm";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.гкс_ВходящиеСообщенияRMQ;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ВходящиеСообщения_Отправка_mdm_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВходящиеСообщения_mdm");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВходящиеСообщенияНовый_mdm");
КонецПроцедуры

Процедура ПОД_Справочник_ВходящиеСообщения_Отправка_mdm_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ОписаниеПодсистемы = Новый Структура("Имя,Версия");
	ОбновлениеИнформационнойБазыИАС.ПриДобавленииПодсистемы(ОписаниеПодсистемы);
	// В версии адаптера моложе "2.2.0.0" для получения версии можно использовать спец. фуннкцию
	// ОбновлениеИнформационнойБазыИАС.ВерсияПодсистемы
	Если ОписаниеПодсистемы.Версия >= "2.2.0.0" Тогда
		ИмяНастройки = "ИспользоватьОтдельнуюСхемуДляСлужебныхСообщений";
		ИспользованиеПКО["Справочник_ВходящиеСообщения_mdm"] = НЕ гкс_ОчередьСообщенийRMQПовтИсп.НастройкаИнтеграционногоАдаптера(ИмяНастройки);
		ИспользованиеПКО["Справочник_ВходящиеСообщенияНовый_mdm"] = гкс_ОчередьСообщенийRMQПовтИсп.НастройкаИнтеграционногоАдаптера(ИмяНастройки);
	Иначе
		ИспользованиеПКО["Справочник_ВходящиеСообщения_mdm"] = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_МоделиДанныхXDTO_Отправка_mdm
Процедура ДобавитьПОД_Справочник_МоделиДанныхXDTO_Отправка_mdm(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_МоделиДанныхXDTO_Отправка_mdm";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.гкс_МоделиДанныхXDTO;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФорматыОбменаИАС_Отправка
Процедура ДобавитьПОД_Справочник_ФорматыОбменаИАС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФорматыОбменаИАС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.гкс_ФорматыОбменаИАС;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ФорматыОбменаИАС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФорматыОбменаИАС");
КонецПроцедуры

Процедура ПОД_Справочник_ФорматыОбменаИАС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО["Справочник_ФорматыОбменаИАС"] = НЕ ДанныеИБ.ВыбиратьПоследний;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Справочник_ВходящиеСообщения_Получение_mdm
Процедура ДобавитьПОД_Справочник_ВходящиеСообщения_Получение_mdm(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВходящиеСообщения_Получение_mdm";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.гкс_ВходящиеСообщенияRMQ";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВходящиеСообщения_mdm");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВходящиеСообщенияНовый_Получение_mdm
Процедура ДобавитьПОД_Справочник_ВходящиеСообщенияНовый_Получение_mdm(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВходящиеСообщенияНовый_Получение_mdm";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ВходящиеСообщенияRMQ";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВходящиеСообщенияНовый_mdm");
КонецПроцедуры
#КонецОбласти
#Область Справочник_МоделиДанныхXDTO_Получение
Процедура ДобавитьПОД_Справочник_МоделиДанныхXDTO_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_МоделиДанныхXDTO_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.МоделиДанныхXDTO";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФорматыОбменаИАС_Получение
Процедура ДобавитьПОД_Справочник_ФорматыОбменаИАС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФорматыОбменаИАС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФорматыОбменаИАС";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФорматыОбменаИАС");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Справочник_УчастникиОбмена_Отправка_mdm(ПравилаКонвертации);
		ДобавитьПКО_Справочник_УчастникиОбменаНовый_Отправка_mdm(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_ВходящиеСообщения_mdm(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВходящиеСообщенияНовый_mdm(ПравилаКонвертации);
	ДобавитьПКО_Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФорматыОбменаИАС(ПравилаКонвертации);
КонецПроцедуры

Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        гкс_ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = гкс_ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область Отправка
#Область Справочник_УчастникиОбмена_Отправка_mdm
Процедура ДобавитьПКО_Справочник_УчастникиОбмена_Отправка_mdm(ПравилаКонвертации)

	ПравилоКонвертации = гкс_ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_УчастникиОбмена_Отправка_mdm";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.гкс_УчастникиОбменаRMQ;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.гкс_УчастникиОбмена";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "ЭтаБаза",      "ЭтаБаза");

КонецПроцедуры
#КонецОбласти
#Область Справочник_УчастникиОбменаНовый_Отправка_mdm
Процедура ДобавитьПКО_Справочник_УчастникиОбменаНовый_Отправка_mdm(ПравилаКонвертации)

	ПравилоКонвертации = гкс_ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_УчастникиОбменаНовый_Отправка_mdm";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.гкс_УчастникиОбменаRMQ;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.УчастникиОбмена";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "ЭтаБаза",      "ЭтаБаза");

КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Справочник_ВходящиеСообщения_mdm
Процедура ДобавитьПКО_Справочник_ВходящиеСообщения_mdm(ПравилаКонвертации)

	ПравилоКонвертации = гкс_ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВходящиеСообщения_mdm";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.гкс_ВходящиеСообщенияRMQ;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.гкс_ВходящиеСообщенияRMQ";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ВходящиеСообщения_mdm_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ВходящиеСообщения_mdm_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ВходящиеСообщения_mdm_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаОбработки",                                   "ДатаОбработки");
	ДобавитьПКС(СвойстваШапки, "ДатаПолучения",                                   "ДатаПолучения");
	ДобавитьПКС(СвойстваШапки, "ДатаПринятияВОбработку",                          "ДатаПринятияВОбработку");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторСообщения",                          "ИдентификаторСообщения");
	ДобавитьПКС(СвойстваШапки, "КлючОбъекта",                                     "КлючОбъекта");
	ДобавитьПКС(СвойстваШапки, "КорневойИдентификаторСообщения",                  "КорневойИдентификаторСообщения");
	ДобавитьПКС(СвойстваШапки, "УниверсальнаяДатаИзмененияСобытияВМиллисекундах", "УниверсальнаяДатаИзмененияСобытияВМиллисекундах");
	ДобавитьПКС(СвойстваШапки, "",                                                "СостояниеОбработки", 1, "СостоянияВходящихСообщенийRMQ");
	ДобавитьПКС(СвойстваШапки, "",                                                "ТекстОшибкиОбработки", 1);
	ДобавитьПКС(СвойстваШапки, "",                                                "УчастникОбмена", 1, "Справочник_УчастникиОбмена_Отправка_mdm");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ЗагруженныеОбъекты");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторОбъекта", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипОбъекта", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ВходящиеСообщения_mdm_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
	    Возврат;
	КонецЕсли;
	
	СостояниеОбработки = Неопределено;
	ДанныеИБ.ДополнительныеСвойства.Свойство("Состояние", СостояниеОбработки);
	Если НЕ ЗначениеЗаполнено(СостояниеОбработки) Тогда    
	    СостояниеОбработки = Перечисления.гкс_СостоянияВходящихСообщенийRMQ.Обработано;
	КонецЕсли;
	
	УчастникОбмена = гкс_ОчередьСообщенийRMQВызовСервера.ТекущееПриложение();
	Инструкция_УчастникОбмена = Новый Структура("ИмяПКО, Значение", "Справочник_УчастникиОбмена_Отправка_mdm", УчастникОбмена);
	ДанныеXDTO.КлючевыеСвойства.Вставить("УчастникОбмена", Инструкция_УчастникОбмена);
	
	Инструкция_СостояниеОбработки = Новый Структура("ИмяПКО, Значение", "СостоянияВходящихСообщенийRMQ", СостояниеОбработки);
	ДанныеXDTO.Вставить("СостояниеОбработки", Инструкция_СостояниеОбработки);
	
	ТекстОшибкиОбработки = "";
	ДанныеИБ.ДополнительныеСвойства.Свойство("ТекстОшибкиОбработки", ТекстОшибкиОбработки);
	
	Если ЗначениеЗаполнено(ТекстОшибкиОбработки) Тогда   
	    ДанныеXDTO.Вставить("ТекстОшибкиОбработки", ТекстОшибкиОбработки); 
	КонецЕсли;
	
	ЗагруженныеОбъекты = Неопределено;
	ДанныеИБ.ДополнительныеСвойства.Свойство("ЗагруженныеОбъекты", ЗагруженныеОбъекты);
	
	Если ЗначениеЗаполнено(ЗагруженныеОбъекты) Тогда
	    
	    ТаблицаДопСвойств = Новый ТаблицаЗначений;
	    ТаблицаДопСвойств.Колонки.Добавить("Свойство");
	    ТаблицаДопСвойств.Колонки.Добавить("ЗначениеСвойства");
	    
	    ТаблицаЗагруженныхОбъектов = Новый ТаблицаЗначений;
	    ТаблицаЗагруженныхОбъектов.Колонки.Добавить("ИдентификаторОбъекта");
	    ТаблицаЗагруженныхОбъектов.Колонки.Добавить("ТипОбъекта");
	    
	    Для Каждого ЗагруженныйОбъект Из ЗагруженныеОбъекты Цикл
	        
	        ТипОбъектаСтрокой = ЗагруженныйОбъект.Метаданные().ПолноеИмя();
	        
	        НовСтрока = ТаблицаЗагруженныхОбъектов.Добавить();
	        НовСтрока.ТипОбъекта = ТипОбъектаСтрокой; 
	        НовСтрока.ИдентификаторОбъекта = Строка(ЗагруженныйОбъект.УникальныйИдентификатор());
	        
	        Если ТипОбъектаСтрокой = "Справочник.ДоговорыКонтрагентов" Тогда
	            
	            СвойствоКод = Новый Структура("Наименование", "Код");
	            
	            НовСтрока = ТаблицаДопСвойств.Добавить();
	            НовСтрока.Свойство = СвойствоКод; 
	            НовСтрока.ЗначениеСвойства = ЗагруженныйОбъект.Код;
	            
	        КонецЕсли;
	        
	    КонецЦикла;
	    
	    ДанныеXDTO.Вставить("ЗагруженныеОбъекты", ТаблицаЗагруженныхОбъектов);
	    ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТаблицаДопСвойств);
	    
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ВходящиеСообщения_mdm_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("СостояниеОбработки") И НЕ ДанныеXDTO["СостояниеОбработки"] = Неопределено Тогда	
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СостояниеОбработки", ДанныеXDTO["СостояниеОбработки"].Значение);
	КонецЕсли;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("УчастникОбмена") И НЕ ДанныеXDTO.КлючевыеСвойства["УчастникОбмена"] = Неопределено Тогда	
		ПолученныеДанные.ДополнительныеСвойства.Вставить("УчастникОбмена", ДанныеXDTO.КлючевыеСвойства["УчастникОбмена"]);
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ТекстОшибкиОбработки") И НЕ ДанныеXDTO["ТекстОшибкиОбработки"] = Неопределено Тогда	
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ТекстОшибкиОбработки", ДанныеXDTO["ТекстОшибкиОбработки"]);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ВходящиеСообщения_mdm_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Перем СостояниеОбработки;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.ИдентификаторСообщения) Тогда
	
		ИсходящееСообщение = ИсходящееСообщение(ПолученныеДанные.ИдентификаторСообщения);
		Если ЗначениеЗаполнено(ИсходящееСообщение) Тогда
					
			Текст = Неопределено;
			Состояние = Неопределено;
			УчастникОбменаСтруктура = Неопределено;
			УниверсальнаяДатаСобытияВМиллисекундах = ПолученныеДанные.УниверсальнаяДатаИзмененияСобытияВМиллисекундах;
			ПолученныеДанные.ДополнительныеСвойства.Свойство("ТекстОшибкиОбработки", Текст);
			
			Если ПолученныеДанные.ДополнительныеСвойства.Свойство("УчастникОбмена", УчастникОбменаСтруктура) Тогда	
				УчастникОбмена = Справочники.гкс_УчастникиОбменаRMQ.СоздатьПолучитьПриложениеПоПараметрам(УчастникОбменаСтруктура);				
			КонецЕсли;
			
			Если ПолученныеДанные.ДополнительныеСвойства.Свойство("СостояниеОбработки", СостояниеОбработки) Тогда	
				Состояние = Перечисления.гкс_СостоянияИсходящихСообщенийRMQ.СостояниеПоРезультатуОбработки(СостояниеОбработки);
			КонецЕсли;	
					
			гкс_ОчередьСообщенийRMQВызовСервера.УстановитьСостояниеИсходящегоСообщения(ИсходящееСообщение,
			УчастникОбмена, Состояние, УниверсальнаяДатаСобытияВМиллисекундах, Текст);
	
		КонецЕсли;
	
	КонецЕсли;
	
	ПолученныеДанные = Неопределено;
	ДанныеИБ = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВходящиеСообщенияНовый_mdm
Процедура ДобавитьПКО_Справочник_ВходящиеСообщенияНовый_mdm(ПравилаКонвертации)

	ПравилоКонвертации = гкс_ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВходящиеСообщенияНовый_mdm";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.гкс_ВходящиеСообщенияRMQ;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВходящиеСообщенияRMQ";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ВходящиеСообщенияНовый_mdm_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ВходящиеСообщенияНовый_mdm_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ВходящиеСообщенияНовый_mdm_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаОбработки",                                   "ДатаОбработки");
	ДобавитьПКС(СвойстваШапки, "ДатаПолучения",                                   "ДатаПолучения");
	ДобавитьПКС(СвойстваШапки, "ДатаПринятияВОбработку",                          "ДатаПринятияВОбработку");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторСообщения",                          "ИдентификаторСообщения");
	ДобавитьПКС(СвойстваШапки, "КлючОбъекта",                                     "КлючОбъекта");
	ДобавитьПКС(СвойстваШапки, "КорневойИдентификаторСообщения",                  "КорневойИдентификаторСообщения");
	ДобавитьПКС(СвойстваШапки, "УниверсальнаяДатаИзмененияСобытияВМиллисекундах", "УниверсальнаяДатаИзмененияСобытияВМиллисекундах");
	ДобавитьПКС(СвойстваШапки, "",                                                "СостояниеОбработки", 1, "СостоянияВходящихСообщенийRMQ");
	ДобавитьПКС(СвойстваШапки, "",                                                "ТекстОшибкиОбработки", 1);
	ДобавитьПКС(СвойстваШапки, "",                                                "УчастникОбмена", 1, "Справочник_УчастникиОбмена_Отправка_mdm");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ЗагруженныеОбъекты");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторОбъекта", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипОбъекта", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ВходящиеСообщенияНовый_mdm_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
	    Возврат;
	КонецЕсли;
	
	СостояниеОбработки = Неопределено;
	ДанныеИБ.ДополнительныеСвойства.Свойство("Состояние", СостояниеОбработки);
	Если НЕ ЗначениеЗаполнено(СостояниеОбработки) Тогда    
	    СостояниеОбработки = Перечисления.гкс_СостоянияВходящихСообщенийRMQ.Обработано;
	КонецЕсли;
	
	УчастникОбмена = гкс_ОчередьСообщенийRMQВызовСервера.ТекущееПриложение();
	Инструкция_УчастникОбмена = Новый Структура("ИмяПКО, Значение", "Справочник_УчастникиОбмена_Отправка_mdm", УчастникОбмена);
	ДанныеXDTO.КлючевыеСвойства.Вставить("УчастникОбмена", Инструкция_УчастникОбмена);
	
	Инструкция_СостояниеОбработки = Новый Структура("ИмяПКО, Значение", "СостоянияВходящихСообщенийRMQ", СостояниеОбработки);
	ДанныеXDTO.Вставить("СостояниеОбработки", Инструкция_СостояниеОбработки);
	
	ТекстОшибкиОбработки = "";
	ДанныеИБ.ДополнительныеСвойства.Свойство("ТекстОшибкиОбработки", ТекстОшибкиОбработки);
	
	Если ЗначениеЗаполнено(ТекстОшибкиОбработки) Тогда   
	    ДанныеXDTO.Вставить("ТекстОшибкиОбработки", ТекстОшибкиОбработки); 
	КонецЕсли;
	
	ЗагруженныеОбъекты = Неопределено;
	ДанныеИБ.ДополнительныеСвойства.Свойство("ЗагруженныеОбъекты", ЗагруженныеОбъекты);
	
	Если ЗначениеЗаполнено(ЗагруженныеОбъекты) Тогда
	    
	    ТаблицаДопСвойств = Новый ТаблицаЗначений;
	    ТаблицаДопСвойств.Колонки.Добавить("Свойство");
	    ТаблицаДопСвойств.Колонки.Добавить("ЗначениеСвойства");
	    
	    ТаблицаЗагруженныхОбъектов = Новый ТаблицаЗначений;
	    ТаблицаЗагруженныхОбъектов.Колонки.Добавить("ИдентификаторОбъекта");
	    ТаблицаЗагруженныхОбъектов.Колонки.Добавить("ТипОбъекта");
	    
	    Для Каждого ЗагруженныйОбъект Из ЗагруженныеОбъекты Цикл
	        
	        ТипОбъектаСтрокой = ЗагруженныйОбъект.Метаданные().ПолноеИмя();
	        
	        НовСтрока = ТаблицаЗагруженныхОбъектов.Добавить();
	        НовСтрока.ТипОбъекта = ТипОбъектаСтрокой; 
	        НовСтрока.ИдентификаторОбъекта = Строка(ЗагруженныйОбъект.УникальныйИдентификатор());
	        
	        Если ТипОбъектаСтрокой = "Справочник.ДоговорыКонтрагентов" Тогда
	            
	            СвойствоКод = Новый Структура("Наименование", "Код");
	            
	            НовСтрока = ТаблицаДопСвойств.Добавить();
	            НовСтрока.Свойство = СвойствоКод; 
	            НовСтрока.ЗначениеСвойства = ЗагруженныйОбъект.Код;
	            
	        КонецЕсли;
	        
	    КонецЦикла;
	    
	    ДанныеXDTO.Вставить("ЗагруженныеОбъекты", ТаблицаЗагруженныхОбъектов);
	    ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТаблицаДопСвойств);
	    
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ВходящиеСообщенияНовый_mdm_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("СостояниеОбработки") И НЕ ДанныеXDTO["СостояниеОбработки"] = Неопределено Тогда	
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СостояниеОбработки", ДанныеXDTO["СостояниеОбработки"].Значение);
	КонецЕсли;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("УчастникОбмена") И НЕ ДанныеXDTO.КлючевыеСвойства["УчастникОбмена"] = Неопределено Тогда	
		ПолученныеДанные.ДополнительныеСвойства.Вставить("УчастникОбмена", ДанныеXDTO.КлючевыеСвойства["УчастникОбмена"]);
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ТекстОшибкиОбработки") И НЕ ДанныеXDTO["ТекстОшибкиОбработки"] = Неопределено Тогда	
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ТекстОшибкиОбработки", ДанныеXDTO["ТекстОшибкиОбработки"]);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ВходящиеСообщенияНовый_mdm_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Перем СостояниеОбработки;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.ИдентификаторСообщения) Тогда
	
		ИсходящееСообщение = ИсходящееСообщение(ПолученныеДанные.ИдентификаторСообщения);
		Если ЗначениеЗаполнено(ИсходящееСообщение) Тогда
					
			Текст = Неопределено;
			Состояние = Неопределено;
			УчастникОбменаСтруктура = Неопределено;
			УниверсальнаяДатаСобытияВМиллисекундах = ПолученныеДанные.УниверсальнаяДатаИзмененияСобытияВМиллисекундах;
			ПолученныеДанные.ДополнительныеСвойства.Свойство("ТекстОшибкиОбработки", Текст);
			
			Если ПолученныеДанные.ДополнительныеСвойства.Свойство("УчастникОбмена", УчастникОбменаСтруктура) Тогда	
				УчастникОбмена = Справочники.гкс_УчастникиОбменаRMQ.СоздатьПолучитьПриложениеПоПараметрам(УчастникОбменаСтруктура);				
			КонецЕсли;
			
			Если ПолученныеДанные.ДополнительныеСвойства.Свойство("СостояниеОбработки", СостояниеОбработки) Тогда	
				Состояние = Перечисления.гкс_СостоянияИсходящихСообщенийRMQ.СостояниеПоРезультатуОбработки(СостояниеОбработки);
			КонецЕсли;	
					
			гкс_ОчередьСообщенийRMQВызовСервера.УстановитьСостояниеИсходящегоСообщения(ИсходящееСообщение,
			УчастникОбмена, Состояние, УниверсальнаяДатаСобытияВМиллисекундах, Текст);
	
		КонецЕсли;
	
	КонецЕсли;
	
	ПолученныеДанные = Неопределено;
	ДанныеИБ = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение
Процедура ДобавитьПКО_Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение(ПравилаКонвертации)

	ПравилоКонвертации = гкс_ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.гкс_МоделиДанныхXDTO;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.МоделиДанныхXDTO";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",     "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПространствоИмен", "ПространствоИмен");

КонецПроцедуры

Процедура ПКО_Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СожержимоеВСтроке = ДанныеИБ.Содержимое.Получить();
	Если НЕ СожержимоеВСтроке = Неопределено Тогда 
		ДанныеXDTO.Вставить("Содержимое", ДвоичныеДанныеИзСтроки(СожержимоеВСтроке));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ТипЗнч(ДанныеXDTO.Содержимое) = Тип("ДвоичныеДанные") Тогда
		ПолученныеДанные.Содержимое = Новый ХранилищеЗначения(СтрокаИзДвоичныхДанных(ДанныеXDTO.Содержимое), Новый СжатиеДанных(9));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ДанныеИБ = Неопределено Тогда
		ДанныеИБ.Содержимое = ПолученныеДанные.Содержимое;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФорматыОбменаИАС
Процедура ДобавитьПКО_Справочник_ФорматыОбменаИАС(ПравилаКонвертации)

	ПравилоКонвертации = гкс_ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФорматыОбменаИАС";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.гкс_ФорматыОбменаИАС;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФорматыОбменаИАС";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ФорматыОбменаИАС_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ФорматыОбменаИАС_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФорматыОбменаИАС_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Версия",           "Версия");
	ДобавитьПКС(СвойстваШапки, "Наименование",     "Наименование");
	ДобавитьПКС(СвойстваШапки, "Порядок",          "Порядок");
	ДобавитьПКС(СвойстваШапки, "ПространствоИмен", "ПространствоИмен");
	ДобавитьПКС(СвойстваШапки, "Тип",              "Тип", , "ТипыФорматовОбменаRMQ");
	ДобавитьПКС(СвойстваШапки, "Активен",          "Активен", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "НастройкиФорматовОбменаED");
	ДобавитьПКС(СвойстваТЧ, "", "МенеджерВыгрузки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "МенеджерЗагрузки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "МодельДанных", 1,"Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение");
	ДобавитьПКС(СвойстваТЧ, "", "Период", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "НастройкиФорматовОбменаОбщие");
	ДобавитьПКС(СвойстваТЧ, "", "Тип", 1,"ТипыФорматовОбменаRMQ");
	ДобавитьПКС(СвойстваТЧ, "", "МенеджерОбработки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "МенеджерФормирования", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ФорматыОбменаИАС_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ДополнительныеСвойства.Свойство("ВыгружатьОбщиеНастройкиФормата") 
	     И ДанныеИБ.ДополнительныеСвойства["ВыгружатьОбщиеНастройкиФормата"] = Истина Тогда
		
		ТЗОбщие = Новый ТаблицаЗначений;
		ТЗОбщие.Колонки.Добавить("Тип");
		ТЗОбщие.Колонки.Добавить("МенеджерОбработки");
		ТЗОбщие.Колонки.Добавить("МенеджерФормирования");
		
		НастройкиОбщие = РегистрыСведений.гкс_НастройкиФорматовОбменаОбщие.ПолучитьНастройкиФормата(ДанныеИБ.Ссылка);
		Если НЕ НастройкиОбщие = Неопределено Тогда
		
			ЗаполнитьЗначенияСвойств(ТЗОбщие.Добавить(), НастройкиОбщие); 
			ДанныеXDTO.Вставить("НастройкиФорматовОбменаОбщие", ТЗОбщие);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеИБ.ДополнительныеСвойства.Свойство("ВыгружатьНастройкиФорматаОбменаED") 
	     И ДанныеИБ.ДополнительныеСвойства["ВыгружатьНастройкиФорматаОбменаED"] = Истина Тогда
		
		ТЗНастройкиED = Новый ТаблицаЗначений;
		ТЗНастройкиED.Колонки.Добавить("Период");
		ТЗНастройкиED.Колонки.Добавить("МодельДанных");
		ТЗНастройкиED.Колонки.Добавить("МенеджерЗагрузки");
		ТЗНастройкиED.Колонки.Добавить("МенеджерВыгрузки");
		
		НастройкиФормата = РегистрыСведений.гкс_НастройкиФорматовОбменаED.ПолучитьНастройки(ДанныеИБ.Ссылка);
		Если НЕ НастройкиФормата = Неопределено Тогда
	
			ЗаполнитьЗначенияСвойств(ТЗНастройкиED.Добавить(), НастройкиФормата); 
			ДанныеXDTO.Вставить("НастройкиФорматовОбменаED", ТЗНастройкиED);
	
		КонецЕсли;
	
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("НастройкиФорматовОбменаED") 
	     И ДанныеИБ.ДополнительныеСвойства.Свойство("ВыгружатьМодель") 
	     И ДанныеИБ.ДополнительныеСвойства["ВыгружатьМодель"] = Истина Тогда
		
		Модель = ДанныеXDTO["НастройкиФорматовОбменаED"][0].МодельДанных;
		Если ЗначениеЗаполнено(Модель) Тогда
			гкс_ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, Модель);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ФорматыОбменаИАС_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("НастройкиФорматовОбменаОбщие") И ДанныеXDTO["НастройкиФорматовОбменаОбщие"].Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НастройкиФорматовОбменаОбщие", ДанныеXDTO["НастройкиФорматовОбменаОбщие"]);
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("НастройкиФорматовОбменаED") И ДанныеXDTO["НастройкиФорматовОбменаED"].Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НастройкиФорматовОбменаED", ДанныеXDTO["НастройкиФорматовОбменаED"]);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ФорматыОбменаИАС_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ФорматСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ТипФормата = ?(ДанныеИБ = Неопределено, ПолученныеДанные.Тип, ФорматСсылка.Тип);
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("НастройкиФорматовОбменаОбщие") Тогда
	
		НаборЗаписейНастройкиОбщие = РегистрыСведений.гкс_НастройкиФорматовОбменаОбщие.СоздатьНаборЗаписей();
		НаборЗаписейНастройкиОбщие.Отбор.Формат.Установить(ФорматСсылка);
		НаборЗаписейНастройкиОбщие.Отбор.Тип.Установить(ТипФормата);
		
		Для Каждого НастройкаФорматаОбщая Из ПолученныеДанные.ДополнительныеСвойства["НастройкиФорматовОбменаОбщие"] Цикл
		 	НоваяЗапись = НаборЗаписейНастройкиОбщие.Добавить();
		 	НоваяЗапись.Формат = ФорматСсылка; 
		 	НоваяЗапись.Тип = ТипФормата;
		 	НоваяЗапись.МенеджерФормирования = НастройкаФорматаОбщая.МенеджерФормирования;
		 	НоваяЗапись.МенеджерОбработки = НастройкаФорматаОбщая.МенеджерОбработки;
		КонецЦикла;
		
		НаборЗаписейНастройкиОбщие.Записать();
		
	КонецЕсли;
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("НастройкиФорматовОбменаED") Тогда
	
		НаборЗаписейНастройкиED = РегистрыСведений.гкс_НастройкиФорматовОбменаED.СоздатьНаборЗаписей();
		НаборЗаписейНастройкиED.Отбор.Формат.Установить(ФорматСсылка);
	
		Для Каждого НастройкаФорматаED Из ПолученныеДанные.ДополнительныеСвойства["НастройкиФорматовОбменаED"] Цикл
		 	НоваяЗапись = НаборЗаписейНастройкиED.Добавить();
		 	НоваяЗапись.Период = НастройкаФорматаED.Период;
		 	Если НЕ ЗначениеЗаполнено(НоваяЗапись.Период) Тогда
		 		НоваяЗапись.Период = ТекущаяДатаСеанса();
		 	КонецЕсли;
		 	НоваяЗапись.Формат = ФорматСсылка; 
		 	НоваяЗапись.МенеджерЗагрузки = НастройкаФорматаED.МенеджерЗагрузки;
		 	НоваяЗапись.МенеджерВыгрузки = НастройкаФорматаED.МенеджерВыгрузки;
		 	
		 	Если НЕ НастройкаФорматаED.МодельДанных = Неопределено Тогда
		 	    ПКОМодели = гкс_ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение");
		 		НоваяЗапись.МодельДанных = гкс_ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, НастройкаФорматаED.МодельДанных, ПКОМодели, "ПолучитьСсылку"); 	
		 	КонецЕсли;
		 	
		КонецЦикла;
		
		НаборЗаписейНастройкиED.Записать();
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт

	// СостоянияВходящихСообщенийRMQ.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "СостоянияВходящихСообщенийRMQ";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.гкс_СостоянияВходящихСообщенийRMQ;
	ПравилоКонвертации.ТипXDTO   = "гкс_СостоянияОбработкиСообщенийRMQ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.гкс_СостоянияВходящихСообщенийRMQ.ВОбработке, "ВОбработке");
	ЗначенияДляОтправки.Вставить(Перечисления.гкс_СостоянияВходящихСообщенийRMQ.Зарегистрировано, "Зарегистрировано");
	ЗначенияДляОтправки.Вставить(Перечисления.гкс_СостоянияВходящихСообщенийRMQ.Обработано, "Обработано");
	ЗначенияДляОтправки.Вставить(Перечисления.гкс_СостоянияВходящихСообщенийRMQ.ОшибкаОбработки, "ОшибкаОбработки");
	ЗначенияДляОтправки.Вставить(Перечисления.гкс_СостоянияВходящихСообщенийRMQ.Пропущено, "Пропущено");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВОбработке", Перечисления.гкс_СостоянияВходящихСообщенийRMQ.ВОбработке);
	ЗначенияДляПолучения.Вставить("Зарегистрировано", Перечисления.гкс_СостоянияВходящихСообщенийRMQ.Зарегистрировано);
	ЗначенияДляПолучения.Вставить("Обработано", Перечисления.гкс_СостоянияВходящихСообщенийRMQ.Обработано);
	ЗначенияДляПолучения.Вставить("ОшибкаОбработки", Перечисления.гкс_СостоянияВходящихСообщенийRMQ.ОшибкаОбработки);
	ЗначенияДляПолучения.Вставить("Пропущено", Перечисления.гкс_СостоянияВходящихСообщенийRMQ.Пропущено);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыФорматовОбменаRMQ.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ТипыФорматовОбменаRMQ";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.гкс_ТипыФорматовОбменаRMQ;
	ПравилоКонвертации.ТипXDTO   = "гкс_ТипыФорматовОбменаRMQ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.гкс_ТипыФорматовОбменаRMQ.ED, "ED");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ED", Перечисления.гкс_ТипыФорматовОбменаRMQ.ED);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Функция ДвоичныеДанныеИзСтроки(СтрокаДанных)
	ПотокВПамяти = Новый ПотокВПамяти();
	
	ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти, КодировкаТекста.UTF8);
	ЗаписьДанных.ЗаписатьСимволы(СтрокаДанных);
	
	Возврат ПотокВпамяти.ЗакрытьИПолучитьДвоичныеДанные();
КонецФункции
Функция ИсходящееСообщение(ИдентификаторСообщения) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходящиеСообщения.Ссылка КАК ИсходящееСообщение
	|ИЗ
	|	Справочник.ИсходящиеСообщения КАК ИсходящиеСообщения
	|ГДЕ
	|	ИсходящиеСообщения.ИдентификаторСообщения = &ИдентификаторСообщения";
	
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ИсходящееСообщение;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции
Функция СтрокаИзДвоичныхДанных(ДД)
	ЧтениеДанных = Новый ЧтениеДанных(ДД);
	Результат = ЧтениеДанных.ПрочитатьСимволы(Неопределено, КодировкаТекста.UTF8);
	ЧтениеДанных.Закрыть();
	
	Возврат Результат;
КонецФункции
Функция ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO)
	// ДанныеXDTO содержат только 1 свойство, 
	// значит выполняется загрузка значения свойства, а не самого объекта. 
	Возврат ДанныеXDTO.Количество() = 1;
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Справочник_ВходящиеСообщения_Отправка_mdm_ПриОбработке" Тогда 
		ПОД_Справочник_ВходящиеСообщения_Отправка_mdm_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФорматыОбменаИАС_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФорматыОбменаИАС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВходящиеСообщения_mdm_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВходящиеСообщения_mdm_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВходящиеСообщения_mdm_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ВходящиеСообщения_mdm_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВходящиеСообщения_mdm_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ВходящиеСообщения_mdm_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВходящиеСообщенияНовый_mdm_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВходящиеСообщенияНовый_mdm_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВходящиеСообщенияНовый_mdm_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ВходящиеСообщенияНовый_mdm_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВходящиеСообщенияНовый_mdm_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ВходящиеСообщенияНовый_mdm_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_гкс_МоделиДанныхXDTO_Отправка_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФорматыОбменаИАС_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФорматыОбменаИАС_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФорматыОбменаИАС_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФорматыОбменаИАС_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФорматыОбменаИАС_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФорматыОбменаИАС_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
