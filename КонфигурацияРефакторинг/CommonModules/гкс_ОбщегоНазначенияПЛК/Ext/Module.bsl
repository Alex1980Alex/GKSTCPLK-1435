// @strict-types

#Область ПрограммныйИнтерфейс

// Позволяет определить заполнен ли реквизит в документе.
//
// Параметры:
//  ИмяРеквизита - Строка - Строковое имя искомого реквизита.
//  ДокументОбъект - ДокументОбъект - Объект, в котором проверяется заполненность реквизита.
//  МетаданныеДокумента - Метаданные - Объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Булево - Истина, если реквизит с указанным именем не заполнен в документе.
//
Функция ЕстьНезаполненныйРеквизитДокумента(ИмяРеквизита, ДокументОбъект, МетаданныеДокумента) Экспорт

	Результат =
		ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеДокумента)
		И НЕ ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]);

	Возврат Результат;

КонецФункции

#Область ПрочиеПроцедурыИФункции

#Область МетодыРаботыСЗапросом


// Формирует пакет запросов и возвращает результат каждого запроса
//
// Параметры:
//	Запрос			- Запрос - запрос, параметры которого предварительно установлены.
//	ТекстыЗапроса	- СписокЗначений - в списке перечислены тексты запросов и их имена.
//	ОбходРезультата - ОбходРезультатаЗапроса - вариант обхода результата запроса.
//	ДобавитьРазделитель - Булево - добавлять разделитель между запросами из ТекстыЗапроса
//	УничтожитьСозданныеВременныеТаблицы - Булево - добавить уничтожение временных таблиц, создаваемых в ТекстыЗапроса
//										Для уничтожения таблице должно быть присвоено имя в ТекстыЗапроса.
//
// Возвращаемое значение:
//   Структура   - структура в которую помещены полученные таблицы.
//
Функция ВыгрузитьРезультатыЗапроса(Запрос,
								 	ТекстыЗапроса,
									ОбходРезультата = Неопределено,
									ДобавитьРазделитель = Ложь,
									УничтожитьСозданныеВременныеТаблицы = Ложь) Экспорт
	
	Таблицы = Новый Структура;
	
	// Инициализация варианта обхода результата запроса.
	Если ОбходРезультата = Неопределено Тогда
		ОбходРезультата = ОбходРезультатаЗапроса.Прямой;
	КонецЕсли;
	
	Результаты = ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса, ДобавитьРазделитель, УничтожитьСозданныеВременныеТаблицы);
	
	Если Результаты <> Неопределено Тогда
		
		// Помещение результатов запроса в таблицы.
		Для Каждого ТекстЗапроса Из ТекстыЗапроса Цикл
			ИмяТаблицы = ТекстЗапроса.Представление;
			Если НЕ ПустаяСтрока(ИмяТаблицы) Тогда // имя таблицы
				Результат = Результаты[ТекстыЗапроса.Индекс(ТекстЗапроса)];
				Если Результат <> Неопределено Тогда
					ТаблицаЗапроса = Результат.Выгрузить(ОбходРезультата);
					Таблицы.Вставить(ИмяТаблицы, ТаблицаЗапроса);
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таблицы;
	
КонецФункции

// Возвращает текст разделителя для вставки между текстами пакета запросов.
//
// Возвращаемое значение:
//  Строка - текст разделителя.
//
Функция РазделительЗапросовВПакете() Экспорт
	
	Возврат "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

// Возвращает текст разделителя для вставки между текстами объединяемых запросов.
//
// Параметры:
//  ТолькоУникальные - Булево - признак того, что необходимо выбирать только уникальные записи при объединении.
//
// Возвращаемое значение:
//  Строка - текст разделителя.
//
Функция РазделительЗапросовВОбъединении(ТолькоУникальные = Ложь) Экспорт
	
	Если ТолькоУникальные Тогда
		Возврат "
		|
		|ОБЪЕДИНИТЬ
		|
		|";
	Иначе
		Возврат "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Функция раскладывает переданный массив ссылок в соответствие по типам этих ссылок.
//
//	Параметры:
//		МассивСсылок - Массив Из ЛюбаяСсылка - массив ссылок на объекты информационной базы
//  Возвращаемое значение:
//		Соответствие - Соотвествие типов ссылкам.
//			Ключ - полное имя типа ссылки.
//	        Значение - Массив Из ЛюбаяСсылка - ссылок этого типа.
//
Функция СоответствиеМассивовПоТипамОбъектов(МассивСсылок) Экспорт
	
	СоответствиеТипов = Новый Соответствие;
	
	Для Каждого Объект Из МассивСсылок Цикл
		
		ТипОбъекта = Объект.Метаданные().ПолноеИмя();
		ТекущийТипОбъекта = СоответствиеТипов.Получить(ТипОбъекта); // Массив - 
		
		Если ТекущийТипОбъекта = Неопределено Тогда
			СоответствиеТипов.Вставить(ТипОбъекта, Новый Массив);
			ТекущийТипОбъекта = СоответствиеТипов.Получить(ТипОбъекта);
		КонецЕсли;
		ТекущийТипОбъекта.Добавить(Объект);
		
	КонецЦикла;
	
	Возврат СоответствиеТипов;
	
КонецФункции

#КонецОбласти

// Процедура для справочников с отключенным автообновлением предопределенных данных 
// устанавливает соответствие существующих элементов с предопределенными значениями
// 
// Параметры:
//  МенеджерОбъекта - СправочникМенеджер - Менеджер объекта
//  ПредопределенныеЭлементы - Соответствие - ключами являются имена предопределенных элементов, а значениями наименование или код элемента 
//  ИскатьПоКоду - Булево - Истина - если необходимо искать по коду
//
Процедура УстановитьПредопределенныеДанные(МенеджерОбъекта, ПредопределенныеЭлементы, ИскатьПоКоду = Истина) Экспорт 
	
	МетаданныеОбъекта = МенеджерОбъекта.ПустаяСсылка().Метаданные(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ВЫБРАТЬ ИмяПредопределенныхДанных ИЗ %1 КАК Справочник ГДЕ Предопределенный", 
		МетаданныеОбъекта.ПолноеИмя());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для	Каждого КлючИЗначение Из ПредопределенныеЭлементы Цикл
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(КлючИЗначение.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		СуществующийЭлемент = ?(ИскатьПоКоду,
			МенеджерОбъекта.НайтиПоКоду(КлючИЗначение.Значение),
			МенеджерОбъекта.НайтиПоНаименованию(КлючИЗначение.Значение));
			
		Если ЗначениеЗаполнено(СуществующийЭлемент) Тогда
			
			СуществующийЭлементОбъект = СуществующийЭлемент.ПолучитьОбъект();
			СуществующийЭлементОбъект.ИмяПредопределенныхДанных = КлючИЗначение.Ключ;
			СуществующийЭлементОбъект.Записать();
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Установлено ИмяПредопределенныхДанных=%1'"), КлючИЗначение.Ключ);
				
			ЗаписьЖурналаРегистрации("Данные.Изменение предопределенных данных", УровеньЖурналаРегистрации.Информация, 
				МетаданныеОбъекта, СуществующийЭлемент, ТекстСообщения);
				
		КонецЕсли;
		
	КонецЦикла;
	ОбновитьПовторноИспользуемыеЗначения();		
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса, ДобавитьРазделитель, УничтожитьСозданныеВременныеТаблицы)
	
	Результаты = Неопределено;
	
	МассивТекстовЗапросов 	 = Новый Массив;
	МассивУничтожаемыхТаблиц = Новый Массив;
	
	// Формирование текст запроса.
	Для Каждого ТекстЗапроса Из ТекстыЗапроса Цикл
		
		Если ЗначениеЗаполнено(ТекстЗапроса.Представление) Тогда
			МассивТекстовЗапросов.Добавить("// " + ТекстЗапроса.Представление);
		КонецЕсли; 
		
		МассивТекстовЗапросов.Добавить(ТекстЗапроса.Значение + ?(ДобавитьРазделитель, РазделительЗапросовВПакете(), ""));
		
		Если УничтожитьСозданныеВременныеТаблицы
		 И ЗначениеЗаполнено(ТекстЗапроса.Представление)
		 И СтрНайти(ВРег(ТекстЗапроса.Значение), "ПОМЕСТИТЬ") <> 0 Тогда
			МассивУничтожаемыхТаблиц.Добавить(ТекстЗапроса.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИмяУдаляемойТаблицы Из МассивУничтожаемыхТаблиц Цикл
		МассивТекстовЗапросов.Добавить("УНИЧТОЖИТЬ " + ИмяУдаляемойТаблицы + РазделительЗапросовВПакете());
	КонецЦикла;
	
	Если МассивТекстовЗапросов.Количество() > 0 Тогда
		
		// Выполнение запроса.
		Запрос.Текст = СтрСоединить(МассивТекстовЗапросов, Символы.ПС);
		Результаты = Запрос.ВыполнитьПакет();
		
	КонецЕсли;
	
	Возврат Результаты;
	
КонецФункции

// Возвращает представление переданного объекта.
//
// Параметры:
//	ПараметрОбъект - Строка - 
//	               - ОбъектМетаданных - объект для получения представления
//
// Возвращаемое значение:
//	Строка - представление объекта
//
Функция ПредставлениеОбъекта(ПараметрОбъект) Экспорт
	
	Если ПараметрОбъект = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	МетаданныеОбъекта = ?(ТипЗнч(ПараметрОбъект) = Тип("Строка"), Метаданные.НайтиПоПолномуИмени(ПараметрОбъект), ПараметрОбъект);
	
	Представление = Новый Структура("ПредставлениеОбъекта");
	ЗаполнитьЗначенияСвойств(Представление, МетаданныеОбъекта);
	Если Не ПустаяСтрока(Представление.ПредставлениеОбъекта) Тогда
		Возврат Представление.ПредставлениеОбъекта;
	КонецЕсли;
	
	Возврат МетаданныеОбъекта.Представление();
	
КонецФункции

#КонецОбласти


