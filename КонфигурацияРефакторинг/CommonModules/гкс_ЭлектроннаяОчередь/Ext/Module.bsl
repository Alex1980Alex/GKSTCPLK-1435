////////////////////////////////////////////////////////////////////////////////
// Электронная очередь: серверные процедуры и функции для работы с электронной очередью.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс 

// Интерфейсная функция для одноименной функции регистра сведений гкс_НоменклатураПЛК
//
// Параметры:
//  ТипРегистрации - ПеречислениеСсылка.гкс_ТипРегистрации - тип регистрации для отбора
//                 
//  ВидПеревозки - ПеречислениеСсылка.гкс_ТипыТранспортныхСредствДоставки -  вид перевозки для отбора
// 
//  Период	- Структура - структура с датами начала и окончания периода
//
// Возвращаемое значение:
//   Массив   - массив номенклатуры
//
Функция РабочаяНоменклатураПериода(ТипРегистрации, ВидПеревозки, Период) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегистрыСведений.гкс_НоменклатураПЛК.РабочаяНоменклатураПериода(ТипРегистрации, ВидПеревозки, Период);
	
КонецФункции

// Интерфейсная функция для одноименной функции регистра сведений гкс_НоменклатураПЛК
//
// Параметры:
//  ТипРегистрации - ПеречислениеСсылка.гкс_ТипРегистрации - тип регистрации для отбора
//                 
//  ВидПеревозки - ПеречислениеСсылка.гкс_ТипыТранспортныхСредствДоставки -  вид перевозки для отбора
//                 
//  ДатаУстановки	- Дата - дата получения среза последних
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица значений с колонкой "Номенклатура"
//
Функция РабочаяНоменклатураНаДату(ТипРегистрации, ВидПеревозки, ДатаУстановки) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегистрыСведений.гкс_НоменклатураПЛК.РабочаяНоменклатураНаДату(ТипРегистрации, ВидПеревозки, ДатаУстановки);
	
КонецФункции

// Расширяет условие отбора по условию проезда, чтобы старые записи без заполненных значений
//		условий проезда определялись как DAP
//
// Параметры:
//  УсловиеПроезда - СправочникСсылка.гкс_УсловияПроезда - текущее условие проезда 
//
// Возвращаемое значение:
//   Массив - массив условий проезда
//
Функция ОтборПоУсловиямПроезда(УсловиеПроезда) Экспорт
	
	УсловияПроезда = Новый Массив;
	УсловияПроезда.Добавить(УсловиеПроезда);
	Если УсловиеПроезда = Справочники.гкс_УсловияПроезда.DAP Тогда
		УсловияПроезда.Добавить(Справочники.гкс_УсловияПроезда.ПустаяСсылка());
	КонецЕсли;
	
	Возврат УсловияПроезда;
	
КонецФункции

// Интерфейсная функция для одноименной функции регистра сведений гкс_НастройкиПриемкаПЛКПоТочкамМаршрута
//
// Параметры:
//  ТочкаМаршрута - СправочникСсылка.гкс_ТочкиМаршрута - точка маршрута для которой получаем параметр
//
// Возвращаемое значение:
//   число - количество минут
//
Функция ВремяОжиданияТранспортногоСредства(ТочкаМаршрута) Экспорт
	
	Возврат РегистрыСведений.гкс_НастройкиПриемкаПЛКПоТочкамМаршрута.
		ВремяОжиданияТранспортногоСредства(ТочкаМаршрута);
		
КонецФункции

#Область РегламентныеЗадания

Процедура ОбновлениеСтатусовЭлектроннойОчередиПЛК() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.гкс_ОбновлениеСтатусовЭлектроннойОчередиПЛК);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	РегистрыСведений.гкс_СтатусыЗаписейВОчередиПриемкиПЛК.ОбновитьСтатусыЭлектроннойОчереди();
		
КонецПроцедуры 

// Обработчик регламентного задания гкс_ОбновлениеТаблоЭлектроннойОчереди
//
Процедура ОбновлениеТаблоЭлектроннойОчереди() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.гкс_ОбновлениеТаблоЭлектроннойОчереди);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;

	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ВариантИспользования", 
		Перечисления.гкс_ВариантыИспользованияТаблоЭлектроннойОчереди.БезОтбора);
		
	ПараметрыОбработки.Вставить("ВидПеревозки", 	Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль);
	ПараметрыОбработки.Вставить("ВидТабло", 		Перечисления.гкс_ВидыЭлектронныхТабло.НеПрошедшиеРегистрацию);
	ПараметрыОбработки.Вставить("ТипРегистрации", 	Перечисления.гкс_ТипРегистрации.Приемка);
	ПараметрыОбработки.Вставить("ТочкаМаршрута", 	Константы.гкс_ТочкаМаршрутаБазы.Получить());
	ПараметрыОбработки.Вставить("Номенклатура", 	Неопределено);
	
	Отказ = Ложь;
	
   	гкс_ИнтеграцияСЭлектроннымТаблоСервер.ОбновитьТаблоДляЭлектроннойОчереди(ПараметрыОбработки, Отказ);

КонецПроцедуры

#КонецОбласти

Функция ПериодЭлектроннойОчередиЗаданКорректно(ПараметрыПериода) Экспорт
	
	НачалоПериода = НачалоЧаса(ПараметрыПериода.НачалоПериода);
	ОкончаниеПериода = КонецЧаса(ПараметрыПериода.ОкончаниеПериода);
	Номенклатура = ПараметрыПериода.Номенклатура;
	
	Если ПараметрыПериода.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда
		МенеджерГрафика = РегистрыСведений.гкс_ГрафикПриемкиПЛК;
	Иначе
		МенеджерГрафика = РегистрыСведений.гкс_ГрафикОтгрузкиПЛК;	
	КонецЕсли;
	
	КоличествоТранспорта = МенеджерГрафика.КоличествоТранспортныхСредствВЧас(ОкончаниеПериода, Номенклатура);
	
	Результат = Ложь;
	
	Если НЕ (ОкончаниеПериода > НачалоПериода И КоличествоТранспорта > 0) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Периоды = ШаблонОчередиЗаПериодСУчетомКоличестваТраснпорта(НачалоПериода, ОкончаниеПериода, КоличествоТранспорта);
	
	Для Каждого Период Из Периоды Цикл
		
		Если Период.НачалоПериода = ПараметрыПериода.НачалоПериода 
			И Период.ОкончаниеПериода = ПараметрыПериода.ОкончаниеПериода Тогда
			
			Результат = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Результат; 
	
КонецФункции

Функция ДатаЗаявкиАктуальна(Дата, ЧасовойПояс) Экспорт
	
	ДатаЧасовойПояс = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Возврат Дата >= ДатаЧасовойПояс;
	
КонецФункции

#Область СтатусыЭлектроннойОчереди

// Устанавливает статус записи в очереди
// Может записать в очередь, удалить запись из очереди
//
// Параметры:
//  Запись - ДокументСсылка.гкс_ЗаписьВОчередьПриемкиПЛК - Запись в очередь
//  НовыйСтатус  - ПеречислениеСсылка.гкс_СтатусыЭлектроннойОчереди - новый статус записи
//
Процедура УстановитьСтатусЗаписиВЭлектроннойОчереди(Запись, НовыйСтатус) Экспорт
	
	РегистрыСведений.гкс_СтатусыЗаписейВОчередиПриемкиПЛК.УстановитьСтатусЗаписи(Запись, НовыйСтатус);

КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ШаблонОчередиЗаПериодСУчетомКоличестваТраснпорта(Знач НачалоПериода, 
                                                         Знач ОкончаниеПериода, 
                                                         МаксимальноеКоличествоТранспортаВЧас)
	
	Очередь = ИнициализироватьТаблицуПериодов();
	
	Если МаксимальноеКоличествоТранспортаВЧас <= 0 И ОкончаниеПериода <= НачалоПериода Тогда
		Возврат Очередь;
	КонецЕсли; 
		
	СекундВМинуте= гкс_ОбщегоНазначенияКлиентСервер.СекундВМинуте();
    ИнтервалМеждуЗаписями = СекундВМинуте * Цел( СекундВМинуте / МаксимальноеКоличествоТранспортаВЧас);

	НачалоЧаса = НачалоЧаса(НачалоПериода);
	Для НомерЧаса = 1 По 24 Цикл
		
		Если НачалоЧаса > ОкончаниеПериода Тогда
			Прервать;
		КонецЕсли;
		
		Для СчетчикМашина = 0 По МаксимальноеКоличествоТранспортаВЧас - 1 Цикл
			
			НачалоПериодаЗаписи = НачалоЧаса + СчетчикМашина * ИнтервалМеждуЗаписями;
			Если НачалоПериодаЗаписи > ОкончаниеПериода Тогда
				Прервать;
			КонецЕсли;
			
			НоваяЗапись = Очередь.Добавить();
			НоваяЗапись.НачалоПериода = НачалоПериодаЗаписи;
			НоваяЗапись.ОкончаниеПериода = НачалоПериодаЗаписи + ИнтервалМеждуЗаписями;

		КонецЦикла;
		
		НачалоЧаса = НачалоЧаса + гкс_ОбщегоНазначенияКлиентСервер.СекундВЧасе();

	КонецЦикла;

	Возврат Очередь;

КонецФункции

Функция ИнициализироватьТаблицуПериодов() 
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НачалоПериода");
	ТаблицаПериодов.Колонки.Добавить("ОкончаниеПериода");
	
	Возврат ТаблицаПериодов;
	
КонецФункции

#КонецОбласти