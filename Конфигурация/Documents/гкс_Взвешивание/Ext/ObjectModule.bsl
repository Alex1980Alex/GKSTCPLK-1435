#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ИдентификаторОтправки = Неопределено;
	
КонецПроцедуры
 
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		гкс_ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
		
		Если Не ЗначениеЗаполнено(МестнаяДата) И ЗначениеЗаполнено(ТочкаМаршрута) Тогда
			МестнаяДата = Справочники.гкс_ТочкиМаршрута.ПолучитьМестнуюДатуПоТочкеМаршрута(ТочкаМаршрута);
		КонецЕсли; 
		  
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// проверка что нет других проведенных документов взвешивания данного типа
	// для регистрации на ПЛК
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Взвешивание.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.гкс_Взвешивание КАК Взвешивание
	|ГДЕ
	|	Взвешивание.Ссылка <> &Ссылка
	|	И Взвешивание.ТипВзвешивания = &ТипВзвешивания
	|	И Взвешивание.ДокументРегистрации = &ДокументРегистрации
	|	И НЕ Взвешивание.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТипВзвешивания", ТипВзвешивания);
	Запрос.УстановитьПараметр("ДокументРегистрации", ДокументРегистрации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;		
		ТекстСообщения = НСтр("ru = 'У регистрации на ПЛК уже есть проведенный документ взвешивания.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если ЗапретИзмененияДокумента(Отказ) Тогда		
    	Возврат;
    КонецЕсли;
   
	гкс_ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ЗаполнитьОрганизацию();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапретИзмененияДокумента(Отказ) Тогда
		Возврат;
	КонецЕсли;
   	
	гкс_ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	Документы.гкс_ОснованиеДляДвиженияЗапасов.АктуализироватьДокументДвиженияЗапасов(ДокументРегистрации, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
		
	ДопПараметры = гкс_ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	ЗаполнитьДопПараметры(ДопПараметры);
	
	Если ПолучитьФункциональнуюОпцию("гкс_ИспользоватьКонтрольПревышенияВесаАвтомобиля")
		И гкс_ПриемкаТранспорта.ПревышениеДопустимогоВесаАвтомобиля(ЭтотОбъект) Тогда
		
		ДопПараметры.ДополнительныеСвойства.Вставить("СостояниеВзвешиванияБруттоАвто", 
			Перечисления.гкс_СостоянияРегистрации.НеПринятоПоПревышениюМаксимальногоВеса);
	КонецЕсли;	
	
	гкс_ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ, ДопПараметры);
		
	Если гкс_УчетВагоновСРПВ.ИспользуетсяИнтеграцияСРПВ()
		И ЗначениеЗаполнено(ИдентификаторОтправки) Тогда
		
		// приемка
		Если ТипВзвешивания = Перечисления.гкс_ТипыВзвешивания.Въезд Тогда
			Статус = Перечисления.гкс_СРПВСтатусыВагонов.ВзвешенБрутто;
			СформироватьНаправлениеНаРазгрузкуПриНеобходимости();
		Иначе
			Статус = Перечисления.гкс_СРПВСтатусыВагонов.ВзвешенТара;
		КонецЕсли;
		
		РегистрыСведений.гкс_СРПВСтатусыОформленияВагонов
			.ОтразитьСвязьСДокументомСРПВ(ИдентификаторОтправки, Статус, Ссылка);
	КонецЕсли;    
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	гкс_ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДопПараметры(ДопПараметры)
	
	ДопПараметры.ДополнительныеСвойства = Новый Структура;
		
	Если ДополнительныеСвойства.Свойство("Состояние") Тогда
		ДопПараметры.ДополнительныеСвойства.Вставить("СостояниеВзвешиванияБруттоАвто", 
			ДополнительныеСвойства.Состояние);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОрганизацию()
	
	Если Не ЗначениеЗаполнено(Организация) Тогда 
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРегистрации, "Организация");
	КонецЕсли;
	
КонецПроцедуры 

Функция ЗапретИзмененияДокумента(Отказ)
	
	ЗапретИзменения = Ложь;
	
	ТипРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРегистрации, "ТипРегистрации");
	
	Если ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда
		ЗапретИзменения =  ЗапретИзмененияДокументаПоПриемке();
		ТекстШаблона = НСтр("ru = 'Не удалось записать документ: %1 т.к. уже оформлен реестр ЗПП-3'");
	Иначе
		ЗапретИзменения = ЗапретИзмененияДокументаПоОтгрузке();
		ТекстШаблона = НСтр("ru = 'Не удалось записать документ: %1 т.к. транспорт уже убыл'");
	КонецЕсли;
	
	Если ЗапретИзменения Тогда
		
		Отказ = Истина;
		ИмяСобытия = НСтр("ru = 'Запрет изменения документа'");
		
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Предупреждение, Метаданные.Документы.гкс_Взвешивание, 
				Ссылка, СтрШаблон(ТекстШаблона, Ссылка));
	КонецЕсли;			
	
	Возврат ЗапретИзменения;
	
КонецФункции	

Функция ЗапретИзмененияДокументаПоПриемке()
	
	Если гкс_ПриемкаТранспорта.ЗапретИзмененияДокументаПоРеестру(Ссылка) Тогда	
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
   
КонецФункции

Функция ЗапретИзмененияДокументаПоОтгрузке()
	
	Если ДополнительныеСвойства.Свойство("НеПроверятьЗапретРедактированияОтгрузки") Тогда
		Возврат Ложь;	
	КонецЕсли;	
	
	ВидПеревозки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРегистрации, "ВидПеревозки");
			
	Если ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль
		И РегистрыСведений.гкс_СостоянияРегистрации.УжеУбыл(ДокументРегистрации) Тогда
					
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
   
КонецФункции

Процедура СформироватьНаправлениеНаРазгрузкуПриНеобходимости()  
	
	РазрешитьВходнойКонтрольДоВзвешивания =
		гкс_ПриемкаТранспорта.РазрешитьВходнойКонтрольДоВзвешиванияПоРегистрации(ДокументРегистрации);
	Если Не РазрешитьВходнойКонтрольДоВзвешивания Тогда
		Возврат;
	КонецЕсли;
	
	Состояние = РегистрыСведений.гкс_СостоянияРегистрации.ТекущееСостояниеПоРегистрации(ДокументРегистрации);
	Если ЭтоВзвешиваниеВъед() 
		И Состояние	= Перечисления.гкс_СостоянияРегистрации.КачествоПринято Тогда                                           
		ЛабораторныйАнализ = гкс_ПриемкаТранспорта.ЛабораторныйАнализВходногоКонтроляПоРегистрации(ДокументРегистрации);
		Если ЗначениеЗаполнено(ЛабораторныйАнализ) Тогда			
			гкс_ПриемкаТранспорта.СформироватьНаправлениеНаРазгрузку(Дата, ДокументРегистрации, ЛабораторныйАнализ);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Функция ЭтоВзвешиваниеВъед()
	Возврат
		ТипВзвешивания = Перечисления.гкс_ТипыВзвешивания.Въезд 
		И Вес <> 0;
КонецФункции		
#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
#КонецЕсли

