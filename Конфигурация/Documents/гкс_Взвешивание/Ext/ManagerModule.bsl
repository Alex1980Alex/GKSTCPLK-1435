#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ПриемкаПЛК");
	МеханизмыДокумента.Добавить("СтатусыДопускаЖДТранспорта");
	
	Если гкс_УчетВагоновСРПВ.ИспользуетсяИнтеграцияСРПВ() Тогда
		МеханизмыДокумента.Добавить("УчетВагоновСРПВ");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = гкс_ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ, ДопПараметры);
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		Если гкс_ПриемкаТранспорта.УстанавливатьСостояниеПоВзвешиванию(Документ) Тогда
			ТекстЗапросаТаблицаСостояниеРегистрации(ТекстыЗапроса, Регистры);  
		КонецЕсли;	
		ДобавитьТекстЗапросаТаблицаСтатусыДопускаВагоновКВскрытиюПоНеобходимости(Документ, ТекстыЗапроса, Регистры);	
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат гкс_ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ТочкаМаршрута)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//  КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//  Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты - см. ШаблоныСообщенийПереопределяемый.ПриПодготовкеШаблонаСообщения.Реквизиты
//  Вложения  - см. ШаблоныСообщенийПереопределяемый.ПриПодготовкеШаблонаСообщения.Вложения
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура:
//    * ЗначенияРеквизитов - Соответствие из КлючИЗначение - список используемых в шаблоне реквизитов:
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие из КлючИЗначение - список используемых в шаблоне общих реквизитов:
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие из КлючИЗначение:
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные
//                  - Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
		
КонецПроцедуры

// Заполняет список получателей почты при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма:
//     * ВариантОтправки - Строка - вариант отправки для получателя письма: Кому, Копия, СкрытаяКопия, ОбратныйАдрес;
//     * Адрес           - Строка - адрес электронной почты получателя;
//     * Представление   - Строка - представление получателя письма;
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект, являющийся источником данных.
//                   - Структура  - структура описывающая параметры шаблона:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект, являющийся источником данных;
//    * ВидСообщения - Строка - вид формируемого сообщения: "ЭлектроннаяПочта" или "СообщениеSMS";
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров;
//    * ОтправитьСразу - Булево - признак мгновенной отправки письма;
//    * ПараметрыСообщения - Структура - дополнительные параметры сообщения;
//    * ПреобразовыватьHTMLДляФорматированногоДокумента - Булево - признак преобразование HTML текста
//             сообщения содержащего картинки в тексте письма из-за особенностей вывода изображений
//             в форматированном документе;
//    * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись для отправки письма.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт

		
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

Функция СформироватьДокумент(ДанныеЗаполнения) Экспорт
	
	НовыйДокумент = Документы.гкс_Взвешивание.СоздатьДокумент();
	НовыйДокумент.Заполнить(ДанныеЗаполнения);		
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции 

// Возвращает действующий документ взвешивания для регистрации траснпорта
//
// Параметры:
//  ДокументРегистрации - ДокументСсылка.гкс_РегистрацииНаПЛК - регистрация на ПЛК.
//  ТипВзвешивания - ПеречислениеСсылка.гкс_ТипыВзвешивания - Отбор по типу взвешивания.
// 
// Возвращаемое значение:
//  ДокументСсылка.гкс_Взвешивание - документ взвешивания для выбранной регистрации.
//
Функция ПоРегистрацииИТипуВзвешивания(ДокументРегистрации, ТипВзвешивания) Экспорт
	
	Результат = ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПолучитьПоРегистрацииИТипуВзвешивания();
	Запрос.УстановитьПараметр("ДокументРегистрации", ДокументРегистрации);
	Запрос.УстановитьПараметр("ТипВзвешивания", ТипВзвешивания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.СсылкаНаВзвешивание;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получить данные по фактическому весу.
// 
// Параметры:
//  ДокументРегистрации -ДокументСсылка.гкс_РегистрацияНаПЛК - документ регистрации
// 
// Возвращаемое значение:
// Структура - структура с ключами (ВесНетто, ВесБрутто, ВесТары, ДатаРазгрузки, ЕдиницаИзмеренияВеса)
//		 
Функция ПолучитьДанныеФактическогоВесаПоРегистрации(ДокументРегистрации) Экспорт
	
	Результат = ИнициализироватьСтруктуруДанныхПоВесу(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПолучитьДанныеПоФактическомуВесуРегистрации();
	Запрос.УстановитьПараметр("Регистрация", ДокументРегистрации);	

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат.ЕдиницаИзмеренияВеса) Тогда
		Результат.ЕдиницаИзмеренияВеса = гкс_ПриемкаТранспортаВызовСервера.ПолучитьЕдиницуИзмеренияВесаПриемки();
	КонецЕсли;
		
	Возврат Результат;
	 
КонецФункции

// Возвращает дату последнего взвешивания по документу Регистрация
//
// Параметры:
//  ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК - Регистрация на ПЛК, 
// для которой определяем дату последнего взвешивания
// 
// Возвращаемое значение:
//  Дата - дата
//
Функция ДатаВзвешиванияПоРегистрации(ДокументРегистрации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(Взвешивание.Дата) КАК Дата
		|ИЗ
		|	Документ.гкс_Взвешивание КАК Взвешивание
		|ГДЕ
		|	Взвешивание.ДокументРегистрации = &ДокументРегистрации
		|	И Взвешивание.Проведен";
	
	Запрос.УстановитьПараметр("ДокументРегистрации", ДокументРегистрации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Дата(1, 1, 1, 0, 0, 0);
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.Дата;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение
	
Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры)
	
	МенеджерВременныхТаблиц = Неопределено;
	
	Если ДопПараметры <> Неопределено
		И ДопПараметры.Свойство("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц) Тогда
		
		МенеджерВременныхТаблиц = ?(МенеджерВременныхТаблиц = Неопределено,
									Новый МенеджерВременныхТаблиц,
									МенеджерВременныхТаблиц);
		
	Иначе
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	СостояниеЖД = Перечисления.гкс_СостоянияРегистрации.ГотовКОтборуПроб;
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка); 
	Запрос.УстановитьПараметр("СостояниеВзвешиванияБруттоЖД", СостояниеЖД);
	Запрос.УстановитьПараметр("Комментарий", "");
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	Запрос.УстановитьПараметр("СостояниеВзвешиванияБруттоАвто", Перечисления.гкс_СостоянияРегистрации.ГотовКОтборуПроб);
	Если Не ДопПараметры = Неопределено
		И ТипЗнч(ДопПараметры.ДополнительныеСвойства) = Тип("Структура")
		И ДопПараметры.ДополнительныеСвойства.Свойство("СостояниеВзвешиванияБруттоАвто") Тогда
		Запрос.УстановитьПараметр("СостояниеВзвешиванияБруттоАвто", 
		                  ДопПараметры.ДополнительныеСвойства.СостояниеВзвешиванияБруттоАвто);
	КонецЕсли;	

	НастроитьПараметрыПоДопускуКВскрытиюВагоновПоНеобходимости(ДокументСсылка, Запрос);
	
КонецПроцедуры  

Функция ТекстЗапросаТаблицаСостояниеРегистрации(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "гкс_СостоянияРегистрации";
	
	Если Не гкс_ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Взвешивание.Дата КАК Период,
	|	Взвешивание.Ссылка КАК ДокументРегистратор,
	|	Взвешивание.ТочкаМаршрута КАК ТочкаМаршрута,
	|	Взвешивание.ДокументРегистрации КАК ДокументРегистрации,
	|	&Пользователь КАК Пользователь,
	|	Взвешивание.ДокументРегистрации.ТранспортноеСредство КАК ТранспортноеСредство,
	|	ВЫБОР
	|		КОГДА Взвешивание.КачествоНеПринято
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияРегистрации.Убыл)
	|		КОГДА Взвешивание.ТипВзвешивания = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Въезд)
	|			ТОГДА ВЫБОР
	|					КОГДА Регистрация.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка)
	|						ТОГДА ВЫБОР
	|								КОГДА Регистрация.ВидПеревозки = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТранспортныхСредствДоставки.Автомобиль)
	|									ТОГДА &СостояниеВзвешиванияБруттоАвто
	|								ИНАЧЕ &СостояниеВзвешиванияБруттоЖД
	|							КОНЕЦ
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияРегистрации.ВзвешенТара)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Регистрация.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияРегистрации.ВзвешенТара)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияРегистрации.ВзвешенБрутто)
	|			КОНЕЦ
	|	КОНЕЦ КАК Состояние,
	|	Регистрация.ТипРегистрации КАК ТипРегистрации,
	|	Регистрация.ВидПеревозки КАК ВидПеревозки,
	|	Взвешивание.МестнаяДата КАК МестнаяДата,
	|	ВЫБОР
	|		КОГДА Регистрация.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка)
	|				И Взвешивание.ТипВзвешивания = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Въезд)
	|			ТОГДА ВЫБОР
	|					КОГДА Регистрация.ВидПеревозки = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТранспортныхСредствДоставки.Автомобиль)
	|						ТОГДА ВЫБОР
	|								КОГДА &СостояниеВзвешиванияБруттоАвто <> ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияРегистрации.НеПринятоПоПревышениюМаксимальногоВеса)
	|									ТОГДА """"
	|								ИНАЧЕ ""Превышение максимального веса брутто""
	|							КОНЕЦ
	|					ИНАЧЕ &Комментарий
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Комментарий
	|ИЗ
	|	Документ.гкс_Взвешивание КАК Взвешивание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК Регистрация
	|		ПО Взвешивание.ДокументРегистрации = Регистрация.Ссылка
	|ГДЕ
	|	Взвешивание.Ссылка = &Ссылка
	|	И Взвешивание.ДокументРегистрации ССЫЛКА Документ.гкс_РегистрацияНаПЛК";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	 
КонецФункции

Функция ТекстЗапросаТаблицаСтатусыДопускаВагоновКВскрытию(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "гкс_СтатусыДопускаВагоновКВскрытию";
	
	Если Не гкс_ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ДатаДокумента КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.гкс_ДопускиКВскрытиюВагонов.Претензионный) КАК ДопускКВскрытию,
	|	&ДокументРегистрации КАК ДокументРегистрации,
	|	&ТранспортноеСредство КАК Вагон,
	|	&ВскрытиеЗапрещено КАК ВскрытиеЗапрещено,
	|	&Пользователь КАК Ответственный,
	|	&КомментарийВскрытия КАК Комментарий";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДобавитьТекстЗапросаТаблицаСтатусыДопускаВагоновКВскрытиюПоНеобходимости(Документ, ТекстыЗапроса, Регистры)
	
	ЭтоПриемкаЖД = гкс_ПриемкаТранспорта.ЭтоВъездПриемкаЖДТранспорт(Документ);
	
	Если ЭтоПриемкаЖД Тогда		
		ТекстЗапросаТаблицаСтатусыДопускаВагоновКВскрытию(ТекстыЗапроса, Регистры);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Проверяет привышения веса брутто при взвешивании ЖД вагона 
// и фиксирует претензионный статус допуска вагона. 
//
Процедура ВыполнитьПроверкуОтклоненияБрутто(ДокументСсылка, ЗначениеПретензионный, Комментарий)
	
	НастройкиТочки = РегистрыСведений.гкс_НастройкиПриемкаПЛКПоТочкамМаршрута.ВсеНастройкиТочкиМаршрута(
		ДокументСсылка.ТочкаМаршрута);
	
	ДокументРегистрации = ДокументСсылка.ДокументРегистрации;	
	ТранспортныйДокумент = Документы.гкс_ТранспортныйДокумент.НайтиПоРегистрации(ДокументРегистрации);	
	
	Если Не ЗначениеЗаполнено(ТранспортныйДокумент) 
		Или НастройкиТочки.ЗначениеДопустимогоОтклоненияБрутто = 0 Тогда
			
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПолучитьСуммыВесовБруттоДляПартииВагонов();			
	
	Запрос.УстановитьПараметр("ТекДокВзвешивание", ДокументСсылка);
	Запрос.УстановитьПараметр("ТекДокРегистрации", ДокументРегистрации);
	Запрос.УстановитьПараметр("ПунктПогрузки", 	ТранспортныйДокумент.ПунктПогрузки);
	Запрос.УстановитьПараметр("Отправитель", 	ТранспортныйДокумент.Отправитель);
	Запрос.УстановитьПараметр("ПрошлаяДата", 	ДобавитьМесяц(ДокументСсылка.Дата, -3));
	Запрос.УстановитьПараметр("ТекущаяДата", 	ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВидПеревозки", 	Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт);
	Запрос.УстановитьПараметр("ТипРегистрации", Перечисления.гкс_ТипРегистрации.Приемка);
	Запрос.УстановитьПараметр("ТипВзвешивания", Перечисления.гкс_ТипыВзвешивания.Въезд);
	Запрос.УстановитьПараметр("Состояния", 		ПолучитьСостоянияРегистрацииДляПроверкиПретензионности());
	
	РезультатЗапроса = Запрос.Выполнить();		
	ВыборкаОтправитель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ШаблонРасчет = НСтр("ru = 'Разница Брутто по вагонам %1: %2(сумма по документам) - %3(сумма по весам) = %4'");
	ШаблонПревышение = НСтр("ru = ' - превышает Допустимое значение %1 из настройки.'");	
	
	Пока ВыборкаОтправитель.Следующий() Цикл
		
		РазницаВеса = ВыборкаОтправитель.ВесТранспортныйДокумент - ВыборкаОтправитель.ВесВзвешивание;
		ЕстьОтклонение = РазницаВеса > НастройкиТочки.ЗначениеДопустимогоОтклоненияБрутто;
		
		Если ЕстьОтклонение Тогда				
			ВыборкаДетали = ВыборкаОтправитель.Выбрать();
			МассивСтрок = Новый Массив;
			
			Пока ВыборкаДетали.Следующий() Цикл
				МассивСтрок.Добавить(ВыборкаДетали.Вагон);					
			КонецЦикла;
			
            СтрокаВагоны = СтрСоединить(МассивСтрок, ", ");
			
			ТекстРасчет = СтрШаблон(ШаблонРасчет, СтрокаВагоны, ВыборкаОтправитель.ВесТранспортныйДокумент,
				ВыборкаОтправитель.ВесВзвешивание, РазницаВеса);
			ТекстПревышение = СтрШаблон(ШаблонПревышение, НастройкиТочки.ЗначениеДопустимогоОтклоненияБрутто);
				
			Комментарий = ТекстРасчет + ТекстПревышение;
			
			ЗначениеПретензионный = Истина;	
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьСостоянияРегистрацииДляПроверкиПретензионности()
	
	СписокСостояний = Новый Массив();
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.ВесНеПринят);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.ВесПринят);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.ВзвешенБрутто);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.ВзвешенТара);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.ВзятыПробы);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.Выгружен);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.ВыгруженАвторизован);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.ВыгрузкаРазрешена);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.ВыгрузкаРазрешенаАвторизован);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.ГотовКОтборуПроб);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.КачествоНеПринято);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.КачествоПринято);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.НаВесахБрутто);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.НаВесахТара);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.НеПринято);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.Прибыл);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.ПрибылАвторизован);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.ПринятыПробы);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.ПринятыПробыАвторизация);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.Разгрузка);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.Регистрация);
		
	Возврат СписокСостояний;

КонецФункции

Процедура НастроитьПараметрыПоДопускуКВскрытиюВагоновПоНеобходимости(ДокументСсылка, Запрос)
	
	Если гкс_ПриемкаТранспорта.ЭтоВъездПриемкаЖДТранспорт(ДокументСсылка) Тогда		
		
		ДокументРегистрации = ДокументСсылка.ДокументРегистрации;		
		ДатаДокумента = ДокументСсылка.Дата;	
		ВскрытиеЗапрещено = Ложь;
		КомментарийВскрытия = 
			НСтр("ru = 'Пройдена автоматическая проверка отклонения брутто, при взвешивании.'");
		
		ВыполнитьПроверкуОтклоненияБрутто(ДокументСсылка, ВскрытиеЗапрещено, КомментарийВскрытия);
		
		Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
		Запрос.УстановитьПараметр("ДокументРегистрации", ДокументРегистрации);
		Запрос.УстановитьПараметр("ТранспортноеСредство", ДокументРегистрации.ТранспортноеСредство);
		Запрос.УстановитьПараметр("ВскрытиеЗапрещено", ВскрытиеЗапрещено);
		Запрос.УстановитьПараметр("КомментарийВскрытия", КомментарийВскрытия);
		
		Если ВскрытиеЗапрещено Тогда
			СостояниеВзвешиванияБруттоЖД = Перечисления.гкс_СостоянияРегистрации.ВзвешенБрутто;
			Запрос.УстановитьПараметр("СостояниеВзвешиванияБруттоЖД", СостояниеВзвешиванияБруттоЖД); 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьСтруктуруДанныхПоВесу() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВесНетто", 0);
	Результат.Вставить("ВесБрутто", 0); 
	Результат.Вставить("ВесТары", 0); 
	Результат.Вставить("ДатаРазгрузки");
	Результат.Вставить("ЕдиницаИзмеренияВеса");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ТекстыЗапросов

Функция ТекстЗапросаПолучитьДанныеПоФактическомуВесуРегистрации()

	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрацияНаПЛК.Ссылка КАК Регистрация,
	|	РегистрацияНаПЛК.ЕдиницаИзмеренияВеса КАК ЕдиницаИзмеренияВеса,
	|	ЕСТЬNULL(ВзвешиваниеВъезд.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВъезд,
	|	ЕСТЬNULL(ВзвешиваниеВъезд.Вес, 0) КАК ВесБрутто,
	|	ЕСТЬNULL(ВзвешиваниеВыезд.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВыезд,
	|	ЕСТЬNULL(ВзвешиваниеВыезд.Вес, 0) КАК ВесТара
	|ПОМЕСТИТЬ ВТ_ДокументыВзвешивания
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_Взвешивание КАК ВзвешиваниеВъезд
	|		ПО РегистрацияНаПЛК.Ссылка = ВзвешиваниеВъезд.ДокументРегистрации
	|			И (ВзвешиваниеВъезд.Проведен)
	|			И (ВзвешиваниеВъезд.ТипВзвешивания = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Въезд))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_Взвешивание КАК ВзвешиваниеВыезд
	|		ПО РегистрацияНаПЛК.Ссылка = ВзвешиваниеВыезд.ДокументРегистрации
	|			И (ВзвешиваниеВыезд.Проведен)
	|			И (ВзвешиваниеВыезд.ТипВзвешивания = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Выезд))
	|ГДЕ
	|	РегистрацияНаПЛК.Ссылка = &Регистрация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыВзвешивания.Регистрация КАК Регистрация,
	|	МАКСИМУМ(ВТ_ДокументыВзвешивания.ДатаВъезд) КАК ДатаВъезд,
	|	МАКСИМУМ(ВТ_ДокументыВзвешивания.ДатаВыезд) КАК ДатаВыезд
	|ПОМЕСТИТЬ ВТ_ДатыВзвешивания
	|ИЗ
	|	ВТ_ДокументыВзвешивания КАК ВТ_ДокументыВзвешивания
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыВзвешивания.Регистрация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументыВзвешивания.Регистрация КАК Регистрация,
	|	ВТДокументыВзвешивания.ЕдиницаИзмеренияВеса КАК ЕдиницаИзмеренияВеса,
	|	МАКСИМУМ(ВТДокументыВзвешивания.ВесБрутто) КАК ВесБрутто,
	|	МАКСИМУМ(ВТДокументыВзвешивания.ВесТара) КАК ВесТары,
	|	МАКСИМУМ(ВТДокументыВзвешивания.ВесБрутто) - МАКСИМУМ(ВТДокументыВзвешивания.ВесТара) КАК ВесНетто,
	|	МАКСИМУМ(ВТДокументыВзвешивания.ДатаВыезд) КАК ДатаРазгрузки
	|ИЗ
	|	ВТ_ДокументыВзвешивания КАК ВТДокументыВзвешивания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыВзвешивания КАК ВТДатыВзвешивания
	|		ПО ВТДокументыВзвешивания.Регистрация = ВТДатыВзвешивания.Регистрация
	|			И ВТДокументыВзвешивания.ДатаВъезд = ВТДатыВзвешивания.ДатаВъезд
	|			И (ВТДатыВзвешивания.ДатаВыезд = ВТДокументыВзвешивания.ДатаВыезд)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДокументыВзвешивания.Регистрация,
	|	ВТДокументыВзвешивания.ЕдиницаИзмеренияВеса";
		 
КонецФункции

Функция ТекстЗапросаПолучитьПоРегистрацииИТипуВзвешивания()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Взвешивание.Ссылка КАК СсылкаНаВзвешивание
	|ИЗ
	|	Документ.гкс_Взвешивание КАК Взвешивание
	|ГДЕ
	|	Взвешивание.ДокументРегистрации = &ДокументРегистрации
	|	И Взвешивание.Проведен
	|	И Взвешивание.ТипВзвешивания = &ТипВзвешивания";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПолучитьСуммыВесовБруттоДляПартииВагонов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РССвязьРегистрацииИТранспортногоДокумента.ДокументРегистрации КАК ДокументРегистрации,
	|	ДокТранспортныйДокументТЧТранспорт.ТранспортноеСредство КАК ТранспортноеСредство,
	|	ДокТранспортныйДокументТЧТранспорт.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_ТранспортныеДокументыПартии
	|ИЗ
	|	Документ.гкс_ТранспортныйДокумент КАК ДокТранспортныйДокумент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ТранспортныйДокумент.ТранспортныеСредства КАК ДокТранспортныйДокументТЧТранспорт
	|		ПО (ДокТранспортныйДокумент.Ссылка = ДокТранспортныйДокументТЧТранспорт.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СвязьРегистрацииИТранспортногоДокумента КАК
	|			РССвязьРегистрацииИТранспортногоДокумента
	|		ПО (ДокТранспортныйДокументТЧТранспорт.Ссылка = РССвязьРегистрацииИТранспортногоДокумента.ТранспортныйДокумент)
	|ГДЕ
	|	ДокТранспортныйДокумент.Дата >= &ПрошлаяДата
	|	И ДокТранспортныйДокумент.ПунктПогрузки = &ПунктПогрузки
	|	И ДокТранспортныйДокумент.Отправитель = &Отправитель
	|	И ДокТранспортныйДокумент.ВидПеревозки = &ВидПеревозки
	|	И НЕ РССвязьРегистрацииИТранспортногоДокумента.ДокументРегистрации = &ТекДокРегистрации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРегистрации,
	|	ТранспортноеСредство,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РССостоянияРегистрацииСрезПоследних.ДокументРегистрации КАК ДокументРегистрации
	|ПОМЕСТИТЬ ВТ_СостоянияРегистрации
	|ИЗ
	|	РегистрСведений.гкс_СостоянияРегистрации.СрезПоследних(&ТекущаяДата, ДокументРегистрации В
	|		(ВЫБРАТЬ
	|			ВТ_ТранспортныеДокументыПартии.ДокументРегистрации
	|		ИЗ
	|			ВТ_ТранспортныеДокументыПартии КАК ВТ_ТранспортныеДокументыПартии)) КАК РССостоянияРегистрацииСрезПоследних
	|ГДЕ
	|	РССостоянияРегистрацииСрезПоследних.Состояние В (&Состояния)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТранспортныйДокумент.ДокументРегистрации КАК ДокументРегистрации,
	|	ДокВзвешивание.Ссылка КАК ДокументВзвешивание,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДокРегистрацияНаПЛК.ТранспортноеСредство) КАК Вагон,
	|	ДокРегистрацияНаПЛК.ОтправительПолучатель КАК Отправитель,
	|	ДокРегистрацияНаПЛК.Номенклатура КАК Номенклатура,
	|	ДокРегистрацияНаПЛК.ВесБрутто КАК ВесТранспортныйДокумент,
	|	ЕСТЬNULL(ДокВзвешивание.Вес, 0) КАК ВесВзвешивание,
	|	ДокВзвешивание.Дата КАК ДатаВзвешивание
	|ПОМЕСТИТЬ ВТ_ДокументыВзвешиванияПартии
	|ИЗ
	|	ВТ_ТранспортныеДокументыПартии КАК ДокТранспортныйДокумент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК ДокРегистрацияНаПЛК
	|		ПО ДокТранспортныйДокумент.ДокументРегистрации = ДокРегистрацияНаПЛК.Ссылка
	|		И ДокТранспортныйДокумент.ТранспортноеСредство = ДокРегистрацияНаПЛК.ТранспортноеСредство
	|		И ДокТранспортныйДокумент.Номенклатура = ДокРегистрацияНаПЛК.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СостоянияРегистрации КАК РССостоянияРегистрации
	|		ПО ДокТранспортныйДокумент.ДокументРегистрации = РССостоянияРегистрации.ДокументРегистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_Взвешивание КАК ДокВзвешивание
	|		ПО (ДокРегистрацияНаПЛК.Ссылка = ДокВзвешивание.ДокументРегистрации)
	|ГДЕ
	|	ДокРегистрацияНаПЛК.ТипРегистрации = &ТипРегистрации
	|	И ДокРегистрацияНаПЛК.ВидПеревозки = &ВидПеревозки
	|	И НЕ ДокВзвешивание.Ссылка = &ТекДокВзвешивание
	|	И ДокВзвешивание.ТипВзвешивания = &ТипВзвешивания
	|	И ДокВзвешивание.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументВзвешивание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДокументыВзвешиванияПартии.ДатаВзвешивание) КАК МаксДата
	|ПОМЕСТИТЬ ВТ_МаксимумДатаВзвешивание
	|ИЗ
	|	ВТ_ДокументыВзвешиванияПартии КАК ДокументыВзвешиванияПартии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДокументыВзвешиванияПартии.ДокументВзвешивание) КАК ДокументВзвешивание
	|ПОМЕСТИТЬ ВТ_ОтборПоследниеВзвешивания
	|ИЗ
	|	ВТ_ДокументыВзвешиванияПартии КАК ДокументыВзвешиванияПартии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимумДатаВзвешивание КАК ВТ_МаксимумДатаВзвешивание
	|		ПО ДокументыВзвешиванияПартии.ДатаВзвешивание = ВТ_МаксимумДатаВзвешивание.МаксДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокВзвешивание.ДокументРегистрации КАК ДокументРегистрации,
	|	ДокВзвешивание.Ссылка КАК ДокументВзвешивание,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДокРегистрацияНаПЛК.ТранспортноеСредство) КАК Вагон,
	|	&Отправитель КАК Отправитель,
	|	ДокРегистрацияНаПЛК.Номенклатура КАК Номенклатура,
	|	ДокРегистрацияНаПЛК.ВесБрутто КАК ВесТранспортныйДокумент,
	|	ЕСТЬNULL(ДокВзвешивание.Вес, 0) КАК ВесВзвешивание
	|ИЗ
	|	Документ.гкс_Взвешивание КАК ДокВзвешивание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК ДокРегистрацияНаПЛК
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СостоянияРегистрации.СрезПоследних КАК РССостоянияРегистрации
	|			ПО ДокРегистрацияНаПЛК.Ссылка = РССостоянияРегистрации.ДокументРегистрации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СвязьРегистрацииИТранспортногоДокумента КАК
	|				РССвязьРегистрацииИТранспортногоДокумента
	|			ПО ДокРегистрацияНаПЛК.Ссылка = РССвязьРегистрацииИТранспортногоДокумента.ДокументРегистрации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ТранспортныйДокумент КАК ДокТранспортныйДокумент
	|			ПО (РССвязьРегистрацииИТранспортногоДокумента.ТранспортныйДокумент = ДокТранспортныйДокумент.Ссылка)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ТранспортныйДокумент.ТранспортныеСредства КАК ДокТранспортныйДокументТЧТранспорт
	|			ПО (ДокТранспортныйДокумент.Ссылка = ДокТранспортныйДокументТЧТранспорт.Ссылка)
	|			И ДокРегистрацияНаПЛК.ТранспортноеСредство = ДокТранспортныйДокументТЧТранспорт.ТранспортноеСредство
	|			И ДокРегистрацияНаПЛК.Номенклатура = ДокТранспортныйДокументТЧТранспорт.Номенклатура
	|		ПО ДокВзвешивание.ДокументРегистрации = ДокРегистрацияНаПЛК.Ссылка
	|ГДЕ
	|	ДокВзвешивание.Ссылка = &ТекДокВзвешивание
	|	И ДокТранспортныйДокумент.Дата >= &ПрошлаяДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыВзвешиванияПартии.ДокументРегистрации,
	|	ДокументыВзвешиванияПартии.ДокументВзвешивание,
	|	ДокументыВзвешиванияПартии.Вагон,
	|	ДокументыВзвешиванияПартии.Отправитель,
	|	ДокументыВзвешиванияПартии.Номенклатура,
	|	ДокументыВзвешиванияПартии.ВесТранспортныйДокумент,
	|	ДокументыВзвешиванияПартии.ВесВзвешивание
	|ИЗ
	|	ВТ_ДокументыВзвешиванияПартии КАК ДокументыВзвешиванияПартии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтборПоследниеВзвешивания КАК ОтборПоследниеВзвешивания
	|		ПО ДокументыВзвешиванияПартии.ДокументВзвешивание = ОтборПоследниеВзвешивания.ДокументВзвешивание
	|ИТОГИ
	|	СУММА(ВесТранспортныйДокумент),
	|	СУММА(ВесВзвешивание)
	|ПО
	|	Отправитель";
		
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
