
#Область ИнициализацияПеременных

&НаКлиенте
Перем ИдентификаторЗамераПроведение;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Параметры.Ключ.Пустая() Тогда
		ВыполнитьНачальноеЗаполнение();		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьВидимостьДоступностьФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
        ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.ЗамерВремени(
				"ПроведениеДокумента.Интерактивно.ЗаписьВГрафикОтгрузкиПЛК", Истина);
		
	КонецЕсли;
	
	ПроверкаЗаполненияНаКлиенте(Отказ);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписьИзФормы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	гкс_ОбщегоНазначенияПЛККлиент.ПровестиИЗакрыть(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	гкс_ОбщегоНазначенияПЛККлиент.Провести(ЭтотОбъект, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УстановитьВидимостьДоступностьФормы()
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();	
	Элементы.Отменено.Видимость = Объект.Отменено ИЛИ ЭтоПолноправныйПользователь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗаполненияНаКлиенте(Отказ)
	
	Если Объект.НачалоПериода > Объект.ОкончаниеПериода Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Начало периода должно быть меньше окончания периода!'");
		ПоказатьПредупреждение( ,ТекстПредупреждения);
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Объект.КоличествоТранспортныхСредствВЧас < Объект.КоличествоТранспортныхСредствВЧасПоЭО Тогда
		
		ТекстПреждупреждения = НСтр("ru = 'Количество транспортных средств в электронной очереди
		|не должно превышать количество транспортных средств в час!'");
		ПоказатьПредупреждение( ,ТекстПреждупреждения);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьНачальноеЗаполнение()
	
	ЗаполнитьЗначенияСвойств(Объект, 
	                         ДанныеСтатистикиПоТР(), 
							 "КоличествоТранспортныхСредствВЧас, КоличествоТранспортныхСредствВЧасПоЭО");
							 
КонецПроцедуры

&НаСервере
Функция ДанныеСтатистикиПоТР()
	
	Возврат РегистрыСведений.гкс_ГрафикОтгрузкиПЛК.СтатистикаПоТранспортнымСредствамДляЗаполнения(
			Новый Структура("НачалоПериода", Объект.НачалоПериода));
	
КонецФункции

#КонецОбласти