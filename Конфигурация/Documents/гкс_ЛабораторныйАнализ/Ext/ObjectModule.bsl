#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьОбъектЗначениямиПоУмолчанию() Экспорт
	
	Если НЕ ЗначениеЗаполнено(гкс_МестнаяДата) И ЗначениеЗаполнено(ТочкаМаршрута) Тогда
		
		ЧасовойПояс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТочкаМаршрута, "гкс_ЧасовойПоясТочкиМаршрута");
		
		Если ЗначениеЗаполнено(ЧасовойПояс) Тогда
			гкс_МестнаяДата = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КоличествоОбразцов) Тогда
		КоличествоОбразцов = 
			РегистрыСведений.гкс_НастройкиПечатиФормированияПроб.КоличествоОбразцовПробПоПараметрамОтбора(
				Номенклатура, ТочкаМаршрута, гкс_ВидПеревозки, гкс_НазначениеИспользованияКачества);
	КонецЕсли;	
	
КонецПроцедуры

// Заполняет табличную часть "Качественные показатели" значениями из соотвествия с средневзвешенными показателями
//
// Параметры:
//   СредневзвешенныеПоказатели - Соответствие - средневзвешенные значения показателей
//
Процедура ЗаполнитьСредневзвешенныеПоказатели(СредневзвешенныеПоказатели) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("гкс_ИспользоватьСредневзвешенныеПоказатели") Тогда
		Возврат;	
	КонецЕсли;	
	
	Для Каждого КлючЗначение Из СредневзвешенныеПоказатели Цикл
				
		Показатель = КлючЗначение.Ключ;	
		НайденнаяСтрока	= КачественныеПоказатели.Найти(Показатель, "Показатель");
		Если НайденнаяСтрока = Неопределено Тогда
			
			НайденнаяСтрока = КачественныеПоказатели.Добавить();
			
			НайденнаяСтрока.Показатель = Показатель;
			НайденнаяСтрока.ЕдиницаИзмерения = ОбщегоНазначения
				.ЗначениеРеквизитаОбъекта(Показатель, "ЕдиницаИзмерения");
		КонецЕсли;
		
		НайденнаяСтрока.Значение = КлючЗначение.Значение;		
		НайденнаяСтрока.гкс_Примечание = КомментарийСоотвествия(НайденнаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		гкс_ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
		ЗаполнитьКачественныеПоказатели();	

	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения 
	     И Статус = Перечисления.гкс_СтатусыЛабораторногоАнализа.Выполнен 
	     И НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
	
		Отказ = Истина;
		ОбщегоНазначения
		.СообщитьПользователю(
		НСтр("ru='Выполнять отмену проведения документа в статусе ""Выполнен"" разрешено только администратору'"));
	
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
		
	гкс_ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ДополнительныеСвойства.Вставить("СоответствуетНормативу", СоответствуетНормативу());
	КонецЕсли;
	
	ЗаполнитьОбъектЗначениямиПоУмолчанию();
		
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
			
	гкс_ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ДопПараметры = гкс_ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	ИнициализироватьДопПараметры(ДопПараметры);
	
	гкс_ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ, ДопПараметры);
	
	СформироватьНаправлениеНаРазгрузкуПриНеобходимости(ДопПараметры);
	
	ПерезаполнитьОснованиеДвиженияЗапасовПриНеобходимости(Отказ);
		
	Если ЗначениеЗаполнено(гкс_ДокументРегистрации) И ДополнительныеСвойства.Свойство("ЭтоНомерПробы") Тогда
		гкс_ПриемкаТранспортаВызовСервера.
			РассчитатьДанныеРегистрацииДляРМПриемкаТранспорта(гкс_ДокументРегистрации);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	гкс_ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет соответствие нормативу параметра качества
//
// Параметры:
//	СтрокаДокумента - СтрокаТабличнойЧасти гкс_ЛабораторныйАнализ.КачественныеПоказатели - 
// 
// Возвращаемое значение:
//   Строка  - строка комментарий, если несоотвествует критериям по поставщику
//
Функция КомментарийСоотвествия(СтрокаДокумента) Экспорт
	
	Результат = "";
	
	Если СтрокаДокумента = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;	

	Контрагент = Документы.гкс_РегистрацияНаПЛК.КонтрагентДляКонтроляКачества(гкс_ДокументРегистрации);
	
	ТекущиеЗначениеПоказателя = Новый Соответствие;
	ТекущиеЗначениеПоказателя.Вставить(СтрокаДокумента.Показатель, СтрокаДокумента.Значение);	

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Контрагент", Контрагент);
	ДополнительныеПараметры.Вставить("Показатель", СтрокаДокумента.Показатель);
	ДополнительныеПараметры.Вставить("ТекущиеЗначениеПоказателя", ТекущиеЗначениеПоказателя);
		
	МассивПоказателей = гкс_РаботаСПоказателямиНоменклатуры.РезультатыНормативнойСертификацииНоменклатуры(
		ЭтотОбъект, ДополнительныеПараметры);
					
	Если МассивПоказателей.Количество() > 0 Тогда	
		ДанныеПоПоказателю = МассивПоказателей[0];	
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, ДанныеПоПоказателю, "СоответствуетНормативу, ОтклонениеОтБазиса");
		Результат = ДанныеПоПоказателю.Комментарий;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьСвойствоПроведенияСостоянияРегистрации() Экспорт
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	НужноОтражатьСостояниеРегистрации = Документы.гкс_РегистрацияНаПЛК
		.ОтражатьСостояниеРегистрацииДляЛабораторногоАнализа(гкс_ДокументРегистрации);
	
	Если Не НужноОтражатьСостояниеРегистрации Тогда 
		ДополнительныеСвойства.Вставить("НеОтражатьСостоянияРегистрации", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДокументПослеОбработки() Экспорт

	Если ПометкаУдаления Тогда
		Записать(РежимЗаписиДокумента.Запись);
	Иначе
		Статус = Перечисления.гкс_СтатусыЛабораторногоАнализа.Выполнен;
		Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДокумента

// Заполнить качественные показатели.
// 
// Параметры:
//  Основание - Неопределено, ДокументСсылка.гкс_ФормированиеНомераПробы - 
//
Процедура ЗаполнитьКачественныеПоказатели() Экспорт

	ПараметрыПолученияПоказателей = Новый Структура;
	
	МассивПоказателей = гкс_РаботаСПоказателямиНоменклатуры.РезультатыНормативнойСертификацииНоменклатуры(
		ЭтотОбъект);
	
	Если ТипЗнч(гкс_ДокументРегистрации) = Тип("ДокументСсылка.гкс_РегистрацияНаПЛК") Тогда
		УточнитьПоказателиПоЗаданиямНаПроверкуКачества(гкс_ДокументРегистрации, МассивПоказателей);
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивПоказателей Цикл
		
		НоваяСтрока = КачественныеПоказатели.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива, "Показатель, ЕдиницаИзмерения");
		НоваяСтрока.НомерПробы = НомерПробы;
	
	КонецЦикла;  
	
КонецПроцедуры

#КонецОбласти

#Область НормативнаяСертификацияИКачественныеПоказатели

Процедура УточнитьПоказателиПоЗаданиямНаПроверкуКачества(ДокументРегистрации, МассивПоказателей)
	
	ПоказателиПоЗаданиям = гкс_НормативнаяСертификацияНоменклатуры.
		ПоказателиДляРегистрацииПоЗаданиямНаПроверку(ДокументРегистрации);
		
	Для Каждого ПоказательПоЗаданию Из ПоказателиПоЗаданиям Цикл
		
		ИндексПоказателя = МассивПоказателей.Найти(ПоказательПоЗаданию.ПоказательАнализа);
		
		Если ПоказательПоЗаданию.ВыполнитьАнализ И ИндексПоказателя = Неопределено Тогда
			МассивПоказателей.Добавить(ПоказательПоЗаданию.ПоказательАнализа);
		ИначеЕсли НЕ ПоказательПоЗаданию.ВыполнитьАнализ И ИндексПоказателя <> Неопределено Тогда
			МассивПоказателей.Удалить(ИндексПоказателя);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция СоответствуетНормативу()
	
	Возврат КачественныеПоказатели.Количество() = 0 
	        ИЛИ КачественныеПоказатели.НайтиСтроки(Новый Структура("СоответствуетНормативу", Ложь)).Количество() > 0;
	        
КонецФункции

Процедура ПерезаполнитьОснованиеДвиженияЗапасовПриНеобходимости(Отказ)
	
	Если Отказ ИЛИ Статус <> Перечисления.гкс_СтатусыЛабораторногоАнализа.Выполнен Тогда
		Возврат;
	КонецЕсли;	
	
	ПередаватьКачествоВходногоКонтроля = ПолучитьФункциональнуюОпцию("гкс_ПередаватьКачествоВходногоКонтроля");
	
	Если Не ПередаватьКачествоВходногоКонтроля
		И гкс_НазначениеИспользованияКачества = Перечисления.гкс_НазначенияИспользованияКачества.ПриемкаКомпозит Тогда
		
		Документы.гкс_ОснованиеДляДвиженияЗапасов.ПерезаполнитьОснованиеДвиженияЗапасовКомпозит(Ссылка, Отказ);
		
	ИначеЕсли ПередаватьКачествоВходногоКонтроля
		И гкс_НазначениеИспользованияКачества = Перечисления.гкс_НазначенияИспользованияКачества.Приемка Тогда
		
		ДокументРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "гкс_ДокументРегистрации"); 
		ОснованиеДляДвиженияЗапасовСсылка = Документы.гкс_ОснованиеДляДвиженияЗапасов
			.ПолучитьПоРегистрации(ДокументРегистрации);
		
		Если ЗначениеЗаполнено(ОснованиеДляДвиженияЗапасовСсылка) Тогда
			ОснованиеДляДвиженияЗапасов = ОснованиеДляДвиженияЗапасовСсылка.ПолучитьОбъект();
			ОснованиеДляДвиженияЗапасов.ПерезаполнитьПоЛабАнализу(Ссылка, Отказ);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ИнициализироватьДопПараметры(ДопПараметры)
	
	ДопПараметры.ДополнительныеСвойства = Новый Структура;
	
	Для Каждого ДополнительноеСвойство Из ДополнительныеСвойства Цикл
		ДопПараметры.ДополнительныеСвойства.Вставить(ДополнительноеСвойство.Ключ, ДополнительноеСвойство.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьНаправлениеНаРазгрузкуПриНеобходимости(ДопПараметры)
		
	Если Не НазначатьНаСкладыПоПараметрам(ДопПараметры.ДополнительныеСвойства)
		Или Не гкс_ПриемкаТранспорта.НаправлятьНаРазгрузкуРазрешение(гкс_ДокументРегистрации) Тогда
		Возврат;
	КонецЕсли;

	гкс_ПриемкаТранспорта.СформироватьНаправлениеНаРазгрузку(Дата, гкс_ДокументРегистрации, Ссылка);
	
КонецПроцедуры
	
Функция НазначатьНаСкладыПоПараметрам(Параметры)
	
	ВыполняетсяУсловие = (ТипЗнч(Параметры) = Тип("Структура")) 
	        И Параметры.Свойство("НазначатьНаСклады")
	        И Параметры["НазначатьНаСклады"];

	Возврат ВыполняетсяУсловие;
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте'");
#КонецЕсли
