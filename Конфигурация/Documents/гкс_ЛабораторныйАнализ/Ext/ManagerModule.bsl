#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив из Строка - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ПриемкаПЛК");
	МеханизмыДокумента.Добавить("ЛабораторияИКачество");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = гкс_ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если НЕ ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ, ДопПараметры);
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса	
		Если Запрос.Параметры.ОтражатьСостояние Тогда
			
			РассчитатьСостояниеЛабАнализа(Запрос);
			ТекстЗапросаТаблицаСостояниеРегистрации(Запрос, ТекстыЗапроса, Регистры, ДопПараметры);
			Если ЕстьОтклоненияПоказателей(Запрос.Параметры) Тогда	
				ТекстЗапросаКомментарииКСтатусуКачествоНеПринято(Запрос, ТекстыЗапроса);	
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДополнительныеПараметры(ДопПараметры, Запрос);
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат гкс_ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ТочкаМаршрута)";
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//  КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//  Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	МенеджерПечати = "Обработка.гкс_ПечатьДокументаЛабораторныйАнализ";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "ПФ_MXL_АктОтбораПроб_ru";
	КомандаПечати.Представление  = НСтр("ru = 'Акт отбора проб'");
	КомандаПечати.МенеджерПечати = МенеджерПечати;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФ_MXL_АктОтбораПроб_ru";
	
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.гкс_ПечатьДокументаЛабораторныйАнализ";
	КомандаПечати.Обработчик = "гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФЗПП47";
	КомандаПечати.Идентификатор  = "ПФ_MXL_ЗПП47_ru";
	КомандаПечати.Представление  = НСтр("ru = 'Карточка анализа(ЗПП-47)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.гкс_ПечатьДокументаЛабораторныйАнализ";
	КомандаПечати.Обработчик = "гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФЗПП47_АЛЦ";
	КомандаПечати.Идентификатор  = "ПФ_MXL_ЗПП47_АЛЦ_ru";
	КомандаПечати.Представление  = НСтр("ru = 'Карточка анализа(ЗПП-47) АЛЦ'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "ПФ_MXL_АктЗабраковкиПартии_ru";
	КомандаПечати.Представление  = НСтр("ru = 'Акт забраковки партии'");
	КомандаПечати.МенеджерПечати = МенеджерПечати;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФ_MXL_АктЗабраковкиПартии_ru";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = МенеджерПечати;
	КомандаПечати.Идентификатор  = "ПФ_MXL_ЗПП42_ru";
	КомандаПечати.Представление  = НСтр("ru = 'Отраслевая форма(ЗПП-42)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_АктВозврата_by";
	КомандаПечати.Представление = НСтр("ru = 'Акт возврата'");
    КомандаПечати.МенеджерПечати = "Обработка.гкс_ПечатьАктВозврата_Беларусь";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик  = "гкс_УправлениеПечатьюКлиент_by.ВыполнитьКомандуПечати_АктВозврата";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_АктОтбораПроб";
	КомандаПечати.Представление = НСтр("ru = 'Акт отбора проб новый'");
    КомандаПечати.МенеджерПечати = МенеджерПечати;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;   
	КомандаПечати.Обработчик = "гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФ_MXL_АктОтбораПроб";

КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

// Возвращает первый найденный Лабораторный анализ для документа регистрации
//
// Параметры:
//   ДокументОснование - ДокументСсылка.гкс_ФормированиеНомераПробы, ДокументСсылка.гкс_РегистрацияНаПЛК  - документ регистрации лаб.анализа
//
// Возвращаемое значение:
//  ДокументСсылка.гкс_ЛабораторныйАнализ - ссылка на лабораторный анализ
//
Функция ПолучитьЛабораторныйАнализПоДокументуРегистрации(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЛабораторныйАнализ.Ссылка КАК ЛабораторныйАнализСсылка
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ КАК ЛабораторныйАнализ
	|ГДЕ
	|	ЛабораторныйАнализ.гкс_ДокументРегистрации = &ДокументРегистрации
	|	И НЕ ЛабораторныйАнализ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументРегистрации", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ЛабораторныйАнализСсылка;
	
КонецФункции

Функция ЗаблокироватьКонкурентноеСозданиеЛабораторногоАнализа(ДокументОснованиеОграничитель) Экспорт
	
	Результат = Ложь;
	
	Если НЕ ТранзакцияАктивна() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	БлокировкаДанных = Новый БлокировкаДанных();
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.гкс_ЛабораторныйАнализ");
	ЭлементБлокировки.УстановитьЗначение("гкс_ДокументРегистрации", ДокументОснованиеОграничитель);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Попытка
		БлокировкаДанных.Заблокировать();
		Результат = Истина;
	Исключение
		Результат = Ложь;	
	КонецПопытки;		
	
	Возврат Результат;
	
КонецФункции

// Расчитывает средневзвешенные показатели по входным лаботаторным анализам
//
// Параметры:
//   ЛабораторныйАнализ - ДокументСсылка.гкс_ЛабораторныйАнализ - композитный лаб.анализ
//
// Возвращаемое значение:
//  Соответствие - средневзвешенные значения показателей
//
Функция СредневзвешенныеПоказателиКомпозитногоАнализа(ЛабораторныйАнализ) Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	гкс_ЛабораторныйАнализ.гкс_ДокументРегистрации КАК ДокументНомерПробы
	|ПОМЕСТИТЬ ВТ_ФормированиеПробы
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ КАК гкс_ЛабораторныйАнализ
	|ГДЕ
	|	гкс_ЛабораторныйАнализ.Ссылка = &Ссылка
	|	И гкс_ЛабораторныйАнализ.гкс_НазначениеИспользованияКачества = ЗНАЧЕНИЕ(Перечисление.гкс_НазначенияИспользованияКачества.ПриемкаКомпозит)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации КАК ДокументРегистрации
	|ПОМЕСТИТЬ ВТ_ДокументыРегистрации
	|ИЗ
	|	ВТ_ФормированиеПробы КАК ВТ_ФормированиеПробы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ФормированиеНомераПробы.СписокРегистраций КАК ФормированиеНомераПробыСписокРегистраций
	|		ПО (ФормированиеНомераПробыСписокРегистраций.Ссылка = ВТ_ФормированиеПробы.ДокументНомерПробы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛабораторныйАнализ.Ссылка КАК Ссылка,
	|	ВТ_ДокументыРегистрации.ДокументРегистрации КАК ДокументРегистрации
	|ПОМЕСТИТЬ ВТ_ВходныеЛабАнализы
	|ИЗ
	|	ВТ_ДокументыРегистрации КАК ВТ_ДокументыРегистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ЛабораторныйАнализ КАК ЛабораторныйАнализ
	|		ПО ВТ_ДокументыРегистрации.ДокументРегистрации = ЛабораторныйАнализ.гкс_ДокументРегистрации
	|ГДЕ
	|	ЛабораторныйАнализ.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КачественныеПоказатели.Показатель КАК Показатель,
	|	КачественныеПоказатели.Значение КАК Значение,
	|	КачественныеПоказатели.СоответствуетНормативу КАК СоответствуетНормативу,
	|	КачественныеПоказатели.НомерПробы КАК НомерПробы,
	|	ВТ_ВходныеЛабАнализы.Ссылка КАК Ссылка,
	|	ВТ_ВходныеЛабАнализы.ДокументРегистрации КАК ДокументРегистрации,
	|	ТИПЗНАЧЕНИЯ(КачественныеПоказатели.Значение) = ТИП(ЧИСЛО) КАК ЗначениеЧисло
	|ИЗ
	|	ВТ_ВходныеЛабАнализы КАК ВТ_ВходныеЛабАнализы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ЛабораторныйАнализ.КачественныеПоказатели КАК КачественныеПоказатели
	|		ПО ВТ_ВходныеЛабАнализы.Ссылка = КачественныеПоказатели.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЛабораторныйАнализ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаДанных = РезультатЗапроса.Выгрузить();
	
	ТаблицаРегистраций = РезультатЗапроса.Выгрузить();
	ТаблицаРегистраций.Свернуть("ДокументРегистрации");
	ТаблицаРегистраций.Колонки.Добавить("Вес");
	
	Для Каждого СтрокаДанных Из ТаблицаРегистраций Цикл
        // определяем вес по накладной
		ДанныеПоВесу = гкс_ПриемкаНаПЛКСервер.ПоказанияВесовПоРегистрации(СтрокаДанных.ДокументРегистрации);
		СтрокаДанных.Вес = ДанныеПоВесу.НеттоФакт;
	КонецЦикла;
	
	ОбщийВес = ТаблицаРегистраций.Итог("Вес");
	
	// расчет коэффициентов
	ТаблицаДанных.Колонки.Добавить("ЗначениеКоэф");
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		Если СтрокаДанных.ЗначениеЧисло Тогда		
			НайденнаяСтрока = ТаблицаРегистраций.Найти(СтрокаДанных.ДокументРегистрации, "ДокументРегистрации");	
			СтрокаДанных.ЗначениеКоэф = СтрокаДанных.Значение * НайденнаяСтрока.Вес;
		Иначе
			СтрокаДанных.ЗначениеКоэф = 0;
		КонецЕсли;	
		
	КонецЦикла;
	
	ТаблицаДанных.Свернуть("Показатель", "ЗначениеКоэф");

	Если ОбщийВес = 0 Тогда
		ТранспортноеСредствоИмяРеквизита = "ТранспортноеСредство";
		ТранспортноеСредство = Неопределено;

		Если ТаблицаРегистраций.Количество() > 0 Тогда
			ТранспортноеСредство = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ТаблицаРегистраций[0].ДокументРегистрации, ТранспортноеСредствоИмяРеквизита);
		КонецЕсли;
		
		ОбщаяЧастьСообщения = НСтр(
			"ru = 'Отсутствует вес тары и вес нетто. Средневзвешенные показатели не могут быть рассчитаны.'");

		Если ЗначениеЗаполнено(ТранспортноеСредство) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
            	НСтр("ru = 'Для ТС: %1. %2'"), ТранспортноеСредство, ОбщаяЧастьСообщения);

		Иначе
			ТекстОшибки = ОбщаяЧастьСообщения;
		КонецЕсли;

		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Соответствие;	
	Для  Каждого СтрокаДанных Из ТаблицаДанных Цикл
		Результат.Вставить(СтрокаДанных.Показатель, Окр(СтрокаДанных.ЗначениеКоэф/ОбщийВес, 1));		
	КонецЦикла;	

	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция СоздатьДокументНаОсновании(ПараметрыСоздания) Экспорт
	
	Результат = Неопределено;	
	НовыйДокумент = СоздатьДокумент();
	НовыйДокумент.Дата = ТекущаяДатаСеанса();
	
	Если ПараметрыСоздания.Свойство("ДанныеЗаполнения") Тогда
		НовыйДокумент.Заполнить(ПараметрыСоздания.ДанныеЗаполнения);	
	КонецЕсли;
			
	Если ПараметрыСоздания.Свойство("ДополнительныеСвойства") Тогда
		Для Каждого Свойство Из ПараметрыСоздания.ДополнительныеСвойства Цикл
			НовыйДокумент.ДополнительныеСвойства.Вставить(Свойство.Ключ, Свойство.Значение);
		КонецЦикла;	
	КонецЕсли;		
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Результат = НовыйДокумент.Ссылка;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ЛабораторныйАнализ.Проведение'"), 
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.Документы.гкс_ЛабораторныйАнализ, ,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;		
	
	Возврат Результат;
	
КонецФункции 

// Процедура измененяет статус "Выполнен" лабораторного анализа на "Отбор проб"
//
// Параметры:
//  МассивЛабАнализов	 - Массив из ДокументСсылка.гкс_ЛабораторныйАнализ - Коллекция ссылок на документ лабораторный анализ:
//	АдресРезультата		 - Строка - Адрес хранилища результата метода
//
Процедура ВыполнитьИзменениеСтатусаЛабораторногоАнализаНаОтборПроб(МассивЛабАнализов, АдресРезультата) Экспорт
	
	НачатьТранзакцию();
	
	Для Каждого ЛабАнализ Из МассивЛабАнализов Цикл
		
		ЛабАнализСтатус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЛабАнализ, "Статус");
		
		Если Не ЛабАнализСтатус = Перечисления.гкс_СтатусыЛабораторногоАнализа.Выполнен Тогда
			Продолжить;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.гкс_ЛабораторныйАнализ");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЛабАнализ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Попытка
			
			Блокировка.Заблокировать();			
			ИзмененитьСтатусЛабораторногоАнализаНаОтборПроб(ЛабАнализ);
			
		Исключение
			
			ОтменитьТранзакцию();
			//@skip-warning
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяСобытияЖурналРегистрации = НСтр("ru = 'Документ Лабораторный анализ заблокирован'");
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , 
				ПодробноеПредставлениеОшибки);
			
			ВызватьИсключение ПодробноеПредставлениеОшибки;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ИзмененитьСтатусЛабораторногоАнализаНаОтборПроб(ЛабАнализ)
	
	ДокументОбъект = ЛабАнализ.ПолучитьОбъект();
	
	Попытка
		ДокументОбъект.Статус = Перечисления.гкс_СтатусыЛабораторногоАнализа.ОтборПробы;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		//@skip-warning
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытияЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка проведения документа Основание для движение запасов: %1.'"),
			ЛабАнализ);
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры)
	
	МенеджерВременныхТаблиц = Неопределено;
	
	Если ДопПараметры <> Неопределено
		И ДопПараметры.Свойство("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц) Тогда
		
		МенеджерВременныхТаблиц = ?(МенеджерВременныхТаблиц = Неопределено,
									Новый МенеджерВременныхТаблиц,
									МенеджерВременныхТаблиц);
		
	Иначе
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	СформироватьЗапросИнициализации(Запрос);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Запрос.УстановитьПараметр("ЕстьРегистрация", ЗначениеЗаполнено(Выборка.ДокументРегистрации) 
	                         И ТипЗнч(Выборка.ДокументРегистрации) = Тип("ДокументСсылка.гкс_РегистрацияНаПЛК"));
	Запрос.УстановитьПараметр("ДатаСреза", Выборка.Период);
	Запрос.УстановитьПараметр("Статус", Выборка.Статус);
	Запрос.УстановитьПараметр("АнализВыполнен", Выборка.Статус = Перечисления.гкс_СтатусыЛабораторногоАнализа.Выполнен);
	Запрос.УстановитьПараметр("ТочкаМаршрута", Выборка.ТочкаМаршрута);
	Запрос.УстановитьПараметр("ДокументРегистрации", Выборка.ДокументРегистрации);
	Запрос.УстановитьПараметр("ТранспортноеСредство", Выборка.ТранспортноеСредство);
	Запрос.УстановитьПараметр("Спецификация", Выборка.Спецификация);
	Запрос.УстановитьПараметр("Организация", Выборка.Организация);
	Запрос.УстановитьПараметр("Номенклатура", Выборка.Номенклатура);
	Запрос.УстановитьПараметр("ОтражатьСостояние", Запрос.Параметры.ЕстьРегистрация И Запрос.Параметры.АнализВыполнен);
	
КонецПроцедуры

Процедура РассчитатьСостояниеЛабАнализа(Запрос)
	
	Запрос.Текст = ТекстЗапросаРасчетаСостоянияЛабАнализа();
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Запрос.УстановитьПараметр("Состояние", Неопределено);
	Запрос.УстановитьПараметр("НазначатьНаСклады", Ложь);
	Если ТаблицаРезультата.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("Состояние", ТаблицаРезультата[0].Состояние);
		Запрос.УстановитьПараметр("НазначатьНаСклады", ТаблицаРезультата[0].НазначатьНаСклады);
	КонецЕсли;		
	
	Отклонения = ТаблицаРезультата.НайтиСтроки(Новый Структура("НеСоответствуетСпецификации", Истина));
	Запрос.УстановитьПараметр("ПоказателиНеСоответствуютПараметрамСпецификации", НЕ Отклонения.Количество() = 0);
	
	Отклонения = ТаблицаРезультата.НайтиСтроки(Новый Структура("НеСоответствуетНормативам", Истина));
	Запрос.УстановитьПараметр("ПоказателиНеСоответствуютНормативу", НЕ Отклонения.Количество() = 0);
		
КонецПроцедуры

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	Возврат ИсточникиДанных;
	
КонецФункции

Функция ЕстьОтклоненияПоказателей(ПараметрыКачества) 
	Возврат 
		ПараметрыКачества.ПоказателиНеСоответствуютПараметрамСпецификации
		ИЛИ ПараметрыКачества.ПоказателиНеСоответствуютНормативу;
КонецФункции

#Область ТекстыЗапросовПроведение

Процедура СформироватьЗапросИнициализации(Запрос)
	
	Запрос.Текст = ТекстЗапросаВтДанныеЛабАнализа(Запрос);
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() +
	"ВЫБРАТЬ
	|	Таблица.Период КАК Период,
	|	Таблица.ДокументРегистратор КАК ДокументРегистратор,
	|	Таблица.ТочкаМаршрута КАК ТочкаМаршрута,
	|	Таблица.ДокументРегистрации КАК ДокументРегистрации,
	|	Таблица.Статус КАК Статус,
	|	Таблица.ТранспортноеСредство КАК ТранспортноеСредство,
	|	Таблица.Спецификация КАК Спецификация,
	|	Таблица.ТипРегистрации КАК ТипРегистрации,
	|	Таблица.ВидПеревозки КАК ВидПеревозки,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.МестнаяДата КАК МестнаяДата
	|ИЗ
	|	ВТ_ДанныеЛабАнализа КАК Таблица";
	
КонецПроцедуры

Функция ТекстЗапросаРасчетаСостоянияЛабАнализа()
	Возврат "ВЫБРАТЬ
	|	ПоказателиЛабАнализа.Ссылка КАК Ссылка,
	|	ПоказателиЛабАнализа.Показатель КАК Показатель,
	|	ПоказателиЛабАнализа.Значение КАК Значение,
	|	ПоказателиЛабАнализа.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПоказателиЛабАнализа.СоответствуетНормативу КАК СоответствуетНормативу,
	|	ПоказателиЛабАнализа.ОтклонениеОтБазиса КАК ОтклонениеОтБазиса,
	|	ПоказателиЛабАнализа.ОтклонениеОтБазиса КАК ОтклонениеОтБазиса1
	|ПОМЕСТИТЬ ВТ_ВсеПоказатели
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ.КачественныеПоказатели КАК ПоказателиЛабАнализа
	|ГДЕ
	|	ПоказателиЛабАнализа.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КачественныеПоказателиСпецификации.Показатель КАК Показатель,
	|	КачественныеПоказателиСпецификации.МинимальноеЗначение КАК МинимальноеЗначение,
	|	КачественныеПоказателиСпецификации.МаксимальноеЗначение КАК МаксимальноеЗначение
	|ПОМЕСТИТЬ ВТ_КачественныеПоказателиСпецификации
	|ИЗ
	|	Документ.гкс_СпецификацияКДоговоруКонтрагента.Товары КАК ТоварыСпецификации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_СпецификацияКДоговоруКонтрагента.КачественныеПоказатели КАК
	|			КачественныеПоказателиСпецификации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гкс_ПоказателиАнализовНоменклатуры КАК ПоказателиАнализовНоменклатуры
	|			ПО КачественныеПоказателиСпецификации.Показатель = ПоказателиАнализовНоменклатуры.Ссылка
	|		ПО ТоварыСпецификации.ИдентификаторСтроки = КачественныеПоказателиСпецификации.ИдентификаторСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеЛабАнализа КАК ВТ_ДанныеЛабАнализа
	|		ПО ТоварыСпецификации.Ссылка = ВТ_ДанныеЛабАнализа.Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеПоказатели.Показатель КАК Показатель,
	|	ВТ_ВсеПоказатели.Значение КАК Значение,
	|	ВТ_КачественныеПоказателиСпецификации.МинимальноеЗначение КАК МинимальноеЗначение,
	|	ВТ_КачественныеПоказателиСпецификации.МаксимальноеЗначение КАК МаксимальноеЗначение,
	|	""Макс"" КАК Порог
	|ПОМЕСТИТЬ ВТ_ОтклоненияОтКачественныхПоказателейСпецификации
	|ИЗ
	|	ВТ_ВсеПоказатели КАК ВТ_ВсеПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КачественныеПоказателиСпецификации КАК ВТ_КачественныеПоказателиСпецификации
	|		ПО ВТ_ВсеПоказатели.Показатель = ВТ_КачественныеПоказателиСпецификации.Показатель
	|		И ВТ_КачественныеПоказателиСпецификации.МаксимальноеЗначение > 0
	|		И ВТ_ВсеПоказатели.Значение > ВТ_КачественныеПоказателиСпецификации.МаксимальноеЗначение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ВсеПоказатели.Показатель,
	|	ВТ_ВсеПоказатели.Значение,
	|	ВТ_КачественныеПоказателиСпецификации.МинимальноеЗначение,
	|	ВТ_КачественныеПоказателиСпецификации.МаксимальноеЗначение,
	|	""Мин""
	|ИЗ
	|	ВТ_ВсеПоказатели КАК ВТ_ВсеПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КачественныеПоказателиСпецификации КАК ВТ_КачественныеПоказателиСпецификации
	|		ПО ВТ_ВсеПоказатели.Показатель = ВТ_КачественныеПоказателиСпецификации.Показатель
	|		И ВТ_КачественныеПоказателиСпецификации.МинимальноеЗначение > 0
	|		И ВТ_ВсеПоказатели.Значение < ВТ_КачественныеПоказателиСпецификации.МинимальноеЗначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НЕОПРЕДЕЛЕНО КАК ПричинаСостоянияОтказа,
	|	ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияРегистрации.РезультатыПробПолучены) КАК Состояние,
	|	ЛОЖЬ КАК НазначатьНаСклады,
	|	ЛОЖЬ КАК НеСоответствуетСпецификации,
	|	ЛОЖЬ КАК НеСоответствуетНормативам
	|ПОМЕСТИТЬ ВТ_СоятоянияАнализа
	|ИЗ
	|	ВТ_ВсеПоказатели КАК ВТ_ВсеПоказатели
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) = 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	2,
	|	""Не соответствует параметрам спецификации"",
	|	ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияРегистрации.КачествоНеПринято),
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ
	|ИЗ
	|	ВТ_ОтклоненияОтКачественныхПоказателейСпецификации КАК ВТ_ОтклоненияОтКачественныхПоказателейСпецификации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	3,
	|	""Не соответствует нормативу"",
	|	ВЫБОР
	|		КОГДА ПоказателиАнализовОтклонятьКачество.ОтклонятьКачество
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияРегистрации.КачествоНеПринято)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияРегистрации.РезультатыПробПолучены)
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ЦБТ_ПоказателиАнализовНоменклатуры.гкс_ПриОтклоненииОтНормыОтклонятьКачество) КАК ОтклонятьКачество
	|	ИЗ
	|		ВТ_ВсеПоказатели КАК ВТ_ВсеПоказатели
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гкс_ПоказателиАнализовНоменклатуры КАК ЦБТ_ПоказателиАнализовНоменклатуры
	|			ПО ВТ_ВсеПоказатели.Показатель = ЦБТ_ПоказателиАнализовНоменклатуры.Ссылка
	|	ГДЕ
	|		НЕ ВТ_ВсеПоказатели.СоответствуетНормативу) КАК ПоказателиАнализовОтклонятьКачество
	|ГДЕ
	|	НЕ ПоказателиАнализовОтклонятьКачество.ОтклонятьКачество ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	4,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияРегистрации.КачествоПринято),
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	ВТ_ВсеПоказатели КАК ВТ_ВсеПоказатели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоятоянияАнализа.Приоритет КАК Приоритет,
	|	ВТ_СоятоянияАнализа.Состояние КАК Состояние,
	|	ВТ_СоятоянияАнализа.ПричинаСостоянияОтказа КАК ПричинаСостоянияОтказа,
	|	ВТ_СоятоянияАнализа.НазначатьНаСклады КАК НазначатьНаСклады,
	|	ВТ_СоятоянияАнализа.НеСоответствуетСпецификации КАК НеСоответствуетСпецификации,
	|	ВТ_СоятоянияАнализа.НеСоответствуетНормативам КАК НеСоответствуетНормативам
	|ИЗ
	|	ВТ_СоятоянияАнализа КАК ВТ_СоятоянияАнализа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
КонецФункции

Функция ТекстЗапросаТаблицаСостояниеРегистрации(Запрос, ТекстыЗапроса, Регистры, ДопПараметры)
	
	ИмяРегистра = "гкс_СостоянияРегистрации";
	
	Если НЕ гкс_ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;

	Если НеТребуетсяОтражатьСостоянияРегистрации(ДопПараметры.ДополнительныеСвойства) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеЛабАнализа.ДатаПолученияАнализа = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ВТ_ДанныеЛабАнализа.Период
	               |		ИНАЧЕ ВТ_ДанныеЛабАнализа.ДатаПолученияАнализа
	               |	КОНЕЦ КАК Период,
	               |	ВТ_ДанныеЛабАнализа.ДокументРегистратор КАК ДокументРегистратор,
	               |	ВТ_ДанныеЛабАнализа.ТочкаМаршрута КАК ТочкаМаршрута,
	               |	ВТ_ДанныеЛабАнализа.ДокументРегистрации КАК ДокументРегистрации,
	               |	&Пользователь КАК Пользователь,
	               |	ВТ_ДанныеЛабАнализа.ТранспортноеСредство КАК ТранспортноеСредство,
	               |	&Состояние КАК Состояние,
	               |	ВТ_ДанныеЛабАнализа.ТипРегистрации КАК ТипРегистрации,
	               |	ВТ_ДанныеЛабАнализа.ВидПеревозки КАК ВидПеревозки,
	               |	ВТ_ДанныеЛабАнализа.МестнаяДата КАК МестнаяДата
	               |ИЗ
	               |	ВТ_ДанныеЛабАнализа КАК ВТ_ДанныеЛабАнализа";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	 
КонецФункции

Функция ТекстЗапросаВтДанныеЛабАнализа(Запрос, ТекстыЗапроса = Неопределено)
	
	ИмяРегистра = "ВТ_ДанныеЛабАнализа";
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЛабАнализ.Дата КАК Период,
	               |	ЛабАнализ.Ссылка КАК ДокументРегистратор,
	               |	ЛабАнализ.ТочкаМаршрута КАК ТочкаМаршрута,
	               |	ЛабАнализ.гкс_ДокументРегистрации КАК ДокументРегистрации,
	               |	ЛабАнализ.Статус КАК Статус,
	               |	ЛабАнализ.Организация КАК Организация,
	               |	ЕСТЬNULL(Регистрация.ТранспортноеСредство, ЗНАЧЕНИЕ(Справочник.ТранспортныеСредства.ПустаяСсылка)) КАК ТранспортноеСредство,
	               |	ЕСТЬNULL(Регистрация.Спецификация, ЗНАЧЕНИЕ(Документ.гкс_СпецификацияКДоговоруКонтрагента.ПустаяСсылка)) КАК Спецификация,
	               |	ЕСТЬNULL(Регистрация.ТипРегистрации, ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.ПустаяСсылка)) КАК ТипРегистрации,
	               |	ЛабАнализ.гкс_ВидПеревозки КАК ВидПеревозки,
	               |	ЕСТЬNULL(Регистрация.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	               |	ЛабАнализ.гкс_МестнаяДата КАК МестнаяДата,
				   |	ЛабАнализ.гкс_ДатаПолученияАнализа КАК ДатаПолученияАнализа
	               |ПОМЕСТИТЬ ВТ_ДанныеЛабАнализа
	               |ИЗ
	               |	Документ.гкс_ЛабораторныйАнализ КАК ЛабАнализ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК Регистрация
	               |		ПО ЛабАнализ.гкс_ДокументРегистрации = Регистрация.Ссылка
	               |ГДЕ
	               |	ЛабАнализ.Ссылка = &Ссылка";
	
	Если ЗначениеЗаполнено(ТекстыЗапроса) Тогда
		ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаВТПоказателиНеСоответствующиеНормативу(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВТ_ПоказателиНеСоответствующиеНормативу";
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВТ_ВсеПоказатели.Значение КАК Значение,
	               |	ВТ_ВсеПоказатели.Показатель КАК Показатель
	               |ПОМЕСТИТЬ ВТ_ПоказателиНеСоответствующиеНормативу
	               |ИЗ
	               |	ВТ_ВсеПоказатели КАК ВТ_ВсеПоказатели
	               |ГДЕ
	               |	НЕ ВТ_ВсеПоказатели.СоответствуетНормативу";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаВТПоказателиСертификации(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВТ_ПоказателиСертификации";
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РезультатыНормативнойСертификации.ПоказательАнализа КАК ПоказательАнализа,
	               |	РезультатыНормативнойСертификации.ЗначениеПоказателя КАК ЗначениеПоказателя,
	               |	РезультатыНормативнойСертификации.МаксимальноеЗначение КАК МаксимальноеЗначение
	               |ПОМЕСТИТЬ ВТ_ПоказателиСертификации
	               |ИЗ
	               |	РегистрСведений.гкс_РезультатыНормативнойСертификацииНоменклатуры.СрезПоследних(
	               |			&ДатаСреза,
	               |			Организация = &Организация
	               |				И Номенклатура = &Номенклатура) КАК РезультатыНормативнойСертификации";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

КонецПроцедуры

Функция ТекстЗапросаКомментарииКСтатусуКачествоНеПринято(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "гкс_КомментарииКСтатусуКачествоНеПринято";
	ТекстЗапроса = "";
	
	Если Запрос.Параметры.Свойство("ПоказателиНеСоответствуютНормативу") 
		И Запрос.Параметры["ПоказателиНеСоответствуютНормативу"] Тогда
		
		Если НЕ гкс_ПроведениеДокументов.ЕстьТаблицаЗапроса("ВТ_ПоказателиНеСоответствующиеНормативу", ТекстыЗапроса) Тогда
			ТекстЗапросаВТПоказателиНеСоответствующиеНормативу(Запрос, ТекстыЗапроса);
		КонецЕсли;
				
		Если НЕ гкс_ПроведениеДокументов.ЕстьТаблицаЗапроса("ВТ_ПоказателиСертификации", ТекстыЗапроса) Тогда
			ТекстЗапросаВТПоказателиСертификации(Запрос, ТекстыЗапроса);
		КонецЕсли; 

		ТекстЗапроса = "ВЫБРАТЬ
		               |	&ДокументРегистрации КАК ДокументРегистрации,
		               |	""По нормативу"" КАК ВариантОтклонения,
		               |	ВТ_ПоказателиНеСоответствующиеНормативу.Значение КАК Значение,
		               |	ВТ_ПоказателиНеСоответствующиеНормативу.Показатель КАК Показатель,
		               |	ЕСТЬNULL(ВТ_ПоказателиСертификации.ЗначениеПоказателя, 0) КАК МинЗначение,
		               |	ЕСТЬNULL(ВТ_ПоказателиСертификации.МаксимальноеЗначение, 0) КАК МаксЗначение,
		               |	ЕСТЬNULL(ЦБТ_ПоказателиАнализовНоменклатуры.гкс_ПриОтклоненииОтНормыОтклонятьКачество, ЛОЖЬ) КАК ОтклонятьКачество,
		               |	НЕ ВТ_ПоказателиСертификации.ПоказательАнализа ЕСТЬ NULL КАК ЕстьСертификация
		               |ИЗ
		               |	ВТ_ПоказателиНеСоответствующиеНормативу КАК ВТ_ПоказателиНеСоответствующиеНормативу
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоказателиСертификации КАК ВТ_ПоказателиСертификации
		               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_ПоказателиАнализовНоменклатуры КАК ЦБТ_ПоказателиАнализовНоменклатуры
		               |			ПО ВТ_ПоказателиСертификации.ПоказательАнализа = ЦБТ_ПоказателиАнализовНоменклатуры.Ссылка
		               |		ПО ВТ_ПоказателиНеСоответствующиеНормативу.Показатель = ВТ_ПоказателиСертификации.ПоказательАнализа
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_ПоказателиНеСоответствующиеНормативу.Значение,
		               |	ВТ_ПоказателиНеСоответствующиеНормативу.Показатель,
		               |	ЕСТЬNULL(ЦБТ_ПоказателиАнализовНоменклатуры.гкс_ПриОтклоненииОтНормыОтклонятьКачество, ЛОЖЬ),
		               |	НЕ ВТ_ПоказателиСертификации.ПоказательАнализа ЕСТЬ NULL,
		               |	ЕСТЬNULL(ВТ_ПоказателиСертификации.ЗначениеПоказателя, 0),
		               |	ЕСТЬNULL(ВТ_ПоказателиСертификации.МаксимальноеЗначение, 0)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ОтклонятьКачество УБЫВ";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	КонецЕсли;
	Если Запрос.Параметры.Свойство("ПоказателиНеСоответствуютПараметрамСпецификации") 
		И Запрос.Параметры["ПоказателиНеСоответствуютПараметрамСпецификации"] Тогда
				
		ТекстЗапроса = "ВЫБРАТЬ
		               |	&ДокументРегистрации КАК ДокументРегистрации,
		               |	""По спецификации"" КАК ВариантОтклонения,
		               |	ОтклоненияОтСпецификации.Показатель КАК Показатель,
		               |	ОтклоненияОтСпецификации.Значение КАК Значение,
		               |	ОтклоненияОтСпецификации.МинимальноеЗначение КАК МинЗначение,
		               |	ОтклоненияОтСпецификации.МаксимальноеЗначение КАК МаксЗначение,
		               |	ОтклоненияОтСпецификации.Порог КАК Порог,
		               |	ЦБТ_ПоказателиАнализовНоменклатуры.гкс_ПриОтклоненииОтНормыОтклонятьКачество КАК ОтклонятьКачество
		               |ИЗ
		               |	ВТ_ОтклоненияОтКачественныхПоказателейСпецификации КАК ОтклоненияОтСпецификации
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_ПоказателиАнализовНоменклатуры КАК ЦБТ_ПоказателиАнализовНоменклатуры
		               |		ПО ОтклоненияОтСпецификации.Показатель = ЦБТ_ПоказателиАнализовНоменклатуры.Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ОтклонятьКачество УБЫВ";
 	
		ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

Функция НеТребуетсяОтражатьСостоянияРегистрации(ДополнительныеСвойства)
	
	Возврат ДополнительныеСвойства <> Неопределено 
		И ДополнительныеСвойства.Свойство("НеОтражатьСостоянияРегистрации")
		И ДополнительныеСвойства.НеОтражатьСостоянияРегистрации;
КонецФункции

#КонецОбласти

#Область Печать

// Функция получает данные для формирования печатной формы карточки анализа зерна ЗПП-47
// Возвращает данные, необходимые для печатной формы.
// 
// Параметры:
// 	ПараметрыПечати - Структура - дополнительные настройки печати
//	ДокументОснование - ДокументСсылка.гкс_ЛабораторныйАнализ - Документ, который нужно распечатать.
//
// Возвращаемое значение:
//	Структура:
//	 * РезультатПоШапке - РезультатЗапроса
//	 * РезультатКачественныеПоказатели - РезультатЗапроса
//	 * РезультатПоРегистрациям - РезультатЗапроса
//	 * РезультатПоНормативнойСертификации - РезультатЗапроса
//	 * ОписаниеОшибки - Строка

Функция ПолучитьДанныеДляПечатнойФормыЗПП47(ПараметрыПечати, ДокументОснование) Экспорт
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("РезультатПоШапке");
	СтруктураВозврата.Вставить("РезультатКачественныеПоказатели");
	СтруктураВозврата.Вставить("РезультатПоРегистрациям");
	СтруктураВозврата.Вставить("РезультатПоНормативнойСертификации");
	СтруктураВозврата.Вставить("ОписаниеОшибки");
	
	СтруктураВозврата.ОписаниеОшибки = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "гкс_ДокументРегистрации");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВыборкиПоШапкеДокументаДляЗПП47() + гкс_ОбщегоНазначенияПЛК.РазделительЗапросовВПакете()
		+ ТекстЗапросаВыборкиКачественныхПоказателей() + гкс_ОбщегоНазначенияПЛК.РазделительЗапросовВПакете()
		+ ТекстЗапросаВыборкиРегистрацияПоФормированиюПробы() + гкс_ОбщегоНазначенияПЛК.РазделительЗапросовВПакете()
		+ ТекстЗапросаРезультатаНормативнойСертификации();

	Запрос.УстановитьПараметр("ДокументОснование", 			ДокументОснование);
	Запрос.УстановитьПараметр("ФормированиеНомераПробы", 	ДокументРегистрации);

	Результаты = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
		
	СтруктураВозврата.РезультатПоШапке 						= Результаты[0];
	СтруктураВозврата.РезультатКачественныеПоказатели 		= Результаты[1];
	СтруктураВозврата.РезультатПоРегистрациям 				= Результаты[2];
	СтруктураВозврата.РезультатПоНормативнойСертификации 	= Результаты[3];
	
	Возврат СтруктураВозврата;
	
КонецФункции
		
Функция ПолучитьДанныеДляПечатныхФормЛабораторногоАнализа(ДокументОснование) Экспорт
	
	СтруктураВозврата = Новый Структура(
		"РезультатПоШапке, ОписаниеОшибки");
	СтруктураВозврата.ОписаниеОшибки = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВыборкиПоШапкеДокумента();
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Результаты = Запрос.ВыполнитьПакет();
		
	СтруктураВозврата.РезультатПоШапке = Результаты[0];
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция получает данные для формирования отраслевой формы удостоверения ЗПП-42
// Возвращает данные, необходимые для печатной формы.
// 
// Параметры:
// 	ПараметрыПечати - Структура - дополнительные настройки печати
//	ДокументОснование - ДокументСсылка.гкс_ЛабораторныйАнализ - Документ, который нужно распечатать.
//
// Возвращаемое значение:
//	Структура:
//	 * РезультатПоШапке - РезультатЗапроса
//	 * РезультатКачественныеПоказатели - РезультатЗапроса
//	 * ОписаниеОшибки - Строка
 
Функция ПолучитьДанныеДляПечатнойФормыЗПП42(ДокументОснование) Экспорт
	
	СтруктураВозврата = Новый Структура(
		"РезультатПоШапке, РезультатКачественныеПоказатели, ОписаниеОшибки");
	СтруктураВозврата.ОписаниеОшибки = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВыборкиПоДокументамДляЗПП42();
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ТранспортныйДокументПустая", Документы.гкс_ТранспортныйДокумент.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТочкаМаршрутаПустая", Справочники.гкс_ТочкиМаршрута.ПустаяСсылка());
	Запрос.УстановитьПараметр("КонтрагентПустая", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТранспортПустая", Справочники.ТранспортныеСредства.ПустаяСсылка());
			
	Результаты = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
		
	СтруктураВозврата.РезультатПоШапке = Результаты[0];
	СтруктураВозврата.РезультатКачественныеПоказатели = Результаты[1];
	
	Возврат СтруктураВозврата;
	
КонецФункции	

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьДополнительныеПараметры(ДопПараметры, Запрос)
	
	Если ДопПараметры.ДополнительныеСвойства = Неопределено Тогда
		ДопПараметры.ДополнительныеСвойства = Новый Структура;
	КонецЕсли;
	
	Если Запрос.Параметры.Свойство("НазначатьНаСклады") Тогда 
		ДопПараметры.ДополнительныеСвойства.Вставить("НазначатьНаСклады", Запрос.Параметры["НазначатьНаСклады"]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросов

// Запросы для печати    

Функция ТекстЗапросаВыборкиПоШапкеДокумента()
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛабораторныйАнализ.Организация КАК Организация,
	|	ЛабораторныйАнализ.НомерПробы КАК НомерПробы,
	|	ЛабораторныйАнализ.Номер КАК Номер,
	|	ЛабораторныйАнализ.Дата КАК Дата,
	|	ЛабораторныйАнализ.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(РегистрацияНаПЛК.ОтправительПолучатель, """") КАК ОтправительПолучатель,
	|	ЕСТЬNULL(РегистрацияНаПЛК.ТранспортноеСредство, """") КАК ТранспортноеСредство,
	|	ЕСТЬNULL(РегистрацияНаПЛК.ТранспортноеСредство.НомерТранспортногоСредства, """") КАК НомерТранспортногоСредства,
	|	ЕСТЬNULL(НастройкиПечатиФормированияПроб.ОбъемПробы, """") КАК ОбъемПробы,
	|	ЕСТЬNULL(Организации.ОГРН, """") КАК ОГРН,
	|	ЕСТЬNULL(Организации.ИНН, """") КАК ИНН,
	|	ЕСТЬNULL(Организации.Наименование, """") КАК ПредставлениеОрганизации,
	|	ЕСТЬNULL(Организации.Адрес, """") КАК ОрганизацияАдрес,
	|	ЕСТЬNULL(Организации.Телефоны, """") КАК ОрганизацияТелефоны,
	|	ЕСТЬNULL(Организации.ЭлектроннаяПочта, """") КАК ОрганизацияЭлектроннаяПочта,
	|	ЕСТЬNULL(НастройкиПечатиФормированияПроб.ГОСТ, """") КАК ГОСТ,
	|	ЕСТЬNULL(РегистрацияНаПЛК.Собственник, """") КАК Собственник,
	|	ЕСТЬNULL(СостоянияРегистрации.МестнаяДата, """") КАК МестнаяДата,
	|	ВЫБОР
	|		КОГДА
	|			ЛабораторныйАнализ.гкс_НазначениеИспользованияКачества = ЗНАЧЕНИЕ(Перечисление.гкс_НазначенияИспользованияКачества.Приемка)
	|			ТОГДА ЕСТЬNULL(РегистрацияНаПЛК.Водитель, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Водитель
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ КАК ЛабораторныйАнализ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_НастройкиПечатиФормированияПроб КАК НастройкиПечатиФормированияПроб
	|		ПО ЛабораторныйАнализ.Номенклатура = НастройкиПечатиФормированияПроб.Номенклатура
	|		И ЛабораторныйАнализ.ТочкаМаршрута = НастройкиПечатиФормированияПроб.ТочкаМаршрута
	|		И ЛабораторныйАнализ.гкс_ВидПеревозки = НастройкиПечатиФормированияПроб.ВидПеревозки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ЛабораторныйАнализ.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ПО ЛабораторныйАнализ.гкс_ДокументРегистрации = РегистрацияНаПЛК.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СостоянияРегистрации КАК СостоянияРегистрации
	|		ПО ЛабораторныйАнализ.гкс_ДокументРегистрации = СостоянияРегистрации.ДокументРегистрации
	|		И СостоянияРегистрации.Состояние = ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияРегистрации.ВзятыПробы)
	|ГДЕ
	|	ЛабораторныйАнализ.Ссылка = &ДокументОснование";
	
КонецФункции

Функция ТекстЗапросаВыборкиКачественныхПоказателей()
	Возврат
	"ВЫБРАТЬ
	|	ЦБТ_ЛабораторныйАнализКачественныеПоказатели.Показатель КАК Показатель,
	|	ЦБТ_ЛабораторныйАнализКачественныеПоказатели.Значение КАК Значение,
	|	ЦБТ_ЛабораторныйАнализКачественныеПоказатели.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦБТ_ЛабораторныйАнализКачественныеПоказатели.НомерПробы КАК НомерПробы,
	|	ЦБТ_ЛабораторныйАнализКачественныеПоказатели.СоответствуетНормативу КАК СоответствуетНормативу,
	|	ЦБТ_ЛабораторныйАнализКачественныеПоказатели.ОтклонениеОтБазиса КАК ОтклонениеОтБазиса,
	|	ЦБТ_ЛабораторныйАнализКачественныеПоказатели.гкс_Примечание КАК гкс_Примечание
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ.КачественныеПоказатели КАК ЦБТ_ЛабораторныйАнализКачественныеПоказатели
	|ГДЕ
	|	ЦБТ_ЛабораторныйАнализКачественныеПоказатели.Ссылка = &ДокументОснование";
КонецФункции

Функция ТекстЗапросаВыборкиПоШапкеДокументаДляЗПП47()
	Возврат
	"ВЫБРАТЬ
	|	ШапкиДокументовЛабАнализ.гкс_НазначениеИспользованияКачества КАК ТипАнализа,
	|	ШапкиДокументовЛабАнализ.Дата КАК Дата,
	|	ШапкиДокументовЛабАнализ.Номер КАК Номер,
	|	ШапкиДокументовЛабАнализ.Организация КАК Организация,
	|	ЕСТЬNULL(Организации.НаименованиеПолное, """") КАК ПредставлениеОрганизации,
	|	ЕСТЬNULL(Организации.КодПоОКПО, """") КАК КодПоОКПО,
	|	ШапкиДокументовЛабАнализ.Ответственный КАК Ответственный,
	|	ШапкиДокументовЛабАнализ.НомерПробы КАК НомерПробы,
	|	ШапкиДокументовЛабАнализ.ТочкаМаршрута КАК МестоОтбораПробы,
	|	ЕСТЬNULL(гкс_НастройкиПечатиФормированияПроб.ОбъемПробы, 0) * 1000 КАК МассаПробы,
	|	ШапкиДокументовЛабАнализ.Номенклатура КАК Номенклатура,
	|	ШапкиДокументовЛабАнализ.гкс_ВидПеревозки КАК гкс_ВидПеревозки,
	|	ШапкиДокументовЛабАнализ.ВидЛабораторногоАнализа КАК ВидЛабораторногоАнализа,
	|	гкс_НастройкиПечатиФормированияПроб.ГОСТ КАК ГОСТОтбораПроб,
	|	гкс_ФормированиеНомераПробы.ТипПробы КАК ТипПробы,
	|	ЕСТЬNULL(ШапкиДокументовРегистрации.АдресЗоныКарантинногоКонтроляСтрокой, """") КАК Происхождение,
	|	ШапкиДокументовЛабАнализ.гкс_СостояниеТранспортногоСредства КАК СостояниеТранспорта,
	|	ШапкиДокументовЛабАнализ.ГодУрожая КАК ГодУрожая
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ КАК ШапкиДокументовЛабАнализ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ФормированиеНомераПробы КАК гкс_ФормированиеНомераПробы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ФормированиеНомераПробы.СписокРегистраций КАК РегистрацииФормированийНомеровПроб
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК ШапкиДокументовРегистрации
	|				ПО ШапкиДокументовРегистрации.Ссылка = РегистрацииФормированийНомеровПроб.ДокументРегистрации
	|			ПО гкс_ФормированиеНомераПробы.Ссылка = РегистрацииФормированийНомеровПроб.Ссылка
	|			И РегистрацииФормированийНомеровПроб.НомерСтроки = 1
	|		ПО ШапкиДокументовЛабАнализ.гкс_ДокументРегистрации = гкс_ФормированиеНомераПробы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ШапкиДокументовЛабАнализ.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_НастройкиПечатиФормированияПроб КАК гкс_НастройкиПечатиФормированияПроб
	|		ПО ШапкиДокументовЛабАнализ.ТочкаМаршрута = гкс_НастройкиПечатиФормированияПроб.ТочкаМаршрута
	|		И ШапкиДокументовЛабАнализ.Номенклатура = гкс_НастройкиПечатиФормированияПроб.Номенклатура
	|		И ШапкиДокументовЛабАнализ.гкс_ВидПеревозки = гкс_НастройкиПечатиФормированияПроб.ВидПеревозки
	|		И гкс_ФормированиеНомераПробы.ТипПробы = гкс_НастройкиПечатиФормированияПроб.ТипПробы
	|ГДЕ
	|	ШапкиДокументовЛабАнализ.Ссылка = &ДокументОснование";
КонецФункции	

Функция ТекстЗапросаВыборкиРегистрацияПоФормированиюПробы()
	Возврат
	"ВЫБРАТЬ
	|	ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации КАК ДокументРегистрации,
	|	ФормированиеНомераПробыСписокРегистраций.НомерСтроки КАК НомерСтроки,
	|	РегистрацияНаПЛК.ВесНетто / 1000 КАК ВесНетто,
	|	ЕстьNULL(Организации.НаименованиеПолное, """") КАК ПредставлениеПолучателя,
	|	РегистрацияНаПЛК.Контрагент КАК Контрагент,
	|	РегистрацияНаПЛК.ДатаДокументаПоставщика КАК ДатаДокументаПоставщика,
	|	РегистрацияНаПЛК.НомерДокументаПоставщика КАК НомерДокументаПоставщика,
	|	ЕСТЬNULL(ВсеТранспортныеСредства.НомерТранспортногоСредства, """") КАК НомерТранспортногоСредства,
	|	ЕСТЬNULL(СвязьРегистрацииИТранспортногоДокумента.ТранспортныйДокумент,
	|		ЗНАЧЕНИЕ(Документ.гкс_ТранспортныйДокумент.ПустаяСсылка)) КАК ТранспортныйДокумент,
	|	ЕСТЬNULL(ГКСТранспортныйДокумент.ПунктПогрузки, ЗНАЧЕНИЕ(Справочник.гкс_ТочкиМаршрута.ПустаяСсылка)) КАК
	|		ПунктПогрузки
	|ИЗ
	|	Документ.гкс_ФормированиеНомераПробы.СписокРегистраций КАК ФормированиеНомераПробыСписокРегистраций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТранспортныеСредства КАК ВсеТранспортныеСредства
	|			ПО РегистрацияНаПЛК.ТранспортноеСредство = ВсеТранспортныеСредства.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО РегистрацияНаПЛК.Организация = Организации.Ссылка
	|		ПО ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации = РегистрацияНаПЛК.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СвязьРегистрацииИТранспортногоДокумента КАК
	|			СвязьРегистрацииИТранспортногоДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ТранспортныйДокумент КАК ГКСТранспортныйДокумент
	|			ПО СвязьРегистрацииИТранспортногоДокумента.ТранспортныйДокумент = ГКСТранспортныйДокумент.Ссылка
	|		ПО ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации = СвязьРегистрацииИТранспортногоДокумента.ДокументРегистрации
	|ГДЕ
	|	ФормированиеНомераПробыСписокРегистраций.Ссылка = &ФормированиеНомераПробы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
КонецФункции

Функция ТекстЗапросаРезультатаНормативнойСертификации()
	Возврат
	"ВЫБРАТЬ
	|	ЦБТ_НормативнаяСертификацияНоменклатуры.Ссылка КАК НормативнаяСертификация,
	|	ЦБТ_НормативнаяСертификацияНоменклатуры.ГОСТ КАК ГОСТ
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ КАК ЦБТ_ЛабораторныйАнализ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_НормативнаяСертификацияНоменклатуры КАК ЦБТ_НормативнаяСертификацияНоменклатуры
	|		ПО ЦБТ_ЛабораторныйАнализ.Организация = ЦБТ_НормативнаяСертификацияНоменклатуры.Организация
	|		И ЦБТ_ЛабораторныйАнализ.ТочкаМаршрута = ЦБТ_НормативнаяСертификацияНоменклатуры.ТочкаМаршрута
	|		И ЦБТ_ЛабораторныйАнализ.Номенклатура = ЦБТ_НормативнаяСертификацияНоменклатуры.Номенклатура
	|		И
	|			ЦБТ_ЛабораторныйАнализ.гкс_НазначениеИспользованияКачества = ЦБТ_НормативнаяСертификацияНоменклатуры.гкс_НазначениеИспользованияКачества
	|		И ЦБТ_ЛабораторныйАнализ.гкс_ВидПеревозки = ЦБТ_НормативнаяСертификацияНоменклатуры.гкс_ВидПеревозки
	|ГДЕ
	|	ЦБТ_ЛабораторныйАнализ.Ссылка = &ДокументОснование
	|	И ЦБТ_НормативнаяСертификацияНоменклатуры.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦБТ_НормативнаяСертификацияНоменклатуры.Дата УБЫВ";
КонецФункции

Функция ТекстЗапросаВыборкиПоДокументамДляЗПП42()
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СпрОрганизации.НаименованиеСокращенное, """") КАК ПредставлениеОрганизации,
	|	ДокЛабораторныйАнализ.Дата КАК Дата,
	|	ДокЛабораторныйАнализ.Номер КАК Номер,
	|	ДокЛабораторныйАнализ.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ДокРегистрацияНаПЛК.ОтправительПолучатель, &КонтрагентПустая) КАК Отправитель,
	|	ЕСТЬNULL(ДокРегистрацияНаПЛК.ТранспортноеСредство, &ТранспортПустая) КАК Вагон,
	|	ЕСТЬNULL(ДокРегистрацияНаПЛК.ВесБрутто, 0) КАК Вес,
	|	ЕСТЬNULL(ДокТранспортныйДокумент.Номер, """") КАК НакладнаяНомер,
	|	ЕСТЬNULL(ДокТранспортныйДокумент.ПунктПогрузки, &ТочкаМаршрутаПустая) КАК ПунктПогрузки,
	|	ЕСТЬNULL(ДокТранспортныйДокумент.ПунктРазгрузки, &ТочкаМаршрутаПустая) КАК ПунктРазгрузки,
	|	ЕСТЬNULL(ДокТранспортныйДокумент.Получатель, &КонтрагентПустая) КАК Получатель
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ КАК ДокЛабораторныйАнализ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК ДокРегистрацияНаПЛК
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СвязьРегистрацииИТранспортногоДокумента КАК
	|				РССвязьРегистрацииИТранспортногоДокумента
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ТранспортныйДокумент КАК ДокТранспортныйДокумент
	|				ПО (РССвязьРегистрацииИТранспортногоДокумента.ТранспортныйДокумент = ДокТранспортныйДокумент.Ссылка)
	|			ПО (ДокРегистрацияНаПЛК.Ссылка = РССвязьРегистрацииИТранспортногоДокумента.ДокументРегистрации)
	|		ПО (ДокЛабораторныйАнализ.гкс_ДокументРегистрации = ДокРегистрацияНаПЛК.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СпрОрганизации
	|		ПО (ДокЛабораторныйАнализ.Организация = СпрОрганизации.Ссылка)
	|ГДЕ
	|	ДокЛабораторныйАнализ.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокЛабАнализКачественныеПоказатели.Показатель КАК Показатель,
	|	ДокЛабАнализКачественныеПоказатели.Значение КАК Значение
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ.КачественныеПоказатели КАК ДокЛабАнализКачественныеПоказатели
	|ГДЕ
	|	ДокЛабАнализКачественныеПоказатели.Ссылка = &ДокументОснование";
КонецФункции
// Конец Запросы для печати

#КонецОбласти   

#КонецОбласти

#КонецЕсли
