
#Область ИнициализацияПеременных

&НаКлиенте
Перем ИдентификаторЗамераПроведение;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьВидимостьДоступностьЭлементовФормы();

	Если НЕ ЗначениеЗаполнено(Объект.Статус) Тогда
		Объект.Статус = Перечисления.гкс_СтатусыЛабораторногоАнализа.ОтборПробы;
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		гкс_УправлениеДоступом.ОпределитьДоступностьВозможностьИзмененияДокументаПоРеестру(ЭтотОбъект, Объект);
	КонецЕсли;
					
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
        ИдентификаторЗамераПроведение = 
		ОценкаПроизводительностиКлиент.ЗамерВремени("ПроведениеДокумента.Интерактивно.ЛабораторныйАнализ", 
		                                            Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОграничитьДоступКФорме();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзменениеЛабараторногоАнализа");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	гкс_ОбщегоНазначенияПЛККлиент.ПровестиИЗакрыть(ЭтотОбъект, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	гкс_ОбщегоНазначенияПЛККлиент.Провести(ЭтотОбъект, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	гкс_ОбщегоНазначенияПЛККлиент.Записать(ЭтотОбъект, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НоменнклатураПриИзменении(Элемент)
	
	ОбновитьСписокПоказателейАнализовНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьСписокПоказателейАнализовНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура КачественныеПоказателиЗначениеПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.КачественныеПоказатели.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда	
		Возврат;	
	КонецЕсли;
	
	ОбновитьСоответствиеБазисуВСтроке(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	ОбновитьДатуДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область РаботаСФормой

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовФормы()
	
	УстановитьВидимостьЭлементовФормы();
		
	Если Параметры.Ключ.Пустая() И Параметры.Свойство("ИзАРМа") Тогда		
		ОграничитьДоступностьЭлементовЕслиФормаПодчинена();		
	КонецЕсли;
	
	ОграничитьДоступКФорме();
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьДоступностьЭлементовЕслиФормаПодчинена()
	
	Элементы.ДокументРегистрация.Доступность = Ложь;
	Элементы.Склад.Доступность = Ложь;
	Элементы.Номеннклатура.Доступность = Ложь;
	Элементы.Организация.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	Элементы.Дата.Видимость = НЕ ЗначениеЗаполнено(Объект.гкс_МестнаяДата);
	Элементы.МестнаяДата.Видимость = ЗначениеЗаполнено(Объект.гкс_МестнаяДата);

КонецПроцедуры

&НаСервере
Процедура ОграничитьДоступКФорме()
	
	Если Не ЭтотОбъект.ТолькоПросмотр Тогда // может быть уже установлен, если оформлен реестр ЗПП-3 
		ЭтотОбъект.ТолькоПросмотр = Не (Пользователи.ЭтоПолноправныйПользователь() ИЛИ ЛабораторныйАнализВыполняется());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьДатуДокумента()
	Объект.Дата = ТекущаяДатаСеанса();
	Объект.гкс_МестнаяДата = Дата(1, 1, 1, 0, 0, 0);
	УстановитьВидимостьЭлементовФормы();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоответствиеБазисуВСтроке(ИдентификаторСтроки)
	
	ТекущаяСтрока = Объект.КачественныеПоказатели.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТипЗнч(Объект.гкс_ДокументРегистрации) = Тип("ДокументСсылка.гкс_РегистрацияНаПЛК") Тогда
		Контрагент = Документы.гкс_РегистрацияНаПЛК.КонтрагентДляКонтроляКачества(Объект.гкс_ДокументРегистрации);
	Иначе
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	ТекущиеЗначениеПоказателя = Новый Соответствие;
	ТекущиеЗначениеПоказателя.Вставить(ТекущаяСтрока.Показатель, ТекущаяСтрока.Значение);	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Контрагент", Контрагент);
	ДополнительныеПараметры.Вставить("Показатель", ТекущаяСтрока.Показатель);
	ДополнительныеПараметры.Вставить("ТекущиеЗначениеПоказателя", ТекущиеЗначениеПоказателя);
		
	МассивПоказателей = гкс_РаботаСПоказателямиНоменклатуры.РезультатыНормативнойСертификацииНоменклатуры(
		Объект, ДополнительныеПараметры);	
		
	Если МассивПоказателей.Количество() > 0 Тогда
			
		ДанныеПоПоказателю = МассивПоказателей[0];	
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеПоПоказателю, "СоответствуетНормативу, ОтклонениеОтБазиса");
        ТекущаяСтрока.гкс_Примечание = ДанныеПоПоказателю.Комментарий;
	КонецЕсли;		
			
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПоказателейАнализовНоменклатуры()
	
	Объект.КачественныеПоказатели.Очистить();
	
	ЗаполнитьКачественныеПоказателиНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКачественныеПоказателиНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
	ДокументОбъект.ЗаполнитьКачественныеПоказатели();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Функция ЛабораторныйАнализВыполняется()
	
	Возврат НЕ Объект.Статус = Перечисления.гкс_СтатусыЛабораторногоАнализа.Выполнен;
	
КонецФункции

#КонецОбласти
