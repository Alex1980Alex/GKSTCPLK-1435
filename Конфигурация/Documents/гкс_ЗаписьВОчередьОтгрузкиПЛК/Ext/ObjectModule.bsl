#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
		
	гкс_ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ВыполнитьДополнительныеДействияПередЗаписьюВРежимеОбменаДанными(Отказ, РежимЗаписи, РежимПроведения);
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	гкс_ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДозаполнитьОбъектПередЗаписью();
	ПроверитьЗаполнениеОбъектаПередЗаписью(Отказ);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		//ПроверитьДоступностьМестВГрафикеИОчереди(Отказ);
	КонецЕсли;
			
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	УдалитьСтатусОтмененВОчереди();
	гкс_ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ДокументРегистрации", Ссылка);
	ПараметрыВыгрузки.Вставить("СостояниеРегистрации", Перечисления.гкс_СостоянияРегистрации.Регистрация);
	ПараметрыВыгрузки.Вставить("Отмена", Ложь);
		     	
	гкс_ИнтеграцияСКверионСервер.ВыгрузитьСообщениеВКверион(ПараметрыВыгрузки, Отказ);
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	гкс_ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	ДобавитьСтатусОтмененВОчереди();
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ДокументРегистрации", Ссылка);
	ПараметрыВыгрузки.Вставить("СостояниеРегистрации", Перечисления.гкс_СостоянияРегистрации.Регистрация);
	ПараметрыВыгрузки.Вставить("Отмена", Истина);
		     	
	гкс_ИнтеграцияСКверионСервер.ВыгрузитьСообщениеВКверион(ПараметрыВыгрузки, Отказ);
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДополнительныеДействияПередЗаписьюВРежимеОбменаДанными

Процедура ВыполнитьДополнительныеДействияПередЗаписьюВРежимеОбменаДанными(Отказ, РежимЗаписи, РежимПроведения)
																		  
	Если Отказ ИЛИ НЕ ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если ВыполнятьОчисткуСтатусаЗаписиРегистрацииВОчереди() Тогда
		ОчиститьСтатусЗаписиРегистрацииВОчередиПриемки();				
	КонецЕсли;
	             
КонецПроцедуры

Функция ВыполнятьОчисткуСтатусаЗаписиРегистрацииВОчереди()
	
	Возврат НЕ ЭтоНовый() 
	        И ПометкаУдаления 
			И ДополнительныеСвойства.Свойство("ПометкаУдаленияПриОбработкеИАС"); 
	
КонецФункции

Процедура ОчиститьСтатусЗаписиРегистрацииВОчередиПриемки()
		
	РегистрыСведений.гкс_СтатусыЗаписейВОчередиПриемкиПЛК.УдалитьЗапись(
								Новый Структура("ЗаписьВОчередь", 
                                                Ссылка));
	
КонецПроцедуры

#КонецОбласти

// Добавляет запись со статусом Отменен из регистра сведений Статусы записей в очереди приемки ПЛК.
//
Процедура ДобавитьСтатусОтмененВОчереди()
	
	РегистрыСведений.гкс_СтатусыЗаписейВОчередиПриемкиПЛК.УстановитьСтатусОтменен(
		ТочкаМаршрута,
		НачалоПериода,
		Ссылка,
		Ложь);
		
КонецПроцедуры

// Удаляет запись со статусом Отменен из регистра сведений Статусы записей в очереди приемки ПЛК.
//
Процедура УдалитьСтатусОтмененВОчереди()
	
	ТекСтатус = РегистрыСведений.гкс_СтатусыЗаписейВОчередиПриемкиПЛК.ТекущийСтатус(Ссылка);
	Если ТекСтатус = Перечисления.гкс_СтатусыЭлектроннойОчереди.Отменен Тогда
		 ОчиститьСтатусЗаписиРегистрацииВОчередиПриемки();
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПризнакОтменено()
	
	Режим = ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента.РежимЗаписи;
	
	Если Режим = РежимЗаписиДокумента.ОтменаПроведения Или ПометкаУдаления Тогда 
		Отменено = Истина;	
	Иначе
		Отменено = Ложь;
	КонецЕсли;
		
КонецПроцедуры

Процедура ДозаполнитьОбъектПередЗаписью()
	
	ИзменитьПризнакОтменено();
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеОбъектаПередЗаписью(Отказ)
	
	Если УправлениеДоступом.ЕстьРоль("АдминистраторСистемы") Тогда
		Возврат;
	КонецЕсли;
	
	ЧасовойПояс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТочкаМаршрута, "гкс_ЧасовойПоясТочкиМаршрута");
	Если НЕ гкс_ЭлектроннаяОчередь.ДатаЗаявкиАктуальна(ОкончаниеПериода, ЧасовойПояс) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Запрещено вносить записи в прошлые периоды!'"),
		                                                  Неопределено,
														  "ОкончаниеПериода",
														  "",
														  Отказ);
														  
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("НачалоПериода", НачалоПериода);
	ДанныеОбъекта.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	ДанныеОбъекта.Вставить("Номенклатура", Номенклатура);
	ДанныеОбъекта.Вставить("ТочкаМаршрута", ТочкаМаршрута);
	ДанныеОбъекта.Вставить("ТипРегистрации", Перечисления.гкс_ТипРегистрации.Отгрузка);

	Если НЕ гкс_ЭлектроннаяОчередь.ПериодЭлектроннойОчередиЗаданКорректно(ДанныеОбъекта) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выбранный период не корректный!'"),
		                                                  Неопределено, "ОкончаниеПериода", "", Отказ);		
														  
	КонецЕсли;
	   	
КонецПроцедуры

#Область ДоступностьОчередей

Процедура ПроверитьДоступностьМестВГрафикеИОчереди(Отказ)
	
	Если Не ГрафикЗаполнен() Тогда
		
		ТекстСообщения = НСтр("ru = 'На этот период график не заполнен!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
                                                  		Неопределено, "ОкончаниеПериода", "", Отказ);
	КонецЕсли;
	
	Если Не Отказ И НЕ ЕстьСвободноеМестоВОчереди() Тогда
		
		ТекстСообщения = НСтр("ru = 'На этот период в очереди отгрузки уже существуют записи!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, 
														Неопределено, "ОкончаниеПериода", "", Отказ);
												  
	КонецЕсли;
											  	
КонецПроцедуры

Функция ЕстьСвободноеМестоВОчереди()
		
	Параметры = Новый Структура;
	
	Параметры.Вставить("Номенклатура", Номенклатура);
	Параметры.Вставить("НачалоПериода", НачалоПериода);
	Параметры.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	
	УстановитьБлокировкуОчередиПоПараметрам(Параметры);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Параметры.Вставить("Ссылка", Ссылка);	
	КонецЕсли;
	
	Возврат РегистрыСведений.гкс_ОчередьОтгрузкиПЛК.ЕстьСвободноеМесто(Параметры);
	
КонецФункции

Функция ГрафикЗаполнен()
		
	Период = Новый Структура("ДатаНачала, ДатаОкончания", НачалоПериода, ОкончаниеПериода);	
	Возврат РегистрыСведений.гкс_ГрафикОтгрузкиПЛК.ГрафикЗаполнен(Период, Номенклатура);
	
КонецФункции

#КонецОбласти

#Область Блокировки

Процедура УстановитьБлокировкуОчередиПоПараметрам(Параметры)
	
	Диапазон = Новый Диапазон(Параметры.НачалоПериода, Параметры.ОкончаниеПериода);
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.гкс_ОчередьОтгрузкиПЛК");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Номенклатура", Параметры.Номенклатура);
	ЭлементБлокировки.УстановитьЗначение("НачалоПериода", Диапазон);
	ЭлементБлокировки.УстановитьЗначение("ОкончаниеПериода", Диапазон);
	
	Блокировка.Заблокировать();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
#КонецЕсли