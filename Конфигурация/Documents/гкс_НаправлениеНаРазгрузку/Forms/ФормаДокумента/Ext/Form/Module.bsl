
#Область ИнициализацияПеременных

&НаКлиенте
Перем ИдентификаторЗамераПроведение;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИнициализироватьРеквизитыФормы();
	ИнициализироватьЭлементыФормы(Параметры, Отказ);
	ЧасовойПоясПЛК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТочкаМаршрута, "гкс_ЧасовойПоясТочкиМаршрута");
	УстановитьВидимостьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		гкс_УправлениеДоступом.ОпределитьДоступностьВозможностьИзмененияДокументаПоРеестру(ЭтотОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если КачествоНеПринято И Не Объект.ПринятьКачество Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Необходимо Принять качество'"), Неопределено, 
		"ПринятьКачество", "Объект.ПринятьКачество", Отказ);
	КонецЕсли;
	
	Если КачествоНеПринято И Не ЗначениеЗаполнено(Объект.Комментарий) Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Необходимо заполнить комментарий'"), Неопределено, 
		"Комментарий", "Объект.Комментарий", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Необходимо заполнить силос'"), Неопределено, 
		"Склад", "Объект.Склад", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ЯмаРазгрузки) Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Необходимо заполнить яму разгрузки'"), Неопределено, 
		"ЯмаРазгрузки", "Объект.ЯмаРазгрузки", Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.ЗамерВремени(
			"ПроведениеДокумента.Интерактивно.НаправлениеНаРазгрузку", Истина); 
	КонецЕсли;
	
КонецПроцедуры  

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ТекущийОбъект.Ссылка.Пустая() Тогда
		Если ЗначениеЗаполнено(ЧасовойПоясПЛК) Тогда
			ТекущийОбъект.МестнаяДата = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПоясПЛК);
		Иначе
			ТекущийОбъект.МестнаяДата = ТекущийОбъект.Дата;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И ПереполнениеНаСкладе(ТекущийОбъект.Склад, ТекущийОбъект.ДокументРегистрации) Тогда
		СообщитьПользователюОбОшибкеВместимости(ТекущийОбъект.ДокументРегистрации, ТекущийОбъект.Склад);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзменениеНаправлениеНаРазгрузку");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Ложь);
		Если МассивСообщений.Количество() > 0 Тогда
			ПоказатьСообщенияПользователю();
			МассивСообщений.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
		
	МассивСообщений.Очистить();
	ФиксМассивСообщений = ПолучитьСообщенияПользователю(Истина);
	Для Сч = 0 По ФиксМассивСообщений.Количество() - 1 Цикл
		МассивСообщений.Добавить(ФиксМассивСообщений.Получить(Сч));
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы 

&НаСервере
Процедура СообщитьПользователюОбОшибкеВместимости(ДокументРегистрации, Склад)
	
	ШаблонОшибки = 
		НСтр("ru = 'Остаток груза на складе после выполнения операции будет превышать вместимость склада.
			|Остаток: %1 (т). Вместимость: %2 (т). Масса груза: %3 (т).'");                     
	ВесНетто = 
		гкс_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРегистрации, "ВесНетто");
	КгВт = 1000;
	ВесТ = ВесНетто/КгВт;
	ТекстОшибки = СтрШаблон(ШаблонОшибки,
		РегистрыСведений.гкс_ОстаткиТочекМаршрутаMFM.ОстатокНаСкладеМФМ(Склад), 
		гкс_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "Вместимость"), ВесТ);
	ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);                            
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКачествоПриИзменении(Элемент)
	
	ВидимостьСклада = Не КачествоНеПринято Или Объект.ПринятьКачество;
	
	Элементы.Склад.Видимость = ВидимостьСклада;
	Элементы.ЯмаРазгрузки.Видимость = ВидимостьСклада;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРегистрацииПриИзменении(Элемент)
	
	ДокументРегистрацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные,
		ВыборДобавлением, СтандартнаяОбработка) 
	Если ПроверитьВыбор(ВыбранноеЗначение) Тогда     
		Объект.СлужебнаяНоменклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		ТекстСообщения = НСтр("ru = 'У выбранного элемента справочника ""Номенклатура""'")
			+ НСтр("ru = ' вид номенклатуры должен быть ""Эталоны качества""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
		Возврат;
	КонецЕсли;	
	
	Объект.СлужебнаяНоменклатура = ВыбранноеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		Ожидание, СтандартнаяОбработка)
	
	ЭталоныКачества = ПолучитьВидНоменклатуры();

	Если ЗначениеЗаполнено(ЭталоныКачества) Тогда

		ПарамерыВыбораМассив = Новый Массив;
		ПарамерыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.ВидНоменклатуры", ЭталоныКачества));
		ПарамерыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
		ПарамерыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.ЭтоГруппа", Ложь));
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПарамерыВыбораМассив);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
	
	СтруктураОтбора = ПолучитьОтборСлужебнойНоменклатуры();

	Если СтруктураОтбора <> Неопределено И СтруктураОтбора.Количество() Тогда
		ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область РаботаСФормой

&НаСервереБезКонтекста
Функция ПолучитьОтборСлужебнойНоменклатуры()	
	
	
	СтруктураОтбора = Новый Структура;  
	
	ЭталоныКачества = ПолучитьВидНоменклатуры();
	
	Если ЗначениеЗаполнено(ЭталоныКачества) Тогда
		
		СтруктураОтбора.Вставить("ВидНоменклатуры", ЭталоныКачества);
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		СтруктураОтбора.Вставить("ЭтоГруппа", Ложь);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не найден вид номенклатуры ""Эталоны качества"".'")
			+ НСтр("ru = ' Отбор не применен.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;   
	
	Возврат СтруктураОтбора;
	

КонецФункции

&НаКлиенте
Процедура ПоказатьСообщенияПользователю()
	
	Для Каждого Сообщение Из МассивСообщений Цикл
		ПоказатьПредупреждение(, "" + Сообщение.Значение.Текст);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизитыФормы()
	
	Если ЗначениеЗаполнено(Объект.ДокументРегистрации) Тогда
		ТипРегистрации = Объект.ДокументРегистрации.ТипРегистрации;
	КонецЕсли;
	
	Если ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда
		КачествоНеПринято = Объект.ПервичныйСтатус <> Перечисления.гкс_СостоянияРегистрации.КачествоПринято;
	Иначе
		КачествоНеПринято = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьЭлементыФормы(ПараметрыФормы, Отказ)
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	Если ПараметрыФормы.Ключ.Пустая() И Не ТипЗнч(ПараметрыФормы) = Тип("ДанныеФормыСтруктура") Тогда
		ИнициализироватьДоступныеТочкиМаршрутаДляНовогоДокумента(Пользователь, Отказ);
	Иначе
		ИнициализироватьДоступныеТочкиМаршрутаДляДокумента(Пользователь);
	КонецЕсли;
	
	Если ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда
		Заголовок = "Направление на разгрузку";
		Элементы.ЯмаРазгрузки.Заголовок = "Место разгрузки";
	Иначе
		Заголовок = "Направление на погрузку";
		Элементы.ЯмаРазгрузки.Заголовок = "Место погрузки";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДоступныеТочкиМаршрутаДляДокумента(Пользователь)
	
	ДоступныеТочкиМаршрута = гкс_ПриемкаНаПЛКСервер.ЭтоАдминистраторНаПЛК(Пользователь, Объект.ТочкаМаршрута,
		Объект.ДокументРегистрации.ВидПеревозки);
	Если ДоступныеТочкиМаршрута <> Неопределено И ДоступныеТочкиМаршрута.Найти(Объект.ТочкаМаршрута) <> Неопределено Тогда

		МассивТочекМаршрута = 
			РегистрыСведений.гкс_НастройкиПользователейПриемкаНаПЛК.НастроенныеТочкиМаршрутаПользователя(Пользователь);
		Элементы.ТочкаМаршрута.СписокВыбора.ЗагрузитьЗначения(МассивТочекМаршрута);
		Элементы.ТочкаМаршрута.РежимВыбораИзСписка = Истина;
	Иначе
		Элементы.ТочкаМаршрута.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДоступныеТочкиМаршрутаДляНовогоДокумента(Пользователь, Отказ)
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(Пользователь);
	Если Не ЭтоПолноправныйПользователь Тогда
		ДоступныеТочкиМаршрута = гкс_ПриемкаНаПЛКСервер.ЭтоАдминистраторНаПЛК(Пользователь, Неопределено, Неопределено);
		Если ДоступныеТочкиМаршрута <> Неопределено И ПравоДоступа("Добавление",
			Метаданные.Документы.гкс_РегистрацияНаПЛК) Тогда

			МассивТочекМаршрута = 
				РегистрыСведений.гкс_НастройкиПользователейПриемкаНаПЛК.НастроенныеТочкиМаршрутаПользователя(Пользователь);
			Элементы.ТочкаМаршрута.СписокВыбора.ЗагрузитьЗначения(МассивТочекМаршрута);
			Элементы.ТочкаМаршрута.РежимВыбораИзСписка = Истина;

			Если Элементы.ТочкаМаршрута.СписокВыбора.Количество() = 1 Тогда
				Объект.ТочкаМаршрута = Элементы.ТочкаМаршрута.СписокВыбора[0].Значение;
			КонецЕсли;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(НСтр(
					"ru = 'Документ можно создавать только из АРМа Приемки на ПЛК'"), Неопределено, , , Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовФормы()
	
	Элементы.ДокументРегистрации.ТолькоПросмотр = Объект.Проведен;
			
	Элементы.ПринятьКачество.Видимость	= КачествоНеПринято;
	Элементы.Комментарий.Видимость 		= КачествоНеПринято;
	Элементы.Склад.Видимость 			= Не КачествоНеПринято Или Объект.ПринятьКачество;
	Элементы.ЯмаРазгрузки.Видимость 	= Не КачествоНеПринято Или Объект.ПринятьКачество;
	Элементы.СлужебнаяНоменклатура.Видимость = ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка;	
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПроверитьВыбор(ВыбранноеЗначение) 

	ЭталоныКачества = ПолучитьВидНоменклатуры(); 
	Если Не ЗначениеЗаполнено(ЭталоныКачества) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитВидНоменклатуры = "ВидНоменклатуры";
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, РеквизитВидНоменклатуры);
	
	Возврат ВидНоменклатуры <> ЭталоныКачества;
  
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВидНоменклатуры()
	Возврат гкс_ОбщегоНазначенияВызовСервера.ПроизвольныйПредопределенныйОбъект("ВидыНоменклатурыЭталоныКачества");
КонецФункции 


&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	ЗначенияРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДокументРегистрации, "ВидПеревозки, Номенклатура");
	
	Объект.ЯмаРазгрузки = гкс_ПриемкаНаПЛКСервер.ПолучитьЯмуРазгрузкиПриРучномИзмененииСклада(
		Объект.ТочкаМаршрута, 
		ЗначенияРегистрации.ВидПеревозки, 
		ЗначенияРегистрации.Номенклатура,
		Объект.Склад);
	
КонецПроцедуры

&НаСервере
Процедура ДокументРегистрацииПриИзмененииНаСервере()
	
	Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументРегистрации, "Организация");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереполнениеНаСкладе(Склад, ДокументРегистрации)  
	
	ВесНетто = гкс_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРегистрации, "ВесНетто");
	КгВТоннах = 1000;
	ВесНеттоТонн = ВесНетто/КгВТоннах;
	Возврат
		РегистрыСведений.гкс_ОстаткиТочекМаршрутаMFM.ТочкаМаршрутаПереполнена(
			Склад, ВесНеттоТонн);	
			
КонецФункции	
#КонецОбласти

#Область ПодключаемыеКоманды 

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

