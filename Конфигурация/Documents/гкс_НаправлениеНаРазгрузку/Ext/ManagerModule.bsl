#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ПриемкаПЛК");
		
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = гкс_ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если НЕ ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ, ДопПараметры);
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		ТекстЗапросаТаблицаСостояниеРегистрации(ТекстыЗапроса, Регистры);	
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат гкс_ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ТочкаМаршрута)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

Функция СоздатьДокументНаОсновании(ДанныеЗаполнения) Экспорт
	
	НовыйДокумент = СоздатьДокумент();
	НовыйДокумент.Заполнить(ДанныеЗаполнения);
	
	Попытка    
		ЗаписатьНаправлениеНаРазгрузку(НовыйДокумент, ДанныеЗаполнения);
		Результат = НовыйДокумент.Ссылка;
	Исключение

		ТекстСообщения = НСтр("ru='При формировании направленияна рагрузку возникли ошибки. 
							  |Подробности в журнале регистрации'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		ЗаписьЖурналаРегистрации("НаправлениеНаРазгрузку.Проведение", УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.гкс_НаправлениеНаРазгрузку, ОбработкаОшибок.ПодробноеПредставлениеОшибки(
			ИнформацияОбОшибке()));

		Результат = Неопределено;	
	КонецПопытки;		
	
	Возврат Результат;
	
КонецФункции

// Создать/Изменить Направление на разгрузку из АРМ Приемки.
// 
// Параметры:
//  ДанныеЗаполнения - Структура
//  ДокументСуществует - Булево
//  ДокументНазначение - ДокументСсылка.гкс_НаправлениеНаРазгрузку
//
Процедура СоздатьИзменитьИзАРМПриемки(ДанныеЗаполнения, ДокументСуществует = Ложь, ДокументНазначение = Неопределено) Экспорт
	
	Если ДокументСуществует Тогда
		НовыйДокумент = ДокументНазначение.ПолучитьОбъект();
	Иначе
		НовыйДокумент = СоздатьДокумент();
	КонецЕсли;
	
	НовыйДокумент.Заполнить(ДанныеЗаполнения);
	
	Попытка    
		ЗаписатьНаправлениеНаРазгрузку(НовыйДокумент, ДанныеЗаполнения);
	Исключение
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
КонецПроцедуры
	
// Получить по регистрации.
// 
// Параметры:
//  Регистрация - ДокументСсылка.гкс_РегистрацияНаПЛК -
// 
// Возвращаемое значение:
//  ДокументСсылка.гкс_НаправлениеНаРазгрузку
//
Функция ПолучитьПоРегистрации(Регистрация) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаправлениеНаРазгрузку.Ссылка КАК НаправлениеНаРагрузку
	|ИЗ
	|	Документ.гкс_НаправлениеНаРазгрузку КАК НаправлениеНаРазгрузку
	|ГДЕ
	|	НаправлениеНаРазгрузку.ДокументРегистрации = &Регистрация";

	Запрос.УстановитьПараметр("Регистрация", Регистрация);	

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.НаправлениеНаРагрузку;
	Иначе	
		Результат = Неопределено;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

// Получить по регистрациям.
// 
// Параметры:
//  Регистрации - Массив из ДокументСсылка.гкс_РегистрацияНаПЛК -
// 
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьПоРегистрациям(Регистрации) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрацияНаПЛК.Ссылка КАК ДокументРегистрации,
	|	ЕСТЬNULL(НаправлениеНаРазгрузку.Ссылка, ЗНАЧЕНИЕ(Документ.гкс_НаправлениеНаРазгрузку.ПустаяСсылка)) КАК НаправлениеНаРагрузку
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_НаправлениеНаРазгрузку КАК НаправлениеНаРазгрузку
	|		ПО РегистрацияНаПЛК.Ссылка = НаправлениеНаРазгрузку.ДокументРегистрации
	|ГДЕ
	|	РегистрацияНаПЛК.Ссылка В (&Регистрации)";

	Запрос.УстановитьПараметр("Регистрации", Регистрации);	

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти 
	
#Область СлужебныеПроцедурыИФункции

#Область Проведение 

Процедура ЗаписатьНаправлениеНаРазгрузку(НовыйДокумент, ДанныеЗаполнения)
	
	ВесНетто = гкс_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.ДокументРегистрации, "ВесНетто");
	КгВТоннах = 1000;
	ВесНеттоТонн = ВесНетто/КгВТоннах;
	ЗаписатьДокумент = РегистрыСведений.гкс_ОстаткиТочекМаршрутаMFM.ТочкаМаршрутаПереполнена(
		ДанныеЗаполнения.Склад, ВесНеттоТонн);
	
	Если ЗаписатьДокумент Тогда
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	Иначе
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры)
	
	МенеджерВременныхТаблиц = Неопределено;
	
	Если ДопПараметры <> Неопределено
		И ДопПараметры.Свойство("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц) Тогда
		
		МенеджерВременныхТаблиц = ?(МенеджерВременныхТаблиц = Неопределено,
									Новый МенеджерВременныхТаблиц,
									МенеджерВременныхТаблиц);
		
	Иначе
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
											 
КонецПроцедуры

Функция ТекстЗапросаТаблицаСостояниеРегистрации(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "гкс_СостоянияРегистрации";
	
	Если НЕ гкс_ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НаправлениеНаРазгрузку.Дата КАК Период,
	|	НаправлениеНаРазгрузку.ТочкаМаршрута КАК ТочкаМаршрута,
	|	НаправлениеНаРазгрузку.Ссылка КАК Регистратор,
	|	НаправлениеНаРазгрузку.ДокументРегистрации КАК ДокументРегистрации,
	|	&Пользователь КАК Пользователь,
	|	Регистрация.ТранспортноеСредство КАК ТранспортноеСредство,
	|	ВЫБОР
	|		КОГДА Регистрация.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияРегистрации.ВыгрузкаРазрешена)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияРегистрации.ПогрузкаРазрешена)
	|	КОНЕЦ КАК Состояние,
	|	Регистрация.ТипРегистрации КАК ТипРегистрации,
	|	Регистрация.ВидПеревозки КАК ВидПеревозки,
	|	НаправлениеНаРазгрузку.Комментарий КАК Комментарий,
	|	НаправлениеНаРазгрузку.МестнаяДата КАК МестнаяДата
	|ИЗ
	|	Документ.гкс_НаправлениеНаРазгрузку КАК НаправлениеНаРазгрузку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК Регистрация
	|		ПО НаправлениеНаРазгрузку.ДокументРегистрации = Регистрация.Ссылка
	|ГДЕ
	|	НаправлениеНаРазгрузку.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	 
КонецФункции

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

КонецПроцедуры
	
#КонецОбласти

#КонецОбласти

#КонецЕсли
