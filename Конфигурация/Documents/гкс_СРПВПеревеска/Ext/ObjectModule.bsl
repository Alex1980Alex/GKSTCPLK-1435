#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует документ гкс_Взвешивание в зависимости от статуса.
//
// Параметры:
//  Статус  - ПеречислениеСсылка.гкс_СРПВСтатусыВагонов - статус взвешивания по СРПВ
//	
Процедура СформироватьДокументПЛКПриНеобходимости(Статус) Экспорт
	
	Если Не (Статус = Перечисления.гкс_СРПВСтатусыВагонов.ВзвешенБрутто
		ИЛИ Статус = Перечисления.гкс_СРПВСтатусыВагонов.ВзвешенТара) Тогда
		Возврат;
	КонецЕсли;
	
	Если гкс_УчетВагоновСРПВ.НаСтатусОформленДокументОперации(ИдентификаторОтправки, Статус) Тогда
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.гкс_СРПВСтатусыВагонов.ВзвешенБрутто 
		И Не гкс_УчетВагоновСРПВ.НаСтатусОформленДокументОперации(ИдентификаторОтправки, 
			Перечисления.гкс_СРПВСтатусыВагонов.Прибыл) Тогда	
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.гкс_СРПВСтатусыВагонов.ВзвешенТара 
		И Не гкс_УчетВагоновСРПВ.НаСтатусОформленДокументОперации(ИдентификаторОтправки,
		Перечисления.гкс_СРПВСтатусыВагонов.Выгружен) Тогда				
		Возврат;
	КонецЕсли;
	
	ДанныеОформленияРегистрации = гкс_УчетВагоновСРПВ.ДанныеОформленногоДокументаОперацииПоСтатусу(
									ИдентификаторОтправки, Перечисления.гкс_СРПВСтатусыВагонов.Прибыл);
	
	Если ДанныеОформленияРегистрации.Свойство("Документ")
		И ЗначениеЗаполнено(ДанныеОформленияРегистрации.Документ) Тогда
		
		ДокументРегистрации = ДанныеОформленияРегистрации.Документ;
		
		Если Статус = Перечисления.гкс_СРПВСтатусыВагонов.ВзвешенБрутто Тогда
			Вес = ВесБрутто;
			ТипВзвешивания = Перечисления.гкс_ТипыВзвешивания.Въезд;
			
		ИначеЕсли Статус = Перечисления.гкс_СРПВСтатусыВагонов.ВзвешенТара Тогда
			Вес = ВесТары;
			ТипВзвешивания = Перечисления.гкс_ТипыВзвешивания.Выезд;
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура("Организация, ТочкаМаршрута, ТипРегистрации");
		
		ДанныеЗаполнения.Вставить("Весы", Весы);	
		ДанныеЗаполнения.Вставить("ДокументРегистрации", ДокументРегистрации);
		ДанныеЗаполнения.Вставить("Вес", Вес);
		ДанныеЗаполнения.Вставить("ВесВведенВручную", Ложь);
		ДанныеЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
		ДанныеЗаполнения.Вставить("МестнаяДата", ДанныеЗаполнения.Дата);
		ДанныеЗаполнения.Вставить("ТипВзвешивания", ТипВзвешивания);
		ДанныеЗаполнения.Вставить("ИдентификаторОтправки", ИдентификаторОтправки);
			
		ДанныеРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРегистрации, 
			"ТипРегистрации, Организация, ТочкаМаршрута");
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ДанныеРегистрации); 
		
		ДокументВзвешивание = Документы.гкс_Взвешивание
			.ПоРегистрацииИТипуВзвешивания(ДокументРегистрации, ТипВзвешивания);
		
		гкс_АвтоматическоеВзвешивание.ЗаполнитьДокументВзвешивание(ДокументВзвешивание, ДанныеЗаполнения);
		
		// создание основания движения запасов и регистрация убытия
		Если ТипВзвешивания = Перечисления.гкс_ТипыВзвешивания.Выезд Тогда
			
			ДанныеЗаполнения = гкс_УчетВагоновСРПВ.ДанныеЗаполненияОснованияДляДвиженияЗапасов(ДокументРегистрации);
						
			ОснованиеДляДвиженияЗапасов = Документы.гкс_ОснованиеДляДвиженияЗапасов
				.СформироватьДокументПоНеобходимости(ДокументРегистрации, ДанныеЗаполнения);
			
			гкс_ПриемкаТранспорта.ЗарегистрироватьНовоеСостояние(
				ДокументРегистрации, Перечисления.гкс_СостоянияРегистрации.Убыл);
		КонецЕсли;	
		
	КонецЕсли;
				
КонецПроцедуры

#КонецОбласти
	
#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ИдентификаторОтправки = Справочники.гкс_КлючиАналитикиСРПВ.ПустаяСсылка();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоЗавершеннаяПеревескаОтгрузки() Тогда
		ДополнительныеСвойства.Вставить("ПропуститьОтправкуВRMQ");
	КонецЕсли;
	
	Если ОформленыДокументыПЛК() Тогда	
		Отказ = Истина;
	КонецЕсли;	 
	
	гкс_ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОформленыДокументыПЛК() Тогда	
		Отказ = Истина;
	КонецЕсли;
			
	гкс_ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ТипОперации = Перечисления.гкс_СРПВТипыОперацийСВагоном.Отправление Тогда
		Возврат;	
	КонецЕсли;
	
	Если ОформленыДокументыПЛК() Тогда	
		Отказ = Истина;
	КонецЕсли;
	
	гкс_ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ОтразитьСтатусыОформленияВагонов();
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	гкс_ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение
Процедура ОтразитьСтатусыОформленияВагонов()
	
	МенеджерРегистра = РегистрыСведений.гкс_СРПВСтатусыОформленияВагонов;
	
	СтатусыВагонаКОтражению = СтатусыВагонаКОтражению();
	
	Для Каждого СтатусВагона Из СтатусыВагонаКОтражению Цикл 
		
		Если гкс_УчетВагоновСРПВ.НаСтатусОформленДокументОперации(ИдентификаторОтправки, СтатусВагона) Тогда
			Продолжить;
		КонецЕсли;	
		
		ДанныеЗаписи = МенеджерРегистра.ЗначенияПоУмолчанию(Ссылка, ИдентификаторОтправки);
		
		МестнаяДата = Справочники.гкс_ТочкиМаршрута.
		ПолучитьМестнуюДатуПоТочкеМаршрута(ТочкаМаршрута);
		
		ДанныеЗаписи.Статус = СтатусВагона; 	
		ДанныеЗаписи.НомерВагона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИдентификаторОтправки, "НомерВагона");
		ДанныеЗаписи.МестнаяДата = МестнаяДата;
		
		Если СтатусВагона = Перечисления.гкс_СРПВСтатусыВагонов.ВзвешенБрутто Тогда
			ДанныеЗаписи.ДатаОперации = ДатаБрутто;
		ИначеЕсли СтатусВагона = Перечисления.гкс_СРПВСтатусыВагонов.ВзвешенТара Тогда
			ДанныеЗаписи.ДатаОперации = ДатаТары;
		КонецЕсли;	
		
		МенеджерРегистра.ВыполнитьЗаписьВРегистр(ДанныеЗаписи);
		
		СформироватьДокументПЛКПриНеобходимости(СтатусВагона); 
	
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

Функция ЭтоЗавершеннаяПеревескаОтгрузки()
	
	Если ТипОперации = Перечисления.гкс_СРПВТипыОперацийСВагоном.Отправление
		И ВесТарыЗаполнен() И ВесБруттоЗаполнен() Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

Функция ОформленыДокументыПЛК()
	
	СРПВСтатусыВагонов = Перечисления.гкс_СРПВСтатусыВагонов;
	
	ОформленБрутто = гкс_УчетВагоновСРПВ
		.НаСтатусОформленДокументОперации(ИдентификаторОтправки, СРПВСтатусыВагонов.ВзвешенБрутто);
			
	ОформленТара = гкс_УчетВагоновСРПВ
		.НаСтатусОформленДокументОперации(ИдентификаторОтправки, СРПВСтатусыВагонов.ВзвешенТара);
	
	Возврат ОформленБрутто И ОформленТара;
	
КонецФункции	

Функция СтатусыВагонаКОтражению()
	
	Статусы = Новый Массив;
	
	ВесТарыЗаполнен = ВесТарыЗаполнен();
	ВесБруттоЗаполнен = ВесБруттоЗаполнен();
	
	Если ТипОперации = Перечисления.гкс_СРПВТипыОперацийСВагоном.Прибытие Тогда
		
		// порядок условий не менять
		Если ВесБруттоЗаполнен Тогда
			Статусы.Добавить(Перечисления.гкс_СРПВСтатусыВагонов.ВзвешенБрутто);
		КонецЕсли;	
			
		Если ВесТарыЗаполнен И ВесБруттоЗаполнен Тогда
			Статусы.Добавить(Перечисления.гкс_СРПВСтатусыВагонов.ВзвешенТара);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции	

Функция ВесТарыЗаполнен()

	Возврат ЗначениеЗаполнено(ВесТары) И ЗначениеЗаполнено(ДатаТары);
	
КонецФункции

Функция ВесБруттоЗаполнен()

	Возврат ЗначениеЗаполнено(ВесБрутто) И ЗначениеЗаполнено(ДатаБрутто);
	
КонецФункции

#КонецОбласти

#КонецЕсли
	
