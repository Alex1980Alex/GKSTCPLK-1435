
#Область ИнициализацияПеременных

&НаКлиенте
Перем ИдентификаторЗамераПроведение;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПроверитьВозможностьСозданияНовогоДокумента(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.КонтактнаяИнфоммация
	ИнициализироватьВидыКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнфоммация
	
	НайтиНаправлениеНаРазгрузку();
	
	Если Параметры.Свойство("ТранспортныйДокумент")
		И ЗначениеЗаполнено(Параметры.ТранспортныйДокумент) Тогда
		ТранспортныйДокумент = Параметры.ТранспортныйДокумент;
	КонецЕсли;	
		
	ИнициализироватьРеквизитыФормы();
	ИнициализироватьЭлементыФормы();
	УстановитьВидимостьДоступностьЭлементовФормы();
	УстановитьВидимостьРеквизитов();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПерезаполнитьСписокТочекВъезда();
	Иначе
		УстановитьТочкуВъездаПоУмолчанию();
	КонецЕсли;	
			
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		гкс_УправлениеДоступом.ОпределитьДоступностьВозможностьИзмененияДокументаПоРеестру(ЭтотОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьДоступностьРеквизитовТранспортногоДокумента(); 
	
	ЗаполнитьИнформациюОТранспортномСредстве();
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент
			.ЗамерВремени("ПроведениеДокумента.Интерактивно.РегистрацияТранспортаНаПЛК", Истина);												
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		
		Если ЗначениеЗаполнено(ЧасовойПоясПЛК) Тогда
			ТекущийОбъект.МестнаяДата = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПоясПЛК);
		Иначе
			ТекущийОбъект.МестнаяДата = ТекущийОбъект.Дата;
		КонецЕсли;
	Иначе
		ПроверкаНаСменуРеквизитовДляРегистраСостоянияРегистрации(Отказ,
			ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТранспортныйДокумент", ТранспортныйДокумент);
			
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	гкс_ПриемкаТранспортаВызовСервера.УстановитьСвязьРегистрацииИТранспортногоДокумента(
	        Новый Структура("ДокументРегистрации,ТранспортныйДокумент, ТранспортноеСредство", 
	        ТекущийОбъект.Ссылка, ТранспортныйДокумент, ТекущийОбъект.ТранспортноеСредство));			
	        
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзменениеРегистрацияНаПЛК", ПараметрыЗаписи, Объект.Ссылка);
	УстановитьВидимостьДат();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Ложь);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаявкаНаОтгрузкуПродукцииПриИзменении(Элемент)
	
     ЗаявкаНаОтгрузкуПродукцииПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВесПриИзменении(Элемент)
	
	РассчитатьВесПоДокументам();
	
КонецПроцедуры

&НаКлиенте
Процедура ВесТарыПриИзменении(Элемент)
	
	РассчитатьВесПоДокументам();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипРегистрацииПриИзменении(Элемент)
	
	УстановитьВидимостьОтТипаРегистрации();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВнутригрупповойПриИзменении(Элемент)
	
	ВнутригрупповойПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзмененииНаСервере();
	УстановитьДоступностьРеквизитовТранспортногоДокумента();
	УстановитьТочкуВъездаПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииНаСервере()
	
	ПодобратьСпецификациюНаСервере();
	ПодобратьТранспортныйДокументИЗаполнитьСопутствующиеРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПроездаПриИзменении(Элемент)
	
	УсловиеПроездаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УсловиеПроездаПриИзмененииНаСервере()
	
	УстановитьТочкуВъездаПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ЗначениеОтбора = Новый Структура;
	ЗначениеОтбора.Вставить("Контрагент", Объект.Контрагент);
	ЗначениеОтбора.Вставить("Номенклатура", Объект.Номенклатура);
	ЗначениеОтбора.Вставить("Статус", 
		ПредопределенноеЗначение("Перечисление.гкс_СтатусыСпецификацийКДоговорамКонтрагентов.Действует"));
	
	Если Объект.Внутригрупповой Тогда
		ЗначениеОтбора.Вставить("Организация", Объект.Собственник);
	Иначе
		ЗначениеОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;	
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ЗначениеОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбораСпецификации", ЭтотОбъект);
	
	ОткрытьФорму("Документ.гкс_СпецификацияКДоговоруКонтрагента.Форма.ФормаВыбораПоНоменклатуре", ПараметрыФормы,
		ЭтотОбъект, , , , ОбработкаВыбора,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
КонецПроцедуры

&НаКлиенте
Процедура СобственникПриИзменении(Элемент)
	
	ПодобратьСпецификациюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	МодульЛокализации = гкс_ЛокализацияСервер.МодульЛокализации("гкс_РегистрацияНаПЛК");
	Если МодульЛокализации <> Неопределено Тогда
		МодульЛокализации.КонтрагентПриИзмененииНаСервере(Объект);
	КонецЕсли;
	
	ПодобратьТранспортныйДокументИЗаполнитьСопутствующиеРеквизиты();
	ПодобратьСпецификациюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПеревозкиПриИзменении(Элемент)
	
	УстановитьВидимостьРеквизитов();
	УстановитьВидимостьRFIDИДРейса();
	ЗаполнитьТранспортныйДокумент();
	УстановитьТочкуВъездаПоУмолчанию();
		
КонецПроцедуры

&НаКлиенте
Процедура ТочкаМаршрутаПриИзменении(Элемент)
	
	ТочкаМаршрутаПриИзмененииНаСервере();
	УстановитьТочкуВъездаПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкаВъездаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПерезаполнитьСписокТочекВъезда();
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияПриИзменении(Элемент)
	
	Если ПроверитьКорректностьВыбораСпецификации() Тогда
		Объект.Спецификация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПолучательПриИзменении(Элемент)
	
	ОтправительПолучательПриИзмененииНаСервере();
	УстановитьДоступностьРеквизитовТранспортногоДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортноеСредствоПриИзменении(Элемент)
	
	ТранспортноеСредствоПриИзмененииНаСервере();	
	УстановитьДоступностьРеквизитовТранспортногоДокумента();
	
	ЗаполнитьИнформациюОТранспортномСредстве();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерДокументаПоставщикаПриИзменении(Элемент)
	
	ПодобратьТранспортныйДокументИЗаполнитьСопутствующиеРеквизиты();
	
КонецПроцедуры

#Область ТранспортныйДокумент

&НаКлиенте
Процедура НадписьНайденыТранспортныеДокументыНажатие(Элемент)

	Отбор = Новый Структура;
	Отбор.Вставить("Ссылка", СписокТранспортныеДокументы);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	
	ОповещениеВыборТД = Новый ОписаниеОповещения("ОповещениеВыборТранспортногоДокументаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.гкс_ТранспортныйДокумент.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, 
		УникальныйИдентификатор, , , ОповещениеВыборТД);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ТранспортныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеОтбора = СтруктураПодбораТранспортногоДокумента();
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", ЗначениеОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОбработкаВыбора = Новый ОписаниеОповещения("ОповещениеВыборТранспортногоДокументаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.гкс_ТранспортныйДокумент.Форма.ФормаВыбораПоТранспорту", ПараметрыФормы,
		ЭтотОбъект, , , , ОбработкаВыбора,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыборТранспортногоДокументаЗавершение(Результат, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ТранспортныйДокумент = Результат;
		СписокТранспортныеДокументы.Очистить();
		
		ЗаполнитьРеквизитыДокументаПоставщика();
		УстановитьДоступностьРеквизитовТранспортногоДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныйДокументПриИзменении(Элемент)
	
	ТранспортныйДокументПриИзмененииСервер();
	УстановитьДоступностьРеквизитовТранспортногоДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ТранспортныйДокументПриИзмененииСервер()
	
	ДублированиеТДВРегистрации = РегистрыСведений.гкс_СвязьРегистрацииИТранспортногоДокумента
		.ДублированиеТДВРегистрации(Объект.Ссылка, ТранспортныйДокумент, Объект.ТранспортноеСредство);
	
	Если ДублированиеТДВРегистрации Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Транспортный документ по выбранному транспорту уже связан с другой регистрацией'"));
		
		ТранспортныйДокумент = ПредопределенноеЗначение("Документ.гкс_ТранспортныйДокумент.ПустаяСсылка");
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьРеквизитыДокументаПоставщика();
	
КонецПроцедуры

#КонецОбласти
	
#Область ПредставлениеАдресаЗоныКарантинногоКонтроля

&НаКлиенте
Процедура ПредставлениеАдресаЗоныКарантинногоКонтроляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент.ТекстРедактирования <> ПредставлениеАдресаЗоныКарантинногоКонтроля Тогда
        ПредставлениеАдресаЗоныКарантинногоКонтроля = Элемент.ТекстРедактирования;
        Объект.АдресЗоныКарантинногоКонтроля = "";
    КонецЕсли;
    
    ПараметрыОткрытия = Новый Структура;
    ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформацииАдресЗоныКарантинногоКонтроля);
    ПараметрыОткрытия.Вставить("Значение", Объект.АдресЗоныКарантинногоКонтроля);
    ПараметрыОткрытия.Вставить("Представление", ПредставлениеАдресаЗоныКарантинногоКонтроля);
    ПараметрыОткрытия.Вставить("Комментарий", "");
    ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Зона карантинного контроля'"));
    
    УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
    
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаЗоныКарантинногоКонтроляОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    Если ТипЗнч(ВыбранноеЗначение)<>Тип("Структура") Тогда
        // Отказ от выбора, данные неизменны
        Возврат;
    КонецЕсли;
    
    ПредставлениеАдресаЗоныКарантинногоКонтроля = ВыбранноеЗначение.Представление;
    Объект.АдресЗоныКарантинногоКонтроля = ВыбранноеЗначение.КонтактнаяИнформация;
    
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаЗоныКарантинногоКонтроляОчистка(Элемент, СтандартнаяОбработка)
	
	ПредставлениеАдресаЗоныКарантинногоКонтроля = "";
    Объект.АдресЗоныКарантинногоКонтроля = "";
    
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаЗоныКарантинногоКонтроляПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
    Если ПустаяСтрока(Текст) Тогда
        ПредставлениеАдресаЗоныКарантинногоКонтроля = "";
        Объект.АдресЗоныКарантинногоКонтроля        = "";
        Возврат;
    КонецЕсли;
    
    ПредставлениеАдресаЗоныКарантинногоКонтроля = Текст;
    Объект.АдресЗоныКарантинногоКонтроля = ЗначенияПолейКонтактнойИнформацииСервер(Текст, ВидКонтактнойИнформацииАдресЗоныКарантинногоКонтроля);
        
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СДИЗПриИзменении(Элемент)
	СДИЗПРиИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СДИЗНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ОтправительПолучатель) И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Элементы.СДИЗ.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
		Возврат;
	КонецЕсли;
	
	СДИЗУстановитьПараметрыВыбораНаСервере();
КонецПроцедуры
		

&НаКлиенте
Процедура ПунктПогрузкиПриИзменении(Элемент)
	ПунктПогрузкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПунктПогрузкиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
		СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	// Если грузоотправитель заполнен, фильтруем точки маршрута
	Если ЗначениеЗаполнено(Объект.ОтправительПолучатель) Тогда
		ОтборПоГрузоотправителю = Новый Структура("КонтрагентВладелецСклада", Объект.ОтправительПолучатель);
		ПараметрыОткрытия.Вставить("Отбор", ОтборПоГрузоотправителю);
	КонецЕсли;
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ПунктПогрузкиВыборЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.гкс_ТочкиМаршрута.ФормаВыбора", ПараметрыОткрытия, Элемент, , , , ОповещениеВыбора);
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПривязатьМетку(Команда)
	
	ДанныеМетки = гкс_ИнтеграцияСКверионКлиент.ПрочитатьДанныеМетки();
	Если ДанныеМетки.КодОтвета = гкс_ОбщегоНазначенияКлиентСервер.КодОтветаЗапросВыполненУспешно() Тогда
		
		#Если НЕ ВебКлиент Тогда
		ТелоОтветаВСтруктуре = ДанныеМетки.ТелоОтветаВСтруктуре; 
		#Иначе 
		ТелоОтветаВСтруктуре = ПолучитьТелоОтветаИзСтрокиНаСервере(ДанныеМетки.ТелоОтвета);
		#КонецЕсли
		Объект.RFIDEPC = ТелоОтветаВСтруктуре.card.epc; 
		Объект.RFIDTID = ТелоОтветаВСтруктуре.card.tid;

	КонецЕсли;                     
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#Область ИнициализацияРеквизитовФормы

// Начало СтандартныеПодсистемы.КонтактнаяИнформация

&НаСервере
Процедура ИнициализироватьВидыКонтактнойИнформации()

	ВидКонтактнойИнформацииАдресЗоныКарантинногоКонтроля = Новый Структура;
	ВидКонтактнойИнформацииАдресЗоныКарантинногоКонтроля.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ВидКонтактнойИнформацииАдресЗоныКарантинногоКонтроля.Вставить("ТолькоНациональныйАдрес", Истина);
	ВидКонтактнойИнформацииАдресЗоныКарантинногоКонтроля.Вставить("ВключатьСтрануВПредставление", Ложь);
	ВидКонтактнойИнформацииАдресЗоныКарантинногоКонтроля.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура ЗаполнитьИнформациюОТранспортномСредстве()
	
	ЗаполнитьИнформациюОТранспортномСредствеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОТранспортномСредствеНаСервере()
	
	Если Не ЭтоАвтоприемка() Тогда
		Возврат;
	КонецЕсли;	
	
	МассивПодстрок = Новый Массив;
	
	ТекстОшибки = "";
	Если Не гкс_ПриемкаТранспорта
			.ПроверкаЗаполненияДляКонтроляПревышенияВесаАвтомобиля(Объект.ТранспортноеСредство, ТекстОшибки) Тогда
			
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(ТекстОшибки));		
		Элементы.ИнформацияОКоличествеОсей.ЦветТекста = ЦветаСтиля.ЦветТекстаОтрицательногоЗначения;
						
	Иначе
		
		КоличествоОсей = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТранспортноеСредство, "КоличествоОсей");
		МаксимальнаяМасса = гкс_ПриемкаТранспорта.МаксимальныйДопустимыйВес(Объект.ВидПеревозки, КоличествоОсей);	
		СтрокаИнформации = СтрШаблон(НСтр("ru = '%1; max.m.: %2 %3'"), 
			КоличествоОсей, МаксимальнаяМасса, гкс_ПриемкаТранспорта.ПолучитьЕдиницуИзмеренияВесаПриемки());
			
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(СтрокаИнформации));
			
		Элементы.ИнформацияОКоличествеОсей.ЦветТекста = ЦветаСтиля.ЦветТекстаВнимание;
		
	КонецЕсли;
	
	ИнформацияОКоличествеОсей = Новый ФорматированнаяСтрока(МассивПодстрок);
		
КонецПроцедуры
	
&НаСервере
Процедура ИнициализироватьРеквизитыФормы()
	
	УстановитьТипРегистрацииПоУмолчанию();
	УстановитьТекущиеДанныеСостоянияРегистрации();
	ИнициализироватьПредставлениеЗоныКарантинногоКонтроля();
	
	Если ЭтоНовыйДокумент() Тогда
		ИнициализироватьЧасовойПоясПЛК();
	КонецЕсли;
	
	ЗаполнитьТранспортныйДокумент(Ложь);
	ЗаполнитьЗаписьВОчередь();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипСобственника()
	
	Если Объект.Внутригрупповой Тогда
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
	Иначе
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	КонецЕсли;
		
	Элементы.Собственник.ОграничениеТипа = ОписаниеТипа;
	Элементы.Собственник.ВыбиратьТип = Ложь;
	 
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаОтгрузкуПродукцииПриИзмененииНаСервере()
	
    ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ЗаявкаНаОтгрузкуПродукции);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	МодульЛокализации = гкс_ЛокализацияСервер.МодульЛокализации("гкс_РегистрацияНаПЛК");
	Если МодульЛокализации <> Неопределено Тогда
		МодульЛокализации.ОрганизацияПриИзмененииНаСервере(Объект);
	КонецЕсли;
	
	ПодобратьСпецификациюНаСервере();    
	
	ОбновитьНадписьГрузоотправитель();
			
КонецПроцедуры

&НаСервере
Процедура РассчитатьРольАдминистратораПЛК()
	
	ЭтоАдминистраторНаПЛК = гкс_ПриемкаНаПЛКСервер.ЭтоАдминистраторНаПЛК(Пользователи.ТекущийПользователь());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипРегистрацииПоУмолчанию()
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипРегистрации) Тогда	
		Объект.ТипРегистрации	= Перечисления.гкс_ТипРегистрации.Приемка;	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьТекущиеДанныеСостоянияРегистрации()
	
	ДанныеСостояния = РегистрыСведений.гкс_СостоянияРегистрации.ТекущиеДанныеСостоянияПоРегистрации(Объект.Ссылка);
	ТекущееСостояние = ДанныеСостояния.Состояние;
	Если ТекущееСостояние = Перечисления.гкс_СостоянияРегистрации.НеПринято Тогда
		КомментарийСостояния = ДанныеСостояния.Комментарий;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПредставлениеЗоныКарантинногоКонтроля()
	
	ПредставлениеАдресаЗоныКарантинногоКонтроля = 
	УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(Объект.АдресЗоныКарантинногоКонтроля);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьЧасовойПоясПЛК()
	
	Если ЗначениеЗаполнено(Объект.ТочкаМаршрута) Тогда
		ЧасовойПоясПЛК = гкс_ПриемкаТранспорта.ЧасовойПоясПЛК(Объект.ТочкаМаршрута);
	Иначе 
		ЧасовойПоясПЛК = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияЭлементовФормы

&НаСервере
Процедура ИнициализироватьЭлементыФормы()
	
	ИнициализироватьПараметрыВыбораНоменклатуры();
	ИнициализироватьСписокВыбораТочкиМаршрута();
	
	УстановитьТипСобственника();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокВыбораТочкиМаршрута()
	
	Если ЭтоАдминистраторНаПЛК И НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		ТочкиМаршрутаПользователя = РегистрыСведений
						            .гкс_НастройкиПользователейПриемкаНаПЛК
						   			.НастроенныеТочкиМаршрутаПользователя(Пользователи.ТекущийПользователь());
						   				
		Элементы.ТочкаМаршрута.СписокВыбора.ЗагрузитьЗначения(ТочкиМаршрутаПользователя);	
		Элементы.ТочкаМаршрута.РежимВыбораИзСписка = Истина;
						   			
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыВыбораНоменклатуры()

	ПараметрыВыбораПромежуточный = Новый Массив;
	
	МассивВидов = Новый Массив;
	МассивВидов.Добавить(гкс_ОбщегоНазначенияВызовСервера.ПроизвольныйПредопределенныйОбъект(
	"ВидНоменклатурыПродукция"));
	
	МассивВидов.Добавить(гкс_ОбщегоНазначенияВызовСервера.ПроизвольныйПредопределенныйОбъект("ВидНоменклатурыСырье"));
	МассивВидов.Добавить(гкс_ОбщегоНазначенияВызовСервера.ПроизвольныйПредопределенныйОбъект(
	"ВидНоменклатурыТорговыеГрузы"));
	
	МассивВидов.Добавить(гкс_ОбщегоНазначенияВызовСервера.ПроизвольныйПредопределенныйОбъект("ВидНоменклатурыТовар"));

	ОтборВидНоменклатуры = Новый ПараметрВыбора("Отбор.ВидНоменклатуры", Новый ФиксированныйМассив(МассивВидов));
	ОтборОбъектКачества =  Новый ПараметрВыбора("Отбор.ОбъектКачества", Ложь);  
	    
	ПараметрыВыбораПромежуточный.Добавить(ОтборОбъектКачества);
	ПараметрыВыбораПромежуточный.Добавить(ОтборВидНоменклатуры);
	
	НовыеПараметры = Новый ФиксированныйМассив(ПараметрыВыбораПромежуточный);
	Элементы.Номенклатура.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаВидимостиИДоступности

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовФормы()
	
	УстановиитьДоступностьRFID();
	УстановитьВидимостьДат();
	УстановитьДоступностьКлючевыхРеквизитов();
	УстановитьВидимостьRFIDИДРейса();
	УстановитьВидимостьКомментарияСостояния();
	УстановитьВидимостьГруппыВъезда();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКлючевыхРеквизитов()
	
	Если Параметры.ИзАРМа Тогда
		Элементы.ВидПеревозки.ТолькоПросмотр = Истина;
		Элементы.ТипРегистрации.ТолькоПросмотр = Истина;
		Элементы.ТочкаМаршрута.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	Если Не ЭтоАдминистраторНаПЛК И Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		Элементы.ТочкаМаршрута.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.МестнаяДата.Доступность = Не Объект.Проведен;
	
КонецПроцедуры

&НаСервере
Процедура УстановиитьДоступностьRFID()
	
	Если Пользователи.РолиДоступны("гкс_РучноеРедактированиеRFIDМетокВРегистрацииНаПЛК") Тогда
		Элементы.RFIDEPC.Доступность = Истина;
		Элементы.RFIDTID.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомментарияСостояния()
	
	Элементы.НадписьКомментарийСостояния.Видимость = ЗначениеЗаполнено(КомментарийСостояния);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГруппыВъезда()

	Если Объект.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда
		
		ЕстьНаправлениеНаРазгрузку = ЗначениеЗаполнено(НаправлениеНаРазгрузку);
		Элементы.ВесоваяВъезда.Видимость = НЕ ЕстьНаправлениеНаРазгрузку;
		Элементы.НаправлениеНаРазгрузкуЯмаРазгрузки.Видимость = ЕстьНаправлениеНаРазгрузку;
		Элементы.МестоПогрузки.Видимость = Ложь;
		
	Иначе // Отгрузка
		
		Элементы.ВесоваяВъезда.Видимость = Истина;
		Элементы.МестоПогрузки.Видимость = Истина;
		Элементы.НаправлениеНаРазгрузкуЯмаРазгрузки.Видимость = Ложь;
			
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервереБезКонтекста
Функция ЭтоЖДПеревозка(Значение)
	
	Возврат Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЭтоЖДПеревозка(Значение);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоАвтоПеревозка(Значение)
	
	Возврат Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЭтоАвтоПеревозка(Значение);
	
КонецФункции

&НаСервере
Процедура ПроверитьВозможностьСозданияНовогоДокумента(Отказ)
	
	РассчитатьРольАдминистратораПЛК();
	Если НЕ ЭтоНовыйДокумент() Тогда
		Возврат;
	КонецЕсли;
		
	ВозможностьСозданияНовогоДокумента = 
			Пользователи.ЭтоПолноправныйПользователь() 
	        ИЛИ ЭтоАдминистраторНаПЛК
	        ИЛИ Параметры.ИзАРМа;
	
	Если НЕ ВозможностьСозданияНовогоДокумента Тогда
		ТекстСообщения = НСтр("ru = 'Создание документа возможно только из АРМ ""Приемка транспорта""'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
		        
	Отказ = Отказ ИЛИ НЕ ВозможностьСозданияНовогоДокумента;
	        	
КонецПроцедуры

&НаСервере
Функция ЭтоНовыйДокумент()
	
	Возврат Параметры.Ключ.Пустая();
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ПроверкаНаСменуРеквизитовДляРегистраСостоянияРегистрации(Отказ, Проведение)
	
	Если Не Проведение Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	&Регистрация КАК Регистрация,
	                |	&ВидПеревозки КАК ВидПеревозки,
	                |	&ТипРегистрации КАК ТипРегистрации,
	                |	&ТочкаМаршрута КАК ТочкаМаршрута,
	                |	&ТранспортноеСредство КАК ТранспортноеСредство
	                |ПОМЕСТИТЬ ВТ_ДанныеДокумента
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	СостоянияРегистрацииСрезПоследних.Состояние КАК Состояние,
	                |	СостоянияРегистрацииСрезПоследних.ТочкаМаршрута КАК ТочкаМаршрута,
	                |	СостоянияРегистрацииСрезПоследних.ТипРегистрации КАК ТипРегистрации,
	                |	СостоянияРегистрацииСрезПоследних.ДокументРегистрации КАК ДокументРегистрации,
	                |	СостоянияРегистрацииСрезПоследних.ТранспортноеСредство КАК ТранспортноеСредство,
	                |	СостоянияРегистрацииСрезПоследних.ВидПеревозки КАК ВидПеревозки
	                |ПОМЕСТИТЬ ВТ_ДанныеРегистра
	                |ИЗ
	                |	РегистрСведений.гкс_СостоянияРегистрации.СрезПоследних(, ДокументРегистрации = &Регистрация) КАК СостоянияРегистрацииСрезПоследних
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_ДанныеДокумента.Регистрация КАК Регистрация,
	                |	НЕ ВТ_ДанныеДокумента.ТочкаМаршрута = ВТ_ДанныеРегистра.ТочкаМаршрута КАК ОтличиеТочкаМаршрута,
	                |	НЕ ВТ_ДанныеДокумента.ТипРегистрации = ВТ_ДанныеРегистра.ТипРегистрации КАК ОтличиеТипРегистрации,
	                |	НЕ ВТ_ДанныеРегистра.ТранспортноеСредство = ВТ_ДанныеДокумента.ТранспортноеСредство КАК ОтличиеТС,
	                |	НЕ ВТ_ДанныеРегистра.ВидПеревозки = ВТ_ДанныеДокумента.ВидПеревозки КАК ОтличиеВидПеревозки
	                |ИЗ
	                |	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра
	                |		ПО ВТ_ДанныеДокумента.Регистрация = ВТ_ДанныеРегистра.ДокументРегистрации
	                |			И (НЕ(ВТ_ДанныеДокумента.ВидПеревозки = ВТ_ДанныеРегистра.ВидПеревозки
	                |					И ВТ_ДанныеДокумента.ТипРегистрации = ВТ_ДанныеРегистра.ТипРегистрации
	                |					И ВТ_ДанныеДокумента.ТочкаМаршрута = ВТ_ДанныеРегистра.ТочкаМаршрута
	                |					И ВТ_ДанныеДокумента.ТранспортноеСредство = ВТ_ДанныеРегистра.ТранспортноеСредство))";
	                
	Запрос.УстановитьПараметр("Регистрация", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидПеревозки", Объект.ВидПеревозки);
	Запрос.УстановитьПараметр("ТипРегистрации", Объект.ТипРегистрации);
	Запрос.УстановитьПараметр("ТочкаМаршрута", Объект.ТочкаМаршрута);
	Запрос.УстановитьПараметр("ТранспортноеСредство", Объект.ТранспортноеСредство);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Изменения = "";
		Если Выборка.ОтличиеТС Тогда
			Изменения = Изменения + "Транспортное средство";
		КонецЕсли;
		
		Если Выборка.ОтличиеТипРегистрации Тогда
			Изменения = Изменения + ?(ЗначениеЗаполнено(Изменения), ", ", "") + "Тип регистрации";
		КонецЕсли;	
		
		Если Выборка.ОтличиеВидПеревозки Тогда
			Изменения = Изменения + ?(ЗначениеЗаполнено(Изменения), ", ", "") + "Вид перевозки";
		КонецЕсли;	
		
		Если Выборка.ОтличиеТочкаМаршрута Тогда
			Изменения = Изменения + ?(ЗначениеЗаполнено(Изменения), ", ", "") + "Точка маршрута";
		КонецЕсли;	
		
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Запрещено изменять ключевые реквизиты: %1. Для изменения отмените Регистрацию / сделайте новую!'"),
			Изменения)
			, , , , Отказ);
				
	КонецЕсли;
		
КонецПроцедуры	

#Область ОбработкаСобытийЭлементовФормы

&НаСервере
Процедура СДИЗПРиИзмененииНаСервере()
	
	РеквизитыСДИЗ = 
	ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СДИЗ, "Грузоотправитель, Грузополучатель, Продавец, Покупатель");
	
	Если Не ЗначениеЗаполнено(Объект.ОтправительПолучатель) Тогда
		Объект.ОтправительПолучатель = ?(ЭтоПриемка, РеквизитыСДИЗ.Грузоотправитель, РеквизитыСДИЗ.Грузополучатель);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ?(ЭтоПриемка, РеквизитыСДИЗ.Грузополучатель, РеквизитыСДИЗ.Грузоотправитель);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = ?(ЭтоПриемка, РеквизитыСДИЗ.Продавец, РеквизитыСДИЗ.Покупатель);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СДИЗУстановитьПараметрыВыбораНаСервере()
	
	МассивПараметров = Новый Массив;
	ДобавитьПараметрВыбораСДИЗПоОтправительПолучатель(МассивПараметров);
	ДобавитьПараметрВыбораСДИЗПоОрганизации(МассивПараметров);
	
	Элементы.СДИЗ.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрВыбораСДИЗПоОтправительПолучатель(МассивПараметров)

	Если Не ЗначениеЗаполнено(Объект.ОтправительПолучатель) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОтбора = ?(ЭтоПриемка, "Отбор.Грузоотправитель", "Отбор.Грузополучатель");

	МассивЗначенийОтбора = Новый Массив;
	МассивЗначенийОтбора.Добавить(Объект.ОтправительПолучатель);
	ОрганизацияКонтрагента = Справочники.Организации.ОрганизацияКонтрагента(Объект.ОтправительПолучатель);
	Если ЗначениеЗаполнено(ОрганизацияКонтрагента) Тогда
		МассивЗначенийОтбора.Добавить(ОрганизацияКонтрагента);
	КонецЕсли;
	
	МассивПараметров.Добавить(Новый ПараметрВыбора(ИмяОтбора, Новый ФиксированныйМассив(МассивЗначенийОтбора)));
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрВыбораСДИЗПоОрганизации(МассивПараметров)

	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОтбора = ?(ЭтоПриемка, "Отбор.Грузополучатель", "Отбор.Грузоотправитель");

	МассивЗначенийОтбора = Новый Массив;
	МассивЗначенийОтбора.Добавить(Объект.Организация);
	КонтрагентОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "КонтрагентОрганизации");
	Если ЗначениеЗаполнено(КонтрагентОрганизации) Тогда
		МассивЗначенийОтбора.Добавить(КонтрагентОрганизации);
	КонецЕсли;
	
	МассивПараметров.Добавить(Новый ПараметрВыбора(ИмяОтбора, Новый ФиксированныйМассив(МассивЗначенийОтбора)));
КонецПроцедуры
	
&НаСервере
Процедура ОтправительПолучательПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(ТранспортныйДокумент) Тогда
		ПодобратьТранспортныйДокументИЗаполнитьСопутствующиеРеквизиты();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТранспортноеСредствоПриИзмененииНаСервере()
	
	ПодобратьТранспортныйДокументИЗаполнитьСопутствующиеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьТранспортныйДокументИЗаполнитьСопутствующиеРеквизиты()
	
	СписокТранспортныеДокументы.Очистить();
	
	Если АвтоЗаполнениеТраснпортногоДокумента() Тогда
		
		МассивТранспортныйДокумент = ПодборкаТранспортныхДокументов();
		КоличествоНайдено = МассивТранспортныйДокумент.Количество();
		
		Если КоличествоНайдено > 1 Тогда
			СписокТранспортныеДокументы.ЗагрузитьЗначения(МассивТранспортныйДокумент);
		ИначеЕсли КоличествоНайдено = 1 Тогда
			ТранспортныйДокумент = МассивТранспортныйДокумент.Получить(0);
		Иначе
			ТранспортныйДокумент = Документы.гкс_ТранспортныйДокумент.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРеквизитыДокументаПоставщика();
	
КонецПроцедуры

&НаСервере
Функция АвтоЗаполнениеТраснпортногоДокумента()
	
	Результат = ЗначениеЗаполнено(Объект.Номенклатура)
				И ЗначениеЗаполнено(Объект.ТранспортноеСредство);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ПодборкаТранспортныхДокументов()
	
	ПараметрыПодбора = Новый Структура();
	
	ПараметрыПодбора.Вставить("ДокументРегистрации", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Номенклатура", Объект.Номенклатура);
	ПараметрыПодбора.Вставить("ТранспортноеСредство", Объект.ТранспортноеСредство);
	ПараметрыПодбора.Вставить("ДатаОтбора", Объект.Дата);
	ПараметрыПодбора.Вставить("ТТН", Объект.НомерДокументаПоставщика);
	ПараметрыПодбора.Вставить("Отправитель", Объект.ОтправительПолучатель);
	
	ПараметрыПодбора.Вставить("ЭтоАвтоПриемка",
		ЭтоАвтоПеревозка(Объект.ВидПеревозки)
		И Объект.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка);
	
	Возврат Документы.гкс_ТранспортныйДокумент.
	ПодборкаТранспортныхДокументовДляАвтозаполнения(ПараметрыПодбора);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТелоОтветаИзСтрокиНаСервере(СтрокаJSON)

	Читатор = Новый ЧтениеJSON;
	Читатор.УстановитьСтроку(СтрокаJSON);
	Данные = ПрочитатьJSON(Читатор, Ложь);
	
	Возврат Данные;

КонецФункции 

&НаСервере
Функция ПроверитьКорректностьВыбораСпецификации()
	
	ДанныеСпецификации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Спецификация, "Организация, Контрагент");
	
	ВыборОшибочный = ДанныеСпецификации.Организация <> Объект.Организация 
		ИЛИ ДанныеСпецификации.Контрагент <> Объект.Контрагент;
		
	Возврат ВыборОшибочный;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьРеквизитовТранспортногоДокумента()

	Если Объект.ВидПеревозки =
		ПредопределенноеЗначение("Перечисление.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт") Тогда 
	
		Элементы.НомерДокументаПоставщика.ТолькоПросмотр = ЗначениеЗаполнено(ТранспортныйДокумент);
		Элементы.ДатаДокументаПоставщика.ТолькоПросмотр = ЗначениеЗаполнено(ТранспортныйДокумент);
	КонецЕсли;
	
	УстановитьТипСобственника();
		
	УстановитьВидимостьИОбновитНадписьНайденыТранспортныеДокументы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДокументаПоставщика()

	Если ЗначениеЗаполнено(ТранспортныйДокумент) Тогда
		
		МодульЛокализации = гкс_ЛокализацияСервер.МодульЛокализации("гкс_РегистрацияНаПЛК");
		Если МодульЛокализации <> Неопределено Тогда
			МодульЛокализации.ЗаполнитьРеквизитыДокументаПоставщика(Объект, ТранспортныйДокумент);
		Иначе
			ЗаполнитьРеквизитыДокументаПоставщикаПоУмолчанию();
		КонецЕсли;
		
		ЗаполнитьВесПоТранспортномуДокументу();
		
	Иначе
		
		Объект.ВесНетто = 0;
		Объект.ВесБрутто = 0;
		Объект.ВесТары = 0;
		Объект.Водитель = "";
		
	КонецЕсли;
	
	ОбновитьНадписьГрузоотправитель();
	
КонецПроцедуры

// Заполняет реквизиты по транспортному документу
//	(исполнение без локализации)
//
&НаСервере
Процедура ЗаполнитьРеквизитыДокументаПоставщикаПоУмолчанию()
	
	Если Не ЗначениеЗаполнено(ТранспортныйДокумент) Тогда
		Возврат;	
	КонецЕсли;
	
	РеквизитыТД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ТранспортныйДокумент, "НомерДокумента, Номер, ДатаДокумента, Дата");
		
	Объект.НомерДокументаПоставщика = ?(ЗначениеЗаполнено(РеквизитыТД.НомерДокумента),
		РеквизитыТД.НомерДокумента, РеквизитыТД.Номер);
		
	Объект.ДатаДокументаПоставщика = ?(ЗначениеЗаполнено(РеквизитыТД.ДатаДокумента), 
		РеквизитыТД.ДатаДокумента, РеквизитыТД.Дата);
		
	ЗаполнитьОтправительПолучатель(); 
					
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтправительПолучатель()
	
	РеквизитыТД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ТранспортныйДокумент, "ПунктПогрузки, ПунктРазгрузки");
	
	Если Объект.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда
		ПунктПогрузкиРазгрузки = РеквизитыТД.ПунктПогрузки;
	Иначе
		ПунктПогрузкиРазгрузки = РеквизитыТД.ПунктРазгрузки;
	КонецЕсли;
	
	КонтрагентВладелецСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПунктПогрузкиРазгрузки, 
		"КонтрагентВладелецСклада");
	Объект.ОтправительПолучатель = ?(ЗначениеЗаполнено(КонтрагентВладелецСклада),
		КонтрагентВладелецСклада, Справочники.Контрагенты.ПустаяСсылка());
		
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьНадписьГрузоотправитель()   
	
	ЭтоПриемка  = Объект.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка;
	
	Если ЗначениеЗаполнено(ТранспортныйДокумент) Тогда
		
		РеквизитыТД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТранспортныйДокумент, "Отправитель");
		Грузоотправитель = РеквизитыТД.Отправитель;
		
	ИначеЕсли ЭтоПриемка Тогда
		Грузоотправитель = Объект.ОтправительПолучатель;   
	Иначе
		Грузоотправитель = Объект.Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВесПоТранспортномуДокументу()
	
	РегистрацияОбъект = РеквизитФормыВЗначение("Объект");
	РегистрацияОбъект.ЗаполнитьВесПоТранспортномуДокументу(ТранспортныйДокумент);
	ЗначениеВРеквизитФормы(РегистрацияОбъект, "Объект");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТранспортныйДокумент(ОбновитьРеквизитыДокументаПоставщика = Истина)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Не ЗначениеЗаполнено(ТранспортныйДокумент) Тогда
			
			ИнформацияОТранспортномДокументе = гкс_ПриемкаТранспортаВызовСервера
				.ИнформацияОТранспортеПоРегистрации(Объект.Ссылка);
				
			Если ИнформацияОТранспортномДокументе <> Неопределено Тогда
				ТранспортныйДокумент = ИнформацияОТранспортномДокументе.ТранспортныйДокумент;
			КонецЕсли; 
		КонецЕсли;
		
		Если ОбновитьРеквизитыДокументаПоставщика Тогда
			ЗаполнитьРеквизитыДокументаПоставщика();
		Иначе
			ОбновитьНадписьГрузоотправитель();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаписьВОчередь(ОбновитьРеквизитыДокументаПоставщика = Истина)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И ЭтоАвтоПеревозка(Объект.ВидПеревозки) Тогда
		
		ИнформацияОПредварительнойЗаписи = гкс_ПриемкаТранспортаВызовСервера.ИнформацияОПредварительнойЗаписи(Объект.Ссылка);
		Если ИнформацияОПредварительнойЗаписи <> Неопределено Тогда
			ЗаписьВОчередь = ИнформацияОПредварительнойЗаписи;
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьСпецификациюНаСервере()
	
	МодульЛокализации = гкс_ЛокализацияСервер.МодульЛокализации("гкс_РегистрацияНаПЛК");
	Если МодульЛокализации = Неопределено Тогда
		ПодобратьСпецификациюПоУмолчанию();
	Иначе	
		МодульЛокализации.ПодобратьСпецификациюНаСервере(Объект);	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПодобратьСпецификациюПоУмолчанию()
	
	Если Объект.Внутригрупповой Тогда
		ОтборОрганизация = Объект.Собственник;
	Иначе
		ОтборОрганизация = Объект.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Номенклатура)
		И ЗначениеЗаполнено(Объект.Контрагент)
		И ЗначениеЗаполнено(ОтборОрганизация) Тогда
		
		Объект.Спецификация = гкс_ПриемкаНаПЛКСервер.ПолучитьПроизвольнуюСпецификацию(
			ОтборОрганизация, Объект.Контрагент, Объект.Номенклатура);
	Иначе
		Объект.Спецификация = Документы.гкс_СпецификацияКДоговоруКонтрагента.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыВыбораСпецификации(Значение, ДопПараметры) Экспорт
	
	Если Значение = Неопределено Тогда  
		Возврат;
	КонецЕсли;
		
	Объект.Спецификация = Значение;
	
КонецПроцедуры

&НаСервере
Процедура ТочкаМаршрутаПриИзмененииНаСервере()
	
	ИнициализироватьЧасовойПоясПЛК();
	
КонецПроцедуры

&НаСервере
Процедура ВнутригрупповойПриИзмененииНаСервере()
	
	Если Не Объект.Внутригрупповой Тогда
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.Спецификация = Документы.гкс_СпецификацияКДоговоруКонтрагента.ПустаяСсылка();
	КонецЕсли;
	
	Объект.Собственник = Неопределено;
	УстановитьТипСобственника();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитов()
	
	УстановитьВидимостьОтТипаРегистрации();	
	УстановитьВидимостьОтВидаПеревозки();
	УстановитьЗаголовкиОтВидаПеревозки();
	
	УстановитьВидимостьИнформацииОТранспорте();
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтТипаРегистрации()
	
	ЭтоПриемка  = Объект.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка;
	ЭтоОтгрузка = Объект.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Отгрузка;
	
	Элементы.ГруппаВес.Видимость = ЭтоПриемка;
	Элементы.ГруппаВесПраво.Видимость = ЭтоПриемка;
	Элементы.НомерДокументаПоставщика.АвтоОтметкаНезаполненного = ЭтоПриемка;
	Элементы.УсловиеПроезда.Видимость = ЭтоПриемка;
	
	Элементы.ОтправительПолучатель.Заголовок = ?(ЭтоПриемка, "Грузоотправитель", "Грузополучатель");
	Элементы.Организация.Заголовок = ?(ЭтоПриемка, "Грузополучатель", "Грузоотправитель");
	Элементы.Контрагент.Заголовок = ?(ЭтоПриемка, "Поставщик", "Покупатель");
	
	Элементы.ЗаявкаНаОтгрузкуПродукции.Видимость = ЭтоОтгрузка;
			
КонецПроцедуры	

&НаСервере
Процедура УстановитьВидимостьОтВидаПеревозки()
	
	ЭтоАвтоПеревозка = ЭтоАвтоПеревозка(Объект.ВидПеревозки);
	
	Элементы.Водитель.Видимость 			= ЭтоАвтоПеревозка;
	Элементы.НадписьВодитель.Видимость 		= ЭтоАвтоПеревозка;
	Элементы.ЗаписьВОчередь.Видимость 		= ЭтоАвтоПеревозка;
	Элементы.ВыгрузкаСОдногоБорта.Видимость = ЭтоАвтоПеревозка;
	Элементы.Прицеп.Видимость 				= ЭтоАвтоПеревозка;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиОтВидаПеревозки()
	
	ДокументПоставщикаЗаголовок = НомерДокументаПоставщикаЗаголовок(Объект.ВидПеревозки);
	Элементы.НомерДокументаПоставщика.Заголовок = ДокументПоставщикаЗаголовок;
	Элементы.НадписьНомерДокументаПоставщика.Заголовок = ДокументПоставщикаЗаголовок;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИнформацииОТранспорте()
	
	ЭтоАвтоприемка = ЭтоАвтоприемка(); 
	
	Элементы.ИнформацияОКоличествеОсей.Видимость = ЭтоАвтоприемка;
	
КонецПроцедуры

&НаСервере
Функция ЭтоАвтоприемка()
		
	Возврат Объект.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка
		И Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЭтоАвтоПеревозка(Объект.ВидПеревозки);
	
КонецФункции	

&НаСервереБезКонтекста
Функция НомерДокументаПоставщикаЗаголовок(ВидПеревоозки)
	
	Если ВидПеревоозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт Тогда
		Результат = "ЖДН";
	Иначе
		Результат = "ТН";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДат()
	
	МестнаяДатаЗаполнена = ЗначениеЗаполнено(Объект.МестнаяДата);
	Элементы.Дата.Видимость = НЕ МестнаяДатаЗаполнена;
	Элементы.МестнаяДата.Видимость = МестнаяДатаЗаполнена;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьRFIDИДРейса()
		
	Элементы.ГруппаДанныеМеткиRFID.Видимость = ЭтоАвтоПеревозка(Объект.ВидПеревозки);
	Элементы.гкс_ИДРейса.Видимость = ЭтоЖДПеревозка(Объект.ВидПеревозки);	
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВесПоДокументам()
	
	Объект.ВесНетто	= Объект.ВесБрутто - Объект.ВесТары;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИОбновитНадписьНайденыТранспортныеДокументы()
	
	ЭлементНадпись = Элементы.НадписьНайденыТранспортныеДокументы;
	 
	Если ЗначениеЗаполнено(СписокТранспортныеДокументы) Тогда
		ШаблонЗагловка = НСтр("ru='Найдено: %1'");
		ЭлементНадпись.Заголовок = СтрШаблон(ШаблонЗагловка, СписокТранспортныеДокументы.Количество());
		ЭлементНадпись.Видимость = Истина;
	Иначе
		ЭлементНадпись.Заголовок = "";
		ЭлементНадпись.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Начало СтандартныеПодсистемы.КонтактнаяИнформация

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации, Знач Комментарий = Неопределено)
	
	// Создаем новый экземпляр по представлению.
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКонтактнойИнформации);
	
КонецФункции

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаСервере
Процедура УстановитьТочкуВъездаПоУмолчанию()

	ПерезаполнитьСписокТочекВъезда();
	
	СписокВыбора = Элементы.ВесоваяВъезда.СписокВыбора;

	Если НЕ ЗначениеЗаполнено(Объект.ВесоваяВъезда)
		И СписокВыбора.Количество() = 1 Тогда
			
		Объект.ВесоваяВъезда = СписокВыбора[0].Значение;
	КонецЕсли;	

КонецПроцедуры	

&НаСервере
Процедура ПерезаполнитьСписокТочекВъезда()
	
	ТочкиВъезда = МассивТочекВъезда(Объект.ТипРегистрации, Объект.ВидПеревозки,
	 								Объект.Номенклатура, Объект.УсловиеПроезда);
	
	СписокВыбора = Элементы.ВесоваяВъезда.СписокВыбора;
	СписокВыбора.ЗагрузитьЗначения(ТочкиВъезда);										
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивТочекВъезда(ТипРегистрации, ВидПеревозки, Номенклатура, УсловиеПроезда)
	
	Возврат Документы.гкс_РегистрацияНаПЛК.ТочкиВъезда(ТипРегистрации, ВидПеревозки, Номенклатура, УсловиеПроезда);
	
КонецФункции

&НаСервере
Процедура НайтиНаправлениеНаРазгрузку()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НаправленияНаРазгрузку = Документы.гкс_НаправлениеНаРазгрузку;
		НаправлениеНаРазгрузку = НаправленияНаРазгрузку.ПолучитьПоРегистрации(Объект.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураПодбораТранспортногоДокумента()
	
	СтруктураПодбора = Новый Структура();
	
	СтруктураПодбора.Вставить("ТранспортноеСредство", Объект.ТранспортноеСредство);
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		СтруктураПодбора.Вставить("Номенклатура", Объект.Номенклатура);
	КонецЕсли;
	
	Приемка = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.гкс_ТипРегистрации.Приемка");
	Если ЭтоАвтоПеревозка(Объект.ВидПеревозки) И Объект.ТипРегистрации = Приемка Тогда
		
		Если ЗначениеЗаполнено(Объект.НомерДокументаПоставщика) Тогда
			СтруктураПодбора.Вставить("НомерДокумента", Объект.НомерДокументаПоставщика);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ОтправительПолучатель) Тогда
			СтруктураПодбора.Вставить("Отправитель", Объект.ОтправительПолучатель);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПодбора;
	
КонецФункции


// Обработчик события изменения пункта погрузки на сервере.
// При выборе пункта погрузки заполняет поле грузоотправитель значением
// КонтрагентВладелецСклада, если поле грузоотправитель пустое
//
&НаСервере
Процедура ПунктПогрузкиПриИзмененииНаСервере()
	// При выборе Пункта погрузки заполнять поле грузоотправитель значением КонтрагентВладелецСклада, 
	// если поле грузоотправитель пустое
	Если ЗначениеЗаполнено(Объект.ПунктПогрузки) И Не ЗначениеЗаполнено(Объект.ОтправительПолучатель) Тогда

		КонтрагентВладелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПунктПогрузки, 
			"КонтрагентВладелецСклада");

		Если ЗначениеЗаполнено(КонтрагентВладелец) Тогда
			Объект.ОтправительПолучатель = КонтрагентВладелец;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры


// Обработчик события завершения выбора пункта погрузки.
// Заполняет выбранное значение и вызывает обработчик изменения
//
// Параметры:
//  Результат - Произвольный - результат выбора
//  ДопПараметры - Структура - дополнительные параметры
//
&НаКлиенте
Процедура ПунктПогрузкиВыборЗавершение(Результат, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ПунктПогрузки = Результат;
		ПунктПогрузкиПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
