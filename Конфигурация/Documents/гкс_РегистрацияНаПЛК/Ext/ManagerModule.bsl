#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ПриемкаПЛК");
	МеханизмыДокумента.Добавить("СтатусыДопускаЖДТранспорта");
	МеханизмыДокумента.Добавить("УчетФГИСЗерно");
	
	Если гкс_УчетВагоновСРПВ.ИспользуетсяИнтеграцияСРПВ() Тогда
		МеханизмыДокумента.Добавить("УчетВагоновСРПВ");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = гкс_ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если НЕ ДопПараметры.ПолучитьТекстыЗапроса Тогда
			
		ЗаполнитьПараметрыИнициализации(Запрос, Документ, ДопПараметры);
		
		ТекстЗапросаТаблицаСостояниеРегистрации(ТекстыЗапроса, Регистры);
		
		Если ЭтоПриемкаЖДТранспорта(Документ) Тогда
			ТекстЗапросаТаблицаСтатусыДопускаВагоновКВскрытию(ТекстыЗапроса, Регистры);
		КонецЕсли;
		Если гкс_УчетФГИСЗерно.ИспользуетсяИнтеграцияФГИСЗерно() И ЗначениеЗаполнено(Запрос.Параметры["СДИЗ"]) Тогда
			ТекстЗапросаТаблицаПринятыеСДИЗ(ТекстыЗапроса, Регистры);
		КонецЕсли;
		Если гкс_УчетВагоновСРПВ.ИспользуетсяИнтеграцияСРПВ() Тогда
			ТекстЗапросаТаблицаТранспортныеДокументыЖДПолученные(ТекстыЗапроса, Регистры);
		КонецЕсли;
	КонецЕсли;
		
	Возврат гкс_ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

Функция ЭтоПриемкаЖДТранспорта(ДокументСсылка)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ВидПеревозки, ТипРегистрации");
	
	Возврат Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЭтоЖДПеревозка(Реквизиты.ВидПеревозки) 
	        И Реквизиты.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка;  
		
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Подробней См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
// 
//  Параметры:
//   Ограничение - Структура - со свойствами:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                            Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                            Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                            если Истина, тогда не записывать ключи доступа,
//                                            а использовать ключи доступа владельца (требуется,
//                                            чтобы ограничение было строго по объекту-владельцу).
///   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - см.
//                                            описание предыдущего параметра.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ТочкаМаршрута)
	|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры
	
// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты - см. ШаблоныСообщенийПереопределяемый.ПриПодготовкеШаблонаСообщения.Реквизиты
//  Вложения  - см. ШаблоныСообщенийПереопределяемый.ПриПодготовкеШаблонаСообщения.Вложения
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура:
//    * ЗначенияРеквизитов - Соответствие из КлючИЗначение - список используемых в шаблоне реквизитов:
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие из КлючИЗначение - список используемых в шаблоне общих реквизитов:
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие из КлючИЗначение:
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные
//                  - Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей почты при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма:
//     * ВариантОтправки - Строка - вариант отправки для получателя письма: Кому, Копия, СкрытаяКопия, ОбратныйАдрес;
//     * Адрес           - Строка - адрес электронной почты получателя;
//     * Представление   - Строка - представление получателя письма;
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект, являющийся источником данных.
//                   - Структура  - структура описывающая параметры шаблона:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект, являющийся источником данных;
//    * ВидСообщения - Строка - вид формируемого сообщения: "ЭлектроннаяПочта" или "СообщениеSMS";
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров;
//    * ОтправитьСразу - Булево - признак мгновенной отправки письма;
//    * ПараметрыСообщения - Структура - дополнительные параметры сообщения;
//    * ПреобразовыватьHTMLДляФорматированногоДокумента - Булево - признак преобразование HTML текста
//             сообщения содержащего картинки в тексте письма из-за особенностей вывода изображений
//             в форматированном документе;
//    * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись для отправки письма.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

// СтандартныеПодсистемы.Печать

 // Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	МодульЛокализации = гкс_ЛокализацияСервер.МодульЛокализации("гкс_РегистрацияНаПЛК");
	
	Если ТипЗнч(МодульЛокализации) = Тип("ОбщийМодуль") Тогда
		МодульЛокализации.ДобавитьКомандыПечати(КомандыПечати);
	КонецЕсли;	
	
КонецПроцедуры
	
// Конец СтандартныеПодсистемы.Печать	

#КонецОбласти

Функция СоздатьДокументНаОсновании(ДанныеЗаполнения) Экспорт
	
	НовыйДокумент = СоздатьДокумент();
	НовыйДокумент.Заполнить(ДанныеЗаполнения); 
	НовыйДокумент.ДополнительныеСвойства.Вставить("ТранспортныйДокумент", ДанныеЗаполнения.ТранспортныйДокумент);
		
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Результат = НовыйДокумент.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru='При формировании регистрации на ПЛК возникли ошибки. 
							  |Подробности в журнале регистрации'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		ЗаписьЖурналаРегистрации("РегистрацияНаПЛК.Проведение", УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.гкс_РегистрацияНаПЛК, ОбработкаОшибок.ПодробноеПредставлениеОшибки(
			ИнформацияОбОшибке()));	

		Результат = Неопределено;
	КонецПопытки;		
	
	Возврат Результат;
	
КонецФункции

Функция ЧасовойПоясРегистрации(ДокументРегистрации) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЧасовойПоясРегистрации();
	Запрос.УстановитьПараметр("Ссылка", ДокументРегистрации);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ЧасовойПояс;
	
КонецФункции

// Возвращает документ "Регистрация на ПЛК", найденный по ИД рейса
//
// Возвращаемое значение:
//  ДокументСсылка.гкс_РегистрацияНаПЛК - 
//
Функция РегистрацияНаПЛКПоИДРейса(ИДРейса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИДРейса", ИДРейса);

	Запрос.Текст = ТекстЗапросаРегистрацияНаПЛКПоИДРейса(); 
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;	
		
КонецФункции  

// Функция определяет документ регистрации на ПЛК по параметрам поиска.
//
// Параметры:
//	ПараметрыПоиска - Структура - структура с праматерами поиска
//
// Возвращаемое значение:
//	Результат - ДокументСсылка - ссылка на найденый документ
//
Функция РегистрацияНаПЛКПоПараметрам(ПараметрыПоиска) Экспорт
	
	Результат = Документы.гкс_РегистрацияНаПЛК.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРегистрацияНаПЛКПоПараметрам();
			
	Запрос.УстановитьПараметр("ДатаПриемаГруза", ПараметрыПоиска.ДатаПриемаГруза);
	Запрос.УстановитьПараметр("Номенклатура", ПараметрыПоиска.НомерДокументаПоставщика);
	Запрос.УстановитьПараметр("НомерДокументаПоставщика", ПараметрыПоиска.НомерДокументаПоставщика);
	Запрос.УстановитьПараметр("ТранспортноеСредство", ПараметрыПоиска.ТранспортноеСредство);

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.РегистрацияНаПЛК; 
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция определяет документ регистрации на ПЛК по параметрам поиска.
//
// Параметры:
//	Документ - ДокументСсылка.гкс_РегистрацияНаПЛК - ссылка на регистрацию
//
// Возвращаемое значение:
//	Результат - ДокументСсылка - ссылка на найденый документ
//
Функция КонтрагентДляКонтроляКачества(Документ) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегистрацияНаПЛК.ОтправительПолучатель КАК Контрагент
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|ГДЕ
	|	РегистрацияНаПЛК.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Результат = Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.Контрагент;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает РегистрацииНаПЛК по заявке на отгрузку продукции
//
// Параметры:
//  ЗаявкаНаОтгрузкуПродукции  - Документ.гкс_ЗаявкаНаОтгрузкуПродукции 
//								- заявка на отгрузку на основании которого произвдится отгрузка	
//                 
//  Период  - Дата - дата на которую производится выборка регистраций
//
// Возвращаемое значение:
//   Массив   - массив документов гкс_РегистрацияНаПЛК
//
Функция РегистрацииНаПЛКПоЗавкеНаОтгрузку(ЗаявкаНаОтгрузкуПродукции, Период) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрацияНаПЛК.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|ГДЕ
	|	РегистрацияНаПЛК.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РегистрацияНаПЛК.ЗаявкаНаОтгрузкуПродукции = &ЗаявкаНаОтгрузкуПродукции";

	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Период));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Период));
	Запрос.УстановитьПараметр("ЗаявкаНаОтгрузкуПродукции", ЗаявкаНаОтгрузкуПродукции);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
	    Результат = Новый Массив;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ТочкиВъезда(ТипРегистрации, ВидПеревозки, Номенклатура, УсловиеПроезда) Экспорт
	
	Если ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда
 		Если ЗначениеЗаполнено(УсловиеПроезда) Тогда
			МассивТочекВъезда = ВъездПоУсловию(УсловиеПроезда, ВидПеревозки);
		КонецЕсли;	
	
		Если Не ЗначениеЗаполнено(МассивТочекВъезда) Тогда
			МассивТочекВъезда = ВъездПоНоменклатуре(Номенклатура, ВидПеревозки);
		КонецЕсли;
		
	ИначеЕсли ТипРегистрации = Перечисления.гкс_ТипРегистрации.Отгрузка Тогда	
		МассивТочекВъезда = ВъездыОтгрузки(ВидПеревозки);
	КонецЕсли;	
	
	Возврат МассивТочекВъезда;
	
КонецФункции

Функция ВъездПоУсловию(УсловиеПроезда, ВидПеревозки)
	
	Запрос = Новый Запрос;
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураПЛК.Ссылка КАК ТочкаВъезда
	|ИЗ
	|	Справочник.гкс_СтруктураПЛК КАК СтруктураПЛК
	|ГДЕ
	|	СтруктураПЛК.ВидОперации = ЗНАЧЕНИЕ(Перечисление.гкс_ВидыОперацийПЛК.ВзвешиваниеБрутто)
	|	И СтруктураПЛК.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка)
	|	И СтруктураПЛК.ТипТранспортныхСредств = &ВидПеревозки
	|	И СтруктураПЛК.УсловиеПроезда = &УсловиеПроезда";
	
	Запрос.УстановитьПараметр("УсловиеПроезда", УсловиеПроезда);
	Запрос.УстановитьПараметр("ВидПеревозки", ВидПеревозки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивТочекВъезда = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивТочекВъезда.Добавить(ВыборкаДетальныеЗаписи.ТочкаВъезда);
	КонецЦикла;
	
	Возврат МассивТочекВъезда;
	
КонецФункции

Функция ВъездПоНоменклатуре(Номенклатура, ВидПеревозки)
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиНазначенияРазгрузки.ТочкаВъезда КАК ТочкаВъезда
	|ИЗ
	|	РегистрСведений.гкс_НастройкиНазначенияРазгрузки.СрезПоследних(
	|			,
	|			ВидПеревозки = &ВидПеревозки
	|				И Номенклатура = &Номенклатура) КАК НастройкиНазначенияРазгрузки";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ВидПеревозки", ВидПеревозки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивТочекВъезда = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивТочекВъезда.Добавить(ВыборкаДетальныеЗаписи.ТочкаВъезда);
	КонецЦикла;
	
	Возврат МассивТочекВъезда;
	
КонецФункции	

Функция ВъездыОтгрузки(ВидПеревозки)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураПЛК.Ссылка КАК ТочкаВъезда
	|ИЗ
	|	Справочник.гкс_СтруктураПЛК КАК СтруктураПЛК
	|ГДЕ
	|	СтруктураПЛК.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Отгрузка)
	|	И СтруктураПЛК.ВидОперации = ЗНАЧЕНИЕ(Перечисление.гкс_ВидыОперацийПЛК.ВзвешиваниеНетто)
	|	И СтруктураПЛК.ТипТранспортныхСредств = &ВидПеревозки";
	
	Запрос.УстановитьПараметр("ВидПеревозки", ВидПеревозки);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	МассивТочекВъезда = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивТочекВъезда.Добавить(ВыборкаДетальныеЗаписи.ТочкаВъезда);
	КонецЦикла;
	
	Возврат МассивТочекВъезда;

КонецФункции

// Функция определяет возможность смены состояния регистрации документом Лабораторный анализ
//
// Параметры:
//  ДокументРегистрации	 - ДокументСсылка.гкс_РегистрацияНаПЛК - документ, для которого будет проверяться текущее состояние
// 
// Возвращаемое значение:
//  Булево - Истина, если текущее состояние регистрации может быть изменено Лабораторным анализом
//
Функция ОтражатьСостояниеРегистрацииДляЛабораторногоАнализа(ДокументРегистрации) Экспорт
	
	СписокКонечныхСостояний = СписокКонечныхСостоянийРегистрацииДляЛабораторногоАнализа();
	
	ТекущееСостояние = РегистрыСведений.гкс_СостоянияРегистрации.ТекущееСостояниеПоРегистрации(ДокументРегистрации);
	
	ТекущееСостояниеНеЯвляетсяКонечным = СписокКонечныхСостояний.НайтиПоЗначению(ТекущееСостояние) = Неопределено;
	
	Возврат ТекущееСостояниеНеЯвляетсяКонечным;

КонецФункции

#КонецОбласти 
	
#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры)
	
	МенеджерВременныхТаблиц = Неопределено;
	
	Если ДопПараметры <> Неопределено
		И ДопПараметры.Свойство("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц) Тогда
		
		МенеджерВременныхТаблиц = ?(МенеджерВременныхТаблиц = Неопределено,
									Новый МенеджерВременныхТаблиц,
									МенеджерВременныхТаблиц);
		
	Иначе
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ДокументРегистрации", ДокументСсылка);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("СДИЗ", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "СДИЗ"));
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаСостояниеРегистрации(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "гкс_СостоянияРегистрации";
	
	Если НЕ гкс_ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Регистрация.Ссылка КАК ДокументРегистрации,
	|	Регистрация.Ссылка КАК ДокументРегистратор,
	|	Регистрация.ТочкаМаршрута КАК ТочкаМаршрута,
	|	&Пользователь КАК Пользователь,
	|	Регистрация.Дата КАК Период,
	|	Регистрация.ТипРегистрации КАК ТипРегистрации,
	|	ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияРегистрации.Прибыл) КАК Состояние,
	|	Регистрация.ВидПеревозки КАК ВидПеревозки,
	|	Регистрация.ТранспортноеСредство КАК ТранспортноеСредство,
	|	Регистрация.МестнаяДата КАК МестнаяДата
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК Регистрация
	|ГДЕ
	|	Регистрация.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСтатусыДопускаВагоновКВскрытию(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "гкс_СтатусыДопускаВагоновКВскрытию";
	
	Если НЕ гкс_ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.гкс_ДопускиКВскрытиюВагонов.Фитосанитарный) КАК ДопускКВскрытию
	|ПОМЕСТИТЬ ВТ_ПереченьДопусков
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.гкс_ДопускиКВскрытиюВагонов.Фумигационный)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.гкс_ДопускиКВскрытиюВагонов.Претензионный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистрация.ТранспортноеСредство КАК Вагон,
	|	ВТ_ПереченьДопусков.ДопускКВскрытию КАК ДопускКВскрытию,
	|	Регистрация.Ссылка КАК ДокументРегистрации,
	|	Регистрация.Дата КАК Период
	|ПОМЕСТИТЬ ВТ_НачальныеДопуски
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК Регистрация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПереченьДопусков КАК ВТ_ПереченьДопусков
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Регистрация.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НачальныеДопуски.Вагон КАК Вагон,
	|	ВТ_НачальныеДопуски.ДопускКВскрытию КАК ДопускКВскрытию,
	|	ВЫБОР
	|		КОГДА ВТ_НачальныеДопуски.ДопускКВскрытию = ЗНАЧЕНИЕ(Перечисление.гкс_ДопускиКВскрытиюВагонов.Претензионный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВскрытиеЗапрещено,
	|	ВТ_НачальныеДопуски.ДокументРегистрации КАК ДокументРегистрации,
	|	ВТ_НачальныеДопуски.Период КАК Период,
	|	""Автоматически при создании регистрации на ПЛК"" КАК Комментарий,
	|	&Пользователь КАК Ответственный
	|ИЗ
	|	ВТ_НачальныеДопуски КАК ВТ_НачальныеДопуски";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПринятыеСДИЗ(ТекстыЗапроса, Регистры)
	ИмяРегистра = "гкс_СДИЗНаПЛК";
	
	Если НЕ гкс_ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Регистрация.Дата, ДЕНЬ) КАК Период,
	|	Регистрация.СДИЗ КАК СДИЗ,
	|	Регистрация.ВесНетто КАК Количество
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК Регистрация
	|ГДЕ
	|	Регистрация.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
КонецФункции

Процедура ТекстЗапросаТаблицаТранспортныеДокументыЖДПолученные(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "гкс_СРПВТранспортныеДокументыЖДПолученные";
	
	Если Не гкс_ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегистрацияНаПЛК.Проведен КАК Проведен,
	|	РегистрацияНаПЛК.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_ДанныеДокумента
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|ГДЕ
	|	РегистрацияНаПЛК.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаписиПрибытия.КлючАналитикиСРПВ КАК КлючАналитикиСРПВ,
	|	ВТ_ЗаписиПрибытия.Прибытие КАК Прибытие,
	|	ВТ_ЗаписиПрибытия.ТранспортныйДокумент КАК ТранспортныйДокумент,
	|	ВТ_ЗаписиПрибытия.ДатаПрибытия КАК ДатаПрибытия,
	|	ВТ_ЗаписиПрибытия.Подобран КАК Подобран,
	|	ВТ_ЗаписиПрибытия.НомерВагона КАК НомерВагона,
	|	ВТ_ЗаписиПрибытия.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВТ_ДанныеДокумента.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Зарегистрирован
	|ИЗ
	|	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СРПВТранспортныеДокументыЖДПолученные КАК ВТ_ЗаписиПрибытия
	|		ПО ВТ_ДанныеДокумента.ДокументОснование = ВТ_ЗаписиПрибытия.Прибытие"; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
		
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапросаЧасовойПоясРегистрации()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	гкс_ТочкиМаршрута.гкс_ЧасовойПоясТочкиМаршрута КАК ЧасовойПояс
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК гкс_РегистрацияНаПЛК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гкс_ТочкиМаршрута КАК гкс_ТочкиМаршрута
	|		ПО гкс_РегистрацияНаПЛК.ТочкаМаршрута = гкс_ТочкиМаршрута.Ссылка
	|ГДЕ
	|	гкс_РегистрацияНаПЛК.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРегистрацияНаПЛКПоИДРейса()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВсеРегистрации.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК ВсеРегистрации
	|ГДЕ
	|	ВсеРегистрации.гкс_ИДРейса = &ИДРейса";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРегистрацияНаПЛКПоПараметрам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегистрацияНаПЛК.Ссылка КАК РегистрацияНаПЛК,
	|	РегистрацияНаПЛК.НомерДокументаПоставщика КАК НомерДокументаПоставщика,
	|	РегистрацияНаПЛК.ДатаДокументаПоставщика КАК ДатаДокументаПоставщика
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|ГДЕ
	|	РАЗНОСТЬДАТ(РегистрацияНаПЛК.Дата, &ДатаПриемаГруза, ДЕНЬ) <= 60
	|	И НЕ РегистрацияНаПЛК.ПометкаУдаления
	|	И РегистрацияНаПЛК.ТранспортноеСредство = &ТранспортноеСредство
	|	И РегистрацияНаПЛК.Номенклатура = &Номенклатура
	|	И РегистрацияНаПЛК.ВидПеревозки = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт)
	|	И РегистрацияНаПЛК.НомерДокументаПоставщика = &НомерДокументаПоставщика";
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

Функция СписокКонечныхСостоянийРегистрацииДляЛабораторногоАнализа()
	
	МенеджерСостояний = Перечисления.гкс_СостоянияРегистрации;
	
	СписокСостояний = Новый СписокЗначений;
	СписокСостояний.Добавить(МенеджерСостояний.ВзвешенТара);
	СписокСостояний.Добавить(МенеджерСостояний.ВыгрузкаРазрешена);
	СписокСостояний.Добавить(МенеджерСостояний.ВыгрузкаРазрешенаАвторизован);
	СписокСостояний.Добавить(МенеджерСостояний.Выгружен);
	СписокСостояний.Добавить(МенеджерСостояний.ВыгруженАвторизован);
	СписокСостояний.Добавить(МенеджерСостояний.НаВесахТара);
	СписокСостояний.Добавить(МенеджерСостояний.НеПринято);
	СписокСостояний.Добавить(МенеджерСостояний.ПолучениеТТН);
	СписокСостояний.Добавить(МенеджерСостояний.Разгрузка);
	СписокСостояний.Добавить(МенеджерСостояний.Убыл);

	Возврат СписокСостояний;
	
КонецФункции

// Групповое изменение реквизитов Регистрации из АРМ.
//
// Параметры:
//   ПараметрыЗаполнения - Структура
//
Процедура ГрупповоеИзменениеРегистрацийИзАРМ(ПараметрыЗаполнения) Экспорт
	
	Для Каждого ДокументРегистрация Из ПараметрыЗаполнения.ВыбранныеРегистрации Цикл
	
		ДокументРегистрацияОбъект = ДокументРегистрация.ПолучитьОбъект();
		
		Если ПараметрыЗаполнения.Свойство("Номенклатура") Тогда
			ДокументРегистрацияОбъект.Номенклатура = ПараметрыЗаполнения.Номенклатура;
		КонецЕсли;
		Если ПараметрыЗаполнения.Свойство("Комментарий") Тогда
			ДокументРегистрацияОбъект.Комментарий = ПараметрыЗаполнения.Комментарий;
		КонецЕсли;
	
		Попытка
			ДокументРегистрацияОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru='При изменении %1 возникли ошибки. Подробности в журнале регистрации'"),
										ДокументРегистрация);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации("РегистрацияНаПЛК.Проведение", УровеньЖурналаРегистрации.Ошибка,
										Метаданные.Документы.гкс_РегистрацияНаПЛК, 
										ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
