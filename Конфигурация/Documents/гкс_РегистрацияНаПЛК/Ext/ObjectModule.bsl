#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ОчиститьРеквизитыПриКопировании();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		Если НЕ ЗначениеЗаполнено(МестнаяДата) И ЗначениеЗаполнено(ТочкаМаршрута) Тогда
			МестнаяДата = Справочники.гкс_ТочкиМаршрута.ПолучитьМестнуюДатуПоТочкеМаршрута(ТочкаМаршрута);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
			
			ТипОснования = ТипЗнч(ДанныеЗаполнения.ДокументОснование);
			
			Если ТипОснования = Тип("ДокументСсылка.гкс_ВъездНаКПП") Тогда
				
				ЗаполнитьДокументНаОснованииВъездаНаКПП(ДанныеЗаполнения.ДокументОснование);
				
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.гкс_СРПВПрибытиеНаПуть")
				И ДанныеЗаполнения.Свойство("ТранспортныйДокумент") Тогда	
					
				ЗаполнитьДокументНаОснованииПрибытияВагона(ДанныеЗаполнения);
					
			КонецЕсли;
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.гкс_ЗаявкаНаОтгрузкуПродукции") Тогда	
		
		ЗаполнитьДокументНаОснованииЗаявкиНаОтгрузкуПродукции(ДанныеЗаполнения);
		
	КонецЕсли;
	
	ЗаполнитьЕдиницуИзмерения();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПредставлениеЗоныКарантинногоКонтроляСтрокой();
	ЗаполнитьЕдиницуИзмерения();

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если ЗапретИзмененияДокументаПоРеестру(Отказ) Тогда		
       Возврат;
	КонецЕсли;
	
	гкс_ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапретИзмененияДокументаПоРеестру(Отказ) Тогда		
       Возврат;
	КонецЕсли;
		
	гкс_ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Ошибки = Неопределено;
	
	Если Не ПроверитьТранспортныйДокумент(Ошибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
		Возврат;
	КонецЕсли;	
			
	гкс_ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ); 
	
	Если гкс_УчетВагоновСРПВ.ИспользуетсяИнтеграцияСРПВ()
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.гкс_СРПВПрибытиеНаПуть") Тогда
		
		КлючАналитикиСРПВ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ИдентификаторОтправки");
		Статус = Перечисления.гкс_СРПВСтатусыВагонов.Прибыл;
		РегистрыСведений.гкс_СРПВСтатусыОформленияВагонов
			.ОтразитьСвязьСДокументомСРПВ(КлючАналитикиСРПВ, Статус, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	гкс_ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда
		ПроверяемыеРеквизиты.Добавить("НомерДокументаПоставщика");
		ПроверяемыеРеквизиты.Добавить("УсловиеПроезда");
		Если ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль Тогда
			ПроверяемыеРеквизиты.Добавить("ВесНетто");
		КонецЕсли;	
	КонецЕсли;
	
	Если Внутригрупповой Тогда
		ПроверяемыеРеквизиты.Добавить("Собственник");
	КонецЕсли;

	ТекстОшибки = "";
	Если Не гкс_ПриемкаТранспорта
		.ПроверкаЗаполненияДляКонтроляПревышенияВесаАвтомобиля(ТранспортноеСредство, ТекстОшибки) Тогда	
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДокументНаОснованииВъездаНаКПП(Знач ДокументОснование)
			
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВъездНаКПП.Номенклатура КАК Номенклатура,
	|	ВъездНаКПП.УсловиеПроезда КАК УсловиеПроезда,
	|	ВЫБОР
	|		КОГДА ВъездНаКПП.УсловиеПроезда = ЗНАЧЕНИЕ(Справочник.гкс_УсловияПроезда.FCA)
	|			ТОГДА ВъездНаКПП.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ВъездНаКПП.УсловиеПроезда = ЗНАЧЕНИЕ(Справочник.гкс_УсловияПроезда.DAP)
	|			ТОГДА ВъездНаКПП.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК ОтправительПолучатель,
	|	ВъездНаКПП.НомерТранспортногоСредства КАК НомерТранспортногоСредства,
	|	ВъездНаКПП.ФиоВодителя КАК Водитель
	|ИЗ
	|	Документ.гкс_ВъездНаКПП КАК ВъездНаКПП
	|ГДЕ
	|	ВъездНаКПП.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаДетальныеЗаписи);
	
		КоличествоСимволовНомераТранспорта = гкс_ПриемкаТранспорта.КоличествоСимволовДляПоискаПоНомеру();
	
		ТранспортноеСредство = Справочники.ТранспортныеСредства.
			ТранспортноеСредствоПоЧастиНомера(ВыборкаДетальныеЗаписи.НомерТранспортногоСредства, 
										  	  КоличествоСимволовНомераТранспорта);
		
	КонецЦикла;
					
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииЗаявкиНаОтгрузкуПродукции(Знач ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаявкаНаОтгрузкуПродукцииТовары.Номенклатура КАК Номенклатура,
	|	ЗаявкаНаОтгрузкуПродукции.Контрагент КАК Контрагент,
	|	ЗаявкаНаОтгрузкуПродукции.Водитель КАК Водитель,
	|	ЗаявкаНаОтгрузкуПродукции.Грузополучатель КАК Грузополучатель
	|ИЗ
	|	Документ.гкс_ЗаявкаНаОтгрузкуПродукции.Товары КАК ЗаявкаНаОтгрузкуПродукцииТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ЗаявкаНаОтгрузкуПродукции КАК ЗаявкаНаОтгрузкуПродукции
	|		ПО ЗаявкаНаОтгрузкуПродукцииТовары.Ссылка = ЗаявкаНаОтгрузкуПродукции.Ссылка
	|ГДЕ
	|	ЗаявкаНаОтгрузкуПродукцииТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
		ОтправительПолучатель = ВыборкаДетальныеЗаписи.Грузополучатель;
		Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
		Водитель = ВыборкаДетальныеЗаписи.Водитель;
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииПрибытияВагона(ДанныеЗаполнения)
	 
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
	РеквизитыТД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.ТранспортныйДокумент,
		"НомерДокумента, Номер, ДатаДокумента, Дата, ПунктПогрузки, Отправитель, Организация, Получатель");
	
	НомерДокументаПоставщика = ?(ЗначениеЗаполнено(РеквизитыТД.НомерДокумента),
		РеквизитыТД.НомерДокумента, РеквизитыТД.Номер);
		
	ДатаДокументаПоставщика = ?(ЗначениеЗаполнено(РеквизитыТД.ДатаДокумента), 
		РеквизитыТД.ДатаДокумента, РеквизитыТД.Дата);	
			
	Внутригрупповой = гкс_ПриемкаТранспорта.ЭтоВнутригрупповаяПеревозка(РеквизитыТД.Получатель);
	Если Внутригрупповой Тогда
		Организация = Справочники.Организации.ОрганизацияКонтрагента(РеквизитыТД.Получатель);
		Собственник = РеквизитыТД.Организация;
	Иначе
		Собственник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыТД.Организация, "КонтрагентОрганизации");
	КонецЕсли;
	
	Контрагент = РеквизитыТД.Отправитель;
	УсловиеПроезда = Справочники.гкс_УсловияПроезда.DAP;
	
	ПунктПогрузки = РеквизитыТД.ПунктПогрузки;
	КонтрагентВладелецСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПунктПогрузки, 
		"КонтрагентВладелецСклада");
	  
	Если ЗначениеЗаполнено(КонтрагентВладелецСклада) Тогда
		ОтправительПолучатель = КонтрагентВладелецСклада;
	Иначе
		ОтправительПолучатель = РеквизитыТД.Отправитель;
	КонецЕсли;
		
	ТранспортноеСредство = Справочники.ТранспортныеСредства
		.ТранспортноеСредствоПоНомеру(ДанныеЗаполнения.НомерВагона);	
		
	ЗаполнитьВесПоТранспортномуДокументу(ДанныеЗаполнения.ТранспортныйДокумент);	
							
КонецПроцедуры
		
Процедура ЗаполнитьЕдиницуИзмерения()
	
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
		ЕдиницаИзмеренияВеса = гкс_ПриемкаТранспортаВызовСервера.ПолучитьЕдиницуИзмеренияВесаПриемки();			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПроверитьТранспортныйДокумент(Ошибки)
	
	МенеджерОбъекта = гкс_ЛокализацияСервер.МодульЛокализации("гкс_РегистрацияНаПЛК");
	Если МенеджерОбъекта = Неопределено Тогда
		ЗаполненКорректно = ТранспортныйДокументЗаполненКорректно();
	Иначе
		ЗаполненКорректно = МенеджерОбъекта.ТранспортныйДокументЗаполненКорректно(ЭтотОбъект);		
	КонецЕсли;
			
	Если Не ЗаполненКорректно Тогда	
		ТекстСообщения = НСтр("ru = '%1: Не определен Транспортный документ!'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Ссылка);	
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения);		
	КонецЕсли;	
	
	Возврат ЗаполненКорректно;
	
КонецФункции

Функция ТранспортныйДокументЗаполненКорректно()
	
	ЗаполненКорректно = Истина;

	Если ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт
		И ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда
		
		Если ДополнительныеСвойства.Свойство("ТранспортныйДокумент") Тогда
			ЗаполненКорректно = ЗначениеЗаполнено(ДополнительныеСвойства.ТранспортныйДокумент);
		Иначе 		
			ИнформацияОТранспорте = гкс_ПриемкаТранспортаВызовСервера.ИнформацияОТранспортеПоРегистрации(Ссылка);
			
			Если Не (ЗначениеЗаполнено(ИнформацияОТранспорте) 
				И ЗначениеЗаполнено(ИнформацияОТранспорте.ТранспортныйДокумент)) Тогда	
				ЗаполненКорректно = Ложь;		
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗаполненКорректно;
	
КонецФункции	

Процедура ЗаполнитьПредставлениеЗоныКарантинногоКонтроляСтрокой()
	
	АдресЗоныКарантинногоКонтроляСтрокой = УправлениеКонтактнойИнформацией
	         .ПредставлениеКонтактнойИнформации(АдресЗоныКарантинногоКонтроля);
	         
КонецПроцедуры

Процедура ОчиститьРеквизитыПриКопировании()
	
	ПустаяДата = Дата(1, 1, 1);
	ПустойТранспорт = Справочники.ТранспортныеСредства.ПустаяСсылка();
	ПустойКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	RFIDEPC = "";
	RFIDTID = "";
		
	Дата = ТекущаяДатаСеанса;
	МестнаяДата = ТекущаяДатаСеанса;
	ДатаДокументаПоставщика = ПустаяДата;
	
	ДокументОснование = Неопределено;
	
	НомерДокументаПоставщика = "";
	Водитель = "";
	гкс_ИДРейса = "";
	Комментарий = "";
	
	ВесБрутто = 0;
	ВесНетто = 0;
	ВесТары = 0;
	
	Отклонен = Ложь;
	       	
	ТранспортноеСредство = ПустойТранспорт;
	ВесоваяВъезда = Справочники.гкс_СтруктураПЛК.ПустаяСсылка();
	
	Если ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда
		
		Контрагент = ПустойКонтрагент;
		ОтправительПолучатель = ПустойКонтрагент;
		
		Если ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль Тогда
		
			Прицеп = ПустойТранспорт;
				
		ИначеЕсли ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт Тогда	
			
			Спецификация = Документы.гкс_СпецификацияКДоговоруКонтрагента.ПустаяСсылка();
		КонецЕсли;	
	КонецЕсли;	
		
КонецПроцедуры

// Заполнить вес по транспортному документу и Транспортному средству регситрации.
// 
// Параметры:
//  ТранспортныйДокумент - ДокументСсылка.гкс_ТранспортныйДокумент
Процедура ЗаполнитьВесПоТранспортномуДокументу(ТранспортныйДокумент) Экспорт
	
	ПараметрыПолучения = 
		Новый Структура("ТранспортныйДокумент, ТранспортноеСредство", ТранспортныйДокумент, ТранспортноеСредство);
	ДанныеПоВесуТранспортногоДокумента = Документы.гкс_ТранспортныйДокумент.ПолучитьДанныеПоВесу(ПараметрыПолучения);
	
	ЗаполнитьЕдиницуИзмерения();
	гкс_ПриемкаТранспорта.ПересчитатьВесВЕдиницахДокумента(ДанныеПоВесуТранспортногоДокумента, ЕдиницаИзмеренияВеса);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеПоВесуТранспортногоДокумента, , "ЕдиницаИзмеренияВеса");
	
КонецПроцедуры

Функция ЗапретИзмененияДокументаПоРеестру(Отказ)
	
	Если гкс_ПриемкаТранспорта.ЗапретИзмененияДокументаПоРеестру(Ссылка) Тогда		
		Отказ = Истина;
		ИмяСобытия = НСтр("ru = 'Запрет изменения документа'");
		ТекстШаблона = НСтр("ru = 'Не удалось записать документ: %1 т.к. уже оформлен реестр ЗПП-3'");
				
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Предупреждение, Метаданные.Документы.гкс_РегистрацияНаПЛК, 
			Ссылка, СтрШаблон(ТекстШаблона, Ссылка));

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
   
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
#КонецЕсли
