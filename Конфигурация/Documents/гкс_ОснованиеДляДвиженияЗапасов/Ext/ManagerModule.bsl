// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ТочкаМаршрута)
	|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Возвращает основание движения запасов для регистрации на ПЛК
//
// Параметры:
//  ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК - регистрация для которой определяется
//																документ основание запасов;
//	ДанныеЗаполнения - Структура - структура с данными заполнения
// 
// Возвращаемое значение:
//  Результат - ДокументСсылка.гкс_ОснованиеДляДвиженияЗапасов - ссылка на основание движения запасов 
//
Функция СформироватьДокументПоНеобходимости(ДокументРегистрации, ДанныеЗаполнения, Проводить = Истина) Экспорт
	
	ДанныеЗаполнения.Вставить("Регистрация", ДокументРегистрации);
	
	ОснованиеДляДвиженияЗапасов = ПолучитьПоРегистрации(ДокументРегистрации);	

	Если ЗначениеЗаполнено(ОснованиеДляДвиженияЗапасов) Тогда
		ДокументОбъект = ОснованиеДляДвиженияЗапасов.ПолучитьОбъект(); 	
	Иначе
        ДокументОбъект = СоздатьДокумент();
	КонецЕсли;
	
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
		
	Отказ = Ложь;
	гкс_ОбщегоНазначения.СохранитьДокумент(ДокументОбъект, Отказ, Проводить);
	
	Если Не Отказ Тогда
		Результат = ДокументОбъект.Ссылка;
	Иначе
		Результат = ПустаяСсылка();
	КонецЕсли;
		
	Возврат Результат;

КонецФункции

// Вызывается в обработчике ПриЗаписии() документа взвешивания.
//
// Параметры:
//  Регистрация - ДокументСсылка - документ регистрации
//
//  Отказ - Булево - флаг ошибки при выполнении операции
//
Процедура АктуализироватьДокументДвиженияЗапасов(ДокументРегистрации, Отказ) Экспорт
	
	ОснованиеДляДвиженияЗапасовСсылка = ПолучитьПоРегистрации(ДокументРегистрации);
	
	Если Не ЗначениеЗаполнено(ОснованиеДляДвиженияЗапасовСсылка) Тогда
		Возврат;
	КонецЕсли;	
	
	ОснованиеДляДвиженияЗапасов = ОснованиеДляДвиженияЗапасовСсылка.ПолучитьОбъект();
	
	ДанныеПоВесу = гкс_ПриемкаНаПЛКСервер.ПоказанияВесовПоРегистрации(ДокументРегистрации);
	
	ОснованиеДляДвиженияЗапасов.ВесНеттоФакт = ДанныеПоВесу.НеттоФакт;
	ОснованиеДляДвиженияЗапасов.ВесНетто = ДанныеПоВесу.НеттоДок;
	ОснованиеДляДвиженияЗапасов.ВесБруттоФакт = ДанныеПоВесу.БруттоФакт;
	ОснованиеДляДвиженияЗапасов.ВесБрутто = ДанныеПоВесу.БруттоДок;
	ОснованиеДляДвиженияЗапасов.ВесТарыФакт = ДанныеПоВесу.ТараФакт;
	ОснованиеДляДвиженияЗапасов.ВесТары = ДанныеПоВесу.ТараДок;
	
	гкс_ОбщегоНазначения.СохранитьДокумент(ОснованиеДляДвиженияЗапасов, Отказ, ОснованиеДляДвиженияЗапасов.Проведен);
	
КонецПроцедуры	

// Получить по регистрации.
// 
// Параметры:
//  Регистрация - ДокументСсылка.гкс_РегистрацияНаПЛК - 
// 
// Возвращаемое значение:
//  ДокументСсылка.гкс_ОснованиеДляДвиженияЗапасов - 
//
Функция ПолучитьПоРегистрации(Регистрация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОснованиеДляДвиженияЗапасов.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.гкс_ОснованиеДляДвиженияЗапасов КАК ОснованиеДляДвиженияЗапасов
	|ГДЕ
	|	ОснованиеДляДвиженияЗапасов.Регистрация = &Регистрация";

	Запрос.УстановитьПараметр("Регистрация", Регистрация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.ДокументСсылка; 
	Иначе
		Результат = ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получить по формированию номера проб.
// 
// Параметры:
//  ФормированиеНомераПробы - ДокументСсылка.гкс_ФормированиеНомераПробы - 
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.гкс_ОснованиеДляДвиженияЗапасов - 
//
Функция ДокументыОснованияДляДвиженияЗапасовПоФормированиюНомераПроб(ФормированиеНомераПробы) Экспорт
	
	Запрос = Новый Запрос; 
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОснованиеДляДвиженияЗапасов.Ссылка КАК ОснованиеДляДвиженияЗапасовСсылка
	|ИЗ
	|	Документ.гкс_ФормированиеНомераПробы.СписокРегистраций КАК ФормированиеНомераПробыСписокРегистраций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ОснованиеДляДвиженияЗапасов КАК ОснованиеДляДвиженияЗапасов
	|		ПО ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации = ОснованиеДляДвиженияЗапасов.Регистрация
	|			И (ОснованиеДляДвиженияЗапасов.Проведен)
	|ГДЕ
	|	ФормированиеНомераПробыСписокРегистраций.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ФормированиеНомераПробы);
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ДанныеЗапроса = РезультатЗапроса.Выгрузить();
		Результат = ДанныеЗапроса.ВыгрузитьКолонку("ОснованиеДляДвиженияЗапасовСсылка"); 
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перезаполняет движения запасов для регистраций на ПЛК, входящих в состав композитной пробы.
//
// Параметры:
//   ЛабораторныйАнализ - ДокументСсылка.гкс_ЛабораторныйАнализ - композитая проба
//   Отказ - Булево - запрет на открытие документа.
//
Процедура ПерезаполнитьОснованиеДвиженияЗапасовКомпозит(ЛабораторныйАнализ, Отказ) Экспорт
					
	МассивДокументов = ДокументыОснованияДляДвиженияЗапасовПоКомпозитномуЛабораторномуАнализу(ЛабораторныйАнализ);
	
	Если Не ЗначениеЗаполнено(МассивДокументов) Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
	
		Для Каждого ДокументСсылка Из МассивДокументов Цикл
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.гкс_ОснованиеДляДвиженияЗапасов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
		
			ОснованиеДляДвиженияЗапасов = ДокументСсылка.ПолучитьОбъект();
			// GKSTCPLK-1435: Используем единый механизм подбора лабораторного анализа
			гкс_ПодборЛабораторногоАнализа.ПерезаполнитьОснованиеДвиженияЗапасовПоЛабораторномуАнализу(ОснованиеДляДвиженияЗапасов);
				
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
			
		ОтменитьТранзакцию();
		Отказ = Истина;
		ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При проведении документа %1 возникла ошибка:
				       |Текст ошибки: %2'"),
				ЛабораторныйАнализ,
				ИнформацияОбОшибке);
			
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'Обновление композитного анализа'");		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			
		ВызватьИсключение ИнформацияОбОшибке;

	КонецПопытки;
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получить по композитному лабораторному анализу.
// 
// Параметры:
//  ЛабораторныйАнализ - ДокументСсылка.гкс_ЛабораторныйАнализ - 
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.гкс_ОснованиеДляДвиженияЗапасов - 
//
Функция ДокументыОснованияДляДвиженияЗапасовПоКомпозитномуЛабораторномуАнализу(ЛабораторныйАнализ)
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЛабораторныйАнализ.гкс_ДокументРегистрации КАК АнализДокументРегистрации,
	|	ТИПЗНАЧЕНИЯ(ЛабораторныйАнализ.гкс_ДокументРегистрации) КАК ТипДокумента
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ КАК ЛабораторныйАнализ
	|ГДЕ
	|	ЛабораторныйАнализ.Ссылка = &Ссылка
	|	И ЛабораторныйАнализ.Статус = ЗНАЧЕНИЕ(Перечисление.гкс_СтатусыЛабораторногоАнализа.Выполнен)
	|	И ЛабораторныйАнализ.гкс_НазначениеИспользованияКачества = ЗНАЧЕНИЕ(Перечисление.гкс_НазначенияИспользованияКачества.ПриемкаКомпозит)";
	
	Запрос.УстановитьПараметр("Ссылка", ЛабораторныйАнализ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();	
		Выборка.Следующий();
		Если Выборка.ТипДокумента = Тип("ДокументСсылка.гкс_ФормированиеНомераПробы") Тогда
			Результат = ДокументыОснованияДляДвиженияЗапасовПоФормированиюНомераПроб(Выборка.АнализДокументРегистрации);
			
		ИначеЕсли Выборка.ТипДокумента = Тип("ДокументСсылка.гкс_РегистрацияНаПЛК") Тогда
			
			ОснованиеДляДвиженияЗапасов = ПолучитьПоРегистрации(Выборка.АнализДокументРегистрации);
			Если ЗначениеЗаполнено(ОснованиеДляДвиженияЗапасов) Тогда
				Результат.Добавить(ОснованиеДляДвиженияЗапасов);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#КонецЕсли
