#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
			
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	гкс_ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ПроверитьСвязанныеЗаписиВОчередь(Отказ);
	КонецЕсли; 
	
	ПроверитьЗаполнениеОбъектаПередЗаписью(Отказ);
	ЗаполнитьДополнительныеСвойстваОбъекта();
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И ДополнительныеСвойства.Свойство("ЗаписьИзФормы") Тогда
		ПроверитьДоступностьМестВГрафикеИОчереди(Отказ);
	КонецЕсли;
			
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	гкс_ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	гкс_ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьСвязанныеЗаписиВОчередь(Отказ)
	
	Если ЕстьЗаписьВОчередьПриемки() И Не Отменено Тогда		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'На основании графика %1 уже оформлены записи в очередь'"), Ссылка), , , , Отказ);
	КонецЕсли;
		
КонецПроцедуры
 
Процедура ЗаполнитьДополнительныеСвойстваОбъекта()
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	СохраненныеДанные = ДанныеДокумента();
	ИзмененияДокумента = ИзмененияДокумента(СохраненныеДанные);

	ДополнительныеСвойства.Вставить("СохраненныеДанные", СохраненныеДанные);
	ДополнительныеСвойства.Вставить("ИзмененияДокумента", ИзмененияДокумента);
			
КонецПроцедуры

Функция ДанныеДокумента()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НачалоПериода КАК НачалоПериода,
	|	ТаблицаДокумента.ОкончаниеПериода КАК ОкончаниеПериода,
	|	ТаблицаДокумента.КоличествоТранспортныхСредствВЧас КАК КоличествоТранспортныхСредствВЧас,
	|	ТаблицаДокумента.КоличествоТранспортныхСредствВЧасПоЭО КАК КоличествоТранспортныхСредствВЧасПоЭО
	|ИЗ
	|	Документ.гкс_ЗаписьВГрафикПриемкиПЛК КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("НачалоПериода");
	ДанныеДокумента.Вставить("ОкончаниеПериода");
	ДанныеДокумента.Вставить("КоличествоТранспортныхСредствВЧас");
	ДанныеДокумента.Вставить("КоличествоТранспортныхСредствВЧасПоЭО");
	
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Выборка); 
	
	Возврат ДанныеДокумента;
	
КонецФункции

Процедура ПроверитьЗаполнениеОбъектаПередЗаписью(Отказ)
	
	ЧасовойПояс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТочкаМаршрута, "гкс_ЧасовойПоясТочкиМаршрута");
	
	Если Не гкс_ЭлектроннаяОчередь.ДатаЗаявкиАктуальна(ОкончаниеПериода, ЧасовойПояс) И Не Отказ Тогда	
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Запрещено вносить записи в прошлые периоды!'"),
			Неопределено, "ОкончаниеПериода", "", Отказ);													  
	КонецЕсли;
	   	
КонецПроцедуры

#Область РасчетИзмененийДокумента

Функция ЕстьИзменения()
	
	Перем ИзмененияДокумента;
	
	ДополнительныеСвойства.Свойство("ИзмененияДокумента", ИзмененияДокумента);
	
	Если НЕ ЗначениеЗаполнено(ИзмененияДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ИзмененияДокумента.Свойство("ЕстьИзменениеНачалоПериода")
	        ИЛИ ИзмененияДокумента.Свойство("ЕстьИзменениеОкончаниеПериода")
	       	ИЛИ ИзмененияДокумента.Свойство("ЕстьИзменениеКоличествоТС");
			

КонецФункции

Функция ИзмененияДокумента(СохраненныеДанные) 
	
	ИзмененияДокумента = Новый Структура;
	
	Если НЕ СохраненныеДанные.НачалоПериода = НачалоПериода Тогда
		
		ИзмененияДокумента.Вставить("ЕстьИзменениеНачалоПериода");
		
		ДобавитьПериодКонтроляИзменений(ИзмененияДокумента, 
		                                СохраненныеДанные.НачалоПериода, 
						                НачалоПериода);
										
	КонецЕсли;
	
	Если НЕ СохраненныеДанные.ОкончаниеПериода = ОкончаниеПериода Тогда
		
		ИзмененияДокумента.Вставить("ЕстьИзменениеОкончаниеПериода");
		ДобавитьПериодКонтроляИзменений(ИзмененияДокумента, 
		                                СохраненныеДанные.ОкончаниеПериода, 
						                ОкончаниеПериода);

	КонецЕсли;
	
	Если НЕ СохраненныеДанные.КоличествоТранспортныхСредствВЧас = КоличествоТранспортныхСредствВЧас 
		ИЛИ НЕ СохраненныеДанные.КоличествоТранспортныхСредствВЧасПоЭО = КоличествоТранспортныхСредствВЧасПоЭО Тогда
		
		ИзмененияДокумента.Вставить("ЕстьИзменениеКоличествоТС");
		ДобавитьПериодКонтроляИзменений(ИзмененияДокумента, 
		                                НачалоПериода, 
						                ОкончаниеПериода);
		
	КонецЕсли;

    Возврат ИзмененияДокумента;
	
КонецФункции

Процедура ДобавитьПериодКонтроляИзменений(ИзмененияДокумента, Дата1, Дата2)
	
	Если НЕ ИзмененияДокумента.Свойство("ПериодыКонтроля") Тогда
		
		ПериодыКонтроля = Новый ТаблицаЗначений;
		ПериодыКонтроля.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
		ПериодыКонтроля.Колонки.Добавить("КонецПериода", Новый ОписаниеТипов("Дата"));
		
		ИзмененияДокумента.Вставить("ПериодыКонтроля", ПериодыКонтроля);	
		
	КонецЕсли;
	
	ПериодКонтроля = ИзмененияДокумента.ПериодыКонтроля.Добавить();
	ПериодКонтроля.НачалоПериода = ?(Дата1 > Дата2, Дата2, Дата1);
	ПериодКонтроля.КонецПериода =  ?(Дата1 > Дата2, Дата1, Дата2);
	
КонецПроцедуры

#КонецОбласти

#Область ДоступностьОчередей

Процедура ПроверитьДоступностьМестВГрафикеИОчереди(Отказ)
	
	Если НЕ ЕстьСвободноеМестоВГрафике() Тогда		
		ТекстСообщения = НСтр("ru = 'На этот период в графике приемки уже существуют записи!'");
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения, Неопределено, "ОкончаниеПериода", "", Отказ);											  
	КонецЕсли;
											  
	Если НЕ ЕстьСвободноеМестоВОчереди() Тогда	
		ТекстСообщения = НСтр("ru = 'На этот период в очередь приемки уже есть запись!'");
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения, Неопределено, "ОкончаниеПериода", "", Отказ);											  
	КонецЕсли;
		
КонецПроцедуры

Функция ЕстьСвободноеМестоВОчереди()
	
	// Если есть изменения количества не меняли ничего остального то проверяем сам интервал
	// Проверка дат
	// 1) (+НачалоПериода) НачалоПериодаСтарое НчалоПериодаНовое
	// 2) (-НачалоПериода) НачалоПериодаНовое НачалоПериодаСтарое 
	// 3) (+КонецПериода) КонецПериодаСтарый КонецПериодаНовый
	// 4) (-КонецПериода) КонецПериодаНовый КонецПериодаСтарый 
	
	Если ЭтоНовый() Тогда
		Возврат Не ЕстьЗаписьВОчередьПриемки();
	КонецЕсли;
	
	Если НЕ ЕстьИзменения() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ЕстьСвободноеМестоВОчередиДляИзмененнойЗаписи();	
	
КонецФункции

Функция ЕстьСвободноеМестоВОчередиДляИзмененнойЗаписи()
	
	ПараметрыЗаписиВОчередь = Новый Структура;	
	ПараметрыЗаписиВОчередь.Вставить("Периоды", ДополнительныеСвойства.ИзмененияДокумента.ПериодыКонтроля);
	ПараметрыЗаписиВОчередь.Вставить("ТочкаМаршрута", ТочкаМаршрута);
	ПараметрыЗаписиВОчередь.Вставить("Номенклатура", Номенклатура);
	ПараметрыЗаписиВОчередь.Вставить("УсловиеПроезда", УсловиеПроезда);
	
	УстановитьБлокировкуОчередиПоПараметрам(ПараметрыЗаписиВОчередь);
	
	Возврат Не РегистрыСведений.гкс_ОчередьПриемкиПЛК.ЕстьЗаписьВОчередь(ПараметрыЗаписиВОчередь);
	
КонецФункции

Функция ЕстьЗаписьВОчередьПриемки()
	
	УстановитьБлокировкуОчередиПоПараметрам();
	
	ПараметрыЗаписиВОчередь = Новый Структура;
	ПараметрыЗаписиВОчередь.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыЗаписиВОчередь.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	ПараметрыЗаписиВОчередь.Вставить("ТочкаМаршрута", ТочкаМаршрута);
	ПараметрыЗаписиВОчередь.Вставить("Номенклатура", Номенклатура);
	ПараметрыЗаписиВОчередь.Вставить("УсловиеПроезда", УсловиеПроезда);
		
	Возврат РегистрыСведений.гкс_ОчередьПриемкиПЛК.ЕстьЗаписьВОчередь(ПараметрыЗаписиВОчередь);
	
КонецФункции

Функция ЕстьСвободноеМестоВГрафике()
			
	УстановитьБлокировкуГрафика();
	
	Период = Новый Структура("ДатаНачала, ДатаОкончания", НачалоПериода, ОкончаниеПериода);
	
	Возврат РегистрыСведений.гкс_ГрафикПриемкиПЛК.
		ЕстьСвободноеМесто(Период, ТочкаМаршрута, Номенклатура, УсловиеПроезда, Ссылка);
	
КонецФункции

#КонецОбласти

#Область Блокировки

Процедура УстановитьБлокировкуОчередиПоПараметрам(Параметры = Неопределено)
	
	Блокировка = Новый БлокировкаДанных;
	
	Если ЗначениеЗаполнено(Параметры) И Параметры.Свойство("Периоды") Тогда
		
		Для Каждого Период Из Параметры.Периоды Цикл
			Диапазон = Новый Диапазон(Период.НачалоПериода, Период.КонецПериода);
			ДобавитьЭлементБлокировкиОчереди(Блокировка, Диапазон);	
		КонецЦикла;
		
	Иначе		
		Диапазон = Новый Диапазон(НачалоПериода, ОкончаниеПериода);
		ДобавитьЭлементБлокировкиОчереди(Блокировка, Диапазон);		
	КонецЕсли;
	
	Блокировка.Заблокировать();

КонецПроцедуры

Процедура ДобавитьЭлементБлокировкиОчереди(Блокировка, Диапазон)
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.гкс_ОчередьПриемкиПЛК");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

	ЭлементБлокировки.УстановитьЗначение("ТочкаМаршрута", ТочкаМаршрута);
	ЭлементБлокировки.УстановитьЗначение("Номенклатура", Номенклатура);
	ЭлементБлокировки.УстановитьЗначение("УсловиеПроезда", УсловиеПроезда);
	ЭлементБлокировки.УстановитьЗначение("НачалоПериода", Диапазон);
	ЭлементБлокировки.УстановитьЗначение("ОкончаниеПериода", Диапазон);
	
КонецПроцедуры

Процедура УстановитьБлокировкуГрафика()
	
	Диапазон = Новый Диапазон(НачалоПериода, ОкончаниеПериода);
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.гкс_ГрафикПриемкиПЛК");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки.УстановитьЗначение("ТочкаМаршрута", ТочкаМаршрута);
	ЭлементБлокировки.УстановитьЗначение("Номенклатура", Номенклатура);
	ЭлементБлокировки.УстановитьЗначение("УсловиеПроезда", УсловиеПроезда);
	ЭлементБлокировки.УстановитьЗначение("НачалоПериода", Диапазон);
	ЭлементБлокировки.УстановитьЗначение("ОкончаниеПериода", Диапазон);
	
	Блокировка.Заблокировать();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
#КонецЕсли
