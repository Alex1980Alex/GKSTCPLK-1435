#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Изменяет состояние регистрации на ПЛК на  "Выгружен".
//
// Параметры:
//  Статус  - ПеречислениеСсылка.гкс_СРПВСтатусыВагонов - статус взвешивания по СРПВ
//	
Процедура СформироватьДокументПЛКПриНеобходимости(Статус) Экспорт
	
	Если Статус <> Перечисления.гкс_СРПВСтатусыВагонов.Выгружен Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипОперации = Перечисления.гкс_СРПВТипыОперацийСВагоном.Погрузка
		ИЛИ гкс_УчетВагоновСРПВ.НаСтатусОформленДокументОперации(ИдентификаторОтправки, Статус) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не гкс_УчетВагоновСРПВ.НаСтатусОформленДокументОперации(ИдентификаторОтправки,
		Перечисления.гкс_СРПВСтатусыВагонов.ВзвешенБрутто) Тогда	
		Возврат;	
	КонецЕсли;
	
	СостоянияРегистрации = РегистрыСведений.гкс_СостоянияРегистрации;
	
    ДанныеОформленияРегистрации = гкс_УчетВагоновСРПВ.ДанныеОформленногоДокументаОперацииПоСтатусу(
									ИдентификаторОтправки, Перечисления.гкс_СРПВСтатусыВагонов.Прибыл);
									
	ДокументРегистрации = ДанныеОформленияРегистрации.Документ;
	
	ТекущееСостояниеРегистрации = СостоянияРегистрации.ТекущееСостояниеРегистрации(
		Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт, 
		ДокументРегистрации, 
		Перечисления.гкс_ТипРегистрации.Приемка);
	
	Если гкс_УчетВагоновСРПВ.НаСтатусОформленДокументОперации(ИдентификаторОтправки, 
		Перечисления.гкс_СРПВСтатусыВагонов.ВзвешенБрутто) 
		И (ТекущееСостояниеРегистрации = Перечисления.гкс_СостоянияРегистрации.ВыгрузкаРазрешена) Тогда
			
		НовоеСостояние = Перечисления.гкс_СостоянияРегистрации.Выгружен;
		Комментарий = "";
		гкс_ПриемкаТранспорта.ЗарегистрироватьНовоеСостояние(ДокументРегистрации, НовоеСостояние, Комментарий);
		
		РегистрыСведений.гкс_СРПВСтатусыОформленияВагонов
			.ОтразитьСвязьСДокументомСРПВ(ИдентификаторОтправки, Статус, ДокументРегистрации);

	КонецЕсли;
				
КонецПроцедуры

#КонецОбласти
		
#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ИдентификаторОтправки = Справочники.гкс_КлючиАналитикиСРПВ.ПустаяСсылка();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если гкс_УчетВагоновСРПВ.НаВагонОформленДокументОперации(ИдентификаторОтправки, Ссылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	гкс_ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
			
	гкс_ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если гкс_УчетВагоновСРПВ.НаВагонОформленДокументОперации(ИдентификаторОтправки, Ссылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ДопПараметры = гкс_ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	ИнициализироватьДопПараметры(ДопПараметры);
	
	гкс_ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ, ДопПараметры);
	
	СформироватьДокументПЛКПриНеобходимости(Перечисления.гкс_СРПВСтатусыВагонов.Выгружен);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	гкс_ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение     

Процедура ИнициализироватьДопПараметры(ДопПараметры)
	ДопПараметры.ДополнительныеСвойства = Новый Структура;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
	