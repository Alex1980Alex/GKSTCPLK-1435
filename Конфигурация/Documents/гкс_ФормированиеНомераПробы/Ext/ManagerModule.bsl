#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ПриемкаПЛК");
	МеханизмыДокумента.Добавить("ЛабораторияИКачество");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = гкс_ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если НЕ ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ, ДопПараметры);
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		Если ДопПараметры.ДополнительныеСвойства.Свойство("ТипПробы") 
			И ДопПараметры.ДополнительныеСвойства.ТипПробы = ПредопределенноеЗначение("Перечисление.гкс_ТипыПроб.Композитная") Тогда
			ТекстЗапросаТаблицагкс_КомпозитныеПробы(ТекстыЗапроса, Регистры);
		Иначе
			ТекстЗапросаТаблицаСостояниеРегистрации(ТекстыЗапроса, Регистры);	
		КонецЕсли;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат гкс_ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ТочкаМаршрута)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//  КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//  Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_Этикетка";
	КомандаПечати.Представление = НСтр("ru = 'Этикетка';en = 'Label'");	
	КомандаПечати.Обработчик = "гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФ_MXL_Этикетка";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_АктОтбораКП";
	КомандаПечати.Идентификатор = "ПФ_MXL_АктОтбораКП";
	КомандаПечати.Представление = НСтр("ru = 'Акт отбора образцов композитной пробы';
									   |en = 'Act of composite sampling'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_АктОтбораПроб";
	КомандаПечати.Представление = НСтр("ru = 'Акт отбора проб новый'");
    КомандаПечати.Обработчик = "гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФ_MXL_АктОтбораПроб";             
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	КомандаПечати.Порядок = 1;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов – Массив – ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати – Структура – дополнительные настройки печати;
//  КоллекцияПечатныхФорм – ТаблицаЗначений – сформированные табличные документы (выходной параметр)
//  ОбъектыПечати – СписокЗначений – значение – ссылка на объект;
//                                            представление – имя области, в которой был выведен объект (выходной параметр);
//  ПараметрыВывода – Структура – дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Этикетка") Тогда
		ТабличныйДокумент = ПечатьЭтикетки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_Этикетка", НСтр("ru = 'Макет этикетки';
															|en = 'Label layout'"), ТабличныйДокумент);
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктОтбораКП") Тогда		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_АктОтбораКП",
			НСтр("ru = 'Акт отбора образцов композитной пробы';
				|en = 'Act of composite sampling'"),
			СформироватьПечатнуюФормаАктОтбораКП(МассивОбъектов, ОбъектыПечати, ПараметрыПечати), ,
			"Документ.гкс_ФормированиеНомераПробы.ПФ_MXL_АктОтбораКП");
	КонецЕсли;

КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПервыйДокументИзСпискаРегистраций(ФормированиеНомераПробы) Экспорт
	
	Результат = Неопределено;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации КАК ДокументРегистрации
	|ИЗ
	|	Документ.гкс_ФормированиеНомераПробы.СписокРегистраций КАК ФормированиеНомераПробыСписокРегистраций
	|ГДЕ
	|	ФормированиеНомераПробыСписокРегистраций.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ФормированиеНомераПробы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий(); 
		Результат = ВыборкаДетальныеЗаписи.ДокументРегистрации;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначенияЗаполненияДляФормированияРеестраЗПП3(НомерПробы) Экспорт
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФормированиеНомераПробы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ФормированиеНомераПробы
	|ИЗ
	|	Документ.гкс_ФормированиеНомераПробы КАК ФормированиеНомераПробы
	|ГДЕ
	|	ФормированиеНомераПробы.НомерПробы = &НомерПробы
	|	И ФормированиеНомераПробы.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_ФормированиеНомераПробы.Ссылка КАК КомпозитнаяПроба,
	|	ЛабораторныйАнализ.Ссылка КАК Анализ
	|ИЗ
	|	ВТ_ФормированиеНомераПробы КАК ВТ_ФормированиеНомераПробы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ЛабораторныйАнализ КАК ЛабораторныйАнализ
	|		ПО ВТ_ФормированиеНомераПробы.Ссылка = ЛабораторныйАнализ.гкс_ДокументРегистрации
	|			И ЛабораторныйАнализ.Проведен";
	
	Запрос.УстановитьПараметр("НомерПробы", НомерПробы);
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СформироватьНомерПробы(ДокументОбъект, Отказ) Экспорт
	
	НовыйНомерПробы = Справочники.гкс_НомерПробы.СоздатьЭлемент();
	НовыйНомерПробы.ТипПробы = ДокументОбъект.ТипПробы;
	НовыйНомерПробыСписокРегистраций = НовыйНомерПробы.СписокРегистраций;

	Для Каждого СтрокаРегистрация Из ДокументОбъект.СписокРегистраций Цикл
		Если ЗначениеЗаполнено(СтрокаРегистрация.ДокументРегистрации) Тогда
			НоваяРегистрация = НовыйНомерПробыСписокРегистраций.Добавить();
			НоваяРегистрация.ДокументРегистрации = СтрокаРегистрация.ДокументРегистрации;
		КонецЕсли;
	КонецЦикла;
	
	Если НовыйНомерПробыСписокРегистраций.Количество() > 0 Тогда
		НовыйНомерПробы.Записать();
		ДокументОбъект.НомерПробы = НовыйНомерПробы.Ссылка;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр
		("ru = 'Отсутствует регистрация. Номер пробы не сформирован'"));
		Отказ = Истина;
	КонецЕсли;
		
КонецПроцедуры

Процедура СоздатьНовыйДокумент(ДанныеЗаполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйДокумент = СоздатьДокумент();
	НовыйДокумент.Заполнить(ДанныеЗаполнения);
	
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура СформироватьЛабораторныйАнализПоНеобходимости(ФормированиеНомераПробы) Экспорт
	
	РегистрацияТранспорта = ПервыйДокументИзСпискаРегистраций(ФормированиеНомераПробы);
	
	Если НЕ ЗначениеЗаполнено(РегистрацияТранспорта) Тогда
		ОбщегоНазначения.СообщитьПользователю(
		НСтр("ru='Отсуствуют связанные регистрации транспорта. Лабораторный анализ невозможжно сформировать'"));
		Возврат;	
	КонецЕсли;

	ДокументОснование = ДокументОснованиеДляФормированияЛабораторногоАнализа(ФормированиеНомераПробы, РегистрацияТранспорта);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) 
	ИЛИ ЛабораторныйАнализПоФормированиюПробыУжеСуществует(ДокументОснование) 
	ИЛИ НЕ Документы.гкс_ЛабораторныйАнализ.ЗаблокироватьКонкурентноеСозданиеЛабораторногоАнализа(ДокументОснование) Тогда	
		Возврат;
	КонецЕсли;
		
	ДанныеЗаполнения = ДанныеДляФормированияЛабораторногоАнализа(ФормированиеНомераПробы, РегистрацияТранспорта);
	      
	Параметры = Новый Структура("ДанныеЗаполнения, ДополнительныеСвойства", 
								ДанныеЗаполнения,
								Новый Структура("ЭтоНомерПробы", Истина));
								 
	Документы.гкс_ЛабораторныйАнализ.СоздатьДокументНаОсновании(Параметры);

КонецПроцедуры

#Область Печать

Функция КлючОбъектаПользовательскихНастроек() Экспорт
	
	Возврат "Документ.гкс_ФормированиеНомераПробы";
	
КонецФункции

Функция НастройкиПечатиПоУмолчанию() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Подразделение", "");
	Результат.Вставить("ДолжностьПодписанта", "");
	Результат.Вставить("ЮрЛицо", Справочники.Контрагенты.ПустаяСсылка());
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти       

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры)
	
	МенеджерВременныхТаблиц = Неопределено;
	
	Если ДопПараметры <> Неопределено
		И ДопПараметры.Свойство("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц) Тогда
		
		МенеджерВременныхТаблиц = ?(МенеджерВременныхТаблиц = Неопределено,
									Новый МенеджерВременныхТаблиц,
									МенеджерВременныхТаблиц);
		
	Иначе
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
КонецПроцедуры

#КонецОбласти

#Область Печать

Функция ПечатьЭтикетки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати = Неопределено) Экспорт
	
	Перем ДокументРегистрацияНаПЛК; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыПечати <> Неопределено
		И ПараметрыПечати.Свойство("ДокументРегистрацияНаПЛК") Тогда
		ДокументРегистрацияНаПЛК = ПараметрыПечати.ДокументРегистрацияНаПЛК; 		
	КонецЕсли; 
	
	ДанныеДляПечати = ПолучитьДанныеДляПечатиЭтикеток(МассивОбъектов, ДокументРегистрацияНаПЛК);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_гкс_ФормированиеНомераПробы_ПФ_MXL_Этикетка";
	
	ПервыйДокумент = Истина;
	
	КоличествоЭкземпляров = 1;
	Пока ДанныеДляПечати.Следующий() Цикл
		
		// Добавлен макет станции отправления для этикетки
		Если Не ДанныеДляПечати.ТипПробы = Перечисления.гкс_ТипыПроб.Композитная Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.гкс_ФормированиеНомераПробы.ПФ_MXL_Этикетка");
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы(
				"Документ.гкс_ФормированиеНомераПробы.ПФ_MXL_ЭтикеткаСтанцияОтправления");
		КонецЕсли;
		
			
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
				
		Шапка = Макет.ПолучитьОбласть("Этикетка");
		Если ДанныеДляПечати.ТипПробы = Перечисления.гкс_ТипыПроб.Композитная Тогда
			Шапка.Параметры.ТранспортноеСредство = "Композитный анализ";
			Шапка.Параметры.Силос				 = ДанныеДляПечати.Силос;
		Иначе
			Шапка.Параметры.ТранспортноеСредство = ДанныеДляПечати.ТранспортноеСредствоПредставление;
		КонецЕсли;
		Шапка.Параметры.Контрагент = ДанныеДляПечати.КонтрагентПредставление;
		
		// Добавлено заполнение параметра станции отправления для этикетки 
		Если ДанныеДляПечати.ТипПробы = Перечисления.гкс_ТипыПроб.Композитная Тогда
			Шапка.Параметры.СтанцияОтправления = ДанныеДляПечати.СтанцияОтправленияНаименование;
		КонецЕсли;
		
		Шапка.Параметры.ДатаПробы = Формат(ДанныеДляПечати.ДатаПробы, "ДФ=дд.ММ.гггг");
	
		ТабличныйДокумент.Вывести(Шапка);
		ТабличныйДокумент.КоличествоЭкземпляров = ДанныеДляПечати.КоличествоЭкземпляров;
		
		Если ЕстьШтрихкод(ТабличныйДокумент.Рисунки) Тогда
			ЗаполнитьШтрихкод(ТабличныйДокумент.Рисунки.КартинкаШтрихкода, ДанныеДляПечати.НомерПробы);
		КонецЕсли;

		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, 
			ОбъектыПечати, 
			ДанныеДляПечати.ДокументФормированияНомераПробы);
			
		КоличествоЭкземпляров = ?(КоличествоЭкземпляров < ДанныеДляПечати.КоличествоЭкземпляров, 
			ДанныеДляПечати.КоличествоЭкземпляров, КоличествоЭкземпляров);	
		
	КонецЦикла;
	
	Отступ = 3;
	ТабличныйДокумент.ПолеСверху = Отступ;
	ТабличныйДокумент.ПолеСлева = Отступ;
	ТабличныйДокумент.ПолеСнизу = Отступ;
	ТабличныйДокумент.ПолеСправа = Отступ;
	ТабличныйДокумент.РазмерКолонтитулаСверху = Отступ;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = Отступ;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ТабличныйДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
		
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормаАктОтбораКП(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_гкс_ФормированиеНомераПробы_АктОтбораКП";
	
	СтруктураПараметровПечати = Новый Структура;
	РеквизитыЮрЛица = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыПечати.ЮрЛицо, "Наименование,Адрес", Истина);
	СтруктураПараметровПечати = Новый Структура ("НаименованиеОрганизации, АдресОрганизации", 
												РеквизитыЮрЛица.Наименование, РеквизитыЮрЛица.Адрес);
	
	СтруктураПараметровПечати.Вставить("ПодразделениеНаименование", ВРег(ПараметрыПечати.Подразделение));
	СтруктураПараметровПечати.Вставить("ПодразделениеНаименованиеРП", ВРег(ПараметрыПечати.Подразделение));
	СтруктураПараметровПечати.Вставить("ДолжностьПодписанта", ПараметрыПечати.ДолжностьПодписанта);
	
	Запрос	= Новый Запрос;
	Запрос.Текст	= ПолучитьТекстЗапросаПечатьАктОтбораПроб();
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	МассивРезультатов 		= Запрос.ВыполнитьПакет();
	
	РезультатДанныеПечати			= МассивРезультатов[1]; // РезультатЗапроса
	РезультатВыборкаПоРегистрациям	= МассивРезультатов[2]; // РезультатЗапроса
	РезультатВыборкаПоАнализам		= МассивРезультатов[3]; // РезультатЗапроса
	
	ДанныеПечати					= РезультатДанныеПечати.Выбрать();
	ВыборкаПоРегистрациям 			= РезультатВыборкаПоРегистрациям.Выбрать();
	ВыборкаПоАнализам 				= РезультатВыборкаПоАнализам.Выбрать();
	
	ПервыйДокумент	= Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		// Найдем в выборке товары по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоРегистрациям.Сбросить();
		ВыборкаПоАнализам.Сбросить();
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.гкс_ФормированиеНомераПробы.ПФ_MXL_АктОтбораКП");
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		
		СписокТС	= "";
		СписокПоказателей = "";
		
		Пока ВыборкаПоРегистрациям.НайтиСледующий(СтруктураПоиска) Цикл
			
			СписокТС	= СписокТС + ВыборкаПоРегистрациям.ТранспортноеСредство + Символы.ПС;
			
		КонецЦикла;
		
		Пока ВыборкаПоАнализам.НайтиСледующий(СтруктураПоиска) Цикл
			
			СписокПоказателей	= СписокПоказателей + ВыборкаПоАнализам.Показатель + ", ";
			
		КонецЦикла;
		
		ОбластьМакета	= Макет.ПолучитьОбласть("КолонтитулБольшой");		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураПараметровПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета	= Макет.ПолучитьОбласть("Шапка");		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ОбластьМакета.Параметры.Дата	= Формат(ДанныеПечати.Дата, "ДФ=dd.MM.yyyy");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета	= Макет.ПолучитьОбласть("ТелоДокумента");		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		
		ОбластьМакета.Параметры.ДатаИВремяОтбора	= Формат(ДанныеПечати.Дата, "ДФ='dd.MM.yyyy hh:mm:ss'");
		ОбластьМакета.Параметры.НаименованиеВидаОбразца	= ДанныеПечати.Номенклатура;
		ОбластьМакета.Параметры.НомерТС	= СписокТС;
		ОбластьМакета.Параметры.Композитная = ?(ДанныеПечати.ТипПробы = Перечисления.гкс_ТипыПроб.Композитная, 
		"√", "х");
		ОбластьМакета.Параметры.СписокПоказателей	= СписокПоказателей;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета	= Макет.ПолучитьОбласть("Подписи");		
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураПараметровПечати);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
				
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;

	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьТекстЗапросаПечатьАктОтбораПроб()
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ФормированиеНомераПробы.Ссылка КАК Ссылка,
	|	ФормированиеНомераПробы.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ФормированиеНомераПробы.ТипПробы КАК ТипПробы,
	|	ФормированиеНомераПробы.НомерПробы КАК НомерПробы,
	|	ФормированиеНомераПробы.ПроизводственныеСуткиРегистрации КАК ПроизводственныеСуткиРегистрации,
	|	ВЫБОР
	|		КОГДА РегистрацияНаПЛК.Собственник ССЫЛКА Справочник.Организации
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РегистрацияНаПЛК.Собственник, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК
	|				Справочник.Организации).Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(РегистрацияНаПЛК.Собственник, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК
	|			Справочник.Контрагенты).Наименование
	|	КОНЕЦ КАК ЗаявительНаименование,
	|	ФормированиеНомераПробы.Номер КАК Номер,
	|	ФормированиеНомераПробы.Дата КАК Дата,
	|	ЕСТЬNULL(РегистрацияНаПЛК.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(РегистрацияНаПЛК.ОтправительПолучатель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Грузоотправитель,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ГКСТранспортныйДокумент.ПунктПогрузки, ЗНАЧЕНИЕ(Справочник.гкс_ТочкиМаршрута.ПустаяСсылка)) КАК
	|		Справочник.гкс_ТочкиМаршрута).КодСтанцииЖД КАК СтанцияОтправления,
	|	ЕСТЬNULL(РегистрацияНаПЛК.ВидПеревозки, ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТранспортныхСредствДоставки.БезДоставки)) КАК
	|		ВидПеревозки
	|ПОМЕСТИТЬ ВТ_ДанныеПечати
	|ИЗ
	|	Документ.гкс_ФормированиеНомераПробы КАК ФормированиеНомераПробы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ФормированиеНомераПробы.СписокРегистраций КАК ФормированиеНомераПробыСписокРегистраций
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СвязьРегистрацииИТранспортногоДокумента КАК
	|					СвязьРегистрацииИТранспортногоДокумента
	|					ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ТранспортныйДокумент КАК ГКСТранспортныйДокумент
	|					ПО СвязьРегистрацииИТранспортногоДокумента.ТранспортныйДокумент = ГКСТранспортныйДокумент.Ссылка
	|				ПО РегистрацияНаПЛК.Ссылка = СвязьРегистрацииИТранспортногоДокумента.ДокументРегистрации
	|			ПО ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации = РегистрацияНаПЛК.Ссылка
	|		ПО (ФормированиеНомераПробыСписокРегистраций.Ссылка = ФормированиеНомераПробы.Ссылка)
	|		И (ФормированиеНомераПробыСписокРегистраций.НомерСтроки = 1)
	|ГДЕ
	|	ФормированиеНомераПробы.Ссылка В (&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеПечати.Ссылка КАК Ссылка,
	|	ВТ_ДанныеПечати.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ВТ_ДанныеПечати.ТипПробы КАК ТипПробы,
	|	ВТ_ДанныеПечати.НомерПробы КАК НомерПробы,
	|	ВТ_ДанныеПечати.ПроизводственныеСуткиРегистрации КАК ПроизводственныеСуткиРегистрации,
	|	ВТ_ДанныеПечати.ЗаявительНаименование КАК ЗаявительНаименование,
	|	ВТ_ДанныеПечати.Номер КАК Номер,
	|	ВТ_ДанныеПечати.Дата КАК Дата,
	|	ВТ_ДанныеПечати.Номенклатура КАК Номенклатура,
	|	ВТ_ДанныеПечати.Грузоотправитель КАК Грузоотправитель,
	|	ВТ_ДанныеПечати.СтанцияОтправления КАК СтанцияОтправления,
	|	ВТ_ДанныеПечати.ВидПеревозки КАК ВидПеревозки,
	|	ЕСТЬNULL(НастройкиПечатиФормированияПроб.ОбъемПробы, 0) КАК ОбъемПробы
	|ИЗ
	|	ВТ_ДанныеПечати КАК ВТ_ДанныеПечати
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_НастройкиПечатиФормированияПроб КАК НастройкиПечатиФормированияПроб
	|		ПО ВТ_ДанныеПечати.ТочкаМаршрута = НастройкиПечатиФормированияПроб.ТочкаМаршрута
	|		И ВТ_ДанныеПечати.Номенклатура = НастройкиПечатиФормированияПроб.Номенклатура
	|		И ВТ_ДанныеПечати.ТипПробы = НастройкиПечатиФормированияПроб.ТипПробы
	|		И ВТ_ДанныеПечати.ВидПеревозки = НастройкиПечатиФормированияПроб.ВидПеревозки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФормированиеНомераПробыСписокРегистраций.Ссылка КАК Ссылка,
	|	ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации КАК ДокументРегистрации,
	|	ЕСТЬNULL(РегистрацияНаПЛК.ТранспортноеСредство, ЗНАЧЕНИЕ(Справочник.ТранспортныеСредства.ПустаяСсылка)) КАК
	|		ТранспортноеСредство
	|ИЗ
	|	Документ.гкс_ФормированиеНомераПробы.СписокРегистраций КАК ФормированиеНомераПробыСписокРегистраций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ПО ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации = РегистрацияНаПЛК.Ссылка
	|ГДЕ
	|	ФормированиеНомераПробыСписокРегистраций.Ссылка В (&МассивДокументов)
	|ИТОГИ
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ЛабораторныйАнализКачественныеПоказатели.Показатель,
	|		ЗНАЧЕНИЕ(Справочник.гкс_ПоказателиАнализовНоменклатуры.ПустаяСсылка)) КАК Показатель,
	|	ФормированиеНомераПробы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.гкс_ФормированиеНомераПробы КАК ФормированиеНомераПробы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ЛабораторныйАнализ КАК ЛабораторныйАнализ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ЛабораторныйАнализ.КачественныеПоказатели КАК
	|				ЛабораторныйАнализКачественныеПоказатели
	|			ПО ЛабораторныйАнализ.Ссылка = ЛабораторныйАнализКачественныеПоказатели.Ссылка
	|		ПО ФормированиеНомераПробы.Ссылка = ЛабораторныйАнализ.гкс_ДокументРегистрации
	|ГДЕ
	|	ФормированиеНомераПробы.Ссылка В (&МассивДокументов)
	|	И ФормированиеНомераПробы.ТипПробы = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыПроб.Композитная)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ЛабораторныйАнализКачественныеПоказатели.Показатель,
	|		ЗНАЧЕНИЕ(Справочник.гкс_ПоказателиАнализовНоменклатуры.ПустаяСсылка)),
	|	ФормированиеНомераПробы.Ссылка
	|ИЗ
	|	Документ.гкс_ФормированиеНомераПробы.СписокРегистраций КАК ФормированиеНомераПробы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ФормированиеНомераПробы КАК ФормированиеНомераПробыШапка
	|		ПО ФормированиеНомераПробы.Ссылка = ФормированиеНомераПробыШапка.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ЛабораторныйАнализ КАК ЛабораторныйАнализ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ЛабораторныйАнализ.КачественныеПоказатели КАК
	|				ЛабораторныйАнализКачественныеПоказатели
	|			ПО ЛабораторныйАнализ.Ссылка = ЛабораторныйАнализКачественныеПоказатели.Ссылка
	|		ПО ФормированиеНомераПробы.ДокументРегистрации = ЛабораторныйАнализ.гкс_ДокументРегистрации
	|		И (ФормированиеНомераПробы.НомерСтроки = 1)
	|ГДЕ
	|	ФормированиеНомераПробы.Ссылка В (&МассивДокументов)
	|	И ФормированиеНомераПробыШапка.ТипПробы = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыПроб.Единичная)";
	
	Возврат ТекстЗапроса
	
КонецФункции

Процедура ЗаполнитьШтрихкод(Штрихкод, ДанныеШтрихкода)
	
	КоличествоМиллиметровВПикселе = гкс_ОбщегоНазначенияПЛККлиентСервер.КоличествоМиллиметровВПикселе();
		
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина",           Окр(Штрихкод.Ширина / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Высота",           Окр(Штрихкод.Высота / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Штрихкод",         ДанныеШтрихкода);
	ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0); // Штрихкод - это строка
	ПараметрыШтрихкода.Вставить("ТипКода",          3); // Code128
	ПараметрыШтрихкода.Вставить("ОтображатьТекст",  Истина);
	ПараметрыШтрихкода.Вставить("РазмерШрифта",     12);
	
	Штрихкод.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
КонецПроцедуры

Функция ЕстьШтрихкод(Рисунки)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КартинкаШтрихкода", Новый УникальныйИдентификатор);
	СтароеЗначение = СтруктураПоиска.КартинкаШтрихкода;
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Рисунки);
	
	Возврат Не СтруктураПоиска.КартинкаШтрихкода = СтароеЗначение;
	
КонецФункции

#КонецОбласти 

Функция ПолучитьДанныеДляПечатиЭтикеток(ДокументыФормированиеНомераПробы, ДокументыРегистрации = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументыРегистрации", ДокументыРегистрации);
	Запрос.УстановитьПараметр("СсылкиНаДокументыНомераПроб", ДокументыФормированиеНомераПробы);
	
	Запрос.Текст = ТекстЗапросаПолучитьДанныеДляПечатиЭтикеток(); 
		
	Если ДокументыРегистрации = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"ТаблицаРегистрации.ДокументРегистрации В(&ДокументыРегистрации)" , 
			"Истина");		
	КонецЕсли; 
	
	Возврат Запрос.Выполнить().Выбрать();
		
КонецФункции 

#Область ФормированиеЛабораторногоАнализа

Функция ЛабораторныйАнализПоФормированиюПробыУжеСуществует(ДокументОснование)
	
	ЛабораторныйАнализ = Документы.гкс_ЛабораторныйАнализ.
		ПолучитьЛабораторныйАнализПоДокументуРегистрации(ДокументОснование);
					         
	Возврат ЗначениеЗаполнено(ЛабораторныйАнализ);		         
	
КонецФункции

Функция ДокументОснованиеДляФормированияЛабораторногоАнализа(ФормированиеНомераПробы, РегистрацияТранспорта)
	
	Результат = Неопределено;
	
	Если ФормированиеНомераПробы.ТипПробы = Перечисления.гкс_ТипыПроб.Композитная Тогда
		Результат = ФормированиеНомераПробы;
	ИначеЕсли ФормированиеНомераПробы.ТипПробы = Перечисления.гкс_ТипыПроб.Единичная Тогда
		Результат = РегистрацияТранспорта;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция ДанныеДляФормированияЛабораторногоАнализа(ФормированиеНомераПробы, РегистрацияТранспорта)
	
	ИменаРеквизитов = "Организация, ТочкаМаршрута, гкс_ВидПеревозки, Номенклатура";
	ДанныеЗаполнения = Новый Структура(ИменаРеквизитов);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гкс_РегистрацияНаПЛК.Организация КАК Организация,
	|	гкс_РегистрацияНаПЛК.ТочкаМаршрута КАК ТочкаМаршрута,
	|	гкс_РегистрацияНаПЛК.ВидПеревозки КАК гкс_ВидПеревозки,
	|	гкс_РегистрацияНаПЛК.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК гкс_РегистрацияНаПЛК
	|ГДЕ
	|	гкс_РегистрацияНаПЛК.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", РегистрацияТранспорта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);	
	КонецЕсли;

	ДанныеЗаполнения.Вставить("гкс_ДокументРегистрации", 
		ДокументОснованиеДляФормированияЛабораторногоАнализа(ФормированиеНомераПробы, РегистрацияТранспорта));
	
	ДанныеЗаполнения.Вставить("гкс_НазначениеИспользованияКачества", 
		Перечисления.гкс_НазначенияИспользованияКачества.ЗначениеПоДокументуФормированиеНомераПробы(ФормированиеНомераПробы));
		
	ДанныеЗаполнения.Вставить("НомерПробы", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФормированиеНомераПробы.НомерПробы, "Код"));
		
	Возврат ДанныеЗаполнения;

КонецФункции

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапросаПолучитьДанныеДляПечатиЭтикеток()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДокументФормированиеНомераПробы.ТипПробы = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыПроб.Единичная)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ДокументРегистрация.ТранспортноеСредство, """"))
		|		ИНАЧЕ ""Композитная проба""
		|	КОНЕЦ КАК ТранспортноеСредствоПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ДокументРегистрация.ОтправительПолучатель, """")) КАК КонтрагентПредставление,
		|	// Добавлено поле станции отправления для вывода на этикетку композитной пробы (исправлено: из транспортного документа)
		|	ЕСТЬNULL(СтанцияОтправления.НаименованиеПолное, """") КАК СтанцияОтправленияНаименование,
		|	ДокументФормированиеНомераПробы.ТипПробы КАК ТипПробы,
		|	ДокументФормированиеНомераПробы.НомерПробы.Код КАК НомерПробы,
		|	ДокументФормированиеНомераПробы.Ссылка КАК ДокументФормированияНомераПробы,
		|	МАКСИМУМ(ЕСТЬNULL(НастройкиЭтикеток.КоличествоЭтикеток, 1)) КАК КоличествоЭкземпляров,
		|	ЕСТЬNULL(ДокументФормированиеНомераПробы.Дата, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПробы, 
		|	ЕСТЬNULL(НаправлениеНаРазгрузку.Склад, """") КАК Силос
		|ИЗ
		|	Документ.гкс_ФормированиеНомераПробы.СписокРегистраций КАК ТаблицаРегистрации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК ДокументРегистрация
		|		ПО ТаблицаРегистрации.ДокументРегистрации = ДокументРегистрация.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_НаправлениеНаРазгрузку КАК НаправлениеНаРазгрузку
		|		ПО (НаправлениеНаРазгрузку.ДокументРегистрации = ДокументРегистрация.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ФормированиеНомераПробы КАК ДокументФормированиеНомераПробы
		|		ПО ТаблицаРегистрации.Ссылка = ДокументФормированиеНомераПробы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_НастройкиПечатиФормированияПроб КАК НастройкиЭтикеток
		|		ПО (НастройкиЭтикеток.ТочкаМаршрута = ДокументРегистрация.ТочкаМаршрута)
		|		И (НастройкиЭтикеток.Номенклатура = ДокументРегистрация.Номенклатура)
		|		И (НастройкиЭтикеток.ТипПробы = ДокументФормированиеНомераПробы.ТипПробы)
		|		И (НастройкиЭтикеток.ВидПеревозки = ДокументРегистрация.ВидПеревозки)
		|		// Добавлено соединение с регистром связи регистрации и транспортного документа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СвязьРегистрацииИТранспортногоДокумента КАК СвязьРегистрацииИТранспортногоДокумента
		|		ПО ДокументРегистрация.Ссылка = СвязьРегистрацииИТранспортногоДокумента.ДокументРегистрации
		|		// Добавлено соединение с транспортным документом для получения станции отправления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ТранспортныйДокумент КАК ДокументТранспортный
		|		ПО СвязьРегистрацииИТранспортногоДокумента.ТранспортныйДокумент = ДокументТранспортный.Ссылка
		|		// Добавлено соединение с пунктом погрузки для получения станции отправления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_ТочкиМаршрута КАК ПогрузкиПункт
		|		ПО ДокументТранспортный.ПунктПогрузки = ПогрузкиПункт.Ссылка
		|		// Добавлено соединение с классификатором станций ЖД для получения наименования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_КлассификаторСтанцийЖД КАК СтанцияОтправления
		|		ПО ПогрузкиПункт.КодСтанцииЖД = СтанцияОтправления.Ссылка
		
		|ГДЕ
		|	ТаблицаРегистрации.Ссылка В(&СсылкиНаДокументыНомераПроб)
		|	И ТаблицаРегистрации.ДокументРегистрации В(&ДокументыРегистрации)
		|СГРУППИРОВАТЬ ПО
		|	ДокументФормированиеНомераПробы.Ссылка,
		|	ДокументФормированиеНомераПробы.ТипПробы,
		|	ДокументФормированиеНомераПробы.НомерПробы.Код,
		|	ЕСТЬNULL(НаправлениеНаРазгрузку.Склад, """"),
		|	ВЫБОР
		|		КОГДА ДокументФормированиеНомераПробы.ТипПробы = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыПроб.Единичная)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ДокументРегистрация.ТранспортноеСредство, """"))
		|		ИНАЧЕ ""Композитная проба""
		|	КОНЕЦ,
		|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ДокументРегистрация.ОтправительПолучатель, """")),
		|	// Гкс+[GKSTCPLK-1486] Терлецкий АВ 25.06.2025 добавлено поле станции отправления в группировку (исправлено: из транспортного документа)
		|	ЕСТЬNULL(СтанцияОтправления.НаименованиеПолное, """")";	
	Возврат ТекстЗапроса;

	
КонецФункции

Функция ТекстЗапросаТаблицаСостояниеРегистрации(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "гкс_СостоянияРегистрации";
	
	Если НЕ гкс_ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ФормированиеНомераПробы.Дата КАК Период,
	|	ФормированиеНомераПробы.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ФормированиеНомераПробы.Ссылка КАК Регистратор,
	|	ФормированиеНомераПробыТЧ.ДокументРегистрации КАК ДокументРегистрации,
	|	&Пользователь КАК Пользователь,
	|	Регистрация.ТранспортноеСредство КАК ТранспортноеСредство,
	|	ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияРегистрации.ВзятыПробы) КАК Состояние,
	|	Регистрация.ТипРегистрации КАК ТипРегистрации,
	|	Регистрация.ВидПеревозки КАК ВидПеревозки,
	|	ФормированиеНомераПробы.МестнаяДата КАК МестнаяДата
	|ИЗ
	|	Документ.гкс_ФормированиеНомераПробы.СписокРегистраций КАК ФормированиеНомераПробыТЧ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ФормированиеНомераПробы КАК ФормированиеНомераПробы
	|		ПО ФормированиеНомераПробыТЧ.Ссылка = ФормированиеНомераПробы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК Регистрация
	|		ПО ФормированиеНомераПробыТЧ.ДокументРегистрации = Регистрация.Ссылка
	|ГДЕ
	|	ФормированиеНомераПробыТЧ.Ссылка = &Ссылка
	|	И ФормированиеНомераПробыТЧ.ДокументРегистрации ССЫЛКА Документ.гкс_РегистрацияНаПЛК"
	;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	 
КонецФункции

Функция ТекстЗапросаТаблицагкс_КомпозитныеПробы(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "гкс_КомпозитныеПробы";
	
	Если НЕ гкс_ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистрацияНаПЛК.ТочкаМаршрута КАК ТочкаМаршрута,
	|	РегистрацияНаПЛК.ВидПеревозки КАК ВидПеревозки,
	|	ФормированиеНомераПробы.ПроизводственныеСуткиРегистрации КАК ПроизводственныеСуткиРегистрации,
	|	ФормированиеНомераПробы.Ссылка КАК КомпозитнаяПроба,
	|	ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации КАК ДокументРегистрации
	|ИЗ
	|	Документ.гкс_ФормированиеНомераПробы.СписокРегистраций КАК ФормированиеНомераПробыСписокРегистраций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ФормированиеНомераПробы КАК ФормированиеНомераПробы
	|		ПО ФормированиеНомераПробыСписокРегистраций.Ссылка = ФормированиеНомераПробы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ПО ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации = РегистрацияНаПЛК.Ссылка
	|ГДЕ
	|	ФормированиеНомераПробыСписокРегистраций.Ссылка = &Ссылка
	|	И ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации ССЫЛКА Документ.гкс_РегистрацияНаПЛК";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти 

#КонецОбласти

#КонецЕсли
