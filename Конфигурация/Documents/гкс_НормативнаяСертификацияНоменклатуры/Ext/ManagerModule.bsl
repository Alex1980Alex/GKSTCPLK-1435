#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("НормативнаяСертификацияНоменклатуры");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = гкс_ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если НЕ ДопПараметры.ПолучитьТекстыЗапроса Тогда
		
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		ТекстЗапросаТаблицаЦБТ_РезультатыНормативнойСертификацииНоменклатуры(Запрос, ТекстыЗапроса, Регистры);
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат гкс_ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ТочкаМаршрута)
	|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//  КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//  Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
КонецПроцедуры

// Для использования в процедуре ДобавитьКомандыСозданияНаОсновании других модулей менеджеров объектов.
// Добавляет в список команд создания на основании этот объект.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - описание добавленной команды.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.гкс_НормативнаяСертификацияНоменклатуры) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.гкс_НормативнаяСертификацияНоменклатуры.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = 
			гкс_ОбщегоНазначенияПЛК.ПредставлениеОбъекта(Метаданные.Документы.гкс_НормативнаяСертификацияНоменклатуры);
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.гкс_НормативнаяСертификацияНоменклатуры.ПолноеИмя();
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
	
	КонецЕсли;
	
	Возврат Неопределено; 
	
КонецФункции

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
 
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	Возврат ИсточникиДанных;
	
КонецФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЦБТ_РезультатыНормативнойСертификацииНоменклатуры(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "гкс_РезультатыНормативнойСертификацииНоменклатуры";
	
	Если НЕ гкс_ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЦБТ_НормативнаяСертификацияНоменклатуры.Дата КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЦБТ_НормативнаяСертификацияНоменклатурыАнализы.ПоказательАнализа КАК ПоказательАнализа,
	|	ЦБТ_НормативнаяСертификацияНоменклатурыАнализы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦБТ_НормативнаяСертификацияНоменклатурыАнализы.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|	ЦБТ_НормативнаяСертификацияНоменклатурыАнализы.МаксЗначениеПоказателя КАК МаксимальноеЗначение,
	|	ЦБТ_НормативнаяСертификацияНоменклатурыАнализы.Базис КАК Базис,
	|	ЦБТ_НормативнаяСертификацияНоменклатуры.Организация КАК Организация,
	|	ЦБТ_НормативнаяСертификацияНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦБТ_НормативнаяСертификацияНоменклатуры.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ЦБТ_НормативнаяСертификацияНоменклатуры.ГОСТ КАК ГОСТ,
	|	ВЫБОР
	|		КОГДА ЦБТ_НормативнаяСертификацияНоменклатуры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(2099, 12, 31)
	|		ИНАЧЕ ЦБТ_НормативнаяСертификацияНоменклатуры.ДатаОкончания
	|	КОНЕЦ КАК ПериодПо,
	|	ЦБТ_НормативнаяСертификацияНоменклатуры.гкс_НазначениеИспользованияКачества КАК Гкс_НазначениеИспользованияКачества,
	|	ЦБТ_НормативнаяСертификацияНоменклатуры.гкс_ВидПеревозки КАК Гкс_ВидПеревозки,
	|	ЦБТ_НормативнаяСертификацияНоменклатуры.Дата КАК ПериодС
	|ИЗ
	|	Документ.гкс_НормативнаяСертификацияНоменклатуры.Анализы КАК ЦБТ_НормативнаяСертификацияНоменклатурыАнализы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_НормативнаяСертификацияНоменклатуры КАК ЦБТ_НормативнаяСертификацияНоменклатуры
	|		ПО ЦБТ_НормативнаяСертификацияНоменклатурыАнализы.Ссылка = ЦБТ_НормативнаяСертификацияНоменклатуры.Ссылка
	|ГДЕ
	|	ЦБТ_НормативнаяСертификацияНоменклатурыАнализы.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти


#Область ОбновлениеИнформационнойБазы

// Заполняет точку маршрута в документах нормативной сертификации из константы базы
// при условии, что поле не заполнено. Режим выполнения: монопольный.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ЗаполнитьТочкуМаршрутаВНормативнойСертификации(Параметры = Неопределено) Экспорт
	
	СобытиеЖурнала = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
	ТочкаМаршрутаБазы = Константы.гкс_ТочкаМаршрутаБазы.Получить();
	
	Если НЕ ЗначениеЗаполнено(ТочкаМаршрутаБазы) Тогда
		ЗаписьЖурналаРегистрации(
			СобытиеЖурнала,
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Документы.гкс_НормативнаяСертификацияНоменклатуры,
			,
			НСтр("ru = 'Константа гкс_ТочкаМаршрутаБазы не заполнена. Обновление не выполнено.'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НормативнаяСертификация.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.гкс_НормативнаяСертификацияНоменклатуры КАК НормативнаяСертификация
		|ГДЕ
		|	НормативнаяСертификация.Проведен";
	
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.ТочкаМаршрута) Тогда
				ДокументОбъект.ТочкаМаршрута = ТочкаМаршрутаБазы;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
				
			ИнфоОбОшибке = ИнформацияОбОшибке();
			ПодробноеПредставление = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнфоОбОшибке);
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось обработать документ нормативной сертификации %1 по причине: %2'"),
					Выборка.Ссылка, ПодробноеПредставление);
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурнала,
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.гкс_НормативнаяСертификацияНоменклатуры,
				Выборка.Ссылка,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьТочкуМаршрутаВНормативнойСертификации завершена. 
					|Обработано: %1, с ошибками: %2'"),
				ОбъектовОбработано,
				ПроблемныхОбъектов);
		ЗаписьЖурналаРегистрации(
			СобытиеЖурнала,
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Документы.гкс_НормативнаяСертификацияНоменклатуры,
			,
			ТекстСообщения);
	Иначе
		
		ТекстСообщенияУспех = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьТочкуМаршрутаВНормативнойСертификации успешно завершена. 
					 |Обработано документов: %1'"), ОбъектовОбработано);		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурнала, УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.гкс_НормативнаяСертификацияНоменклатуры, , ТекстСообщенияУспех);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#КонецОбласти

#КонецЕсли