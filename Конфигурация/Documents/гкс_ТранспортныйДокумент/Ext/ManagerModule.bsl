#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	Если гкс_УчетВагоновСРПВ.ИспользуетсяИнтеграцияСРПВ() Тогда
		МеханизмыДокумента.Добавить("ЖДНакладныеВагона");
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт

	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = гкс_ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
		
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		// Создадим запрос инициализации движений		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		// Сформируем текст запроса
		Если гкс_УчетВагоновСРПВ.ИспользуетсяИнтеграцияСРПВ() Тогда
			ТекстЗапросаЖДНакладныеВагона(ТекстыЗапроса, Регистры);
		КонецЕсли;
	КонецЕсли;
	
	// Получим таблицы для движений	
	Возврат гкс_ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);

КонецФункции

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

#КонецОбласти
		 
#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//  КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//  Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

// Возвращает транспортный документ для регистрации на ПЛК
//
// Параметры:
//  ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК - регистрация для которой определяется транспортный документ;
// 
// Возвращаемое значение:
//  Результат - ДокументСсылка.гкс_ТранспортныйДокумент - ссылка на транспортный документ
//
Функция СформироватьТранспортныйДокументПоНеобходимости(ДокументРегистрации) Экспорт
	
	МодульЛокализации = гкс_ЛокализацияСервер.МодульЛокализации("гкс_ТранспортныйДокумент");
	
	Если ТипЗнч(МодульЛокализации) = Тип("ОбщийМодуль") Тогда
		Возврат МодульЛокализации.
			СформироватьТранспортныйДокументПоНеобходимости(ДокументРегистрации);
	Иначе		
		Возврат Неопределено;	
	КонецЕсли;	
	
КонецФункции

// Создает транспортный документ
//
// Параметры:
//  ДанныеЗаполнения - Структура - данные для заполнения документа;
//
//  Проводить	- Булево - да,  если нужно проводить созданый документ
// 
// Возвращаемое значение:
//  Результат - ДокументСсылка.гкс_ТранспортныйДокумент - ссылка на созданый документ или пустая ссылка, если не удалось создать
//
Функция СоздатьТранспортныйДокумент(ДанныеЗаполнения, Проводить = Истина) Экспорт
	
	НовыйДокумент = СоздатьДокумент();
	НовыйДокумент.Заполнить(ДанныеЗаполнения);
	
	Отказ = Ложь;
	гкс_ОбщегоНазначения.СохранитьДокумент(НовыйДокумент, Отказ, Проводить);
	
	Если Не Отказ Тогда
		Результат = НовыйДокумент.Ссылка;
	Иначе
		Результат = ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции	

// Возвращает массив транспортных документов по параметрам подбора
//
// Параметры:
//  ПараметрыПодбора - Структура - состоит из:
//    * ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК
//    * Номенклатура - СправочникСсылка.Номенклатура -
//    * ТранспортноеСредство - СправочникСсылка.ТранспортныеСредства -
//    * ДатаОтбора - Дата -
//    * Контрагент - СправочникСсылка.Контрагенты - Для приёмки Грузоотправитель, для отправки Грузополучатель
//    * ЭтоАвтоПриемка - Булево -
//
// Возвращаемое значение:
//  Массив из ДокументСсылка.гкс_ТранспортныйДокумент - массив подобранных документов
//
Функция ПодборкаТранспортныхДокументовДляАвтозаполнения(ПараметрыПодбора) Экспорт
	
	Результат = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапросаТранспортныйДокументПоДаннымРегистрацииДляАвтозаполнения();
	
	Запрос.УстановитьПараметр("ДокументРегистрации", ПараметрыПодбора.ДокументРегистрации);
	Запрос.УстановитьПараметр("Номенклатура", ПараметрыПодбора.Номенклатура);
	Запрос.УстановитьПараметр("ТранспортноеСредство", ПараметрыПодбора.ТранспортноеСредство);
	Запрос.УстановитьПараметр("ДатаОтбора", ПараметрыПодбора.ДатаОтбора);
	
	Запрос.УстановитьПараметр("ПриращениеНачала",
		гкс_ПриемкаНаПЛКСервер.ПриращениеНачалаПодбораТранспортныхДокументов());
	
	Запрос.УстановитьПараметр("ТТН", ПараметрыПодбора.ТТН);
	Запрос.УстановитьПараметр("Отправитель", ПараметрыПодбора.Отправитель);
	Если ПараметрыПодбора.ЭтоАвтоПриемка Тогда
		Запрос.УстановитьПараметр("ИспользоватьОтборПоТТН", ЗначениеЗаполнено(ПараметрыПодбора.ТТН));
		Запрос.УстановитьПараметр("ИспользоватьОтборПоОтправителю", ЗначениеЗаполнено(ПараметрыПодбора.Отправитель));
	Иначе
		Запрос.УстановитьПараметр("ИспользоватьОтборПоТТН", Ложь);
		Запрос.УстановитьПараметр("ИспользоватьОтборПоОтправителю", Ложь);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ТранспортныйДокумент");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает транспортный документ по регистрации.
// 
// Параметры:
//  ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК - 
// 
// Возвращаемое значение:
//  ДокументСсылка.гкс_ТранспортныйДокумент - транспортный документ для регистрации 
//
Функция НайтиПоРегистрации(ДокументРегистрации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеОТранспортномДокументе = РегистрыСведений.гкс_СвязьРегистрацииИТранспортногоДокумента
		.ПолучитьСвязьСТранспортнымДокументом(ДокументРегистрации);

	Возврат ДанныеОТранспортномДокументе.ТранспортныйДокумент;
	
КонецФункции

// Функция возвращает ссылку на Транспортный документ по переданному значению Номера документа
// 
// Параметры:
//  НомерТН - Строка - номер документа
// 
// Возвращаемое значение:
//  ДокументСсылка.гкс_ТранспортныйДокумент, Неопределено - Транспортный документ по номеру ЖДН
Функция ТранспортныйДокументПоНомеруЖДН(НомерТН) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТранспортныйДокумент.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.гкс_ТранспортныйДокумент КАК ТранспортныйДокумент
	|ГДЕ
	|	ТранспортныйДокумент.НомерДокумента = &НомерДокумента";
	
	Запрос.УстановитьПараметр("НомерДокумента", НомерТН);
	
	РезультатЗапроса = Запрос.Выполнить();        	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();  	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получить данные по весу.
// 
// Параметры:
//  ПараметрыПолучения -Структура:
//  	* ТранспортныйДокумент - ДокументСсылка.гкс_ТранспортныйДокумент
//  	* ТранспортноеСредство - СправочникСсылка.ТранспортныеСредства
// 
// Возвращаемое значение:
// Структура - Структура ("ВесНетто, ВесБрутто, ВесТары, Водитель, ЕдиницаИзмеренияВеса") 
//  
Функция ПолучитьДанныеПоВесу(ПараметрыПолучения) Экспорт
	
	Результат = ИнициализироватьСтруктуруДанныхПоВесу();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ТранспортныйДокументТранспортныеСредства.ВесНетто) КАК ВесНетто,
	|	СУММА(ТранспортныйДокументТранспортныеСредства.ВесБрутто) КАК ВесБрутто,
	|	СУММА(ТранспортныйДокументТранспортныеСредства.ВесТары) КАК ВесТары,
	|	ТранспортныйДокументТранспортныеСредства.ФИОВодителя КАК Водитель,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ТранспортныйДокумент.ЕдиницаИзмеренияВеса = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ЕдиницаТранспортногоДокумента.Ссылка
	|		ИНАЧЕ ТранспортныйДокумент.ЕдиницаИзмеренияВеса
	|	КОНЕЦ) КАК ЕдиницаИзмеренияВеса
	|ИЗ
	|	Документ.гкс_ТранспортныйДокумент КАК ТранспортныйДокумент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ТранспортныйДокумент.ТранспортныеСредства КАК
	|			ТранспортныйДокументТранспортныеСредства
	|		ПО ТранспортныйДокумент.Ссылка = ТранспортныйДокументТранспортныеСредства.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницаТранспортногоДокумента
	|		ПО ЕдиницаТранспортногоДокумента.Ссылка = &ЕдиницаТранспортногоДокумента
	|ГДЕ
	|	ТранспортныйДокументТранспортныеСредства.ТранспортноеСредство = &ТранспортноеСредство
	|	И ТранспортныйДокументТранспортныеСредства.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ТранспортныйДокументТранспортныеСредства.ФИОВодителя");
	
	Запрос.УстановитьПараметр("Ссылка", ПараметрыПолучения.ТранспортныйДокумент);
	Запрос.УстановитьПараметр("ТранспортноеСредство", ПараметрыПолучения.ТранспортноеСредство);
	Запрос.УстановитьПараметр("ЕдиницаТранспортногоДокумента", 
		гкс_ПриемкаТранспортаВызовСервера.ПолучитьЕдиницуИзмеренияТранспортногоДокумента());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда	
		ЗаполнитьЗначенияСвойств(Результат, Выборка); 	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает реквизиты объекта, которые разрешается редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Ответственный");
	Результат.Добавить("Комментарий");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.ВидПеревозки КАК ВидПеревозки,
	|	ДанныеДокумента.ДатаПогрузки КАК ДатаПогрузки,
	|	ДанныеДокумента.ПунктРазгрузки КАК ПунктРазгрузки
	|ИЗ
	|	Документ.гкс_ТранспортныйДокумент КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры

#Область ТекстыЗапросов

Функция ТекстЗапросаТранспортныйДокументПоДаннымРегистрацииДляАвтозаполнения()
	
	Возврат
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТранспортныйДокументТранспортныеСредства.Ссылка КАК ТранспортныйДокумент,
	|	ТранспортныйДокументТранспортныеСредства.ТранспортноеСредство КАК ТранспортноеСредство
	|ПОМЕСТИТЬ ВТ_ДанныеТранспортногоДокумента
	|ИЗ
	|	Документ.гкс_ТранспортныйДокумент.ТранспортныеСредства КАК ТранспортныйДокументТранспортныеСредства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ТранспортныйДокумент КАК ТранспортныйДокумент
	|		ПО ТранспортныйДокументТранспортныеСредства.Ссылка = ТранспортныйДокумент.Ссылка
	|ГДЕ
	|	ТранспортныйДокументТранспортныеСредства.Номенклатура = &Номенклатура
	|	И ТранспортныйДокументТранспортныеСредства.ТранспортноеСредство = &ТранспортноеСредство
	|	И ТранспортныйДокумент.Дата >= ДОБАВИТЬКДАТЕ(&ДатаОтбора, ДЕНЬ, &ПриращениеНачала)
	|	И ВЫБОР
	|			КОГДА &ИспользоватьОтборПоТТН
	|				ТОГДА ТранспортныйДокумент.НомерДокумента = &ТТН
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ИспользоватьОтборПоОтправителю
	|				ТОГДА ТранспортныйДокумент.Отправитель = &Отправитель
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДанныеТранспортногоДокумента.ТранспортныйДокумент КАК ТранспортныйДокумент
	|ПОМЕСТИТЬ ВТ_НеСвязанныеТранспортныеДокументы
	|ИЗ
	|	ВТ_ДанныеТранспортногоДокумента КАК ВТ_ДанныеТранспортногоДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СвязьРегистрацииИТранспортногоДокумента КАК СвязьРегистрацииИТранспортногоДокумента
	|		ПО ВТ_ДанныеТранспортногоДокумента.ТранспортныйДокумент = СвязьРегистрацииИТранспортногоДокумента.ТранспортныйДокумент
	|			И ВТ_ДанныеТранспортногоДокумента.ТранспортноеСредство = СвязьРегистрацииИТранспортногоДокумента.ТранспортноеСредство
	|ГДЕ
	|	СвязьРегистрацииИТранспортногоДокумента.ДокументРегистрации ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДанныеТранспортногоДокумента.ТранспортныйДокумент КАК ТранспортныйДокумент
	|ПОМЕСТИТЬ ВТ_ТекущийСвязанныйТранспортныйДокумент
	|ИЗ
	|	ВТ_ДанныеТранспортногоДокумента КАК ВТ_ДанныеТранспортногоДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СвязьРегистрацииИТранспортногоДокумента КАК СвязьРегистрацииИТранспортногоДокумента
	|		ПО (СвязьРегистрацииИТранспортногоДокумента.ДокументРегистрации = &ДокументРегистрации)
	|			И ВТ_ДанныеТранспортногоДокумента.ТранспортныйДокумент = СвязьРегистрацииИТранспортногоДокумента.ТранспортныйДокумент
	|			И ВТ_ДанныеТранспортногоДокумента.ТранспортноеСредство = СвязьРегистрацииИТранспортногоДокумента.ТранспортноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	ВТ_ТекущийСвязанныйТранспортныйДокумент.ТранспортныйДокумент КАК ТранспортныйДокумент
	|ИЗ
	|	ВТ_ТекущийСвязанныйТранспортныйДокумент КАК ВТ_ТекущийСвязанныйТранспортныйДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ВТ_НеСвязанныеТранспортныеДокументы.ТранспортныйДокумент
	|ИЗ
	|	ВТ_НеСвязанныеТранспортныеДокументы КАК ВТ_НеСвязанныеТранспортныеДокументы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
КонецФункции

Функция ТекстЗапросаЖДНакладныеВагона(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "гкс_ЖДНакладныеВагона";
	
	Если Не гкс_ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СРПВСписокПунктовРазгрузки.ПунктРазгрузки КАК ПунктРазгрузки
	|ПОМЕСТИТЬ ВТ_ПунктыРазгрузки
	|ИЗ
	|	РегистрСведений.гкс_СРПВСписокПунктовРазгрузки КАК СРПВСписокПунктовРазгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	&Ссылка КАК ЖДНакладная,
	|	ВагонныйСоставЖДНакладной.ТранспортноеСредство КАК Вагон,
	|	ВагонныйСоставЖДНакладной.Номенклатура КАК Номенклатура,
	|	&ДатаПогрузки КАК ДатаПогрузки,
	|	&ПунктРазгрузки КАК ПунктРазгрузки,
	|	ТранспортныеСредства.НомерТранспортногоСредства КАК НомерВагона
	|ИЗ
	|	Документ.гкс_ТранспортныйДокумент.ТранспортныеСредства КАК ВагонныйСоставЖДНакладной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|		ПО ВагонныйСоставЖДНакладной.ТранспортноеСредство = ТранспортныеСредства.Ссылка,
	|	ВТ_ПунктыРазгрузки КАК ВТ_ПунктыРазгрузки
	|ГДЕ
	|	ВагонныйСоставЖДНакладной.Ссылка = &Ссылка
	|	И &ВидПеревозки = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт)
	|	И &ПунктРазгрузки В (ВТ_ПунктыРазгрузки.ПунктРазгрузки)";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Функция ИнициализироватьСтруктуруДанныхПоВесу()
	
	Результат = Новый Структура;
	Результат.Вставить("ВесНетто", 0);
	Результат.Вставить("ВесБрутто", 0); 
	Результат.Вставить("ВесТары", 0);
	Результат.Вставить("Водитель"); 
	Результат.Вставить("ЕдиницаИзмеренияВеса");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
