#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет данные транспортного документа по процессу приемки автомобилями:
//			данными фактических весов, дату разгрузки и номер документа поставщика
//
// Параметры:
//  ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК - документ регистрации транспорта
//
Процедура ПерезаполнитьДокументПослеПриемкиАвто(ДокументРегистрации) Экспорт
	
	ДанныеРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРегистрации,
		"ВидПеревозки, ТипРегистрации, НомерДокументаПоставщика, ВесНетто, ВесТары, ВесБрутто, ЕдиницаИзмеренияВеса");
	
	Если ДанныеРегистрации.ВидПеревозки <> Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль
		Или ДанныеРегистрации.ТипРегистрации <> Перечисления.гкс_ТипРегистрации.Приемка Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиницаИзмеренияВеса = гкс_ПриемкаТранспортаВызовСервера.ПолучитьЕдиницуИзмеренияТранспортногоДокумента();
	гкс_ПриемкаТранспорта.ПересчитатьВесВЕдиницахДокумента(ДанныеРегистрации, ЕдиницаИзмеренияВеса);
	
	ДанныеПоВесу = Документы.гкс_Взвешивание.ПолучитьДанныеФактическогоВесаПоРегистрации(ДокументРегистрации);
	ДатаРазгрузки = ДанныеПоВесу.ДатаРазгрузки;
	
	Если ТранспортныеСредства.Количество() > 0 Тогда
		ПерваяСтрока = ТранспортныеСредства[0];
		ЗаполнитьЗначенияСвойств(ПерваяСтрока, ДанныеРегистрации);
		ПерваяСтрока.ДатаРазгрузки = ДатаРазгрузки;
	КонецЕсли;
		
	ЗаполнитьРеквизитыДокументаПоставщика(ДанныеРегистрации.НомерДокументаПоставщика);
	
КонецПроцедуры

// Заполняет данные транспортного документа по процессу отгрузки автомобилями:
//			номер документа поставщика и водителя
//
// Параметры:
//  ДокументРегистрации - Документ.гкс_РегистрацияНаПЛК - документ регистрации транспорта
// 
Процедура ПерезаполнитьДокументПослеОтгрузкиАвто(ДокументРегистрации) Экспорт
	
	ДанныеРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРегистрации,
		"ВидПеревозки, ТипРегистрации, НомерДокументаПоставщика, Водитель, Номенклатура, ТранспортноеСредство");
	
	Если ДанныеРегистрации.ВидПеревозки <> Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль
		Или ДанныеРегистрации.ТипРегистрации <> Перечисления.гкс_ТипРегистрации.Отгрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыДокументаПоставщика(ДанныеРегистрации.НомерДокументаПоставщика);
	
	Если ЗначениеЗаполнено(ДанныеРегистрации.Водитель) Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ТранспортноеСредство", ДанныеРегистрации.ТранспортноеСредство);
		ПараметрыОтбора.Вставить("Номенклатура", ДанныеРегистрации.Номенклатура);
		
		МассивСтрок = ТранспортныеСредства.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок.Получить(МассивСтрок.ВГраница()).ФИОВодителя = ДокументРегистрации.Водитель;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные транспортного документа по процессу приемки ЖД транспортом невнтуригрупповые:
//			данными весов по документу, дату разгрузки и номер документа поставщика
//
// Параметры:
//  ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК - документ регистрации транспорта
//  РеквизитыРегистрации - Структура
//
Процедура ПерезаполнитьДокументПослеПриемкиЖД(ДокументРегистрации) Экспорт
	
	РеквизитыРегистрации = Новый Структура;
	РеквизитыРегистрации.Вставить("ВидПеревозки");
	РеквизитыРегистрации.Вставить("ТипРегистрации");
	
	ДанныеРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРегистрации, РеквизитыРегистрации);
	
	Если ДанныеРегистрации.ВидПеревозки <> Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт
		ИЛИ ДанныеРегистрации.ТипРегистрации <> Перечисления.гкс_ТипРегистрации.Приемка Тогда
		Возврат;	
	КонецЕсли;

	ЗаполнитьДокументНаОснованииРегистрацииНаПЛК(ДокументРегистрации);
		
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.Свойство("ТранспортныеСредства") 
			И ТипЗнч(ДанныеЗаполнения.ТранспортныеСредства) = Тип("ТаблицаЗначений") Тогда
			ТранспортныеСредства.Загрузить(ДанныеЗаполнения.ТранспортныеСредства);
		КонецЕсли;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.гкс_РегистрацияНаПЛК") Тогда
		ЗаполнитьДокументНаОснованииРегистрацииНаПЛК(ДанныеЗаполнения);
		
	КонецЕсли;
	
	ЗаполнитьЕдиницуИзмерения();
	
	ЭтоДокументПЛК = Истина;
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЭтоЖДПеревозка(ВидПеревозки) Тогда 
		
		ПроверяемыеРеквизиты.Добавить("ПунктРазгрузки");
		ПроверяемыеРеквизиты.Добавить("ПунктПогрузки");
		
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ПунктРазгрузки);
		МассивСсылок.Добавить(ПунктПогрузки);
		
		ЗначенияКодовСтанций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСсылок, "КодСтанцииЖД");
		Если Не ЗначениеЗаполнено(ЗначенияКодовСтанций[ПунктПогрузки]) 
			 Или Не ЗначениеЗаполнено(ЗначенияКодовСтанций[ПунктРазгрузки]) Тогда

			ТекстСообщения = НСтр("ru = 'У пункта (погрузки или разгрузки) не заполнена станция.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЕдиницуИзмерения();

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	гкс_ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	Если ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт Тогда
		ТаблицаТС = ТранспортныеСредства.Выгрузить();
		КолонкиГруппировок = "Номенклатура, ТранспортноеСредство, ДатаПогрузки, ДатаРазгрузки, ФИОВодителя";
		ТаблицаТС.Свернуть(КолонкиГруппировок, "ВесТары, ВесБрутто, ВесНетто");
		ТранспортныеСредства.Загрузить(ТаблицаТС);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТранспортныеСредства Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ИдентификаторСтроки) Тогда
			ТекСтрока.ИдентификаторСтроки	= Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ДопПараметры = гкс_ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	ИнициализироватьДопПараметры(ДопПараметры);
	
	гкс_ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ, ДопПараметры);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	гкс_ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтоДокументПЛК = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение     

Функция ДанныеДокументНаОснованииРегистрацииНаПЛК(Знач ДокументОснование)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.Текст = ТекстЗапросаЗаполнитьДокументНаОснованииРегистрацииНаПЛК();
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий(); 
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

Процедура ЗаполнитьДокументНаОснованииРегистрацииНаПЛК(Знач ДокументОснование)
	
	ДанныеРегистрации = ДанныеДокументНаОснованииРегистрацииНаПЛК(ДокументОснование);
	
	// Заполнение шапки 
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеРегистрации);
	
	Организация = ?(ДанныеРегистрации.Внутригрупповой,
		ДанныеРегистрации.Собственник, ДанныеРегистрации.Организация);
				
	// Заполнение табличной части
	ПараметрыОтбора = Новый Структура("ТранспортноеСредство", ДанныеРегистрации.ТранспортноеСредство);
	НайденныеСтроки = ТранспортныеСредства.НайтиСтроки(ПараметрыОтбора);	
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаТабличнойЧасти = НайденныеСтроки.Получить(НайденныеСтроки.ВГраница());
	Иначе
		СтрокаТабличнойЧасти = ТранспортныеСредства.Добавить();
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеРегистрации);  
		
	ДанныеПоВесу = Документы.гкс_Взвешивание.ПолучитьДанныеФактическогоВесаПоРегистрации(ДокументОснование);
	
	ЕдиницаИзмеренияВеса = гкс_ПриемкаТранспортаВызовСервера.ПолучитьЕдиницуИзмеренияТранспортногоДокумента();
	
	ДанныеПоВесуДокумент = Документы.гкс_Взвешивание.ИнициализироватьСтруктуруДанныхПоВесу();
	ЗаполнитьЗначенияСвойств(ДанныеПоВесуДокумент, ДанныеРегистрации);
	гкс_ПриемкаТранспорта.ПересчитатьВесВЕдиницахДокумента(ДанныеПоВесуДокумент, ЕдиницаИзмеренияВеса);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеПоВесуДокумент);
	
	ДатаРазгрузки = ДанныеПоВесу.ДатаРазгрузки;
	СтрокаТабличнойЧасти.ДатаРазгрузки = ДатаРазгрузки;
	
	Если ДанныеРегистрации.ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль
		И ДанныеРегистрации.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда
		
		Отправитель = ДанныеРегистрации.ОтправительПолучатель;
		
		Если ЗначениеЗаполнено(ДанныеРегистрации.ПунктПогрузки) Тогда
			ПунктПогрузки = ДанныеРегистрации.ПунктПогрузки;
		Иначе
			ПунктПогрузкиРазгрузки = Справочники.гкс_ТочкиМаршрута.ТочкаМаршрутаПоВладельцуСклада(Отправитель);
			Если ЗначениеЗаполнено(ПунктПогрузкиРазгрузки) Тогда
				ПунктПогрузки = ПунктПогрузкиРазгрузки;
			КонецЕсли;
		КонецЕсли;
				
		ПунктРазгрузки = ДанныеРегистрации.ТочкаМаршрутаБазы;
		Получатель = ДанныеРегистрации.ОрганизацияКонтрагентОрганизации;
		
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ИнициализироватьДопПараметры(ДопПараметры)
	ДопПараметры.ДополнительныеСвойства = Новый Структура;
КонецПроцедуры

Процедура ЗаполнитьЕдиницуИзмерения()
	
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
		ЕдиницаИзмеренияВеса = гкс_ПриемкаТранспортаВызовСервера.ПолучитьЕдиницуИзмеренияТранспортногоДокумента();			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьВесВЕдиницыДокумента(ДанныеПоВесу)
	
	ЗаполнитьЕдиницуИзмерения(); 
	гкс_ПриемкаТранспорта.ПересчитатьВесВЕдиницахДокумента(ДанныеПоВесу, ЕдиницаИзмеренияВеса);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументаПоставщика(НомерДокументаПоставщика)

	Если Не ЗначениеЗаполнено(НомерДокумента) И ЗначениеЗаполнено(НомерДокументаПоставщика) Тогда	
		НомерДокумента = НомерДокументаПоставщика;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапросаЗаполнитьДокументНаОснованииРегистрацииНаПЛК()
	
	Возврат
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрацияНаПЛК.ВидПеревозки КАК ВидПеревозки,
	|	РегистрацияНаПЛК.Номенклатура КАК Номенклатура,
	|	РегистрацияНаПЛК.ТранспортноеСредство КАК ТранспортноеСредство,
	|	РегистрацияНаПЛК.Организация КАК Организация,
	|	РегистрацияНаПЛК.Собственник КАК Собственник,
	|	РегистрацияНаПЛК.НомерДокументаПоставщика КАК НомерДокумента,
	|	РегистрацияНаПЛК.ДатаДокументаПоставщика КАК ДатаДокумента,
	|	РегистрацияНаПЛК.Дата КАК Дата,
	|	РегистрацияНаПЛК.Внутригрупповой КАК Внутригрупповой,
	|	РегистрацияНаПЛК.Водитель КАК ФИОВодителя,
	|	РегистрацияНаПЛК.ВесБрутто КАК ВесБрутто,
	|	РегистрацияНаПЛК.ВесНетто КАК ВесНетто,
	|	РегистрацияНаПЛК.ВесТары КАК ВесТары,
	|	РегистрацияНаПЛК.ЕдиницаИзмеренияВеса КАК ЕдиницаИзмеренияВеса,
	|	РегистрацияНаПЛК.ТипРегистрации КАК ТипРегистрации,
	|	РегистрацияНаПЛК.ОтправительПолучатель КАК ОтправительПолучатель,
	|	ЕСТЬNULL(Организации.КонтрагентОрганизации, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК
	|		ОрганизацияКонтрагентОрганизации,
	|	гкс_ТочкаМаршрутаБазы.Значение КАК ТочкаМаршрутаБазы,
	|	РегистрацияНаПЛК.ПунктПогрузки КАК ПунктПогрузки
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО РегистрацияНаПЛК.Организация = Организации.Ссылка,
	|	Константа.гкс_ТочкаМаршрутаБазы КАК гкс_ТочкаМаршрутаБазы
	|ГДЕ
	|	РегистрацияНаПЛК.Ссылка = &Ссылка";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
#КонецЕсли