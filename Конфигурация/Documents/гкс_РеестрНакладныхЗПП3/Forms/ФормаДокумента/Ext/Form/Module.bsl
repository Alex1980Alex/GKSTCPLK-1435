
#Область ИнициализацияПеременных

&НаКлиенте
Перем ИдентификаторЗамераПроведение;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ПолучитьСкидкиНадбавки();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		гкс_УправлениеДоступом.ОпределитьДоступностьВозможностьИзмененияДокументаПоРеестру(ЭтотОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
        ИдентификаторЗамераПроведение = 
		ОценкаПроизводительностиКлиент.ЗамерВремени("ПроведениеДокумента.Интерактивно.РеестрНакладныхЗПП3", 
		                                            Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи) 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АнализПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Анализ) И ЗначениеЗаполнено(Объект.Алгоритм) Тогда
		ОчиститьКачественныеПоказателиИУслуги();
		ЗаполнитьКачественныеПоказателиИУслугиНаСервере();
	Иначе
		ОчиститьКачественныеПоказателиИУслуги();
	КонецЕсли;
	
	ЗаполнитьДатуРеестра();
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Анализ) И ЗначениеЗаполнено(Объект.Алгоритм) Тогда
		ОчиститьКачественныеПоказателиИУслуги();
		ЗаполнитьКачественныеПоказателиИУслугиНаСервере();
	Иначе
		ОчиститьКачественныеПоказателиИУслуги();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНакладные

&НаКлиенте
Процедура НакладныеПослеУдаления(Элемент)
	
	НакладныеПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НакладныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// вручную добавлять нельзя
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура НакладныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Документ = Элемент.ТекущиеДанные.ДокументРегистрации;
	
	Если Поле.Имя = "НакладныеДокументРегистрации" 
		И НЕ Документ.Пустая() Тогда
		ПараметрыФормы = Новый Структура("Ключ", Документ);
		ОткрытьФорму("Документ.гкс_РегистрацияНаПЛК.Форма.ФормаДокумента", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКачественныеПоказатели

&НаКлиенте
Процедура КачественныеПоказателиПослеУдаления(Элемент)
	
	КачественныеПоказателиПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КачественныеПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// вручную добавлять нельзя
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура КачественныеПоказателиЗначениеПриИзменении(Элемент)	
	ТекущиеДанные = Элементы.КачественныеПоказатели.ТекущиеДанные;
	ПересчитатьТаблицуПоказателей(ТекущиеДанные.Показатель);
КонецПроцедуры

&НаКлиенте
Процедура КачественныеПоказателиБазисПриИзменении(Элемент)
	ТекущиеДанные = Элементы.КачественныеПоказатели.ТекущиеДанные;
	ПересчитатьТаблицуПоказателей(ТекущиеДанные.Показатель);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	ЦенаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипВесаПриИзменении(Элемент)
	
	ТипВесаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// вручную добавлять нельзя
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.КоличествоУслуги * ТекущиеДанные.СкидкаНадбавка;
	
	ТекущиеДанные.СуммаНДС = гкс_ОбщегоНазначенияПЛККлиентСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, 
		ТекущиеДанные.СтавкаНДС, Ложь);
		
	ТекущиеДанные.СуммаСНДС = ?(Объект.ЦенаВключаетНДС, 0, ТекущиеДанные.СуммаНДС) + ТекущиеДанные.Сумма;
	
	РассчитатьИтоговуюСуммуШапки();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	
	РассчитатьИтоговуюСуммуШапки();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиДобавлятьВСтоимостьПриИзменении(Элемент)
	
	РассчитатьИтоговуюСуммуШапки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьДанныеРегистраций(Команда)
	
	Если Объект.Накладные.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ОбновитьДанныеРегистрацийЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные о весах будут перезаполнены, продолжить?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеРегистрацийЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ОбновитьДанныеРегистрацийНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаСервере
Процедура ЗаполнитьДатуРеестра()
	
	Объект.Дата = гкс_ЛабораторияИКачество.ДатаРеестраНакладных(Объект.Анализ, Объект.Дата);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОчиститьКачественныеПоказателиИУслуги()
	
	Объект.КачественныеПоказатели.Очистить();
	Объект.Услуги.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКачественныеПоказателиИУслугиНаСервере()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	ОбъектЗначение.ЗаполнитьКачественныеПоказателиИУслуги();
	ЗначениеВРеквизитФормы(ОбъектЗначение, "Объект");

	ПолучитьСкидкиНадбавки();
	РассчитатьФизическийЗачетныйВес(Ложь, Истина);

КонецПроцедуры

&НаСервере
Процедура ПересчитатьТаблицуПоказателей(Показатель)
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	ОбъектЗначение.ПересчитатьТаблицуПоказателей(Показатель);
	ЗначениеВРеквизитФормы(ОбъектЗначение, "Объект");
	
	ПолучитьСкидкиНадбавки();
	РассчитатьСуммуШапки();
	РассчитатьФизическийЗачетныйВес(, Истина);
	
КонецПроцедуры	

&НаСервере
Процедура ТипВесаПриИзмененииНаСервере()
	
	РассчитатьФизическийЗачетныйВес(Ложь);
	ЦенаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЦенаПриИзмененииНаСервере()
	
	РассчитатьСуммуШапки();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуШапки()
	
	Количество = ?(Объект.ТипВеса = ПредопределенноеЗначение("Перечисление.гкс_ВидВесаНоменклатуры.ЗачетныйВес"),
		Объект.ЗачетныйВес, Объект.ФизическийВес);
		
	Объект.Сумма = Окр(Объект.Цена * Количество, 2, РежимОкругления.Окр15как20) + 
		Окр(Объект.Цена * СкидкаНадбавкаДенежная, 2, РежимОкругления.Окр15как20);
		
	РассчитатьИтоговуюСуммуШапки();	
		
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтоговуюСуммуШапки()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	
	ВременнаяТаблица = ОбъектЗначение.Услуги.Выгрузить(Новый Структура("ДобавлятьВСтоимость", Истина), 
		"СуммаНДС, СуммаСНДС");
	
	ДополнительнаяСуммаНДС = ВременнаяТаблица.Итог("СуммаНДС");	
	ДополнительнаяСуммаВсего = ВременнаяТаблица.Итог("СуммаСНДС");
	
	ОбъектЗначение.СуммаНДС = гкс_ОбщегоНазначенияПЛККлиентСервер.РассчитатьСуммуНДС(ОбъектЗначение.Сумма, 
		ОбъектЗначение.СтавкаНДС, Ложь);
		
	ОбъектЗначение.СуммаСНДС = ОбъектЗначение.Сумма + ОбъектЗначение.СуммаНДС;
	ОбъектЗначение.СуммаНДС = ОбъектЗначение.СуммаНДС + ДополнительнаяСуммаНДС;
	ОбъектЗначение.СуммаСНДС = ОбъектЗначение.СуммаСНДС + ДополнительнаяСуммаВсего;
	
	ЗначениеВРеквизитФормы(ОбъектЗначение, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура НакладныеПослеУдаленияНаСервере()
	
	РассчитатьФизическийЗачетныйВес();
	
КонецПроцедуры

&НаСервере
Процедура КачественныеПоказателиПослеУдаленияНаСервере()
	
	РассчитатьФизическийЗачетныйВес(Ложь);
	ПолучитьСкидкиНадбавки(, Ложь);
	РассчитатьСуммуШапки();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСкидкиНадбавки(Натуральная = Истина, Денежная = Истина)
	
	Если Натуральная Тогда
		СкидкаНадбавкаНатуральная = Объект.КачественныеПоказатели.Выгрузить(
			Новый Структура("Натуральная", Истина), "СкидкаНадбавка").Итог("СкидкаНадбавка");
	КонецЕсли;
		
	Если Денежная Тогда
		СкидкаНадбавкаДенежная = Объект.КачественныеПоказатели.Выгрузить(
			Новый Структура("Денежная", Истина), "СкидкаНадбавка").Итог("СкидкаНадбавка");	
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура РассчитатьФизическийЗачетныйВес(РассчитыватьФизический = Истина, РассчитыватьЗачетный = Истина)
	
	Если РассчитыватьФизический Тогда
		Объект.ФизическийВес = Объект.Накладные.Итог("Нетто");
	КонецЕсли; 
	
	Если РассчитыватьЗачетный Тогда
		ЧислоПроцент = 100;
		ЗнаковОкругления = 3;
		Объект.ЗачетныйВес = Объект.ФизическийВес + Окр(Объект.ФизическийВес  * 
			СкидкаНадбавкаНатуральная / ЧислоПроцент, ЗнаковОкругления, РежимОкругления.Окр15как20);
			
		РассчитатьКоличествоУслуги();
		РассчитатьИтоговуюСуммуШапки();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоличествоУслуги()
	
	Для Каждого Строка Из Объект.Услуги Цикл
		Строка.КоличествоУслуги = ?(Строка.ТипВеса = Перечисления.гкс_ВидВесаНоменклатуры.ЗачетныйВес, 
			Объект.ЗачетныйВес, Объект.ФизическийВес) * Строка.СкидкаНадбавка;
			
		Если Строка.Цена <> 0 Тогда
			Строка.Сумма = Строка.Цена * Строка.КоличествоУслуги;
			Строка.СуммаНДС = гкс_ОбщегоНазначенияПЛККлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Строка.СтавкаНДС, Ложь);
			Строка.СуммаСНДС = ?(Объект.ЦенаВключаетНДС, 0, Строка.СуммаНДС) + Строка.Сумма;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеРегистрацийНаСервере()
	
    ДокументыРегистрации = Объект.Накладные.Выгрузить(,"ДокументРегистрации");
	Объект.Накладные.Очистить();

	АдресХранилища = гкс_ПриемкаНаПЛКСервер.
					 ПоказанияВесовДляСпискаРегистраций(ДокументыРегистрации, УникальныйИдентификатор);
	 
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) = Тип("Структура") 
		И СтруктураДанных.Успешно Тогда
		
		Объект.Накладные.Загрузить(СтруктураДанных.ЗначенияВесовРегистраций);
		
	КонецЕсли;	
	
	РассчитатьФизическийЗачетныйВес();
	
КонецПроцедуры	

#КонецОбласти
