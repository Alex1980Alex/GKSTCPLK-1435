#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

Перем ЗначенияПоказателей;

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	МодульЛокализации = гкс_ЛокализацияСервер.МодульЛокализации(Метаданные().ПолноеИмя());
			
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("КомпозитнаяПроба") Тогда
		
		ТаблицаРегистраций = гкс_ПриемкаНаПЛКСервер.ПолучитьСписокРегистрацийБезЗПП(
			ДанныеЗаполнения.КомпозитнаяПроба, ДанныеЗаполнения.Анализ);
		
		Дата = гкс_ЛабораторияИКачество.ДатаРеестраНакладных(ДанныеЗаполнения.Анализ, Дата);	
		
		Если ТаблицаРегистраций.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нет подходящих регистраций'"));
		Иначе
			гкс_ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
			ДозаполнитьДокументПоТаблицеРегистраций(ТаблицаРегистраций);
		КонецЕсли;
		
	ИначеЕсли МодульЛокализации <> Неопределено Тогда
		
		МодульЛокализации.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
			
	КонецЕсли;
				
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	гкс_ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	гкс_ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения); 
	
	Если гкс_ОчередьСообщенийRMQВызовСервера.ВключенОбменСRMQ() Тогда
		ОформленныеОснованияДвиженияЗапасов = РегистрыСведений.гкс_ОформленныеПартии.
			ОформленныеОснованияДвиженияЗапасовРеестра(ЭтотОбъект.Ссылка);
			
		Если ЗначениеЗаполнено(ОформленныеОснованияДвиженияЗапасов) Тогда	
			ДополнительныеСвойства.Вставить("ОформленныеОснованияДвиженияЗапасов", ОформленныеОснованияДвиженияЗапасов);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
		
	гкс_ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	ЗарегистрироватьКОбменуНакладные();	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	гкс_ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	ЗарегистрироватьКОбменуНакладные();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаЗаполнения

Процедура ДозаполнитьДокументПоТаблицеРегистраций(ТаблицаРегистраций)
	
	РегистрацияДляЗаполнения = ТаблицаРегистраций[0].ДокументРегистрации;
	СписокСвойствЗаполнения = "Организация, Номенклатура, Спецификация, Контрагент";
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РегистрацияДляЗаполнения, СписокСвойствЗаполнения);
	Грузоотправитель = РегистрацияДляЗаполнения.ОтправительПолучатель;
	
	ТочкаМаршрута = ТочкаМаршрутаСкладаРазгрузки(РегистрацияДляЗаполнения);

	РеквизитыСпецификации = Документы.гкс_СпецификацияКДоговоруКонтрагента.
		ПолучитьСуммовыеПоказатели(Спецификация, Номенклатура);
		
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыСпецификации);

	Если ТипЗнч(РегистрацияДляЗаполнения.Собственник) = Тип("СправочникСсылка.Организации") Тогда
		Собственник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			РегистрацияДляЗаполнения.Собственник, "КонтрагентОрганизации");
	Иначе
		Собственник = РегистрацияДляЗаполнения.Собственник;
	КонецЕсли;

	ДополнитьТаблицуРегистрациВесом(ТаблицаРегистраций);
	Накладные.Очистить();
	Накладные.Загрузить(ТаблицаРегистраций);
	
	ФизическийВес	= Накладные.Итог("Нетто");
	ЗачетныйВес		= ФизическийВес;	
	Сумма			= Окр(ФизическийВес * Цена, 2, РежимОкругления.Окр15как20);
	СуммаНДС		= гкс_ОбщегоНазначенияПЛККлиентСервер.РассчитатьСуммуНДС(Сумма, СтавкаНДС, Ложь);
	СуммаСНДС 		= Сумма + ?(ЦенаВключаетНДС, 0, СуммаНДС);
 
КонецПроцедуры

Процедура ДополнитьТаблицуРегистрациВесом(ТаблицаРегистраций)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацияНаПЛК.Ссылка КАК ДокументРегистрации,
	|	МАКСИМУМ(ЕСТЬNULL(ВзвешиваниеБрутто.Ссылка, ЗНАЧЕНИЕ(Документ.гкс_Взвешивание.ПустаяСсылка))) КАК ВзвешиваниеБрутто,
	|	МАКСИМУМ(ЕСТЬNULL(ВзвешиваниеТара.Ссылка, ЗНАЧЕНИЕ(Документ.гкс_Взвешивание.ПустаяСсылка))) КАК ВзвешиваниеТара
	|ПОМЕСТИТЬ ВТ_РасчетВеса
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_Взвешивание КАК ВзвешиваниеБрутто
	|		ПО РегистрацияНаПЛК.Ссылка = ВзвешиваниеБрутто.ДокументРегистрации
	|			И (ВзвешиваниеБрутто.ТипВзвешивания = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Въезд))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_Взвешивание КАК ВзвешиваниеТара
	|		ПО РегистрацияНаПЛК.Ссылка = ВзвешиваниеТара.ДокументРегистрации
	|			И (ВзвешиваниеТара.ТипВзвешивания = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Выезд))
	|ГДЕ
	|	РегистрацияНаПЛК.Ссылка В(&МассивРегистраций)
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрацияНаПЛК.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РасчетВеса.ДокументРегистрации КАК ДокументРегистрации,
	|	ЕСТЬNULL(ДокВзвешиваниеБрутто.Вес/1000, 0) КАК Брутто,
	|	ЕСТЬNULL(ДокВзвешиваниеТара.Вес/1000, 0) КАК Тара,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДокВзвешиваниеТара.Вес/1000, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ДокВзвешиваниеБрутто.Вес/1000, 0) - ДокВзвешиваниеТара.Вес/1000
	|	КОНЕЦ КАК Нетто
	|ИЗ
	|	ВТ_РасчетВеса КАК ВТ_РасчетВеса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_Взвешивание КАК ДокВзвешиваниеБрутто
	|		ПО ВТ_РасчетВеса.ВзвешиваниеБрутто = ДокВзвешиваниеБрутто.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_Взвешивание КАК ДокВзвешиваниеТара
	|		ПО ВТ_РасчетВеса.ВзвешиваниеТара = ДокВзвешиваниеТара.Ссылка";
	
	Запрос.УстановитьПараметр("МассивРегистраций", ТаблицаРегистраций.ВыгрузитьКолонку("ДокументРегистрации"));
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
		
	ТаблицаРегистраций = РезультатЗапроса.Выгрузить();

КонецПроцедуры

Функция ТочкаМаршрутаСкладаРазгрузки(РегистрацияНаПЛК)
	
	Склад = Документы.гкс_РеестрНакладныхЗПП3.СкладРазгрузкиРегистрации(РегистрацияНаПЛК);	
	
	Возврат Справочники.гкс_ТочкиМаршрута.ОсновнаяТочкаМаршрутаСклада(Склад); 
	
КонецФункции


#КонецОбласти

Процедура ЗарегистрироватьКОбменуНакладные() 
	
	Если гкс_ОчередьСообщенийRMQВызовСервера.ВключенОбменСRMQ() Тогда
		
		ОснованияДвиженияЗапасовРеестра = Документы.гкс_РеестрНакладныхЗПП3.
			ОснованияДвиженияЗапасовРеестра(Ссылка);
			
		Если ДополнительныеСвойства.Свойство("ОформленныеОснованияДвиженияЗапасов") Тогда	
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияДвиженияЗапасовРеестра,
				ДополнительныеСвойства.ОформленныеОснованияДвиженияЗапасов, Истина);
		КонецЕсли;		
				
		ЗарегистрироватьОснованияДвиженияКОбмену(ОснованияДвиженияЗапасовРеестра);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОснованияДвиженияКОбмену(ОснованияДвиженияЗапасовРеестра)
	
	Событие = "гкс_ОснованиеДляДвиженияЗапасов.Актуализация";
	
	Для Каждого ЭлементМассива Из ОснованияДвиженияЗапасовРеестра Цикл
		гкс_ОчередьСообщенийRMQ.СоздатьСообщенияПоСобытиюОбъекта(Событие, ЭлементМассива);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКачественныеПоказателиИУслуги() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПолучитьФормулыПоказателейИУслуг();
			
	Запрос.УстановитьПараметр("Алгоритм", 			Алгоритм);
	Запрос.УстановитьПараметр("ЛабораторныйАнализ", Анализ);
	Запрос.УстановитьПараметр("Номенклатура", 		Номенклатура);
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("ТочкаМаршрута", 		ТочкаМаршрута);
	Запрос.УстановитьПараметр("СтавкаНДС", 			СтавкаНДС);

	УстановитьПривилегированныйРежим(Истина);	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	НомерПакетаПоказатели = 3;
	НомерПакетаУслуги = 4;
		
	ТаблицаПоказателей = РезультатЗапроса[НомерПакетаПоказатели].Выгрузить();
	
	ЗначенияПоказателей = Новый Структура;
	ЗаполнитьСтруктуруЗначенийПоказателей(ТаблицаПоказателей);
	
	ТаблицаУслуг = РезультатЗапроса[НомерПакетаУслуги].Выгрузить();
	ЗаполнитьСтруктуруЗначенийПоказателей(ТаблицаУслуг);
	
	ЗаполнитьЗначенияПоказателей(ТаблицаПоказателей);
	
	ЗаполнитьСкидкуНадбавкуПоказателей(ТаблицаПоказателей);
	ЗаполнитьСкидкуНадбавкуПоказателей(ТаблицаУслуг);
	
	КачественныеПоказатели.Загрузить(ТаблицаПоказателей);
	Услуги.Загрузить(ТаблицаУслуг);

КонецПроцедуры

Процедура ПересчитатьТаблицуПоказателей(Показатель) Экспорт
	
	ТаблицаДокумента = КачественныеПоказатели.Выгрузить();
	

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПолучитьФормулуПоказателя();
			
	Запрос.УстановитьПараметр("Алгоритм", Алгоритм);
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДокумента);
	Запрос.УстановитьПараметр("Показатель", Показатель);
	
	УстановитьПривилегированныйРежим(Истина);	
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаПоказателей = РезультатЗапроса.Выгрузить();
	
	ЗначенияПоказателей = Новый Структура;
	ЗаполнитьСтруктуруЗначенийПоказателей(ТаблицаПоказателей);
	ЗаполнитьЗначенияПоказателей(ТаблицаПоказателей);
	
	ЗаполнитьСкидкуНадбавкуПоказателей(ТаблицаПоказателей);
	
	СтрокаПоказателя = КачественныеПоказатели.Найти(Показатель, "Показатель");
	ЗаполнитьЗначенияСвойств(СтрокаПоказателя, ТаблицаПоказателей[0]);
	
Конецпроцедуры

Процедура ЗаполнитьСтруктуруЗначенийПоказателей(ТаблицаСФормулами)
	
	Для Каждого СтрокаФормула Из ТаблицаСФормулами Цикл
		// Представляем формулу в виде списка строк		
		ФормулаДляРазбора = СтрЗаменить(СтрЗаменить(СтрокаФормула.Формула, "[", Символы.ПС + "["), "]", "]" +
			Символы.ПС);
		ТекущаяФормула = СтрокаФормула.Формула;
		Для Индекс = 1 По СтрЧислоСтрок(ФормулаДляРазбора) Цикл
			ТекущийПараметр = СокрЛП(СтрПолучитьСтроку(ФормулаДляРазбора, Индекс));		
			ИмяПараметра = СтрЗаменить(СтрЗаменить(ТекущийПараметр, "[", ""), "]", "");	
			Если Лев(ТекущийПараметр, 1) = "[" Тогда
				// дополняем представление параметров формулы (операндов) в виде ключей структуры Параметры
				ТекущаяФормула = СтрЗаменить(ТекущаяФормула, ТекущийПараметр, 
					"Параметры." + ИмяПараметра);
				ЗначенияПоказателей.Вставить(ИмяПараметра, 0);
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		СтрокаФормула.Формула = ТекущаяФормула;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателей(ТаблицаПоказателей)
	
	ПрефиксБазиса = "_Базис";
	Для Каждого Строка Из ТаблицаПоказателей Цикл
		ОбозначениеВФормуле = Строка.Показатель.гкс_ОбозначениеВФормуле;
		Если Не ОбозначениеВФормуле = "" Тогда
			ДобавитьЗначениеВСтруктуру(Строка.Значение, ОбозначениеВФормуле);
			ОбозначениеВФормуле = ОбозначениеВФормуле + ПрефиксБазиса;
			ДобавитьЗначениеВСтруктуру(Строка.Базис, ОбозначениеВФормуле);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗначениеВСтруктуру(ЗначениеПоказателя, ОбозначениеВФормуле)
	
	Если ЗначенияПоказателей.Свойство(ОбозначениеВФормуле) Тогда
		Если  ТипЗНЧ(ЗначениеПоказателя) = Тип("Число") И ЗначениеЗаполнено(ОбозначениеВФормуле) Тогда
			ЗначенияПоказателей[ОбозначениеВФормуле] = ЗначениеПоказателя;
		Иначе
			ЗначенияПоказателей[ОбозначениеВФормуле] = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСкидкуНадбавкуПоказателей(ТаблицаФормул)
	
	Для Каждого Строка Из ТаблицаФормул Цикл
		Если ЗначениеЗаполнено(Строка.Формула) Тогда
			Попытка
				Строка.СкидкаНадбавка = ОбщегоНазначения.ВычислитьВБезопасномРежиме(Строка.Формула, ЗначенияПоказателей);
			Исключение
				Строка.СкидкаНадбавка = 0;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ТекстыЗапросов

Функция ТекстЗапросаПолучитьФормулыПоказателейИУслуг()
	
	Возврат
	"ВЫБРАТЬ
	|	АлгоритмыСкидки.Показатель КАК Показатель,
	|	АлгоритмыСкидки.Формула КАК Формула,
	|	АлгоритмыСкидки.Натуральная КАК Натуральная,
	|	АлгоритмыСкидки.Денежная КАК Денежная
	|ПОМЕСТИТЬ ВТ_АлгоритмыСкидки
	|ИЗ
	|	Справочник.гкс_АлгоритмыРасчетаПоказателейКачестваНоменклатуры.Скидки КАК АлгоритмыСкидки
	|ГДЕ
	|	АлгоритмыСкидки.Ссылка = &Алгоритм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гкс_ЛабораторныйАнализКачественныеПоказатели.Показатель КАК Показатель,
	|	гкс_ЛабораторныйАнализКачественныеПоказатели.Значение КАК Значение
	|ПОМЕСТИТЬ ВТ_Анализ
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ.КачественныеПоказатели КАК гкс_ЛабораторныйАнализКачественныеПоказатели
	|ГДЕ
	|	гкс_ЛабораторныйАнализКачественныеПоказатели.Ссылка = &ЛабораторныйАнализ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыНормативнойСертификации.ПоказательАнализа КАК Показатель,
	|	МАКСИМУМ(РезультатыНормативнойСертификации.Базис) КАК Базис
	|ПОМЕСТИТЬ ВТ_НормативныеПоказатели
	|ИЗ
	|	РегистрСведений.гкс_РезультатыНормативнойСертификацииНоменклатуры КАК РезультатыНормативнойСертификации
	|ГДЕ
	|	РезультатыНормативнойСертификации.Организация = &Организация
	|	И РезультатыНормативнойСертификации.Номенклатура = &Номенклатура
	|	И РезультатыНормативнойСертификации.гкс_НазначениеИспользованияКачества = ЗНАЧЕНИЕ(Перечисление.гкс_НазначенияИспользованияКачества.ПриемкаКомпозит)
	|
	|СГРУППИРОВАТЬ ПО
	|	РезультатыНормативнойСертификации.ПоказательАнализа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АлгоритмыСкидки.Показатель КАК Показатель,
	|	ВТ_АлгоритмыСкидки.Формула КАК Формула,
	|	ВТ_АлгоритмыСкидки.Натуральная КАК Натуральная,
	|	ВТ_АлгоритмыСкидки.Денежная КАК Денежная,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЕСТЬNULL(ВТ_Анализ.Значение, НЕОПРЕДЕЛЕНО)) = ТИП(ЧИСЛО)
	|			ТОГДА ВТ_Анализ.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Значение,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЕСТЬNULL(ВТ_НормативныеПоказатели.Базис, НЕОПРЕДЕЛЕНО)) = ТИП(ЧИСЛО)
	|			ТОГДА ВТ_НормативныеПоказатели.Базис
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Базис,
	|	0 КАК СкидкаНадбавка
	|ИЗ
	|	ВТ_АлгоритмыСкидки КАК ВТ_АлгоритмыСкидки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Анализ КАК ВТ_Анализ
	|		ПО ВТ_АлгоритмыСкидки.Показатель = ВТ_Анализ.Показатель
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НормативныеПоказатели КАК ВТ_НормативныеПоказатели
	|		ПО ВТ_АлгоритмыСкидки.Показатель = ВТ_НормативныеПоказатели.Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АлгоритмыУслуги.ЭтоСкидкаНадбавка КАК ДобавлятьВСтоимость,
	|	АлгоритмыУслуги.Номенклатура КАК Номенклатура,
	|	АлгоритмыУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	АлгоритмыУслуги.ТипВеса КАК ТипВеса,
	|	АлгоритмыУслуги.Формула КАК Формула,
	|	0 КАК СкидкаНадбавка,
	|	&СтавкаНДС КАК СтавкаНДС,
	|	0 КАК КоличествоУслуги
	|ИЗ
	|	Справочник.гкс_АлгоритмыРасчетаПоказателейКачестваНоменклатуры.Услуги КАК АлгоритмыУслуги
	|ГДЕ
	|	АлгоритмыУслуги.Ссылка = &Алгоритм";
	
КонецФункции

Функция ТекстЗапросаПолучитьФормулуПоказателя()
	
	Возврат "ВЫБРАТЬ
	        |	ТаблицаДанных.Показатель КАК Показатель,
	        |	ТаблицаДанных.Базис КАК Базис,
	        |	ТаблицаДанных.Значение КАК Значение,
	        |	ТаблицаДанных.СкидкаНадбавка КАК СкидкаНадбавка,
	        |	ТаблицаДанных.Натуральная КАК Натуральная,
	        |	ТаблицаДанных.Денежная КАК Денежная
	        |ПОМЕСТИТЬ ВТ_Данных
	        |ИЗ
	        |	&ТаблицаДанных КАК ТаблицаДанных
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	АлгоритмыСкидки.Показатель КАК Показатель,
	        |	АлгоритмыСкидки.Формула КАК Формула
	        |ПОМЕСТИТЬ ВТ_АлгоритмыСкидки
	        |ИЗ
	        |	Справочник.гкс_АлгоритмыРасчетаПоказателейКачестваНоменклатуры.Скидки КАК АлгоритмыСкидки
	        |ГДЕ
	        |	АлгоритмыСкидки.Ссылка = &Алгоритм
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_Данных.Показатель КАК Показатель,
	        |	ВТ_Данных.Базис КАК Базис,
	        |	ВТ_Данных.Значение КАК Значение,
	        |	ВТ_Данных.Натуральная КАК Натуральная,
	        |	ВТ_Данных.Денежная КАК Денежная,
	        |	ЕСТЬNULL(ВТ_АлгоритмыСкидки.Формула, """") КАК Формула,
	        |	ВТ_Данных.СкидкаНадбавка КАК СкидкаНадбавка
	        |ИЗ
	        |	ВТ_Данных КАК ВТ_Данных
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АлгоритмыСкидки КАК ВТ_АлгоритмыСкидки
	        |		ПО ВТ_Данных.Показатель = ВТ_АлгоритмыСкидки.Показатель
	        |ГДЕ
	        |	ВТ_Данных.Показатель = &Показатель";
	
КонецФункции
	
#КонецОбласти

#КонецОбласти

#КонецЕсли
