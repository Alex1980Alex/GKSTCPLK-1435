#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ДокументальноеОформление");
		
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = гкс_ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если НЕ ДопПараметры.ПолучитьТекстыЗапроса Тогда
		// Создадим запрос инициализации движений		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ, ДопПараметры);
		// Сформируем текст запроса
		ТекстЗапросаТаблицаОформленныеПартии(ТекстыЗапроса, Регистры);	
	КонецЕсли;
	
	// Получим таблицы для движений
	Возврат гкс_ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
			
КонецФункции

#КонецОбласти

// Возвращает массив документов "Основание для движения запасов" для документов регистрации табличной части
//
// Параметры:
//  РеестрНакладных - ДокументСсылка.гкс_РеестрНакладныхЗПП3 - ссылка на документ, по которому необходимо 
//  														   получить данные
//
// Возвращаемое значение:
//  Массив - массив документов "Основание для движения запасов"
//
Функция ОснованияДвиженияЗапасовРеестра(РеестрНакладных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОснованиеДляДвиженияЗапасов.Ссылка КАК ОснованиеДвиженияЗапасов
	|ИЗ
	|	Документ.гкс_РеестрНакладныхЗПП3.Накладные КАК РеестрНакладныхЗПП3Накладные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ОснованиеДляДвиженияЗапасов КАК ОснованиеДляДвиженияЗапасов
	|		ПО РеестрНакладныхЗПП3Накладные.ДокументРегистрации = ОснованиеДляДвиженияЗапасов.Регистрация
	|ГДЕ
	|	РеестрНакладныхЗПП3Накладные.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", РеестрНакладных);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		ДанныеЗапроса = РезультатЗапроса.Выгрузить();
		Результат = ДанныеЗапроса.ВыгрузитьКолонку("ОснованиеДвиженияЗапасов");
	Иначе
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Определяет указанный склад разгрузки для регистрации на ПЛК.
// 
// Параметры:
//  Регистрация - ДокументСсылка.гкс_РегистрацияНаПЛК -
// 
// Возвращаемое значение:
//  СправочникСсылка.Склады
//
Функция СкладРазгрузкиРегистрации(Регистрация) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТочкиМаршрута.Склад КАК Склад
	|ИЗ
	|	Документ.гкс_НаправлениеНаРазгрузку КАК НаправлениеНаРазгрузку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гкс_ТочкиМаршрута КАК ТочкиМаршрута
	|		ПО НаправлениеНаРазгрузку.Склад = ТочкиМаршрута.Ссылка
	|ГДЕ
	|	НаправлениеНаРазгрузку.ДокументРегистрации = &Регистрация";

	Запрос.УстановитьПараметр("Регистрация", Регистрация);	

	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.Склад;
	Иначе	
		Результат = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ТочкаМаршрута)
	|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//  КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//  Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.Печать

 // Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Заполняет список команд печати.
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт 
	
	МодульЛокализации = гкс_ЛокализацияСервер.МодульЛокализации("гкс_РеестрНакладныхЗПП3");
	
	Если ТипЗнч(МодульЛокализации) = Тип("ОбщийМодуль") Тогда
		МодульЛокализации.ДобавитьКомандыПечати(КомандыПечати);
	Иначе
		// форма ЗПП-3 
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФЗПП3";
		КомандаПечати.Идентификатор = "ПФ_MXL_ЗПП3";
		КомандаПечати.Представление = НСтр("ru = 'Реестр (форма ЗПП-3)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;    
		КомандаПечати.Порядок = 1;
	КонецЕсли;
		
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ЗПП3") Тогда
			ТабличныйДокумент = ПечатьЗПП3(МассивОбъектов, ОбъектыПечати, ПараметрыПечати);
			
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"ПФ_MXL_ЗПП3",
				НСтр("ru = 'Реестр (форма ЗПП-3)'"),
				ТабличныйДокумент, ,
				"Документ.гкс_РеестрНакладныхЗПП3.ПФ_MXL_ЗПП3");
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры)
	
	МенеджерВременныхТаблиц = Неопределено;
	
	Если ДопПараметры <> Неопределено
		И ДопПараметры.Свойство("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц) Тогда
		
		МенеджерВременныхТаблиц = ?(МенеджерВременныхТаблиц = Неопределено,
									Новый МенеджерВременныхТаблиц, МенеджерВременныхТаблиц);		
	Иначе
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаОформленныеПартии(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "гкс_ОформленныеПартии";
	
	Если НЕ гкс_ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеестрНакладныхЗПП3Накладные.ДокументРегистрации КАК ДокументРегистрации,
	|	РеестрНакладныхЗПП3Накладные.Ссылка КАК РеестрНакладных,
	|	РеестрНакладныхЗПП3.Дата КАК ДатаРеестра,
	|	ЕСТЬNULL(ОснованиеДляДвиженияЗапасов.Ссылка, ЗНАЧЕНИЕ(Документ.гкс_ОснованиеДляДвиженияЗапасов.ПустаяСсылка)) КАК ОснованиеДвиженияЗапасов
	|ИЗ
	|	Документ.гкс_РеестрНакладныхЗПП3.Накладные КАК РеестрНакладныхЗПП3Накладные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_РеестрНакладныхЗПП3 КАК РеестрНакладныхЗПП3
	|		ПО РеестрНакладныхЗПП3Накладные.Ссылка = РеестрНакладныхЗПП3.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ОснованиеДляДвиженияЗапасов КАК ОснованиеДляДвиженияЗапасов
	|		ПО РеестрНакладныхЗПП3Накладные.ДокументРегистрации = ОснованиеДляДвиженияЗапасов.Регистрация
	|ГДЕ
	|	РеестрНакладныхЗПП3Накладные.Ссылка = &Ссылка"; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
		
КонецПроцедуры
	
#КонецОбласти

#Область Печать

Функция КлючОбъектаПользовательскихНастроек() Экспорт
	
	Возврат "Документ.гкс_РеестрНакладныхЗПП3";
	
КонецФункции

// Настройки печати по умолчанию.
// 
// Возвращаемое значение:
//  Структура - Настройки печати по умолчанию:
// * РуководительЛаборатории - Строка -
// * РеестрСоставил - Строка -
// * РезультатПроверки - Строка -
Функция НастройкиПечатиПоУмолчанию() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("РуководительЛаборатории", "");
	Результат.Вставить("РеестрСоставил", Справочники.гкс_ОтветственныеЛица.ПустаяСсылка());
	Результат.Вставить("МОЛ", Справочники.гкс_ОтветственныеЛица.ПустаяСсылка());
	Результат.Вставить("Проверил", Справочники.гкс_ОтветственныеЛица.ПустаяСсылка());
	Результат.Вставить("РезультатПроверки", "");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПроцентДенежнойСкидкиНадбавки(ЭтотОбъект)

	Возврат ЭтотОбъект.КачественныеПоказатели.Выгрузить(Новый Структура("Денежная", Истина), "СкидкаНадбавка").Итог("СкидкаНадбавка");	

КонецФункции 

// Возвращает процент натуральной скидки/надбавки по характеристикам зерна
//	для расчета зачетного веса зерна
Функция ПолучитьПроцентНатуральнойСкидкиНадбавки(ЭтотОбъект) Экспорт

	Возврат ЭтотОбъект.КачественныеПоказатели.Выгрузить(Новый Структура("Натуральная", Истина),	"СкидкаНадбавка").Итог("СкидкаНадбавка");	

КонецФункции 

// Рассчитывает сумму денежной скидки/надбавки по качеству зерна 
//
Функция РассчитатьСуммуСкидкиНадбавки(ЭтотОбъект)
	
	// 1. Денежная скидка (по проценту)
	ПроцентСкидкиНадбавки = ПолучитьПроцентДенежнойСкидкиНадбавки(ЭтотОбъект);	
	СуммаДенежСкидкиНадбавки = ЭтотОбъект.Сумма * ПроцентСкидкиНадбавки / 100;	
	
	// 2. Если услуга является скидкой/набавкой (установклен признак скидки/надбавки "ЭтоСкидкаНадбавка")
	ВременнаяТаблица = ЭтотОбъект.Услуги.Выгрузить(, "СкидкаНадбавка, Сумма, СуммаНДС");
	СуммаУслугСкидкиНадбавки = 0;
	
	Если ВременнаяТаблица.Количество() Тогда
		
		Для каждого СтрокаТабличнойЧасти Из ВременнаяТаблица Цикл
			Если СтрокаТабличнойЧасти.СкидкаНадбавка = 0 Тогда
				Продолжить;			
			КонецЕсли; 
			
			СкидкаНадбавка = ?(СтрокаТабличнойЧасти.СкидкаНадбавка < 0, -1, 1);
			СуммаСкидкиНадбавки	= СтрокаТабличнойЧасти.Сумма + ?(ЭтотОбъект.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);	
			СуммаУслугСкидкиНадбавки = СуммаУслугСкидкиНадбавки + СуммаСкидкиНадбавки * СкидкаНадбавка;		
		КонецЦикла; 	
		
	КонецЕсли; 	
	
	Возврат СуммаДенежСкидкиНадбавки + СуммаУслугСкидкиНадбавки;
	
КонецФункции

Функция ПолучитьСтруктуруПараметров(Ссылка, ОтборСкидки = Ложь)

	Результат = Новый Структура;	
	                                          
	// параметры лицевой стороны
	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	РеестрНакладных.Номер КАК Номер,
	|	РеестрНакладных.Дата КАК Дата,
	|	ЕСТЬNULL(Организации.НаименованиеПолное, &ПустаяСтрока) КАК ОрганизацияНаименованиеПолное,
	|	РеестрНакладных.Организация КАК Организация,
	|	ЕСТЬNULL(Контрагенты.НаименованиеПолное, &ПустаяСтрока) КАК Контрагент,
	|	ЕСТЬNULL(Грузоотправители.НаименованиеПолное, &ПустаяСтрока) КАК Грузоотправитель,
	|	ЕСТЬNULL(Собственники.НаименованиеПолное, &ПустаяСтрока) КАК Собственник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Организации.КонтрагентОрганизации, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЕСТЬNULL(Собственники.Ссылка, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|			ТОГДА &ФондСобственный
	|		ИНАЧЕ &ФондХранение
	|	КОНЕЦ КАК Фонд,
	|	РеестрНакладных.Анализ.НомерПробы КАК НомерПробы,
	|	РеестрНакладных.Анализ.Дата КАК ДатаОбразца,
	|	&КоличествоНакладных КАК КоличествоНакладных,
	|	РеестрНакладных.Номенклатура КАК Номенклатура,
	|	РеестрНакладных.ФизическийВес КАК ФизическийВес,
	|	100 + &НатуральнаяСкидкаНадбавка КАК ПроцентЗачетнойМассы,
	|	&НатуральнаяСкидкаНадбавка КАК НатуральнаяСкидкаНадбавка,
	|	&ДенежнаяСкидкаНадбавка КАК ДенежнаяСкидкаНадбавка,
	|	РеестрНакладных.ЗачетныйВес КАК ЗачетныйВес,
	|	РеестрНакладных.Цена КАК Цена,
	|	РеестрНакладных.Сумма КАК Сумма,
	|	РеестрНакладных.СуммаНДС КАК СуммаНДС,
	|	РеестрНакладных.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА РеестрНакладных.ЦенаВключаетНДС
	|			ТОГДА РеестрНакладных.Сумма
	|		ИНАЧЕ РеестрНакладных.Сумма + РеестрНакладных.СуммаНДС
	|	КОНЕЦ КАК СуммаВсего,
	|	ВЫБОР
	|		КОГДА РеестрНакладных.ЦенаВключаетНДС
	|			ТОГДА &СУчетомНДС
	|		ИНАЧЕ &безНДС
	|	КОНЕЦ КАК УчетНДС,
	|	ЕСТЬNULL(Организации.КодПоОКПО, &ПустаяСтрока) КАК КодОКПО,
	|	ЕСТЬNULL(Грузоотправители.Адрес, &ПустаяСтрока) КАК ГрузоотправительАдрес
	|ИЗ
	|	Документ.гкс_РеестрНакладныхЗПП3 КАК РеестрНакладных
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО РеестрНакладных.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_РеестрНакладныхЗПП3.Накладные КАК РегистрацииРеестра
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК ШапкиРегистраций
	|			ПО РегистрацииРеестра.ДокументРегистрации = ШапкиРегистраций.Ссылка
	|		ПО РеестрНакладных.Ссылка = РегистрацииРеестра.Ссылка
	|			И (РегистрацииРеестра.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО РеестрНакладных.Контрагент = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Грузоотправители
	|		ПО РеестрНакладных.Грузоотправитель = Грузоотправители.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Собственники
	|		ПО РеестрНакладных.Собственник = Собственники.Ссылка
	|ГДЕ
	|	РеестрНакладных.Ссылка = &Ссылка
	|	И РегистрацииРеестра.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НатуральнаяСкидкаНадбавка", ПолучитьПроцентНатуральнойСкидкиНадбавки(Ссылка));
	Запрос.УстановитьПараметр("ДенежнаяСкидкаНадбавка",	ПолучитьПроцентДенежнойСкидкиНадбавки(Ссылка));
	Запрос.УстановитьПараметр("КоличествоНакладных", Ссылка.Накладные.Количество());
	
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ФондСобственный", "Собственное");
	Запрос.УстановитьПараметр("ФондХранение", "Хранение");
	Запрос.УстановитьПараметр("безНДС", "без НДС");
	Запрос.УстановитьПараметр("СУчетомНДС", "с учетом НДС");
	
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();
	
	Результат.Вставить("ДанныеШапки", ВыборкаПоШапке);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТТН.ДокументРегистрации.ДатаДокументаПоставщика КАК ДатаНакладной,
	               |	ТТН.ДокументРегистрации.НомерДокументаПоставщика КАК НомерНакладной,
	               |	ТТН.Брутто - ТТН.Тара КАК Масса,
	               |	ТТН.ДокументРегистрации.ТранспортноеСредство КАК НомерТранспорта,
	               |	ТТН.ДокументРегистрации.ТочкаМаршрута КАК ТочкаМаршрута
	               |ИЗ
	               |	Документ.гкс_РеестрНакладныхЗПП3.Накладные КАК ТТН
	               |ГДЕ
	               |	ТТН.Ссылка = &Ссылка";
	                      
	Результат.Вставить("ВыборкаНакладные",	Запрос.Выполнить().Выбрать());
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеестрНакладныхЗПП3КачественныеПоказатели.Показатель КАК Показатель,
	               |	РеестрНакладныхЗПП3КачественныеПоказатели.Значение КАК Значение
	               |ПОМЕСТИТЬ ВТ_Реестр
	               |ИЗ
	               |	Документ.гкс_РеестрНакладныхЗПП3.КачественныеПоказатели КАК РеестрНакладныхЗПП3КачественныеПоказатели
	               |ГДЕ
	               |	РеестрНакладныхЗПП3КачественныеПоказатели.Ссылка = &Реестр
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЛабораторныйАнализ.Показатель КАК Показатель,
	               |	ЛабораторныйАнализ.Значение КАК Значение
	               |ПОМЕСТИТЬ ВТ_ЛабАнализ
	               |ИЗ
	               |	Документ.гкс_ЛабораторныйАнализ.КачественныеПоказатели КАК ЛабораторныйАнализ
	               |ГДЕ
	               |	ЛабораторныйАнализ.Ссылка = &Анализ
	               |	И НЕ ЛабораторныйАнализ.Показатель В
	               |				(ВЫБРАТЬ
	               |					Таб.Показатель
	               |				ИЗ
	               |					ВТ_Реестр КАК Таб)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Реестр.Показатель КАК Показатель,
	               |	ВТ_Реестр.Значение КАК Значение
	               |ИЗ
	               |	ВТ_Реестр КАК ВТ_Реестр
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ЛабАнализ.Показатель,
	               |	ВТ_ЛабАнализ.Значение
	               |ИЗ
	               |	ВТ_ЛабАнализ КАК ВТ_ЛабАнализ";

	Запрос.УстановитьПараметр("Реестр", Ссылка);	
	Запрос.УстановитьПараметр("Анализ", Ссылка.Анализ);	
	
	ВыборкаПоказателей = Запрос.Выполнить().Выбрать();
	
	СтруктураХарактеристики	= Новый Структура;
	
	Пока ВыборкаПоказателей.Следующий() Цикл
		
		ИмяПоказателя =	Справочники.гкс_ПоказателиАнализовНоменклатуры.ПолучитьИмяПредопределенного(ВыборкаПоказателей.Показатель);		
		
		Если ИмяПоказателя <> "" Тогда
		
			Если ВыборкаПоказателей.Показатель = Справочники.гкс_ПоказателиАнализовНоменклатуры.Цвет
			ИЛИ ВыборкаПоказателей.Показатель = Справочники.гкс_ПоказателиАнализовНоменклатуры.Запах Тогда	
				
				ЗначениеПоказателя = ?(ЗначениеЗаполнено(ВыборкаПоказателей.Значение), 
				ВыборкаПоказателей.Значение, "соответствует");
			Иначе 
				ЗначениеПоказателя = ВыборкаПоказателей.Значение;
			КонецЕсли;	
			
			// 
			Если ВыборкаПоказателей.Показатель = Справочники.гкс_ПоказателиАнализовНоменклатуры.МассоваяДоляМасла
			И Не СтруктураХарактеристики.Свойство("Масличность") Тогда
				
				СтруктураХарактеристики.Вставить("Масличность", ЗначениеПоказателя);
				
			ИначеЕсли ВыборкаПоказателей.Показатель = Справочники.гкс_ПоказателиАнализовНоменклатуры.МассоваяДоляМаслаАСВ Тогда
				
				СтруктураХарактеристики.Вставить("Масличность", ЗначениеПоказателя);		
			Иначе		
				СтруктураХарактеристики.Вставить(ИмяПоказателя, ЗначениеПоказателя);
			КонецЕсли;
			
		КонецЕсли;	
			
	КонецЦикла;
	
	СтруктураХарактеристики.Вставить("НатуральнаяСкидка", ПолучитьПроцентНатуральнойСкидкиНадбавки(Ссылка));	
	СтруктураХарактеристики.Вставить("ДенежнаяСкидка", ПолучитьПроцентДенежнойСкидкиНадбавки(Ссылка));	
	
	ПрефиксСкидкиНадбавки = "_Процент";
	
	// Корректируем значения показателей по значениям ТЧ "КачественныеПоказатели"
	Для каждого СтрокаТабличнойЧастиКачественныеПоказатели Из Ссылка.КачественныеПоказатели Цикл
	    
		ИмяПоказателя = Справочники.гкс_ПоказателиАнализовНоменклатуры.ПолучитьИмяПредопределенного(
																СтрокаТабличнойЧастиКачественныеПоказатели.Показатель);		
		
		Если СтрокаТабличнойЧастиКачественныеПоказатели.Денежная Тогда
			
			Если СтрокаТабличнойЧастиКачественныеПоказатели.Показатель = Справочники.гкс_ПоказателиАнализовНоменклатуры.ЗерноваяПримесь Тогда
				
				СтруктураХарактеристики.Вставить(ИмяПоказателя + "Денежная" 
				+ ПрефиксСкидкиНадбавки, СтрокаТабличнойЧастиКачественныеПоказатели.СкидкаНадбавка);	
				СтруктураХарактеристики.Вставить(ИмяПоказателя + "Денежная", 
				СтрокаТабличнойЧастиКачественныеПоказатели.Значение);
					
			ИначеЕсли СтрокаТабличнойЧастиКачественныеПоказатели.Показатель = Справочники.гкс_ПоказателиАнализовНоменклатуры.Натура
				Или СтрокаТабличнойЧастиКачественныеПоказатели.Показатель = Справочники.гкс_ПоказателиАнализовНоменклатуры.Протеин 
				Или СтрокаТабличнойЧастиКачественныеПоказатели.Показатель = Справочники.гкс_ПоказателиАнализовНоменклатуры.МассоваяДоляМасла
				Или СтрокаТабличнойЧастиКачественныеПоказатели.Показатель = Справочники.гкс_ПоказателиАнализовНоменклатуры.МассоваяДоляМаслаАСВ Тогда
					 
				СтруктураХарактеристики.Вставить(ИмяПоказателя + ПрефиксСкидкиНадбавки,
				СтрокаТабличнойЧастиКачественныеПоказатели.СкидкаНадбавка);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТабличнойЧастиКачественныеПоказатели.Натуральная Тогда
			Если СтрокаТабличнойЧастиКачественныеПоказатели.Показатель = Справочники.гкс_ПоказателиАнализовНоменклатуры.ЗерноваяПримесь Тогда
				
				СтруктураХарактеристики.Вставить(ИмяПоказателя + "Натуральная" 
				+ ПрефиксСкидкиНадбавки, СтрокаТабличнойЧастиКачественныеПоказатели.СкидкаНадбавка);	
				СтруктураХарактеристики.Вставить(ИмяПоказателя + "Натуральная", 
				СтрокаТабличнойЧастиКачественныеПоказатели.Значение);
					
			ИначеЕсли СтрокаТабличнойЧастиКачественныеПоказатели.Показатель = Справочники.гкс_ПоказателиАнализовНоменклатуры.ВлажностьЗерна
				Или СтрокаТабличнойЧастиКачественныеПоказатели.Показатель = Справочники.гкс_ПоказателиАнализовНоменклатуры.СорнаяПримесь
				Или СтрокаТабличнойЧастиКачественныеПоказатели.Показатель = Справочники.гкс_ПоказателиАнализовНоменклатуры.МасличнаяПримесь Тогда
					
				СтруктураХарактеристики.Вставить(ИмяПоказателя + ПрефиксСкидкиНадбавки,
				СтрокаТабличнойЧастиКачественныеПоказатели.СкидкаНадбавка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; 

	Результат.Вставить("Показатель", СтруктураХарактеристики);
	
	Запрос.Текст	=	"ВЫБРАТЬ
					 	|	Услуги.Номенклатура.Наименование + "", "" + Услуги.ЕдиницаИзмерения.Наименование КАК Наименование,
					 	|	Услуги.Цена				КАК Цена,
					 	|	Услуги.КоличествоУслуги КАК Количество,
					 	|	Услуги.Сумма 			КАК Сумма,
					 	|	Услуги.СуммаНДС 		КАК СуммаНДС
					 	|ИЗ
					 	|	Документ.гкс_РеестрНакладныхЗПП3.Услуги КАК Услуги
					 	|ГДЕ
					 	|	Услуги.Ссылка = &Ссылка
					 	|	И Услуги.СкидкаНадбавка <> 0
					 	|ИТОГИ
					 	|	СУММА(Количество),
					 	|	СУММА(Сумма),
					 	|	СУММА(СуммаНДС)
					 	|ПО
					 	|	ОБЩИЕ
						|";
	
	Результат.Вставить("ВыборкаУслуги", Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	
	Возврат Результат;	// Ключи структуры _Результат: ДанныеШапки, ВыборкаНакладные, Характеристики, ВыборкаУслуги
	
КонецФункции

Функция ПечатьЗПП3(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗПП3";
	
	Если ТипЗнч(МассивОбъектов) = Тип("Массив") Тогда
		
		Для Каждого ЭлементОбъект Из МассивОбъектов Цикл		
			  ЗаполнитьПоЗПП3(ОбъектыПечати, ЭлементОбъект, ПараметрыПечати, ТабличныйДокумент);	
		КонецЦикла;
		
	Иначе
		
		ЗаполнитьПоЗПП3(ОбъектыПечати, МассивОбъектов, ПараметрыПечати, ТабличныйДокумент);	
	КонецЕсли;
	
	ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ПереворотВлево;
	ТабличныйДокумент.АвтоМасштаб = Истина;
		
	Возврат ТабличныйДокумент;
	
КонецФункции	

Процедура ЗаполнитьПоЗПП3(ОбъектыПечати, ДокументОбъект, ПараметрыПечати, ТабДокумент);
	
	Если ТабДокумент.ВысотаТаблицы > 0 Тогда	
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
	КонецЕсли;
	
	НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1; 
	
	Макет =	ПолучитьМакет("ПФ_MXL_ЗПП3");
	
	ОбластьЛицеваяСторонаШапка 					= Макет.ПолучитьОбласть("ЛицеваяСторонаШапка");
	ОбластьЛицеваяСторонаПодвал 				= Макет.ПолучитьОбласть("ЛицеваяСторонаПодвал");
	ОбластьОборотнаяСторонаАнализы 				= Макет.ПолучитьОбласть("ОборотнаяСторонаАнализы");
	ОбластьОборотнаяСторонаДенежныйРасчетШапка 	= Макет.ПолучитьОбласть("ОборотнаяСторонаДенежныйРасчетШапка");
	ОбластьОборотнаяСторонаДенежныйРасчетСтрока = Макет.ПолучитьОбласть("ОборотнаяСторонаДенежныйРасчетСтрока");
	ОбластьОборотнаяСторонаДенежныйРасчетИтог 	= Макет.ПолучитьОбласть("ОборотнаяСторонаДенежныйРасчетИтог");
	ОбластьОборотнаяСторонаПодвал 				= Макет.ПолучитьОбласть("ОборотнаяСторонаПодвал");
	
	СтруктураПараметров	= ПолучитьСтруктуруПараметров(ДокументОбъект.Ссылка, Ложь);
	
	ОбластьЛицеваяСторонаШапка.Параметры.Заполнить(СтруктураПараметров.ДанныеШапки);
	Если СтруктураПараметров.Свойство("Показатель") Тогда
		ОбластьЛицеваяСторонаШапка.Параметры.Заполнить(СтруктураПараметров.Показатель);
	КонецЕсли;
	
	ОбластьЛицеваяСторонаШапка.Параметры["Дата"] = Формат(СтруктураПараметров.ДанныеШапки.Дата, "ДЛФ=DD");
	ОбластьЛицеваяСторонаШапка.Параметры["ЕдиницаИзмерения"] = 
		СтруктураПараметров.ДанныеШапки.Номенклатура.ЕдиницаИзмерения;
		
	ОбластьЛицеваяСторонаШапка.Параметры["Происхождение"] =	
		ОбластьВАдресеКонтрагента(СтруктураПараметров.ДанныеШапки.ГрузоотправительАдрес);
	
	ТабДокумент.Вывести(ОбластьЛицеваяСторонаШапка);
	
	// Выводим накладные
	МаксКолНакладныхВМакете		= 11;
	КоличествоДополнитСтрок		= ?(ДокументОбъект.Накладные.Количество() > МаксКолНакладныхВМакете, ОКР((ДокументОбъект.Накладные.Количество() - МаксКолНакладныхВМакете)/2), 1);
	ПараметрСлева				= Истина;
	ИндексСтроки				= 1;
	
	СоответствиеПараметров		= Новый Структура("ДатаНакладной, НомерНакладной, Масса, НомерТранспорта", 
	"ДатаНакладной", "НомерНакладной", "Масса", "НомерТранспорта");
	
	ПунктРазгрузкиСклад = "";
	Пока СтруктураПараметров.ВыборкаНакладные.Следующий() Цикл
		ПунктРазгрузкиСклад = СтруктураПараметров.ВыборкаНакладные.ТочкаМаршрута.Склад.Наименование;
		Если КоличествоДополнитСтрок > 0 Тогда
			
			Если ПараметрСлева Тогда
				ОбластьСтрока = Макет.ПолучитьОбласть("ЛицеваяСторонаСтрока");
			КонецЕсли; 
			
			// Заполняем параметры
			Для каждого КлючЗначение Из СоответствиеПараметров Цикл
				ОбластьСтрока.Параметры[КлючЗначение.Значение + ?(ПараметрСлева, "Лево", "Право")] = СтруктураПараметров.ВыборкаНакладные[КлючЗначение.Ключ];				
			КонецЦикла; 
			
			ПараметрСлева =	Не ПараметрСлева; // Следующий заполняется параметр Справа		
			
			Если ПараметрСлева Тогда
				КоличествоДополнитСтрок	= КоличествоДополнитСтрок - 1;	// Уменьшаем кол-во доп. строк
				ТабДокумент.Вывести(ОбластьСтрока);	
			КонецЕсли; 
			
		Иначе	
			
			Для каждого КлючЗначение Из СоответствиеПараметров Цикл
				ОбластьЛицеваяСторонаПодвал.Параметры[КлючЗначение.Значение + "Лево" + ИндексСтроки] = СтруктураПараметров.ВыборкаНакладные[КлючЗначение.Ключ];				
			КонецЦикла; 
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЕсли; 		
		
	КонецЦикла; 
	
	Если Не ПараметрСлева Тогда
		ТабДокумент.Вывести(ОбластьСтрока);	
	КонецЕсли; 
	
	ОбластьЛицеваяСторонаПодвал.Параметры.Заполнить(СтруктураПараметров.ДанныеШапки);
	КгВТонне = 1000;
	ЦелаяЧасть = Цел(ДокументОбъект.ФизическийВес);
	ДробнаяЧасть = (ДокументОбъект.ФизическийВес - Цел(ДокументОбъект.ФизическийВес)) * КгВТонне;
	
	ОбластьЛицеваяСторонаПодвал.Параметры["МассаНакладныхПрописью"]	= ЧислоПрописью(ЦелаяЧасть,"Л = ru_RU; НД=Ложь; ДП = Ложь", "т, т, т, т, т, т, т, т, 0");
	ОбластьЛицеваяСторонаПодвал.Параметры["МассаНакладныхДробнаяЧасть"]	= ДробнаяЧасть;
	ОбластьЛицеваяСторонаПодвал.Параметры["Склад"] = ПунктРазгрузкиСклад;
	
	ОбластьЛицеваяСторонаПодвал.Параметры["ДолжностьМОЛ"] = ПараметрыПечати.МОЛ;
	
	ТабДокумент.Вывести(ОбластьЛицеваяСторонаПодвал);
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ II. Лабораторный анализ среднесуточной пробы
	
	ОбластьОборотнаяСторонаАнализы.Параметры.Заполнить(СтруктураПараметров.ДанныеШапки);
	ОбластьОборотнаяСторонаАнализы.Параметры["ДатаОбразца"]	= Формат(СтруктураПараметров.ДанныеШапки.ДатаОбразца, "ДЛФ=DD");
	РуководительЛаборатории = ПараметрыПечати.РуководительЛаборатории;
	ОбластьОборотнаяСторонаАнализы.Параметры["РуководительЛаборатории"]	= РуководительЛаборатории;
	
	Если СтруктураПараметров.Свойство("Показатель") Тогда
		ОбластьОборотнаяСторонаАнализы.Параметры.Заполнить(СтруктураПараметров.Показатель);
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьОборотнаяСторонаАнализы);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ III. Денежный расчет
	
	ОбластьОборотнаяСторонаДенежныйРасчетШапка.Параметры.Заполнить(СтруктураПараметров.ДанныеШапки);	
	ОбластьОборотнаяСторонаДенежныйРасчетШапка.Параметры["ДенежнаяСкидкаВсего"]	= РассчитатьСуммуСкидкиНадбавки(ДокументОбъект);
	ОбластьОборотнаяСторонаДенежныйРасчетШапка.Параметры["ЕдиницаИзмерения"] = 
		СтруктураПараметров.ДанныеШапки.Номенклатура.ЕдиницаИзмерения;
	
	ТабДокумент.Вывести(ОбластьОборотнаяСторонаДенежныйРасчетШапка);
	
	Пока СтруктураПараметров.ВыборкаУслуги.Следующий() Цикл
		
		Выборка	= СтруктураПараметров.ВыборкаУслуги.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОбластьОборотнаяСторонаДенежныйРасчетСтрока.Параметры.Заполнить(Выборка);

			ОбластьОборотнаяСторонаДенежныйРасчетСтрока.Параметры["Всего"] = 
				гкс_ФормированиеПечатныхФорм.ФорматСумм(Выборка.Сумма + ?(ДокументОбъект.ЦенаВключаетНДС, 0, Выборка.СуммаНДС));
			
			ТабДокумент.Вывести(ОбластьОборотнаяСторонаДенежныйРасчетСтрока);	
			
		КонецЦикла; 
		
		ОбластьОборотнаяСторонаДенежныйРасчетИтог.Параметры.Заполнить(СтруктураПараметров.ВыборкаУслуги);
		
		ОбластьОборотнаяСторонаДенежныйРасчетИтог.Параметры["Всего"] = 
			гкс_ФормированиеПечатныхФорм.ФорматСумм(СтруктураПараметров.ВыборкаУслуги.Сумма 
			+ ?(ДокументОбъект.ЦенаВключаетНДС, 0, СтруктураПараметров.ВыборкаУслуги.СуммаНДС));
					
		ТабДокумент.Вывести(ОбластьОборотнаяСторонаДенежныйРасчетИтог);	
		
	КонецЦикла; 	
	
	ОбластьОборотнаяСторонаПодвал.Параметры["ДолжностьСоставил"] = ПараметрыПечати.РеестрСоставил;
	ОбластьОборотнаяСторонаПодвал.Параметры["ДолжностьПроверил"] = ПараметрыПечати.Проверил;
	ТабДокумент.Вывести(ОбластьОборотнаяСторонаПодвал);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДокументОбъект);
	
КонецПроцедуры

#КонецОбласти

Функция ОбластьВАдресеКонтрагента(Адрес)
	
	Результат = "";
	
	УровниАдреса = СтрРазделить(Адрес, ",", Ложь);
	Для Каждого Уровень Из УровниАдреса Цикл
		Если СтрНайти(Уровень, " обл") > 0 Тогда
			Результат = Уровень;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#КонецЕсли
