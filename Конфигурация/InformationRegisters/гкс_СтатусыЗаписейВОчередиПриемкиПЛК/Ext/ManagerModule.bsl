
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура УстановитьСтатусЗаписи(Знач ДокументЗапись, Знач Статус) Экспорт
	
	РеквизитыЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументЗапись, "ТочкаМаршрута, НачалоПериода");
	
	Запись = СтруктураЗаписи();
	Запись.Период = ТекущаяДатаСеанса();
	Запись.ТочкаМаршрута = РеквизитыЗаписи.ТочкаМаршрута;
	Запись.НачалоПериода = РеквизитыЗаписи.НачалоПериода;
	Запись.ЗаписьВОчередь = ДокументЗапись;
	Запись.Статус = Статус;
	
	ДобавитьЗапись(Запись);
	
КонецПроцедуры

Функция ТекущийСтатус(ЗаписьВОчередь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаТекущийСтатус();
	Запрос.УстановитьПараметр("ЗаписьВОчередь", ЗаписьВОчередь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат ?(ЗначениеЗаполнено(Выборка.Статус), 
	          Выборка.Статус, 
			  Перечисления.гкс_СтатусыЭлектроннойОчереди.ПустаяСсылка()); 
	
КонецФункции

// Процедура добавляет запись в регистр по переданным значениям структуры.
Процедура ДобавитьЗапись(Запись, Загрузка = Ложь) Экспорт
    ОбменДаннымиСлужебный.ДобавитьЗаписьВРегистрСведений(Запись, "гкс_СтатусыЗаписейВОчередиПриемкиПЛК", Загрузка);
КонецПроцедуры

// Удаляет набор записей в регистре по переданным значениям структуры.
//
// Параметры:
//  Запись - Структура - структура, по значениям которой необходимо удалить набор записей.
//  Загрузка - Булево - признак, выполнять загрузку в режиме обмена или нет
// 
Процедура УдалитьЗапись(Запись, Загрузка = Ложь) Экспорт
    ОбменДаннымиСлужебный.УдалитьНаборЗаписейВРегистреСведений(Запись, "гкс_СтатусыЗаписейВОчередиПриемкиПЛК", Загрузка);
КонецПроцедуры

// Функция возвращает структуру для последующей записи в регистр сведений
//
Функция СтруктураЗаписи() Экспорт
    
    СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Период");
	СтруктураЗаписи.Вставить("ТочкаМаршрута");
    СтруктураЗаписи.Вставить("НачалоПериода");
    СтруктураЗаписи.Вставить("ЗаписьВОчередь");
    СтруктураЗаписи.Вставить("Статус");

    Возврат СтруктураЗаписи;
    
КонецФункции

// Процедура добавляет запись со статусом "Отменен"
//
// Параметры 
//	ТочкаМаршрута - СправочникСсылка.гкс_ТочкиМаршрута - ТочкаМаршрута
//	НачалоПериода - Дата - НачалоПериода
//	ЗаписьВОчередь - ДокументСсылка.гкс_ЗаписьВОчередьПриемкиПЛК - Ссылка на документ гкс_ЗаписьВОчередьПриемкиПЛК
//	Загрузка - Булево - Признак ОбменДанными.Загрузка
//
Процедура УстановитьСтатусОтменен(ТочкаМаршрута, НачалоПериода, ЗаписьВОчередь, Загрузка) Экспорт
	
	НоваяЗапись = РегистрыСведений.гкс_СтатусыЗаписейВОчередиПриемкиПЛК.СтруктураЗаписи();
	НоваяЗапись.Период = ТекущаяДатаСеанса();
	НоваяЗапись.ТочкаМаршрута = ТочкаМаршрута;
	НоваяЗапись.НачалоПериода = НачалоПериода;
	НоваяЗапись.ЗаписьВОчередь = ЗаписьВОчередь;
	НоваяЗапись.Статус = Перечисления.гкс_СтатусыЭлектроннойОчереди.Отменен;
	
	ДобавитьЗапись(НоваяЗапись, Загрузка);
	
КонецПроцедуры

#Область ЭлектронныеТабло

Функция ПолучитьСписокЗаписейВОчередьДляТабло(СтруктураПараметров) Экспорт
	
	БезОтбора = Перечисления.гкс_ВариантыИспользованияТаблоЭлектроннойОчереди.БезОтбора;

	Если СтруктураПараметров.Свойство("ВариантИспользования") 
		И СтруктураПараметров.ВариантИспользования = БезОтбора Тогда
		
		ИспользуетсяЕдиноеТабло = Истина;	
	Иначе
		ИспользуетсяЕдиноеТабло = Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТочкаМаршрута", СтруктураПараметров.ТочкаМаршрута);
	Запрос.УстановитьПараметр("Номенклатура", СтруктураПараметров.Номенклатура);
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Запрос.УстановитьПараметр("КорректировкаВМинутах", 
		гкс_ЭлектроннаяОчередь.ВремяОжиданияТранспортногоСредства(СтруктураПараметров.ТочкаМаршрута)); 
		
	Запрос.УстановитьПараметр("ИспользуетсяЕдиноеТабло", ИспользуетсяЕдиноеТабло); 
	Запрос.УстановитьПараметр("ОбрабаыватьПриемку", Истина);
	Запрос.УстановитьПараметр("ОбрабаыватьОтгрузку", Ложь);
		
	Запрос.Текст = 	
	 "ВЫБРАТЬ
	 |	ОчередьПриемкиПЛК.НачалоПериода КАК НачалоПериода,
	 |	ОчередьПриемкиПЛК.Номенклатура КАК Номенклатура,
	 |	ОчередьПриемкиПЛК.НомерТранспортногоСредства КАК НомерТранспортногоСредства,
	 |	ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка) КАК ТипРегистрации
	 |ПОМЕСТИТЬ ВТ_ЭлектроннаяОчередь
	 |ИЗ
	 |	РегистрСведений.гкс_ОчередьПриемкиПЛК КАК ОчередьПриемкиПЛК
	 |ГДЕ
	 |	ОчередьПриемкиПЛК.НачалоПериода >= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МИНУТА, -&КорректировкаВМинутах)
	 |	И &ОбрабаыватьПриемку
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	ОчередьОтгрузкиПЛК.НачалоПериода,
	 |	ОчередьОтгрузкиПЛК.Номенклатура,
	 |	ОчередьОтгрузкиПЛК.НомерТранспортногоСредства,
	 |	ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Отгрузка)
	 |ИЗ
	 |	РегистрСведений.гкс_ОчередьОтгрузкиПЛК КАК ОчередьОтгрузкиПЛК
	 |ГДЕ
	 |	ОчередьОтгрузкиПЛК.НачалоПериода >= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МИНУТА, -&КорректировкаВМинутах)
	 |	И &ОбрабаыватьОтгрузку
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ ПЕРВЫЕ 15
	 |	ЭлектроннаяОчередь.НачалоПериода КАК ЗаписьВОчередь,
	 |	ЭлектроннаяОчередь.Номенклатура КАК Номенклатура,
	 |	ЭлектроннаяОчередь.НомерТранспортногоСредства КАК НомерТранспортногоСредства,
	 |	ЭлектроннаяОчередь.ТипРегистрации КАК ТипРегистрации
	 |ИЗ
	 |	ВТ_ЭлектроннаяОчередь КАК ЭлектроннаяОчередь
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	ЗаписьВОчередь";
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ЭлектроннаяОчередь

Процедура ОбновитьСтатусыЭлектроннойОчереди() Экспорт
		
	ДатаОбновления = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ДатаОбновления);
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	НастройкиПриемкиПоТочкамМаршрута.ТочкаМаршрута КАК ТочкаМаршрута,
	|	НастройкиПриемкиПоТочкамМаршрута.ВремяОжидания КАК ВремяОжидания,
	|	НастройкиПриемкиПоТочкамМаршрута.СтарыйСтатус КАК СтарыйСтатус,
	|	НастройкиПриемкиПоТочкамМаршрута.НовыйСтатус КАК НовыйСтатус
	|ПОМЕСТИТЬ ВТ_Настройки
	|ИЗ
	|	РегистрСведений.гкс_НастройкиПриемкаПЛКПоТочкамМаршрута КАК НастройкиПриемкиПоТочкамМаршрута
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктуальныеСтатусыЗаписей.ЗаписьВОчередь КАК ЗаписьВОчередь,
	|	ВТ_Настройки.НовыйСтатус КАК НовыйСтатус,
	|	ВТ_Настройки.ВремяОжидания КАК ВремяОжидания,
	|	ВТ_Настройки.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ЕСТЬNULL(АктуальныеСтатусыЗаписей.НачалоПериода, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК НачалоПериода
	|ПОМЕСТИТЬ ВТ_ЗаписиВОчередь
	|ИЗ
	|	ВТ_Настройки КАК ВТ_Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СтатусыЗаписейВОчередиПриемкиПЛК.СрезПоследних КАК АктуальныеСтатусыЗаписей
	|		ПО ВТ_Настройки.СтарыйСтатус = АктуальныеСтатусыЗаписей.Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаписиВОчередь.ЗаписьВОчередь КАК ЗаписьВОчередь,
	|	ВТ_ЗаписиВОчередь.НовыйСтатус КАК Статус,
	|	ВТ_ЗаписиВОчередь.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ВТ_ЗаписиВОчередь.НачалоПериода КАК НачалоПериода
	|ИЗ
	|	ВТ_ЗаписиВОчередь КАК ВТ_ЗаписиВОчередь
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_ОчередьПриемкиПЛК КАК ОчередьПриемкиПЛК
	|		ПО ВТ_ЗаписиВОчередь.ЗаписьВОчередь = ОчередьПриемкиПЛК.Регистратор
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, МИНУТА, -ВТ_ЗаписиВОчередь.ВремяОжидания) > ОчередьПриемкиПЛК.ОкончаниеПериода";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.гкс_СтатусыЗаписейВОчередиПриемкиПЛК.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.ТочкаМаршрута.Установить(Выборка.ТочкаМаршрута);
		НаборЗаписей.Отбор.НачалоПериода.Установить(Выборка.НачалоПериода);
		НаборЗаписей.Отбор.ЗаписьВОчередь.Установить(Выборка.ЗаписьВОчередь);
		
		Запись = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		Запись.Период = ДатаОбновления;
		
		НаборЗаписей.Записать();
				
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаТекущийСтатус()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСтатусов.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.гкс_СтатусыЗаписейВОчередиПриемкиПЛК.СрезПоследних(Неопределено, ЗаписьВОчередь = &ЗаписьВОчередь) КАК ТаблицаСтатусов";
		
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

