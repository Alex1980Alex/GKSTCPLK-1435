
#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создает запись вызова web-сервиса. Записывает представления запроса и ответа,
//	время выполнения, и идентифицирующую вызов информацию.
//
// Параметры:
//	СтруктураЗаполнения - Структура - Пользователь вызвавший запрос.
//
Процедура СоздатьЗаписьЖурналаСтроки(Знач СтруктураЗаполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.гкс_ЖурналСобытийHTTPСервисов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(СтруктураЗаполнения.Период);
	НаборЗаписей.Отбор.ИмяСервиса.Установить(СтруктураЗаполнения.ИмяСервиса);
	НаборЗаписей.Отбор.НомерСеанса.Установить(СтруктураЗаполнения.НомерСеанса);
	
	Если СтруктураЗаполнения.Свойство("УИД") И ЗначениеЗаполнено(СтруктураЗаполнения["УИД"]) Тогда
		УИД = СтруктураЗаполнения["УИД"];
	Иначе
		УИД = XMLСтрока(Новый УникальныйИдентификатор());
	КонецЕсли;
	НаборЗаписей.Отбор.УИД.Установить(УИД);
	
	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, СтруктураЗаполнения);
	
	Запись.УИД = УИД;
	
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Формирует структуру заполения регистра
// 
// Параметры:
//  Запрос - HTTPСервисЗапрос -
//  Ответ - HTTPСервисОтвет -
//  ИмяСервиса - Строка -
//  КодировкаТелаЗапроса - Строка - Кодировка тела запроса
// 
// Возвращаемое значение:
//  Структура --- Параметры регистрации:::
// * Период - Дата -
// * УИД - Строка -
// * ИмяСервиса - Строка -
// * НомерСеанса - Число -
// * ХранилищеЗапроса - ХранилищеЗначения -
// * ХранилищеОтвета - ХранилищеЗначения -
// * Метод - Строка - 
// * БазовыйURL - Строка -
// * ОтносительныйURL - Строка -
Функция ПараметрыРегистрации(Запрос, Ответ, ИмяСервиса, КодировкаТелаЗапроса = Неопределено) Экспорт

	Результат = Новый Структура;
	
	Результат.Вставить("Период", ТекущаяДатаСеанса());
	Результат.Вставить("УИД", XMLСтрока(Новый УникальныйИдентификатор()));
	Результат.Вставить("ИмяСервиса", ИмяСервиса);
	Результат.Вставить("НомерСеанса", НомерСеансаИнформационнойБазы());	
	
	Сжатие9 = Новый СжатиеДанных(9);
	СодержимоеВСтроке = СодержимоеЗапросаВСтроке(Запрос, КодировкаТелаЗапроса);
	Результат.Вставить("ХранилищеЗапроса", Новый ХранилищеЗначения(СодержимоеВСтроке, Сжатие9));	
	Результат.Вставить("ХранилищеОтвета", Новый ХранилищеЗначения(Ответ.ПолучитьТелоКакСтроку(), Сжатие9));
	
	Результат.Вставить("Метод", Запрос.HTTPМетод);
	Результат.Вставить("БазовыйURL", Запрос.БазовыйURL);
	Результат.Вставить("ОтносительныйURL", Запрос.ОтносительныйURL);
	
	Возврат Результат;
	
КонецФункции

// Сократить записи журнала.
Процедура СократитьЗаписиЖурнала() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Журнал.Период КАК Период
	|ИЗ
	|	РегистрСведений.гкс_ЖурналСобытийHTTPСервисов КАК Журнал
	|ГДЕ
	|	Журнал.Период < &Период";
	
	ДнейСмещенияВСекундах = гкс_ОбщегоНазначенияКлиентСервер.СекундВДне() * 2;
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса() - ДнейСмещенияВСекундах);
	Результат = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.гкс_ЖурналСобытийHTTPСервисов.СоздатьНаборЗаписей();
	
	Пока НЕ Результат.Пустой() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
				НаборЗаписей.Записать();
				
			КонецЦикла;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
				
		
		//@skip-check query-in-loop
		Результат = Запрос.Выполнить();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Содержимое запроса в строке.
// 
// Параметры:
//  Запрос - HTTPСервисЗапрос - Запрос
//  КодировкаТелаЗапроса - Строка, Неопределено - Кодировка тела запроса
// 
// Возвращаемое значение:
//  Строка --
 Функция СодержимоеЗапросаВСтроке(Запрос, Знач КодировкаТелаЗапроса)
	
	Если НЕ ЗначениеЗаполнено(КодировкаТелаЗапроса) Тогда
		КодировкаТелаЗапроса = КодировкаТекста.UTF8;
	КонецЕсли;
	
	//@skip-check structure-consructor-too-many-keys
	СодержимоеЗапроса = Новый Структура("ТелоЗапроса, Заголовки, ПараметрыURL, ПараметрыЗапроса");
	СодержимоеЗапроса.ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку(КодировкаТелаЗапроса);
	СодержимоеЗапроса.Заголовки = Новый Соответствие(Запрос.Заголовки);
	СодержимоеЗапроса.ПараметрыURL = Новый Соответствие(Запрос.ПараметрыURL);
	СодержимоеЗапроса.ПараметрыЗапроса = Новый Соответствие(Запрос.ПараметрыЗапроса);
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СодержимоеЗапроса);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти

#КонецЕсли