#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает массив номенклатры "действующей" в периоде
// используется для календаря электронной очереди
//
// Параметры:
//  ТипРегистрации - ПеречислениеСсылка.гкс_ТипРегистрации - тип регистрации для отбора
//                 
//  ВидПеревозки - ПеречислениеСсылка.гкс_ТипыТранспортныхСредствДоставки -  вид перевозки для отбора
// 
//  Период	- Структура - структура с датами начала и окончания периода
//
// Возвращаемое значение:
//   Массив   - массив номенклатуры
//
Функция РабочаяНоменклатураПериода(ТипРегистрации, ВидПеревозки, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипРегистрации", ТипРегистрации);
	Запрос.УстановитьПараметр("ВидПеревозки", ВидПеревозки);
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НоменклатураПоПериодам.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.гкс_НоменклатураПЛК КАК НоменклатураПоПериодам
	|ГДЕ
	|	НоменклатураПоПериодам.ТипРегистрации = &ТипРегистрации
	|	И НоменклатураПоПериодам.ВидПеревозки = &ВидПеревозки
	|	И НоменклатураПоПериодам.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ НоменклатураПоПериодам.Отключено
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НоменклатураПЛК.Номенклатура
	|ИЗ
	|	РегистрСведений.гкс_НоменклатураПЛК.СрезПоследних(
	|			&ДатаНачала,
	|			ВидПеревозки = &ВидПеревозки
	|				И ТипРегистрации = &ТипРегистрации) КАК НоменклатураПЛК
	|ГДЕ
	|	НЕ НоменклатураПЛК.Отключено";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		МассивНоменклатуры = Новый Массив;
	Иначе     
		МассивНоменклатуры = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	КонецЕсли;	
	
	Возврат МассивНоменклатуры;
	
КонецФункции

// Возвращает срез последних на дату по отборам
//
// Параметры:
//  ТипРегистрации - ПеречислениеСсылка.гкс_ТипРегистрации - тип регистрации для отбора
//                 
//  ВидПеревозки - ПеречислениеСсылка.гкс_ТипыТранспортныхСредствДоставки -  вид перевозки для отбора
//                 
//  ДатаСреза	- Дата - дата получения среза последних
//
// Возвращаемое значение:
//   ТаблицаЗначений	- таблица значений с колонкой "Номенклатура"
//
Функция РабочаяНоменклатураНаДату(ТипРегистрации, ВидПеревозки, ДатаСреза) Экспорт
	
	Запрос = Новый Запрос;		
	Запрос.УстановитьПараметр("ТипРегистрации", ТипРегистрации);
	Запрос.УстановитьПараметр("ВидПеревозки", ВидПеревозки);
	Запрос.УстановитьПараметр("ДатаУстановки", ДатаСреза);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураПЛК.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.гкс_НоменклатураПЛК.СрезПоследних(
	|			&ДатаУстановки,
	|			ВидПеревозки = &ВидПеревозки
	|				И ТипРегистрации = &ТипРегистрации) КАК НоменклатураПЛК
	|ГДЕ
	|	НЕ НоменклатураПЛК.Отключено";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Результат = Неопределено;
	Иначе     
		Результат = РезультатЗапроса.Выгрузить();
	КонецЕсли;
			
	Возврат Результат;
	
КонецФункции

// Создает/обновляет запись в РС гкс_НоменклатураПЛК
//
// Параметры:
//  ПараметрыНоменклатуры - Структура - Значения отбора и записи в регистр сведений гкс_НоменклатураПЛК
//
Процедура УстановитьНоменклатуруПоПараметрам(ПараметрыНоменклатуры) Экспорт
	
	НаборЗаписей = РегистрыСведений.гкс_НоменклатураПЛК.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ТипРегистрации.Установить(ПараметрыНоменклатуры.ТипРегистрации);
	НаборЗаписей.Отбор.ВидПеревозки.Установить(ПараметрыНоменклатуры.ВидПеревозки);
	НаборЗаписей.Отбор.Период.Установить(ПараметрыНоменклатуры.Период);	
	
	Если ЗначениеЗаполнено(ПараметрыНоменклатуры.Номенклатура) Тогда
		
		Если ТипЗнч(ПараметрыНоменклатуры.Номенклатура) = Тип("ТаблицаЗначений") Тогда
			
			Для Каждого СтрокаПараметрыНоменклатуры Из ПараметрыНоменклатуры.Номенклатура Цикл
				
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ПараметрыНоменклатуры, "ТипРегистрации, ВидПеревозки,  Период"); 
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаПараметрыНоменклатуры, "Номенклатура, Отключено, ВидЗерна");
				
			КонецЦикла;
			
		Иначе			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ПараметрыНоменклатуры); 		
		КонецЕсли;
		
	КонецЕсли;
		
	НаборЗаписей.Записать();
		
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  Период  - Дата - время на которое необходимо получить срез        
//  ТипРегистрации  - ПеречислениеСсылка.гкс_ТипРегистрации - приемка или отгрузка
//  ВидПеревозки  - ПеречислениеСсылка.гкс_ТипыТранспортныхСредствДоставки - авто..
//  Номенклатура  - СправочникСсылка.Номенклатура - номенклатура 
//
// Возвращаемое значение:
//   Строка   - наименование вида зерна
//
Функция ВидЗернаПоПараметрам(Период, ТипРегистрации, ВидПеревозки, Номенклатура) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	НоменклатураПЛКСрезПоследних.ВидЗерна КАК ВидЗерна
	|ИЗ
	|	РегистрСведений.гкс_НоменклатураПЛК.СрезПоследних(
	|			&Период,
	|			ТипРегистрации = &ТипРегистрации
	|				И ВидПеревозки = &ВидПеревозки
	|				И Номенклатура = &Номенклатура
	|				И НЕ Отключено) КАК НоменклатураПЛКСрезПоследних";
	
	Запрос.УстановитьПараметр("ВидПеревозки", ВидПеревозки);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ТипРегистрации", ТипРегистрации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.ВидЗерна;
	Иначе	
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ТочкаМаршрута)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли
