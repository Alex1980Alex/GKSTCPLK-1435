#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Событие лога.
// 
// Параметры:
//  Ресурс - СправочникСсылка.гкс_РесурсыВебСервисов -
// 
// Возвращаемое значение:
//  Структура - Событие лога:
// * УниверсальнаяДата - Число -
// * Ресурс - СправочникСсылка.гкс_РесурсыВебСервисов - 
// * ИмяМетода - Строка -
// * Идентификатор - Строка -
// * КодСостояния - Число - 
// * Длительность - Число - 
// * ХранилищеЗапроса - Неопределено - 
// * ХранилищеОтвета - Неопределено - 
// * Дата - Дата -
// * ТипСодержимого - Строка -
Функция СобытиеЛога(Ресурс) Экспорт
	
	Событие = Новый Структура;
	Событие.Вставить("УниверсальнаяДата", 			ТекущаяУниверсальнаяДатаВМиллисекундах());
	Событие.Вставить("Ресурс", 						Ресурс);
	Событие.Вставить("ИмяМетода", 					гкс_РаботаСВебСервисами.МетодСервиса(Ресурс));
	Событие.Вставить("Идентификатор", 				XMLСтрока(Новый УникальныйИдентификатор()));
	Событие.Вставить("КодСостояния", 				0);
	Событие.Вставить("Длительность", 				0);
	Событие.Вставить("ХранилищеЗапроса", 			Неопределено);
	Событие.Вставить("ХранилищеОтвета", 			Неопределено); 
	Событие.Вставить("ХранилищеЗаголовковЗапроса", 	Неопределено);
	Событие.Вставить("ХранилищеЗаголовковОтвета", 	Неопределено);
	Событие.Вставить("Дата", 						ТекущаяДатаСеанса());
	Событие.Вставить("ТипСодержимого", 				"");
	
	Возврат Событие;
	
КонецФункции

Процедура Логировать(СобытиеЛога) Экспорт
	ОбменДаннымиСлужебный.ДобавитьЗаписьВРегистрСведений(СобытиеЛога, "гкс_ЛогСобытийВебСервисов", Истина);
КонецПроцедуры

Функция ПараметрыРегистрации(ИмяСервиса) Экспорт

	Результат	= Новый Структура;
	
	Результат.Вставить("УниверсальнаяДатаРегистрации", 	ТекущаяУниверсальнаяДатаВМиллисекундах());
	Результат.Вставить("ДатаРегистрации", 				ТекущаяДатаСеанса());
	Результат.Вставить("Ресурс", 						ИмяСервиса);
	Результат.Вставить("Пользователь", 					Строка(Пользователи.ТекущийПользователь()));
	
	Возврат Результат;
	
КонецФункции

// Сокращает количество записей в регситре
// Параметры:
// СрокХраненияЛога - Число
Процедура СократитьЗаписиЛога(СрокХраненияЛога) Экспорт
		
	Запрос = Новый Запрос;
	ДатаОчистки = гкс_ОбщегоНазначенияКлиентСервер.СдвигДаты(
		НачалоДня(ТекущаяДатаСеанса()), -СрокХраненияЛога, "ДЕНЬ");
	Запрос.УстановитьПараметр("ДатаОчистки", ДатаОчистки);
	Запрос.Текст = ТекстЗапросаСокращениеЗаписейЛога();
	
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Пока НЕ Результат.Пустой() Цикл
		
		НаборЗаписей = РегистрыСведений.гкс_ЛогСобытийВебСервисов.СоздатьНаборЗаписей();

		НачатьТранзакцию();
		Попытка
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				НаборЗаписей.Отбор.УниверсальнаяДата.Установить(Выборка.УниверсальнаяДата);
				НаборЗаписей.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации("РегистрСведений.гкс_ЛогСобытийВебСервисов",   
				УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.гкс_ЛогСобытийВебСервисов,, ТекстОшибки);
			ВызватьИсключение ОписаниеОшибки();
			
		КонецПопытки;
		
		Результат = Запрос.Выполнить();
		
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаСокращениеЗаписейЛога() 
	
	Возврат 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Лог.УниверсальнаяДата КАК УниверсальнаяДата
		|ИЗ
		|	РегистрСведений.гкс_ЛогСобытийВебСервисов КАК Лог
		|ГДЕ
		|	Лог.Дата < &ДатаОчистки";

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли                                             