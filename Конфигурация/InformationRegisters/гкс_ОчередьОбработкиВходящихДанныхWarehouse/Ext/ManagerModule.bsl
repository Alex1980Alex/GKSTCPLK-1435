#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает выборку из регистра.
//
// Возвращаемое значение:
//  ВыборкаРезультатаЗапроса - включает все поля регистра:
// 		*Порядок - Число - порядок в очереди 
// 		*ВходящиеДанные - СправочникСсылка.гкс_ВходящиеДанныеWarehouse - данные для обработки 
// 		*КоличествоНеудачныхОбработок - Число - неудачные попытки 
// 		*СообщениеОбОшибкеОбработки - Строка - Описание ошибки.
//
Функция ВыборкаИзОчереди(ПараметрыОбработки = Неопределено) Экспорт
	
	ПроверитьИЗаполнитьПараметрыОбработки(ПараметрыОбработки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВходящиеДанныеПоОчереди(ПараметрыОбработки);
	Запрос.УстановитьПараметр("КоличествоНеудачныхОбработок", ПараметрыОбработки.КоличествоНеудачныхОбработок);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Структура записи.
// 
// Возвращаемое значение:
//  Структура - Структура записи:
// * ДатаОбъекта - Дата -  
// * Объект - Неопределено, ДокументСсылка - 
// * КоличествоНеудачныхОбработок - Число - 
// * СообщениеОбОшибкеОбработки - Строка - 
// * Действие - ПеречислениеСсылка.гкс_ДействияОтложеннойОбработки - 
// * ДополнительныеСвойства - Неопределено, Произвольный - 
Функция СтруктураЗаписи() Экспорт
	
	ПустаяДата 		= гкс_ОбщегоНазначенияКлиентСервер.ПустаяДата();
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Порядок", 						0);
	СтруктураЗаписи.Вставить("ВходящиеДанные", 					Неопределено);
	СтруктураЗаписи.Вставить("КоличествоНеудачныхОбработок", 	0);
	СтруктураЗаписи.Вставить("СообщениеОбОшибкеОбработки", 		"");
	СтруктураЗаписи.Вставить("ДатаСоздания", 					ПустаяДата);
	
	Возврат СтруктураЗаписи;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыОбработкиПоУмолчанию()
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("КоличествоНеудачныхОбработок", 	3);
	ПараметрыОбработки.Вставить("РазмерПорцииОбработки", 			100);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

Процедура ПроверитьИЗаполнитьПараметрыОбработки(ПараметрыОбработки)
	
	ПараметрыПоУмолчанию = ПараметрыОбработкиПоУмолчанию();
	
	Если ПараметрыОбработки = Неопределено Тогда
		ПараметрыОбработки = ПараметрыПоУмолчанию;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКоличествоНеудачных = 
		ПараметрыОбработки.Свойство("КоличествоНеудачныхОбработок") 
		И Не ЗначениеЗаполнено(ПараметрыОбработки.КоличествоНеудачныхОбработок);
	
	Если ЗаполнитьКоличествоНеудачных Тогда
		ПараметрыОбработки.КоличествоНеудачныхОбработок = ПараметрыПоУмолчанию.КоличествоНеудачныхОбработок;
	КонецЕсли;
	
	ЗаполнитьРазмерПорции = 
		ПараметрыОбработки.Свойство("РазмерПорцииОбработки") 
		И Не ЗначениеЗаполнено(ПараметрыОбработки.РазмерПорцииОбработки);
	
	Если ЗаполнитьРазмерПорции Тогда
		ПараметрыОбработки.РазмерПорцииОбработки = ПараметрыПоУмолчанию.РазмерПорцииОбработки;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет входяшие данные в очередь обработки.
//
// Параметры:
//  ВходящиеДанные - СправочникСсылка.гкс_ВходящиеДанныеWarehouse - данные для обработки
//  ДатаСоздания - Дата - создания
//
Процедура ЗафиксироватьНовыеВходящиеДанныеВОчереди(ВходящиеДанные, ДатаСоздания) Экспорт
	
	СтруктураЗаписи = СтруктураЗаписи();
	СтруктураЗаписи.Вставить("ВходящиеДанные", 	ВходящиеДанные);
	СтруктураЗаписи.Вставить("Порядок", 		ТекущаяУниверсальнаяДатаВМиллисекундах());
	СтруктураЗаписи.Вставить("ДатаСоздания", 	ДатаСоздания);
	
	гкс_ОбменДаннымиСервер.ДобавитьЗаписьВРегистрСведений(
		СтруктураЗаписи, 
		"гкс_ОчередьОбработкиВходящихДанныхWarehouse");
	
КонецПроцедуры

// Добавляет входяшие данные в очередь обработки.
//
// Параметры:
//  СтруктураЗаписи - см. описание в СтруктураЗаписи()
//
Процедура ЗафиксироватьИзмененияВходящихДанныхВОчереди(СтруктураЗаписи) Экспорт
	
	гкс_ОбменДаннымиСервер.ДобавитьЗаписьВРегистрСведений(
		СтруктураЗаписи, 
		"гкс_ОчередьОбработкиВходящихДанныхWarehouse");
	
КонецПроцедуры

// Исключает входяшие данные из очереди обработки.
//
// Параметры:
//  ВходящиеДанные - СправочникСсылка.гкс_ВходящиеДанныеWarehouse - данные для обработки
//  Порядок - Число - необязательный параметр отбора
//
Процедура УдалитьОбработкуВходящихДанныхВОчереди(ВходящиеДанные, Порядок = Неопределено) Экспорт
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ВходящиеДанные", ВходящиеДанные);
	Если Не Порядок = Неопределено Тогда
		СтруктураЗаписи.Вставить("Порядок", Порядок);
	КонецЕсли;
	
	гкс_ОбменДаннымиСервер.УдалитьНаборЗаписейВРегистреСведений(
		СтруктураЗаписи, 
		"гкс_ОчередьОбработкиВходящихДанныхWarehouse");
	
КонецПроцедуры

Функция ВыбратьЗапистьПоОтбору(ОсновнойОтбор) Экспорт
	
	ЗаписьМенеджер = СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьМенеджер, ОсновнойОтбор);
	ЗаписьМенеджер.Прочитать();
	
	СтруктураЗаписи = СтруктураЗаписи();
	
	Если ЗаписьМенеджер.Выбран() Тогда
        ЗаполнитьЗначенияСвойств(СтруктураЗаписи, ЗаписьМенеджер);
	КонецЕсли;
	
	Возврат СтруктураЗаписи;
	
КонецФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаВходящиеДанныеПоОчереди(ПараметрыОбработки)
	
	РазмерСтрокой 	= Формат(ПараметрыОбработки.РазмерПорцииОбработки, "ЧГ=100");
	
	ТекстЗапроса 	= 
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	ОчередьОбработки.Порядок КАК Порядок,
	|	ОчередьОбработки.ВходящиеДанные КАК ВходящиеДанные,
	|	ОчередьОбработки.КоличествоНеудачныхОбработок КАК КоличествоНеудачныхОбработок,
	|	ОчередьОбработки.СообщениеОбОшибкеОбработки КАК СообщениеОбОшибкеОбработки,
	|	ОчередьОбработки.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	РегистрСведений.гкс_ОчередьОбработкиВходящихДанныхWarehouse КАК ОчередьОбработки
	|ГДЕ
	|	ОчередьОбработки.КоличествоНеудачныхОбработок <= &КоличествоНеудачныхОбработок
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	СтрокаПоиска = "ПЕРВЫЕ 100";
	СтрокаЗамены = СтрШаблон("ПЕРВЫЕ %1", РазмерСтрокой);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрокаПоиска, СтрокаЗамены);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли