#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс


// Проверяется есть ли настройка порядка состояний регистрации
// 
// Параметры:
// 	СтруктураОтбора - Структура
// 	СтруктураОтбора.Период - Дата
// 	СтруктураОтбора.ТочкаМаршрута - СправочникСсылка.ЦБТ_ТочкиМаршрута
// 	СтруктураОтбора.ТипРегистрации - ПеречислениеСсылка.гкс_ТипРегистрации
// 	СтруктураОтбора.ВидПеревозки - ПеречислениеСсылка.ЦБТ_ТипыТранспортныхСредствДоставки
// ВозвращаемоеЗначение 
// 	Булево - Истина , если есть в регистре настройка и она не пустая
//
Функция УстановленПорядокСостоянийРегистрации(СтруктураОтбора) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкаПорядкаСостоянийРегистрацииСрезПоследних.ПорядокСостояний КАК ПорядокСостояний
	|ИЗ
	|	РегистрСведений.гкс_НастройкаПорядкаСостоянийРегистрации.СрезПоследних(
	|			&Период,
	|			ВидПеревозки = &ВидПеревозки
	|				И ТипРегистрации = &ТипРегистрации
	|				И ТочкаМаршрута = &ТочкаМаршрута) КАК НастройкаПорядкаСостоянийРегистрацииСрезПоследних
	|ГДЕ
	|	НЕ НастройкаПорядкаСостоянийРегистрацииСрезПоследних.ПорядокСостояний = ЗНАЧЕНИЕ(Справочник.гкс_ПорядокСостоянийРегистрации.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Период", СтруктураОтбора.Период);
	Запрос.УстановитьПараметр("ТочкаМаршрута", СтруктураОтбора.ТочкаМаршрута);
	Запрос.УстановитьПараметр("ТипРегистрации", СтруктураОтбора.ТипРегистрации);
	Запрос.УстановитьПараметр("ВидПеревозки", СтруктураОтбора.ВидПеревозки);
	Результат = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ Результат.Пустой();
			
КонецФункции

// Проверяется есть ли настройка порядка состояний регистрации
// 
// Параметры:
// 	СтруктураОтбора - Структура
// 	СтруктураОтбора.Период - Дата
// 	СтруктураОтбора.ТочкаМаршрута - СправочникСсылка.ЦБТ_ТочкиМаршрута
// 	СтруктураОтбора.ТипРегистрации - ПеречислениеСсылка.гкс_ТипРегистрации
// 	СтруктураОтбора.ВидПеревозки - ПеречислениеСсылка.ЦБТ_ТипыТранспортныхСредствДоставки
// 	Состояния - Структура (ТекущееСостояние, НовоеСостояние)
// ВозвращаемоеЗначение 
// 	Булево - Истина , новый статус корректный
//
Функция ПроверитьКорректностьПоследовательностиСтатусов(СтруктураДанных) Экспорт
	
	Если (НЕ ЗначениеЗаполнено(СтруктураДанных.ТекущееСостояние) 
		И СтруктураДанных.НовоеСостояние = Перечисления.гкс_СостоянияРегистрации.Прибыл)
		ИЛИ СтруктураДанных.ЕстьИзменениеСостояния Тогда
		Возврат Истина;
	КонецЕсли;	
				      	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокСостоянийРегистрации.НомерПоПорядку КАК НомерПоПорядку,
	|	ПорядокСостоянийРегистрации.СостояниеРегистрации КАК СостояниеРегистрации
	|ПОМЕСТИТЬ ТаблицаСостояний
	|ИЗ
	|	РегистрСведений.гкс_НастройкаПорядкаСостоянийРегистрации.СрезПоследних(
	|			&Период,
	|			ВидПеревозки = &ВидПеревозки
	|				И ТипРегистрации = &ТипРегистрации
	|				И ТочкаМаршрута = &ТочкаМаршрута) КАК НастройкаПорядкаСостоянийРегистрацииСрезПоследних,
	|	Справочник.гкс_ПорядокСостоянийРегистрации.ПорядокСостояний КАК ПорядокСостоянийРегистрации
	|ГДЕ
	|	ПорядокСостоянийРегистрации.СостояниеРегистрации В (&НовоеСостояние, &ТекущееСостояние)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСостояний.НомерПоПорядку КАК НомерПоПорядку,
	|	ТаблицаСостояний.СостояниеРегистрации КАК СостояниеРегистрации
	|ПОМЕСТИТЬ ВТ_НовоеСостояние
	|ИЗ
	|	ТаблицаСостояний КАК ТаблицаСостояний
	|ГДЕ
	|	ТаблицаСостояний.СостояниеРегистрации = &НовоеСостояние
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСостояний.НомерПоПорядку КАК НомерПоПорядку,
	|	ТаблицаСостояний.СостояниеРегистрации КАК СостояниеРегистрации
	|ПОМЕСТИТЬ ВТ_ТекущееСостояние
	|ИЗ
	|	ТаблицаСостояний КАК ТаблицаСостояний
	|ГДЕ
	|	ТаблицаСостояний.СостояниеРегистрации = &ТекущееСостояние
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НовоеСостояние.СостояниеРегистрации КАК СостояниеРегистрацииНовое,
	|	ВТ_ТекущееСостояние.СостояниеРегистрации КАК СостояниеРегистрацииТекущее
	|ИЗ
	|	ВТ_НовоеСостояние КАК ВТ_НовоеСостояние
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТекущееСостояние КАК ВТ_ТекущееСостояние
	|		ПО ВТ_НовоеСостояние.НомерПоПорядку >= ВТ_ТекущееСостояние.НомерПоПорядку";
	
	Запрос.УстановитьПараметр("Период", СтруктураДанных.Период);
	Запрос.УстановитьПараметр("ТочкаМаршрута", СтруктураДанных.ТочкаМаршрута);
	Запрос.УстановитьПараметр("ТипРегистрации", СтруктураДанных.ТипРегистрации);
	Запрос.УстановитьПараметр("ВидПеревозки", СтруктураДанных.ВидПеревозки);
	Запрос.УстановитьПараметр("ТекущееСостояние", СтруктураДанных.ТекущееСостояние);
	Запрос.УстановитьПараметр("НовоеСостояние", СтруктураДанных.НовоеСостояние);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не Результат.Пустой();
	                                       	
КонецФункции

#КонецОбласти

#КонецЕсли
