
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение
// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - ФиксированнаяСтруктура - свойства документа (См. ПроведениеДокументов.СвойстваДокумента).
//
// Возвращаемое значение:
//  Структура - параметры учетного механизма (См. ПроведениеДокументов.ПараметрыУчетногоМеханизма()).
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = гкс_ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда		
		Параметры.НезависимыеРегистры.Добавить(Метаданные.РегистрыСведений.гкс_СтатусыДопускаВагоновКВскрытию);
	КонецЕсли;
	
	Параметры.ЕстьПроизводныеДвижения = Истина;
		
	Возврат Параметры;
	
КонецФункции

Процедура ПередЗаписьюДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(Документ.Ссылка);
	
	ЭтоОтменаПроведенияДокумента = 
				(Документ.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента.РежимЗаписи = 
										РежимЗаписиДокумента.ОтменаПроведения);
	
	ТипыДокументовПриемки = гкс_ПриемкаТранспорта.ТипыДокументовПриемкиПЛК();
	
	Если ЭтоОтменаПроведенияДокумента И НЕ ТипыДокументовПриемки.Найти(ТипДокумента) = Неопределено Тогда
		ДокументРегистрации = РегистрыСведений.гкс_СостоянияРегистрации.ДокументРегистрации(Документ.Ссылка);
		
		Набор = РегистрыСведений.гкс_СтатусыДопускаВагоновКВскрытию.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(Документ.Дата);
		Набор.Отбор.ДокументРегистрации.Установить(ДокументРегистрации);
		
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования движений по независимым регистрам основных средств.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Документ - ДокументСсылка - ссылка на документ
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ЗаписатьДанные(ТаблицыДляДвижений, Документ, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если ТаблицыДляДвижений.Свойство("Таблицагкс_СтатусыДопускаВагоновКВскрытию") Тогда

		ДокументРегистрации = РегистрыСведений.гкс_СостоянияРегистрации.ДокументРегистрации(Документ);
		Набор = РегистрыСведений.гкс_СтатусыДопускаВагоновКВскрытию.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(Документ.Дата);
		Набор.Отбор.ДокументРегистрации.Установить(ДокументРегистрации);
		Набор.Заполнить(Документ);

		Набор.Загрузить(ТаблицыДляДвижений["Таблицагкс_СтатусыДопускаВагоновКВскрытию"]);
		Набор.Записать();

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
	
// Регистрирует изменение допуска без документов
Процедура ЗарегистрироватьИзменениеДопуска(ПараметрыДопуска) Экспорт
	ДобавитьЗапись(ПараметрыДопуска);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура добавляет запись в регистр по переданным значениям структуры.
Процедура ДобавитьЗапись(Запись, Загрузка = Ложь)
    ОбменДаннымиСлужебный.ДобавитьЗаписьВРегистрСведений(Запись, "гкс_СтатусыДопускаВагоновКВскрытию", Загрузка);
КонецПроцедуры

// Удаляет набор записей в регистре по переданным значениям структуры.
//
// Параметры:
//  Запись - Структура - структура, по значениям которой необходимо удалить набор записей.
//  Загрузка - Булево - признак, выполнять загрузку в режиме обмена или нет
// 
Процедура УдалитьЗапись(Запись, Загрузка = Ложь)
    ОбменДаннымиСлужебный.УдалитьНаборЗаписейВРегистреСведений(Запись, "гкс_СтатусыДопускаВагоновКВскрытию", Загрузка);
КонецПроцедуры

#КонецОбласти

#КонецЕсли