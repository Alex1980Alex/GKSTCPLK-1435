
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ТочкаМаршрута)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Процедура добавляет запись в регистр по переданным значениям структуры.
Процедура ДобавитьЗапись(СтруктураЗаписи) Экспорт
	
    ОбменДаннымиСлужебный.ДобавитьЗаписьВРегистрСведений(СтруктураЗаписи, "гкс_СостоянияРегистрации");
	
КонецПроцедуры

// Делает запись в регистр сведений о новом состоянии регистрации
//
// Параметры:
//  ДанныеЗаписи  - Структура - данные для записи в регистр
// 
Процедура УстановитьСостояниеРегистрации(ДанныеЗаписи) Экспорт
	
	ДобавитьЗапись(ДанныеЗаписи);
	
	гкс_ПриемкаТранспортаВызовСервера.
		РассчитатьДанныеРегистрацииДляРМПриемкаТранспорта(ДанныеЗаписи.ДокументРегистрации);
		
КонецПроцедуры

// Возвращает структуру записи
//
// Возвращаемое значение:
//  Структура - структура записи.
//
Функция СтруктураЗаписи() Экспорт
    
    СтруктураЗаписи = Новый Структура;
	
	СтруктураЗаписи.Вставить("Период");
	СтруктураЗаписи.Вставить("ТочкаМаршрута");
	СтруктураЗаписи.Вставить("ТипРегистрации");
	СтруктураЗаписи.Вставить("ДокументРегистрации");
	СтруктураЗаписи.Вставить("ТранспортноеСредство");
    СтруктураЗаписи.Вставить("ВидПеревозки");
     
    СтруктураЗаписи.Вставить("Состояние");
    СтруктураЗаписи.Вставить("Пользователь");
    СтруктураЗаписи.Вставить("Комментарий");
    СтруктураЗаписи.Вставить("МестнаяДата");

    Возврат СтруктураЗаписи;
    
КонецФункции

// Проверяет что у документа достигнуто финальное состояние "Убыл"
//
// Возвращаемое значение:
//		Булево - Истина, если текущее состояние "Убыл"
//
Функция УжеУбыл(ДокументРегистрации) Экспорт
	
	ТекущееСостояние = ТекущееСостояниеПоРегистрации(ДокументРегистрации);
	
	Возврат ТекущееСостояние = Перечисления.гкс_СостоянияРегистрации.Убыл;
			
КонецФункции

// Возвращает текущее состояние регистрации
//
// Параметры:
//  ВидПеревозки - ПеречислениеСсылка.гкс_ТипыТранспортныхСредствДоставки - вид перевозки.
//  ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК - регистрация на ПЛК.
//  ТипРегистрации - ПеречислениеСсылка.гкс_ТипРегистрации - тип регистрации.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.гкс_СостоянияРегистрации - текущее состояние регистрации.
//
Функция ТекущееСостояниеРегистрации(ВидПеревозки, ДокументРегистрации, ТипРегистрации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияРегистрацииСрез.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.гкс_СостоянияРегистрации.СрезПоследних(
	|			,
	|			ВидПеревозки = &ВидПеревозки
	|				И ТипРегистрации = &ТипРегистрации
	|				И ДокументРегистрации = &ДокументРегистрации) КАК СостоянияРегистрацииСрез"; 
			
	Запрос.УстановитьПараметр("ВидПеревозки", ВидПеревозки);
	Запрос.УстановитьПараметр("ДокументРегистрации", ДокументРегистрации);
	Запрос.УстановитьПараметр("ТипРегистрации", ТипРегистрации);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Выборка.Следующий();
	
	Возврат Выборка.Состояние;
	
КонецФункции   

Процедура УстановитьКомментарий(Отбор, Комментарий) Экспорт
	
	ОбщегоНазначенияКлиентСервер
	      .ПроверитьПараметр("УстановитьКомментарий",
		                     "Комментарий",
		                     Комментарий,
							 Новый ОписаниеТипов("Строка"));
							 
	ОбщегоНазначенияКлиентСервер
	      .ПроверитьПараметр("УстановитьКомментарий",
		                     "Отбор",
		                     Отбор,
							 Тип("Структура"));

		
	НаборЗаписей = СоздатьНаборЗаписей();
	
	Для Каждого ТекущийОтбор Из Отбор Цикл
		НаборЗаписей
			.Отбор[ТекущийОтбор.Ключ]
			.Установить(ТекущийОтбор.Значение);
	КонецЦикла; 
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.Комментарий = Комментарий;	
	КонецЦикла;
	НаборЗаписей.Записать();
		
КонецПроцедуры

Функция ТекущееСостояниеПоРегистрации(СсылкаНаРегистрацию, Дата = Неопределено) Экспорт
		
	ТекущиеДанныеСостояния = ТекущиеДанныеСостоянияПоРегистрации(СсылкаНаРегистрацию, Дата);
	
	Возврат ТекущиеДанныеСостояния.Состояние;
		
КонецФункции

Функция ТекущиеДанныеСостоянияПоРегистрации(СсылкаНаРегистрацию, Дата = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Состояние", Перечисления.гкс_СостоянияРегистрации.ПустаяСсылка());
	Результат.Вставить("Комментарий", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("ДокументРегистрации", СсылкаНаРегистрацию);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВсеСостояния.Состояние КАК Состояние,
	|	ВсеСостояния.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.гкс_СостоянияРегистрации.СрезПоследних(&ДатаСреза, ДокументРегистрации = &ДокументРегистрации) КАК
	|		ВсеСостояния";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
			
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// Получить дату установки указанного состояния для Регистрации.
// 
// Параметры:
//  ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК - Документ регистрации
//  Состояние - ПеречислениеСсылка.гкс_СостоянияРегистрации - запрашиваемое состояние
// 
// Возвращаемое значение:
//  Дата - Дата записи в регистр с указанным состоянием или пустая
Функция ПолучитьДатуУстановкиСостоянияПоРегистрации(ДокументРегистрации, Состояние) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гкс_СостоянияРегистрации.Период КАК ДатаУстановки
	|ИЗ
	|	РегистрСведений.гкс_СостоянияРегистрации КАК гкс_СостоянияРегистрации
	|ГДЕ
	|	гкс_СостоянияРегистрации.ДокументРегистрации = &ДокументРегистрации
	|	И гкс_СостоянияРегистрации.Состояние = &Состояние";
	
	Запрос.УстановитьПараметр("ДокументРегистрации", ДокументРегистрации);
	Запрос.УстановитьПараметр("Состояние", Состояние);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Дата(1, 1, 1, 0, 0, 0);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Выборка.Следующий();
	
	Возврат Выборка.ДатаУстановки;		
КонецФункции

Функция ВозможностьИзмененияСтатуса(НаборЗаписей) Экспорт	
	
	Значение = Истина;	
	СтруктураДанных = ПолучитьСостояния(НаборЗаписей);
	
	МенеджерНастройки = РегистрыСведений.гкс_НастройкаПорядкаСостоянийРегистрации;
	ПроверкаНеПройдена = МенеджерНастройки.УстановленПорядокСостоянийРегистрации(СтруктураДанных)				
		И Не МенеджерНастройки.ПроверитьКорректностьПоследовательностиСтатусов(СтруктураДанных);
	
	Если ПроверкаНеПройдена Тогда
			
			ИмяСобытияЖурналРегистрации = НСтр("ru = 'Присвоение нового статуса Регистрации ПЛК.'");
			Ошибка = НСтр("ru = 'Попытка нарушения порядка состояний регистрации: %1.
			|Текущее состояние: %2, Новое состояние: %3'");

			Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Ошибка, СтруктураДанных.Регистрация, СтруктураДанных.ТекущееСостояние, СтруктураДанных.НовоеСостояние);
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , 
			Ошибка);
			//@skip-warning
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
			Значение = Ложь;
					
	КонецЕсли;	
	
	Возврат Значение;
	
КонецФункции

// Возвращает все состояния по документу регистрации
// Параметры:
// ДокументРегистрации - ДокументСсылка.гкс_РегистрацияПЛК
// ВозвращаемоеЗначение
// - Массив
Функция ВсеСостоянияРегистрации(ДокумементРегистрации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументРегистрации", ДокумементРегистрации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	гкс_СостоянияРегистрации.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.гкс_СостоянияРегистрации КАК гкс_СостоянияРегистрации
	|ГДЕ
	|	гкс_СостоянияРегистрации.ДокументРегистрации = &ДокументРегистрации
	|
	|СГРУППИРОВАТЬ ПО
	|	гкс_СостоянияРегистрации.Состояние";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат
		РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Состояние");
	
КонецФункции	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// возвращает ссылку на документ регистрации для входношо документа
//
// Параметры:
//  Документ  - ДокументСсылка - свсылка на документ                 
//
// Возвращаемое значение:
//   ДокументСсылка.гкс_РегистрацияНаПЛК   - ссылка на документ регистрации
//
Функция ДокументРегистрации(Документ) Экспорт
	
	ТипДокумента = ТипЗнч(Документ);

	Если ТипДокумента = Тип("ДокументСсылка.гкс_Взвешивание") 
		ИЛИ ТипДокумента = Тип("ДокументСсылка.гкс_НаправлениеНаРазгрузку") Тогда
		ДокументРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДокументРегистрации");

	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.гкс_ЛабораторныйАнализ") Тогда
		ДокументРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "гкс_ДокументРегистрации");

	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.гкс_ФормированиеНомераПробы")
		И Документ.СписокРегистраций.Количество() > 0  Тогда 
		// для единичной пробы ДокументРегистрации всегда один
		ДокументРегистрации = Документ.СписокРегистраций[0].ДокументРегистрации;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.гкс_РегистрацияНаПЛК") Тогда 
		ДокументРегистрации = Документ;	

	Иначе	
		ДокументРегистрации = Документы.гкс_РегистрацияНаПЛК.ПустаяСсылка();
	КонецЕсли;
	          
	Возврат ДокументРегистрации;
	
КонецФункции

Функция ПолучитьСостояния(Набор) 
	
	Структура = Новый Структура;
	
	Регистрация = Набор.Отбор.ДокументРегистрации.Значение;
	Структура.Вставить("Регистарция", Регистрация); 
	Структура.Вставить("ВидПеревозки", Регистрация.ВидПеревозки); 
	Структура.Вставить("ТипРегистрации", Регистрация.ТипРегистрации); 
	Структура.Вставить("Период", Набор.Отбор.Период.Значение); 
	
	ТекущееСостояние = ТекущееСостояниеПоРегистрации(Регистрация, Структура.Период);
	Структура.Вставить("ТекущееСостояние", ТекущееСостояние);
						
	НовоеСостояние = Неопределено;
	ТочкаМаршрута = Неопределено;

	Таблица = Набор.Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		НовоеСостояние = Таблица[0].Состояние;
		ТочкаМаршрута = Таблица[0].ТочкаМаршрута;
	КонецЕсли;
	
	Структура.Вставить("НовоеСостояние", НовоеСостояние);
	Структура.Вставить("ТочкаМаршрута", ТочкаМаршрута);
	
	Структура.Вставить("ЕстьИзменениеСостояния", 
	                НЕ Структура.НовоеСостояние = Структура.ТекущееСостояние);
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#КонецЕсли
