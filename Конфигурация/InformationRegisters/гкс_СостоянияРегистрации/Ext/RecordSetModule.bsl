#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.гкс_НаправлениеНаРазгрузку") Тогда
		ДополнительныеСвойства.Вставить("ЯмаРазгрузки", ДанныеЗаполнения.ЯмаРазгрузки);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДополнительныеСвойстваПередЗаписью();
		
	СформироватьВариантыДляТабло(ДополнительныеСвойства.ДокументРегистрации);
		
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
				
	Если ДополнительныеСвойства.Свойство("ВариантыДляТабло") Тогда
		ЗарегистрироватьОбъектКОбменуСТабло(Отказ);
	КонецЕсли;
	
	ТипРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныеСвойства.ДокументРегистрации, "ТипРегистрации");
	
	Если ДополнительныеСвойства.ЕстьИзменениеСостояния
		И ЗначениеЗаполнено(ТипРегистрации) 
		И Не гкс_ИнтеграцияСКверионПовтИсп.СостоянияРегистрацииКВыгрузкеВКверион(ТипРегистрации)
		     .Найти(ДополнительныеСвойства.НовоеСостояние) = Неопределено Тогда
		
		ПараметрыВыгрузки = Новый Структура;
		ПараметрыВыгрузки.Вставить("ДокументРегистрации", ДополнительныеСвойства.ДокументРегистрации);
		ПараметрыВыгрузки.Вставить("СостояниеРегистрации", ДополнительныеСвойства.НовоеСостояние);
		ПараметрыВыгрузки.Вставить("Период", ДополнительныеСвойства.Период);
		ПараметрыВыгрузки.Вставить("ТочкаМаршрута", ДополнительныеСвойства.ТочкаМаршрута);
		ПараметрыВыгрузки.Вставить("ТипРегистрации", ТипРегистрации);
		     	
		гкс_ИнтеграцияСКверионСервер.ВыгрузитьСообщениеВКверион(ПараметрыВыгрузки, Отказ);  
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДополнительныеСвойстваПередЗаписью()
	
	Менеджер = РегистрыСведений.гкс_СостоянияРегистрации;
	
	ДополнительныеСвойства.Вставить("ДокументРегистрации", Отбор.ДокументРегистрации.Значение);
	ДополнительныеСвойства.Вставить("Номенклатура", Неопределено);
	
	Если ЗначениеЗаполнено(ДополнительныеСвойства.ДокументРегистрации) Тогда
		ДополнительныеСвойства.Номенклатура = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныеСвойства.ДокументРегистрации, "Номенклатура");
	КонецЕсли;
	
	СтароеСостояние = Менеджер.ТекущееСостояниеПоРегистрации(ДополнительныеСвойства.ДокументРегистрации, Отбор.Период.Значение);
	ДополнительныеСвойства.Вставить("СтароеСостояние", СтароеСостояние);
						
	НовоеСостояние = Неопределено;
	ТочкаМаршрута = Неопределено;
	
	НЗВТаблице = Выгрузить();
	Если НЗВТаблице.Количество() > 0 Тогда
		НовоеСостояние = НЗВТаблице[0].Состояние;
		ТочкаМаршрута = НЗВТаблице[0].ТочкаМаршрута; 
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("НовоеСостояние", НовоеСостояние);
	ДополнительныеСвойства.Вставить("ТочкаМаршрута", ТочкаМаршрута);
	ДополнительныеСвойства.Вставить("Период", Отбор.Период.Значение);
	
	ДополнительныеСвойства.Вставить("ЕстьИзменениеСостояния", 
	                НЕ ДополнительныеСвойства.НовоеСостояние = ДополнительныеСвойства.СтароеСостояние);

КонецПроцедуры
				
#Область РаботаСТабло

Функция ИнициализироватьТаблицуВариантовДляТабло()

	ВариантыДляТабло = Новый ТаблицаЗначений;
	КолонкиТаблицы = ВариантыДляТабло.Колонки;

	КолонкиТаблицы.Добавить("ТочкаМаршрута", Новый ОписаниеТипов("СправочникСсылка.гкс_ТочкиМаршрута"));
	КолонкиТаблицы.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КолонкиТаблицы.Добавить("ТипРегистрации", Новый ОписаниеТипов("ПеречислениеСсылка.гкс_ТипРегистрации"));
	КолонкиТаблицы.Добавить("ВидПеревозки", Новый ОписаниеТипов("ПеречислениеСсылка.гкс_ТипыТранспортныхСредствДоставки"));
	КолонкиТаблицы.Добавить("ВидТабло", Новый ОписаниеТипов("ПеречислениеСсылка.гкс_ВидыЭлектронныхТабло"));
	КолонкиТаблицы.Добавить("ЯмаРазгрузки", Новый ОписаниеТипов("СправочникСсылка.гкс_ТочкиМаршрута"));
	КолонкиТаблицы.Добавить("Весы", Новый ОписаниеТипов("СправочникСсылка.гкс_ОборудованиеПЛК"));
	КолонкиТаблицы.Добавить("СписокСостояний");

	Возврат ВариантыДляТабло; 

КонецФункции	

Процедура СформироватьВариантыДляТабло(ДокументРегистрации)
	
	МенеджерРегистра = РегистрыСведений.гкс_НастройкиПриемкаПЛКПоТочкамМаршрута;
	
	Если НЕ (ДокументРегистрации.ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль 
		И МенеджерРегистра.ИспользуетсяЭлектронноеТабло(ДокументРегистрации.ТочкаМаршрута)) Тогда

		Возврат;
	КонецЕсли;	

	ВариантыДляТабло = ИнициализироватьТаблицуВариантовДляТабло();
	СостоянияРегистрации = Перечисления.гкс_СостоянияРегистрации;
		
	Для Каждого РегистрСведенийЗапись Из ЭтотОбъект Цикл

		ТекущееСостояние = гкс_ПриемкаТранспорта.ТекущееСостояниеРегистрации(РегистрСведенийЗапись.ДокументРегистрации);
			
		Если РегистрСведенийЗапись.Состояние = СостоянияРегистрации.Прибыл
			ИЛИ ТекущееСостояние = СостоянияРегистрации.Прибыл Тогда
				
			ДобавитьВариантНазначениеНаВесы(ВариантыДляТабло, РегистрСведенийЗапись);		
		КонецЕсли;
			
		Если ТекущееСостояние = СостоянияРегистрации.ВыгрузкаРазрешена
			ИЛИ РегистрСведенийЗапись.Состояние = СостоянияРегистрации.ВыгрузкаРазрешена Тогда
				
			ДобавитьВариантНазначениеНаВыгрузку(ВариантыДляТабло, РегистрСведенийЗапись, ДополнительныеСвойства);
		КонецЕсли;
			
		Если (ТекущееСостояние = СостоянияРегистрации.КачествоНеПринято 
			И РегистрСведенийЗапись.Состояние <> СостоянияРегистрации.ВыгрузкаРазрешена)
			ИЛИ РегистрСведенийЗапись.Состояние = СостоянияРегистрации.КачествоНеПринято Тогда
				
			ДобавитьВариантОжиданияПроб(ВариантыДляТабло, РегистрСведенийЗапись);	
					
		КонецЕсли;
	КонецЦикла;

	СвернутьПо = "ТочкаМаршрута,Номенклатура,ТипРегистрации,ВидПеревозки,ВидТабло,СписокСостояний,ЯмаРазгрузки,Весы";
	ВариантыДляТабло.Свернуть(СвернутьПо, "");

	ДополнительныеСвойства.Вставить("ВариантыДляТабло", ВариантыДляТабло);

КонецПроцедуры

Процедура ДобавитьВариантНазначениеНаВыгрузку(ВариантыДляТабло, РегистрСведенийЗапись, ДополнительныеСвойства)

	НовыйВариант = ВариантыДляТабло.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйВариант, РегистрСведенийЗапись);

	НовыйВариант.ВидТабло = 
		ПредопределенноеЗначение("Перечисление.гкс_ВидыЭлектронныхТабло.НазначениеНаВыгрузку");
	НовыйВариант.Номенклатура = РегистрСведенийЗапись.ДокументРегистрации.Номенклатура;

	Если ДополнительныеСвойства.Свойство("ЯмаРазгрузки") Тогда
		НовыйВариант.ЯмаРазгрузки = ДополнительныеСвойства.ЯмаРазгрузки;

	Иначе
		НаправлениеНаРазгрузку = 
		гкс_ПриемкаТранспорта.НаправлениеНаРазгрузкуПоРегистрации(РегистрСведенийЗапись.ДокументРегистрации);

		Если НаправлениеНаРазгрузку <> Неопределено Тогда
			НовыйВариант.ЯмаРазгрузки = НаправлениеНаРазгрузку.ЯмаРазгрузки;
		КонецЕсли;
	КонецЕсли;

	НовыйВариант.СписокСостояний = Новый СписокЗначений;
	НовыйВариант.СписокСостояний.Добавить(ПредопределенноеЗначение("Перечисление.гкс_СостоянияРегистрации.ВыгрузкаРазрешена"));

	ДобавитьВариантОжиданияПроб(ВариантыДляТабло, РегистрСведенийЗапись);

КонецПроцедуры	

Процедура ДобавитьВариантНазначениеНаВесы(ВариантыДляТабло, РегистрСведенийЗапись)

	НовыйВариант = ВариантыДляТабло.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйВариант, РегистрСведенийЗапись);

	НовыйВариант.ВидТабло = Перечисления.гкс_ВидыЭлектронныхТабло.НазначениеНаВесы;
	НовыйВариант.Номенклатура = РегистрСведенийЗапись.ДокументРегистрации.Номенклатура;

	НовыйВариант.СписокСостояний = Новый СписокЗначений;
	НовыйВариант.СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.Прибыл);

КонецПроцедуры
	
Процедура ДобавитьВариантОжиданияПроб(ВариантыДляТабло, РегистрСведенийЗапись)
	
	НовыйВариант = ВариантыДляТабло.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйВариант, РегистрСведенийЗапись);

	НовыйВариант.ВидТабло = Перечисления.гкс_ВидыЭлектронныхТабло.ОжиданияПроб;
		
		ДокументВзвешивания = Документы.гкс_Взвешивание.
			ПоРегистрацииИТипуВзвешивания(РегистрСведенийЗапись.ДокументРегистрации,
										  Перечисления.гкс_ТипыВзвешивания.Въезд);
	
	Если ДокументВзвешивания <> Неопределено Тогда	
		НовыйВариант.Весы = ДокументВзвешивания.Весы;
	КонецЕсли;

	НовыйВариант.СписокСостояний = Новый СписокЗначений;
	НовыйВариант.СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.ВыгрузкаРазрешена);
	НовыйВариант.СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.КачествоНеПринято);
		
КонецПроцедуры

Функция ИнициализироватьСтруктуруПараметровТабло()

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТочкаМаршрута");
	СтруктураПараметров.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	СтруктураПараметров.Вставить("ТипРегистрации");
	СтруктураПараметров.Вставить("ВидПеревозки");
	СтруктураПараметров.Вставить("ВидТабло");
	СтруктураПараметров.Вставить("ЯмаРазгрузки", Справочники.гкс_ТочкиМаршрута.ПустаяСсылка());
	СтруктураПараметров.Вставить("Весы", Справочники.гкс_ОборудованиеПЛК.ПустаяСсылка());
	СтруктураПараметров.Вставить("СписокСостояний");
	СтруктураПараметров.Вставить("ТочкаОтсчета", ТекущаяДатаСеанса() - гкс_ОбщегоНазначенияКлиентСервер.ЧислоСекундВСутках());
	Если ЭтотОбъект.Количество() > 0 Тогда
		СтруктураПараметров.Вставить("ДокументРегистрации", ЭтотОбъект[0].ДокументРегистрации);
		СтруктураПараметров.Вставить("ЗаписьВОчередь", ЭтотОбъект[0].Период);
	КонецЕсли;

	Возврат СтруктураПараметров;

КонецФункции	

Процедура ЗарегистрироватьОбъектКОбменуСТабло(Отказ)
	
	ВариантыДляТабло = ДополнительныеСвойства.ВариантыДляТабло;
	
	Если ВариантыДляТабло.Количество() > 0 Тогда

		СтруктураПараметров = ИнициализироватьСтруктуруПараметровТабло();
		
		Для Каждого Строка Из ВариантыДляТабло Цикл

			ЗаполнитьЗначенияСвойств(СтруктураПараметров, Строка);

			гкс_ИнтеграцияСЭлектроннымТаблоСервер.ОбновитьТабло(Строка.ВидТабло, СтруктураПараметров, Отказ);
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			СтруктураОтбора = СтруктураОтбораПоВидуТабло(Строка.ВидТабло);
			
			Если СтруктураОтбора <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
			Иначе	
				Возврат;
			КонецЕсли;
			
			СписокТабло = гкс_ИнтеграцияСЭлектроннымТаблоСервер.ПолучитьНастройкиПоВидуТабло(
							Строка.ТочкаМаршрута, Строка.ВидТабло, СтруктураОтбора);
				
			Для Каждого СтрокаТабло Из СписокТабло Цикл
				гкс_ИнтеграцияСЭлектроннымТаблоСервер.ОтправитьДанныеНаЭлектронноеТабло(СтрокаТабло.Табло);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураОтбораПоВидуТабло(ВидТабло)
	
	ВидыЭлектронныхТабло = Перечисления.гкс_ВидыЭлектронныхТабло;
	
	ОписаниеСвойств = Новый Соответствие;
	ОписаниеСвойств.Вставить(ВидыЭлектронныхТабло.НазначениеНаВесы, "Номенклатура");
	ОписаниеСвойств.Вставить(ВидыЭлектронныхТабло.НазначениеНаВыгрузку, "Номенклатура, ЯмаРазгрузки");
	ОписаниеСвойств.Вставить(ВидыЭлектронныхТабло.ОжиданияПроб, "Весы");
	
	ОписаниеСтруктуры = ОписаниеСвойств.Получить(ВидТабло);
	Если ОписаниеСтруктуры <> Неопределено Тогда
		Результат = Новый Структура(ОписаниеСтруктуры);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
#КонецЕсли