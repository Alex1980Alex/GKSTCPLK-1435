#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Функция НастроенныеТочкиМаршрутаПользователя(Знач Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиПользователей.ТочкаМаршрута КАК ТочкаМаршрута
	|ИЗ
	|	РегистрСведений.гкс_НастройкиПользователейПриемкаНаПЛК.СрезПоследних(, Пользователь = &ТекущийПользователь) КАК НастройкиПользователей
	|ГДЕ
	|	НЕ НастройкиПользователей.Отключен";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТочкаМаршрута");
	
КонецФункции

Функция ВсеДоступыПользователяПоПараметрам(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВсеДоступыПользователяПоПараметрам();
	Для Каждого Параметр Из Параметры Цикл
		Запрос.Параметры.Вставить(Параметр.Ключ, Параметр.Значение);		
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаРезультат = РезультатЗапроса.Выгрузить();
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРезультат[0]);
	
КонецФункции

Функция ЭтоПользовательСРольюАдминистраторПЛК(Знач Пользователь = Неопределено, Знач Параметры = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЭтоПользовательСРольюАдминистраторПЛК();
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь);
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда

		Если Параметры.Свойство("ТочкаМаршрута") И ЗначениеЗаполнено(Параметры["ТочкаМаршрута"]) Тогда
			Запрос.Параметры.Вставить("ТочкаМаршрута");
			ЗаполнитьЗначенияСвойств(Запрос.Параметры, Параметры, "ТочкаМаршрута");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТочкаМаршрута = &ТочкаМаршрута", "ИСТИНА");
		КонецЕсли;

		Если Параметры.Свойство("ВидПеревозки") И ЗначениеЗаполнено(Параметры["ВидПеревозки"]) Тогда
			Запрос.Параметры.Вставить("ВидПеревозки");
			ЗаполнитьЗначенияСвойств(Запрос.Параметры, Параметры, "ВидПеревозки");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВидПеревозки = &ВидПеревозки", "ИСТИНА");
		КонецЕсли;
		
		Если Параметры.Свойство("ДатаСреза") Тогда
			ЗаполнитьЗначенияСвойств(Запрос.Параметры, Параметры, "ДатаСреза");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаСреза", "НЕОПРЕДЕЛЕНО");
		КонецЕсли;
	
	КонецЕсли;
		
	Возврат НЕ Запрос.Выполнить().Пустой();

Конецфункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапроса

Функция ТекстЗапросаЭтоПользовательСРольюАдминистраторПЛК()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	1 КАК ЯвляетсяАдминистраторомПЛК
	|ИЗ
	|	РегистрСведений.гкс_НастройкиПользователейПриемкаНаПЛК.СрезПоследних(
	|			&ДатаСреза,
	|           РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.АдминистраторНаПЛК)
	|           И Пользователь = &ТекущийПользователь
	|			И ТочкаМаршрута = &ТочкаМаршрута 
	|			И ВидПеревозки = &ВидПеревозки ) КАК СрезНастроек
	|ГДЕ
	|	НЕ СрезНастроек.Отключен";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВсеДоступыПользователяПоПараметрам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ВсеРоли)
	|		ИЛИ НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.Регистрация)
	|			ТОГДА ИСТИНА
	|		КОГДА НастройкиПользователей.РольПриПриемкеНаПЛК ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ), ЛОЖЬ) КАК ДоступенРегистрация,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ВсеРоли)
	|		ИЛИ НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ВзвешиваниеНаВъезде)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ), ЛОЖЬ) КАК ДоступенВзвешиваниеНаВъезде,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ВсеРоли)
	|		ИЛИ НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ВзвешиваниеНаВыезде)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ), ЛОЖЬ) КАК ДоступенВзвешиваниеНаВыезде,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ВсеРоли)
	|		ИЛИ НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.Лаборант)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ), ЛОЖЬ) КАК ДоступенЛабАнализ,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ВсеРоли)
	|		ИЛИ НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.Диспетчер)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ), ЛОЖЬ) КАК ДоступенДиспетчер,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ВсеРоли)
	|		ИЛИ
	|			НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ПодтверждениеРазгрузки)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ), ЛОЖЬ) КАК ДоступенПодтверждениеРазгрузки,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ВсеРоли)
	|		ИЛИ
	|			НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ПереносВЭлектроннойОчереди)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ), ЛОЖЬ) КАК ДоступенПереносВЭлектроннойОчереди,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ВсеРоли)
	|		ИЛИ НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ОформлениеПриемки)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ), ЛОЖЬ) КАК ДоступенОформлениеПриемки,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ВсеРоли)
	|		ИЛИ
	|			НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.НазначениеЯмРазгрузки)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ), ЛОЖЬ) КАК ДоступенНастройкаНазначениеЯмРазгрузки,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ВсеРоли)
	|		ИЛИ
	|			НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.РазблокироватьРегистрацию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ), ЛОЖЬ) КАК ДоступенРазблокироватьРегистрацию,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ВсеРоли)
	|		ИЛИ НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ПринятиеПроб)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ), ЛОЖЬ) КАК ДоступенПринятиеПроб,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ВсеРоли)
	|		ИЛИ НастройкиПользователей.РольПриПриемкеНаПЛК = ЗНАЧЕНИЕ(Перечисление.гкс_РолиПриПриемкеНаПЛК.ОтборПроб)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ), ЛОЖЬ) КАК ДоступенОтборПроб
	|ИЗ
	|	РегистрСведений.гкс_НастройкиПользователейПриемкаНаПЛК.СрезПоследних(&ТекущаяДатаСеанса,
	|		ТочкаМаршрута = &ТочкаМаршрута
	|	И ВидПеревозки = &ВидПеревозки
	|	И Пользователь = &ТекущийПользователь) КАК НастройкиПользователей
	|ГДЕ
	|	НЕ НастройкиПользователей.Отключен";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли