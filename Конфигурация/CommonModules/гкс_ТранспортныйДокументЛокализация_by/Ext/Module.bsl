
#Область ПрограммныйИнтерфейс

// Возвращает транспортный документ для регистрации на ПЛК
//
// Параметры:
//  ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК - регистрация для которой определяется транспортный документ;
// 
// Возвращаемое значение:
//  Результат - ДокументСсылка.гкс_ТранспортныйДокумент - ссылка на транспортный документ
//
Функция СформироватьТранспортныйДокументПоНеобходимости(ДокументРегистрации) Экспорт 
	
	Результат = Документы.гкс_ТранспортныйДокумент.ПустаяСсылка();
	
	ДанныеРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРегистрации, 
		"ВидПеревозки, ТипРегистрации, Внутригрупповой, НомерДокументаПоставщика");
	
	ТранспортныйДокумент = Документы.гкс_ТранспортныйДокумент.НайтиПоРегистрации(ДокументРегистрации);
	
	Если Не ЗначениеЗаполнено(ТранспортныйДокумент)
		И ДанныеРегистрации.ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт	Тогда
		
		ТранспортныйДокумент = НайтиПоНомеруЖДН(ДанныеРегистрации.НомерДокументаПоставщика);		
	КонецЕсли;	
			
	// ЖД внутригрупповые не обрабатываем
	Если ДанныеРегистрации.ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт
		И ДанныеРегистрации.Внутригрупповой Тогда
		
       Возврат ТранспортныйДокумент;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ТранспортныйДокумент) Тогда
		
		Отказ = Ложь;
		ПерезаполнитьТранспортныйДокумент(ТранспортныйДокумент, ДокументРегистрации, Отказ);
			
		Если Не Отказ Тогда
			Результат = ТранспортныйДокумент;
		КонецЕсли;	
		
	ИначеЕсли ДанныеРегистрации.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда
		
		Результат = Документы.гкс_ТранспортныйДокумент.СоздатьТранспортныйДокумент(ДокументРегистрации, Ложь);
		
	КонецЕсли;
				
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиПоНомеруЖДН(НомерДокументаПоставщика)
	
	Результат = Документы.гкс_ТранспортныйДокумент.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ТранспортныйДокумент.Ссылка КАК Ссылка,
	|	ТранспортныйДокумент.Дата КАК Дата
	|ИЗ
	|	Документ.гкс_ТранспортныйДокумент КАК ТранспортныйДокумент
	|ГДЕ
	|	ТранспортныйДокумент.НомерДокумента = &НомерДокумента
	|	И ТранспортныйДокумент.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, &ПриращениеНачала) И &ТекущаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("НомерДокумента", НомерДокументаПоставщика);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПриращениеНачала", 
		гкс_ПриемкаНаПЛКСервер.ПриращениеНачалаПодбораТранспортныхДокументов());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перезаполняет данные транспортного документа 
//
// Параметры:
//  ТранспортныйДокумент - ДокументСсылка.гкс_ТранспортныйДокумент - ссылка на транспортный документ
//
//  ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК - документ регистрации транспорта
//
//  Отказ - Булево - флаг отказа
//
Процедура ПерезаполнитьТранспортныйДокумент(ТранспортныйДокумент, ДокументРегистрации, Отказ)
	
	ДокументОбъект = ТранспортныйДокумент.ПолучитьОбъект();
	
	ДанныеРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРегистрации, 
		"ВидПеревозки, ТипРегистрации, Внутригрупповой");
		
	Если ДанныеРегистрации.ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль Тогда
		
		Если ДанныеРегистрации.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда
			ДокументОбъект.ПерезаполнитьДокументПослеПриемкиАвто(ДокументРегистрации);
		Иначе
			ДокументОбъект.ПерезаполнитьДокументПослеОтгрузкиАвто(ДокументРегистрации);
		КонецЕсли;
		
	ИначеЕсли ДанныеРегистрации.ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт
		И ДанныеРегистрации.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка
		И Не ДанныеРегистрации.Внутригрупповой Тогда
		
		ДокументОбъект.ПерезаполнитьДокументПослеПриемкиЖД(ДокументРегистрации);	
	Иначе
		// ЖД внутригрупповые не обрабатываем
		Возврат;
	КонецЕсли;
	
	Если ДокументОбъект.Модифицированность() Тогда
		Попытка
			ДокументОбъект.Записать();
		Исключение
			Отказ = Истина;
			ТекстОшибки = НСтр("ru = 'Не удалось записать документ.'");	
			СтрокаСообщенияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ТекстОшибки, УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);		
		КонецПопытки;
	КонецЕсли;		
	
КонецПроцедуры 

#КонецОбласти
