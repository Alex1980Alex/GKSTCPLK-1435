///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Клиентские и серверные процедуры и функции общего назначения:
// - для поддержки формирования печатных форм;
// - для работы с файлами;
// - для работы с управляемыми формами; 
// - для работы с почтовыми адресами;
// - для работы с отборами динамических списков;
// - прочее.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
// Параметры:
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - объект или ключ записи информационной базы, к которому это сообщение относится.
//  Поле                       - Строка - наименование реквизита формы.
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы).
//  Отказ                      - Булево - выходной параметр, всегда устанавливается в значение Истина.
//
// Пример:
//
//  1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "ПолеВРеквизитеФормыОбъект",
//   "Объект");
//
//  Альтернативный вариант использования в форме объекта:
//  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "Объект.ПолеВРеквизитеФормыОбъект");
//
//  2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "ИмяРеквизитаФормы");
//
//  3. Для вывода сообщения связанного с объектом информационной базы:
//  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
//  4. Для вывода сообщения по ссылке на объект информационной базы:
//  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
//  Случаи некорректного использования:
//   1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//   2. Передача в параметре КлючДанных значения типа отличного от допустимых.
//   3. Установка ссылки без установки поля (и/или пути к данным).
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент И НЕ МобильныйКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = СтрНайти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

// Проверяет наличие реквизита или свойства у произвольного объекта без обращения к метаданным.
//
// Параметры:
//  Объект       - Произвольный - объект, у которого нужно проверить наличие реквизита или свойства;
//  ИмяРеквизита - Строка       - имя реквизита или свойства.
//
// Возвращаемое значение:
//  Булево - Истина, если есть.
//
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

// Определяет режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
// При проверке используется СтрокаСоединенияИнформационнойБазы, которую можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево - Истина, если файловая.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
			
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции 

#Область Данные

// Дополняет структуру значениями из другой структуры.
//
// Параметры:
//   Приемник - Структура - коллекция, в которую будут добавляться новые значения.
//   Источник - Структура - коллекция, из которой будут считываться пары Ключ и Значение для заполнения.
//   Заменять - Булево
//            - Неопределено - что делать в местах пересечения ключей источника и приемника:
//                             Истина - заменять значения приемника (самый быстрый способ),
//                             Ложь   - не заменять значения приемника (пропускать),
//                             Неопределено - значение по умолчанию. Бросать исключение.
//
Процедура ДополнитьСтруктуру(Приемник, Источник, Заменять = Неопределено) Экспорт
	
	Для Каждого Элемент Из Источник Цикл
		Если Заменять <> Истина И Приемник.Свойство(Элемент.Ключ) Тогда
			Если Заменять = Ложь Тогда
				Продолжить;
			Иначе
				ШаблонИсключения = НСтр("ru = 'Пересечение ключей источника и приемника: ""%1"".'"); 
				ТекстИсключения = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИсключения, Элемент.Ключ); 
				ВызватьИсключение ТекстИсключения; 
			КонецЕсли;
		КонецЕсли;
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Вызывает исключение с текстом Сообщение, если Условие не равно Истина.
// Применяется для самодиагностики кода.
//
// Параметры:
//   Условие - Булево - если не равно Истина, то вызывается исключение.
//   Сообщение - Строка - текст сообщения. Если не задан, то исключение вызывается с сообщением по умолчанию.
//   КонтекстПроверки - Строка - например, имя процедуры или функции, в которой выполняется проверка.
//
Процедура Проверить(Знач Условие, Знач Сообщение = "", Знач КонтекстПроверки = "") Экспорт
	
	Если Условие <> Истина Тогда
		
		Если ПустаяСтрока(Сообщение) Тогда
			ТекстИсключения = НСтр("ru = 'Недопустимая операция'"); // Assertion failed
		Иначе
			ТекстИсключения = Сообщение;
		КонецЕсли;
		
		Если Не ПустаяСтрока(КонтекстПроверки) Тогда
			ТекстИсключения = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 в %2'"), ТекстИсключения, КонтекстПроверки);
		КонецЕсли;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывает исключение, если тип значения параметра ИмяПараметра процедуры или функции ИмяПроцедурыИлиФункции
// отличается от ожидаемого.
// Для быстрой диагностики типов параметров, передаваемых в процедуры и функции программного интерфейса.
//
// В связи с особенностью реализации ОписанияТипов всегда включает в себя тип <Неопределено>.
// если требуется жесткая проверка типа, используйте в параметре ОжидаемыеТипы 
// конкретный тип, массив или соответствие типов.
//
// Параметры:
//   ИмяПроцедурыИлиФункции - Строка - имя процедуры или функции, параметр которой проверяется.
//   ИмяПараметра - Строка - имя проверяемого параметра процедуры или функции.
//   ЗначениеПараметра - Произвольный - фактическое значение параметра.
//   ОжидаемыеТипы - ОписаниеТипов
//                 - Тип
//                 - Массив
//                 - ФиксированныйМассив
//                 - Соответствие
//                 - ФиксированноеСоответствие - тип(ы)
//       параметра процедуры или функции.
//   ОжидаемыеТипыСвойств - Структура - если ожидаемый тип - структура, то 
//       в этом параметре можно указать типы ее свойств.
//
Процедура ПроверитьПараметр(Знач ИмяПроцедурыИлиФункции, Знач ИмяПараметра, Знач ЗначениеПараметра, 
	Знач ОжидаемыеТипы, Знач ОжидаемыеТипыСвойств = Неопределено) Экспорт
	
	Контекст = "ОбщегоНазначенияКлиентСервер.ПроверитьПараметр";
	Проверить(ТипЗнч(ИмяПроцедурыИлиФункции) = Тип("Строка"), 
		НСтр("ru = 'Недопустимое значение параметра ИмяПроцедурыИлиФункции'"), Контекст);
	Проверить(ТипЗнч(ИмяПараметра) = Тип("Строка"), 
		НСтр("ru = 'Недопустимое значение параметра ИмяПараметра'"), Контекст);
	
	ЭтоКорректныйТип = ЗначениеОжидаемогоТипа(ЗначениеПараметра, ОжидаемыеТипы);
	Проверить(ЭтоКорректныйТип <> Неопределено, 
		НСтр("ru = 'Недопустимое значение параметра ОжидаемыеТипы'"), Контекст);
	Проверить(ЭтоКорректныйТип,
		гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимое значение параметра %1 в %2. 
			           |Ожидалось: %3; передано значение: %4 (тип %5).'"),
			ИмяПараметра, ИмяПроцедурыИлиФункции, ПредставлениеТипов(ОжидаемыеТипы), 
			?(ЗначениеПараметра <> Неопределено, ЗначениеПараметра, НСтр("ru = 'Неопределено'")),
		ТипЗнч(ЗначениеПараметра)));
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") И ОжидаемыеТипыСвойств <> Неопределено Тогда
		
		Проверить(ТипЗнч(ОжидаемыеТипыСвойств) = Тип("Структура"), 
			НСтр("ru = 'Недопустимое значение параметра ИмяПроцедурыИлиФункции'"), 
			Контекст);
		
		Для каждого Свойство Из ОжидаемыеТипыСвойств Цикл
			
			ОжидаемоеИмяСвойства = Свойство.Ключ;
			ОжидаемыйТипСвойства = Свойство.Значение;
			ЗначениеСвойства = Неопределено;
			
			Проверить(ЗначениеПараметра.Свойство(ОжидаемоеИмяСвойства, ЗначениеСвойства), 
				гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Недопустимое значение параметра %1 (Структура) в %2. 
					           |В структуре ожидалось свойство %3 (тип %4).'"), 
					ИмяПараметра, ИмяПроцедурыИлиФункции, ОжидаемоеИмяСвойства, ОжидаемыйТипСвойства));
			
			ЭтоКорректныйТип = ЗначениеОжидаемогоТипа(ЗначениеСвойства, ОжидаемыйТипСвойства);
			Проверить(ЭтоКорректныйТип, 
				гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Недопустимое значение свойства %1 в параметре %2 (Структура) в %3. 
					           |Ожидалось: %4; передано значение: %5 (тип %6).'"), 
					ОжидаемоеИмяСвойства, ИмяПараметра,	ИмяПроцедурыИлиФункции,
					ПредставлениеТипов(ОжидаемыеТипы), 
					?(ЗначениеСвойства <> Неопределено, ЗначениеСвойства, НСтр("ru = 'Неопределено'")),
				ТипЗнч(ЗначениеСвойства)));
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение свойства структуры.
//
// Параметры:
//   Структура - Структура
//             - ФиксированнаяСтруктура - объект, из которого необходимо прочитать значение ключа.
//   Ключ - Строка - имя свойства структуры, для которого необходимо прочитать значение.
//   ЗначениеПоУмолчанию - Произвольный - возвращается когда в структуре нет значения по указанному
//                                        ключу.
//       Для скорости рекомендуется передавать только быстро вычисляемые значения (например примитивные типы),
//       а инициализацию более тяжелых значений выполнять после проверки полученного значения (только если это
//       требуется).
//
// Возвращаемое значение:
//   Произвольный - значение свойства структуры. ЗначениеПоУмолчанию если в структуре нет указанного свойства.
//
Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если Структура = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Результат = ЗначениеПоУмолчанию;
	Если Структура.Свойство(Ключ, Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции

// Возвращает число секунд в сутках.
// 
// Возвращаемое значение:
//  Число - Число секунд в сутках
Функция ЧислоСекундВСутках() Экспорт
	Возврат 86400;
КонецФункции

// Возвращает дату отличающуяся от переданно на величину свдига. По умолчанию предполагается сдвиг в днях
// 
// Параметры:
//  Дата - Дата - 
//  ВеличинаСдвига - Число - 
//  Гранулярность - Строка - гранулярность сдвига. Возможные значения "ДЕНЬ"
// 
// Возвращаемое значение: 
//  Дата - полученная со сдвигом дата  
//
Функция СдвигДаты(Знач Дата, Знач ВеличинаСдвига, Гранулярность = "ДЕНЬ") Экспорт
	
	Если Гранулярность = "ДЕНЬ" Тогда
		ВеличинаСдвига = ВеличинаСдвига * ЧислоСекундВСутках();
	КонецЕсли;

	Возврат (Дата + ВеличинаСдвига);
	
КонецФункции

#КонецОбласти

#Область РаботаСДанными

// Процедура устанавливает/снимает пометку в строках переданной таблицы
//
// Параметры:
//  КоллекцияДанных	 - ДанныеФормыКоллекция, ТаблицаЗначений - таблица, содержащая колонку с типом Булево
//  ИмяРеквизита	 - Строка - имя колонки, содержащей пометку Булево
//  ЗначениеФлага	 - Булево - 
//
Процедура УстановитьПометкуСтрокКоллекции(КоллекцияДанных, ИмяРеквизита, ЗначениеФлага) Экспорт
	
	Для Каждого ЭлементКоллекции Из КоллекцияДанных Цикл
		ЭлементКоллекции[ИмяРеквизита] = ЗначениеФлага;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМассивЗначением(МассивИсточник, Знач Значение) Экспорт
	
	ОбщегоНазначенияКлиентСервер.Проверить(ТипЗнч(МассивИсточник) = Тип("Массив"),
		НСтр("ru='Ожидали значение типа ""Массив"", но это не так'"));
		
	Для Счетчик = 0 По МассивИсточник.Количество() - 1 Цикл
		МассивИсточник[Счетчик] = Значение;			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСHTTP

Функция КодОтветаЗапросВыполненУспешно() Экспорт
	
	КодОтвета = 200;
	Возврат КодОтвета;
	
КонецФункции

Функция КодОтветаОшибкаНаСторонеСервера() Экспорт
	
	КодОтвета = 500;
	Возврат КодОтвета;
	
КонецФункции

Функция КодОтветаОшибкаВФормированииЗапроса() Экспорт
	
	КодОтвета = 400;
	Возврат КодОтвета;
	
КонецФункции

Функция ЗапросВыполненУспешно(Запрос) Экспорт
	
	Перем КодСостояния;
	
	Если ТипЗнч(Запрос)  = Тип("Структура") 
		И Запрос.Свойство("КодСостояния", КодСостояния) Тогда
		Возврат КодСостояния = КодОтветаЗапросВыполненУспешно();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
 
#КонецОбласти

#Область РаботаСДатами

Функция ПустаяДата() Экспорт
	Возврат Дата(1, 1, 1);	
КонецФункции 

#КонецОбласти

#Область РаботаСоВременем

Функция ОкруглитьВремя(Знач ВремяИсходное, ШагВМинутах = 5, НаправлениеОкругления = "") Экспорт
												 
    Результат = ВремяИсходное;
	
	ШагВСекундах = ШагВМинутах * 60; 
	Дельта = ВремяИсходное - НачалоЧаса(ВремяИсходное);	
	
	ЦелыхШаговВДельте = (Дельта - (Дельта % ШагВСекундах)) / ШагВСекундах;
	
	Остаток = Дельта - (ЦелыхШаговВДельте * ШагВСекундах);  
	ДоляОстаткаОтШага = Остаток / ШагВСекундах;
	
	Если НаправлениеОкругления = "ВсегдаВМеньшую" Тогда
		Результат = ВремяИсходное - Остаток;
	ИначеЕсли НаправлениеОкругления = "ВсегдаВБольшую" Тогда 
		Результат = ВремяИсходное - Остаток + ШагВСекундах;
	ИначеЕсли ДоляОстаткаОтШага >= 0.5 Тогда
		Результат = ВремяИсходное - Остаток + ШагВСекундах;
	ИначеЕсли ДоляОстаткаОтШага < 0.5 Тогда
		Результат = ВремяИсходное - Остаток;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает число секунд содержащихся в минуте
// 
// Возвращаемое значение:
//  Число -- Секунд в минуте
Функция СекундВМинуте() Экспорт
	
	Результат = 60; 
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает число секунд содержащихся в минуте
// 
// Возвращаемое значение:
//  Число - Секунд в часе
Функция СекундВЧасе() Экспорт
	
	Результат = 3600; 
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает число секунд содержащихся в одном дне
// 
// Возвращаемое значение:
//  Число - Секунд в дне
Функция СекундВДне() Экспорт
	
	Результат = 86400;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает число секунд содержащихся в неделе
// 
// Возвращаемое значение:
//  Число - Секунд в неделе
Функция СекундВНеделе() Экспорт
	
	Результат = 604800;
	
	Возврат Результат;
	
КонецФункции

// Получить количество секунд в указанном кол-ве времени по типу времени.
// 
// Параметры:
//  КоличествоВремени - Число - кол-во времени, которое нужно перевести в секунды
//  ТипВремени - Строка - тип времени, для которого нужно получить кол-во секунд, одно из: МИНУТА, ЧАС, ДЕНЬ, НЕДЕЛЯ
//  
// Возвращаемое значение:
//  Число - количество секунд в минуте, часе, дне, неделе
//
Функция ПересчитатьВСекунды(КоличествоВремени, ТипВремени) Экспорт
	
	ТипВремени = ВРег(ТипВремени);
	Если ТипВремени = "МИНУТА" Тогда
		 Результат = КоличествоВремени * СекундВМинуте();
	ИначеЕсли ТипВремени = "ЧАС" Тогда
		 Результат = КоличествоВремени * СекундВЧасе();
	ИначеЕсли ТипВремени = "ДЕНЬ" Тогда
		 Результат = КоличествоВремени * СекундВДне();
	ИначеЕсли ТипВремени = "НЕДЕЛЯ" Тогда
		 Результат = КоличествоВремени * СекундВНеделе();
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	 		
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Данные

#Область ПроверитьПараметр

Функция ЗначениеОжидаемогоТипа(Значение, ОжидаемыеТипы)
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗнч(ОжидаемыеТипы) = Тип("ОписаниеТипов") Тогда
		
		Возврат ОжидаемыеТипы.СодержитТип(ТипЗначения);
		
	ИначеЕсли ТипЗнч(ОжидаемыеТипы) = Тип("Тип") Тогда
		
		Возврат ТипЗначения = ОжидаемыеТипы;
		
	ИначеЕсли ТипЗнч(ОжидаемыеТипы) = Тип("Массив") 
		Или ТипЗнч(ОжидаемыеТипы) = Тип("ФиксированныйМассив") Тогда
		
		Возврат ОжидаемыеТипы.Найти(ТипЗначения) <> Неопределено;
		
	ИначеЕсли ТипЗнч(ОжидаемыеТипы) = Тип("Соответствие") 
		Или ТипЗнч(ОжидаемыеТипы) = Тип("ФиксированноеСоответствие") Тогда
		
		Возврат ОжидаемыеТипы.Получить(ТипЗначения) <> Неопределено;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПредставлениеТипов(ОжидаемыеТипы)
	
	Если ТипЗнч(ОжидаемыеТипы) = Тип("Массив")
		Или ТипЗнч(ОжидаемыеТипы) = Тип("ФиксированныйМассив")
		Или ТипЗнч(ОжидаемыеТипы) = Тип("Соответствие")
		Или ТипЗнч(ОжидаемыеТипы) = Тип("ФиксированноеСоответствие") Тогда
		
		Результат = "";
		Индекс = 0;
		Для Каждого Элемент Из ОжидаемыеТипы Цикл
			
			Если ТипЗнч(ОжидаемыеТипы) = Тип("Соответствие")
				Или ТипЗнч(ОжидаемыеТипы) = Тип("ФиксированноеСоответствие") Тогда 
				
				Тип = Элемент.Ключ;
			Иначе 
				Тип = Элемент;
			КонецЕсли;
			
			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + ", ";
			КонецЕсли;
			
			Результат = Результат + ПредставлениеТипа(Тип);
			Индекс = Индекс + 1;
			Если Индекс > 10 Тогда
				Результат = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1,... (всего %2 типов)'"), 
					Результат, 
					ОжидаемыеТипы.Количество());
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Результат;
		
	Иначе 
		Возврат ПредставлениеТипа(ОжидаемыеТипы);
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеТипа(Тип)
	
	Если Тип = Неопределено Тогда
		
		Возврат "Неопределено";
		
	ИначеЕсли ТипЗнч(Тип) = Тип("ОписаниеТипов") Тогда
		
		ТипСтрокой = Строка(Тип);
		Возврат 
			?(СтрДлина(ТипСтрокой) > 150, 
				гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1,... (всего %2 типов)'"),
					Лев(ТипСтрокой, 150),
					Тип.Типы().Количество()), 
				ТипСтрокой);
		
	Иначе
		
		ТипСтрокой = Строка(Тип);
		Возврат 
			?(СтрДлина(ТипСтрокой) > 150, 
				Лев(ТипСтрокой, 150) + "...", 
				ТипСтрокой);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти



