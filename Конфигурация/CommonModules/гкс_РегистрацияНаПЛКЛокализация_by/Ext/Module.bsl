#Область ПрограммныйИнтерфейс

#Область ПодключаемыеКоманды

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Акт расхождения веса		
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_АктРасхожденияВеса_by";
	КомандаПечати.Представление = НСтр("ru = 'Акт расхождения веса'");
    КомандаПечати.МенеджерПечати = "Обработка.гкс_ПечатьАктРасхожденияВеса";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик  = "гкс_УправлениеПечатьюКлиент_by.ВыполнитьКомандуПечати_АктРасхожденияВеса";
	
	// ТТН		
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_ТТНГоризонтальнаяЛокализация_by";
	КомандаПечати.Представление = НСтр("ru = 'ТТН (Беларусь)'");
	КомандаПечати.МенеджерПечати = "Обработка.гкс_ПечатьТТН_Беларусь";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик  = "гкс_УправлениеПечатьюКлиент_by.ВыполнитьКомандуПечати_ТТН";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_ТТНВертикальнаяЛокализация_by";
	КомандаПечати.Представление = НСтр("ru = 'ТТН (Беларусь) - вертикально'");
	КомандаПечати.МенеджерПечати = "Обработка.гкс_ПечатьТТН_Беларусь";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик  = "гкс_УправлениеПечатьюКлиент_by.ВыполнитьКомандуПечати_ТТН";
		
КонецПроцедуры

#КонецОбласти

#Область Печать

// Функция получает данные для формирования акта расхождения веса
// Возвращает данные, необходимые для печатной формы.
// 
// Параметры:
// 	ПараметрыПечати - Структура - дополнительные настройки печати
//	МассивОбъектов - Массив из ДокументСсылка.гкс_РегистрацияНаПЛК - Массив ссылок на документы РегистрацияНаПЛК, по которым необходимо получить данные.
//
// Возвращаемое значение:
//	Структура - структура с данными для печати формы.
// 
Функция ДанныеДляПечатнойФормыАктРасхожденияВеса(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Результат = Новый Структура("ДокументРегистрации, БруттоФакт, НеттоФакт, ТараФакт");                     	
	ЗаполнитьДанныеФактическихВесов(МассивОбъектов, Результат); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрацияНаПЛК.НомерДокументаПоставщика КАК НомерНакладной,
	|	РегистрацияНаПЛК.ДатаДокументаПоставщика КАК ДатаНакладной,
	|	РегистрацияНаПЛК.ВесБрутто КАК Брутто,
	|	РегистрацияНаПЛК.ВесНетто КАК Нетто,
	|	РегистрацияНаПЛК.ВесТары КАК Тара,
	|	РегистрацияНаПЛК.ЕдиницаИзмеренияВеса КАК ЕдиницаИзмеренияВеса,
	|	РегистрацияНаПЛК.Водитель КАК Водитель,
	|	СправочникНоменклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	СправочникОрганизации.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	СправочникКонтрагенты.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	ЕСТЬNULL(ОснованиеДляДвиженияЗапасов.ДатаРазгрузки, РегистрацияНаПЛК.Дата) КАК ДатаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(РегистрацияНаПЛК.ТранспортноеСредство) КАК ТранспортноеСредство,
	|	СправочникТранспортныеСредства.НомерТранспортногоСредства КАК Прицеп,
	|	Истина КАК ЭтоАвтомобиль
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникОрганизации
	|		ПО РегистрацияНаПЛК.Организация = СправочникОрганизации.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО РегистрацияНаПЛК.Номенклатура = СправочникНоменклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникКонтрагенты
	|		ПО РегистрацияНаПЛК.ОтправительПолучатель = СправочникКонтрагенты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТранспортныеСредства КАК СправочникТранспортныеСредства
	|		ПО РегистрацияНаПЛК.Прицеп = СправочникТранспортныеСредства.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ОснованиеДляДвиженияЗапасов КАК ОснованиеДляДвиженияЗапасов
	|		ПО РегистрацияНаПЛК.Ссылка = ОснованиеДляДвиженияЗапасов.Регистрация
	|ГДЕ
	|	РегистрацияНаПЛК.Ссылка = &Ссылка
	|	И РегистрацияНаПЛК.ВидПеревозки = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТранспортныхСредствДоставки.Автомобиль)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрацияНаПЛК.НомерДокументаПоставщика,
	|	РегистрацияНаПЛК.ДатаДокументаПоставщика,
	|	РегистрацияНаПЛК.ВесБрутто,
	|	РегистрацияНаПЛК.ВесНетто,
	|	РегистрацияНаПЛК.ВесТары,
	|	РегистрацияНаПЛК.ЕдиницаИзмеренияВеса,
	|	РегистрацияНаПЛК.Водитель,
	|	СправочникНоменклатура.НаименованиеПолное,
	|	СправочникОрганизации.НаименованиеПолное,
	|	СправочникКонтрагенты.НаименованиеПолное,
	|	ЕСТЬNULL(ОснованиеДляДвиженияЗапасов.ДатаРазгрузки, РегистрацияНаПЛК.Дата),
	|	ПРЕДСТАВЛЕНИЕ(РегистрацияНаПЛК.ТранспортноеСредство),
	|	NULL,
	|	Ложь
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникОрганизации
	|		ПО РегистрацияНаПЛК.Организация = СправочникОрганизации.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО РегистрацияНаПЛК.Номенклатура = СправочникНоменклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникКонтрагенты
	|		ПО РегистрацияНаПЛК.ОтправительПолучатель = СправочникКонтрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ОснованиеДляДвиженияЗапасов КАК ОснованиеДляДвиженияЗапасов
	|		ПО РегистрацияНаПЛК.Ссылка = ОснованиеДляДвиженияЗапасов.Регистрация
	|ГДЕ
	|	РегистрацияНаПЛК.Ссылка = &Ссылка
	|	И РегистрацияНаПЛК.ВидПеревозки = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт)";
	
	Запрос.УстановитьПараметр("Ссылка", Результат.ДокументРегистрации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		ЕдиницаТонна = гкс_ПриемкаТранспортаПовтИсп.ПолучитьЕдиницуИзмеренияТранспортногоДокумента();
		Коэффициент = гкс_ПриемкаТранспортаПовтИсп.ПолучитьКоэффициентПересчетаЕдиниц(
			ВыборкаДетальныеЗаписи.ЕдиницаИзмеренияВеса, ЕдиницаТонна);
			
		Результат.Вставить("Брутто", 		ВыборкаДетальныеЗаписи.Брутто * Коэффициент);	
		Результат.Вставить("Нетто", 		ВыборкаДетальныеЗаписи.Нетто * Коэффициент);
		Результат.Вставить("Тара", 			ВыборкаДетальныеЗаписи.Тара * Коэффициент);
		Результат.Вставить("Разница", 		Результат.НеттоФакт - Результат.Нетто);	
        Результат.Вставить("ЕдИзмерения", 	ЕдиницаТонна);
		
		Результат.Вставить("НомерНакладной", 	ВыборкаДетальныеЗаписи.НомерНакладной);
		Результат.Вставить("ДатаНакладной", 	ВыборкаДетальныеЗаписи.ДатаНакладной);
        Результат.Вставить("ДатаДокумента", 	ВыборкаДетальныеЗаписи.ДатаДокумента);
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Прицеп) Тогда
			Результат.Вставить("ТранспортноеСредство", 
				СтрШаблон("%1 / %2", ВыборкаДетальныеЗаписи.ТранспортноеСредство, ВыборкаДетальныеЗаписи.Прицеп));
		Иначе
			Результат.Вставить("ТранспортноеСредство", 	ВыборкаДетальныеЗаписи.ТранспортноеСредство);
		КонецЕсли;	
		
		Результат.Вставить("НаименованиеОрганизации", 	ВыборкаДетальныеЗаписи.ОрганизацияНаименованиеПолное);
		Результат.Вставить("НаименованиеКонтрагента", 	ВыборкаДетальныеЗаписи.КонтрагентНаименованиеПолное);
		Результат.Вставить("НаименованиеНоменклатуры", 	ВыборкаДетальныеЗаписи.НоменклатураНаименованиеПолное);
		
        Результат.Вставить("Водитель", 			ВыборкаДетальныеЗаписи.Водитель);
        Результат.Вставить("ЭтоАвтомобиль", 	ВыборкаДетальныеЗаписи.ЭтоАвтомобиль);
					
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Функция получает данные для формирования ТТН Беларусь
// Возвращает данные, необходимые для печатной формы.
// 
// Параметры:
// 	ПараметрыПечати - Структура - дополнительные настройки печати
//	МассивОбъектов - Массив из ДокументСсылка.гкс_РегистрацияНаПЛК - Массив ссылок на документы РегистрацияНаПЛК, по которым необходимо получить данные.
//
// Возвращаемое значение:
//	 * РезультатПоШапке - РезультатЗапроса
//	 * РезультатПоТабличнойЧасти - РезультатЗапроса
// 
Функция ДанныеДляПечатнойФормыТТНБеларусь(ПараметрыПечати, МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрацииНаПЛК.Ссылка КАК ДокументРегистрации,
	|	ЗаявкиНаОтгрузкуПродукции.Ссылка КАК ЗаявкаНаОтгрузку
	|ПОМЕСТИТЬ ВТ_РегистрацииНаПЛК
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацииНаПЛК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ЗаявкаНаОтгрузкуПродукции КАК ЗаявкиНаОтгрузкуПродукции
	|		ПО РегистрацииНаПЛК.ЗаявкаНаОтгрузкуПродукции = ЗаявкиНаОтгрузкуПродукции.Ссылка
	|ГДЕ
	|	РегистрацииНаПЛК.Ссылка В (&МассивОбъектов)
	|	И РегистрацииНаПЛК.ВидПеревозки = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТранспортныхСредствДоставки.Автомобиль)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрацииНаПЛК.ДокументРегистрации КАК Ссылка,
	|	ЕСТЬNULL(ОрганизацияДокумента.ИНН, """") КАК ГрузоотправительИНН,
	|	ЕСТЬNULL(ОрганизацияДокумента.НаименованиеПолное, """") КАК ГрузоотправительНаименование,
	|	ЕСТЬNULL(ОрганизацияДокумента.Адрес, """") КАК ГрузоотправительЮрАдрес,
	|	ЕСТЬNULL(ОрганизацияДокумента.СтранаРегистрации, """") КАК СтранаРегистрации,
	|	ЕСТЬNULL(ОрганизацияДокумента.ВалютаРегламентированногоУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК
	|		ВалютаРегламентированногоУчета,
	|	ЕСТЬNULL(РегистрацияНаПЛК.ОтправительПолучатель.ИНН, """") КАК ГрузополучательИНН,
	|	ЕСТЬNULL(РегистрацияНаПЛК.ОтправительПолучатель.НаименованиеПолное, """") КАК ГрузополучательНаименование,
	|	ЕСТЬNULL(РегистрацияНаПЛК.ОтправительПолучатель.ЮрАдрес, """") КАК ГрузополучательЮрАдрес,
	|	ЕСТЬNULL(КонтрагентРегистрации.ЮрАдрес, """") КАК КонтрагентРегистрацииЮрАдрес,
	|	ЕСТЬNULL(ЗаявкаОтгрузки.ЗаказчикПеревозки.ИНН, """") КАК ЗаказчикПеревозкиИНН,
	|	ЕСТЬNULL(ЗаявкаОтгрузки.ЗаказчикПеревозки.НаименованиеПолное, """") КАК ЗаказчикПеревозкиНаименование,
	|	ЕСТЬNULL(ЗаявкаОтгрузки.ЗаказчикПеревозки.ЮрАдрес, """") КАК ЗаказчикПеревозкиЮрАдрес,
	|	РегистрацияНаПЛК.НомерДокументаПоставщика КАК НомерНакладной,
	|	ЕСТЬNULL(ОснованиеДляДвиженияЗапасов.ДатаРазгрузки, РегистрацияНаПЛК.Дата) КАК ДатаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(РегистрацияНаПЛК.ТранспортноеСредство) КАК ТранспортноеСредство,
	|	РегистрацияНаПЛК.Прицеп.Марка КАК МаркаТС,
	|	ПРЕДСТАВЛЕНИЕ(РегистрацияНаПЛК.Прицеп) КАК Прицеп,
	|	РегистрацияНаПЛК.Водитель КАК Водитель,
	|	РегистрацияНаПЛК.ЕдиницаИзмеренияВеса КАК ЕдиницаИзмеренияВеса,
	|	ЗаявкаОтгрузки.Ссылка КАК ЗаявкаНаОтгрузку,
	|	ЕСТЬNULL(ЗаявкаОтгрузки.Контрагент.НаименованиеПолное, """") КАК КонтрагентЗаказа,
	|	ЕСТЬNULL(ЗаявкаОтгрузки.ВалютаДокумента, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаЗаказа,
	|	ЗаявкаОтгрузки.РучныеЦеныТТН КАК РучныеЦеныТТН,
	|	ПРЕДСТАВЛЕНИЕ(ЗаявкаОтгрузки.ДоговорКонтрагента) КАК ОснованиеОтпуска,
	|	ЕСТЬNULL(ЗаявкаОтгрузки.ПутевойЛист, """") КАК ПутевойЛист,
	|	ЕСТЬNULL(ЗаявкаОтгрузки.ПунктПогрузки, """") КАК ПунктПогрузки,
	|	ЕСТЬNULL(ЗаявкаОтгрузки.ПунктРазгрузки, """") КАК ПунктРазгрузки,
	|	ЗаявкаОтгрузки.ЦенаВключаетНДС КАК СуммаВключаетНДС,
	|	ЕСТЬNULL(ЗаявкаОтгрузки.Доверенность, """") КАК ДоверенностьНомерДата
	|ПОМЕСТИТЬ ВТ_Шапка
	|ИЗ
	|	ВТ_РегистрацииНаПЛК КАК РегистрацииНаПЛК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ПО РегистрацииНаПЛК.ДокументРегистрации = РегистрацияНаПЛК.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ЗаявкаНаОтгрузкуПродукции КАК ЗаявкаОтгрузки
	|		ПО РегистрацииНаПЛК.ЗаявкаНаОтгрузку = ЗаявкаОтгрузки.Ссылка
	|		И ЗаявкаОтгрузки.Проведен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОрганизацияДокумента
	|		ПО РегистрацияНаПЛК.Организация = ОрганизацияДокумента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК КонтрагентРегистрации
	|		ПО РегистрацияНаПЛК.Контрагент = КонтрагентРегистрации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ОснованиеДляДвиженияЗапасов КАК ОснованиеДляДвиженияЗапасов
	|		ПО РегистрацияНаПЛК.Ссылка = ОснованиеДляДвиженияЗапасов.Регистрация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрацииНаПЛК.ДокументРегистрации КАК ДокументРегистрации,
	|	ЗаявкаНаОтгрузкуПродукцииТовары.Ссылка КАК ЗаявкаНаОтгрузку,
	|	ЗаявкаНаОтгрузкуПродукцииТовары.Номенклатура КАК Номенклатура,
	|	Товары.НаименованиеДляПечати КАК ТоварНаименование,
	|	Товары.НаименованиеПолное КАК ТоварНаименованиеПолное,
	|	Товары.ЕдиницаИзмерения КАК ТоварЕдиницаИзмерения,
	|	ЗаявкаНаОтгрузкуПродукцииТовары.Цена КАК Цена,
	|	ЗаявкаНаОтгрузкуПродукцииТовары.ЦенаРучВНацВалюте КАК ЦенаРучВНацВалюте,
	|	ЗаявкаНаОтгрузкуПродукцииТовары.СтоимостьРучВНацВалюте КАК СтоимостьРучВНацВалюте,
	|	ЗаявкаНаОтгрузкуПродукцииТовары.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	ВТ_РегистрацииНаПЛК КАК РегистрацииНаПЛК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ЗаявкаНаОтгрузкуПродукции.Товары КАК ЗаявкаНаОтгрузкуПродукцииТовары
	|			ПО РегистрацияНаПЛК.ЗаявкаНаОтгрузкуПродукции = ЗаявкаНаОтгрузкуПродукцииТовары.Ссылка
	|			И РегистрацияНаПЛК.Номенклатура = ЗаявкаНаОтгрузкуПродукцииТовары.Номенклатура
	|			И (РегистрацияНаПЛК.Дата >= НАЧАЛОПЕРИОДА(ЗаявкаНаОтгрузкуПродукцииТовары.ОтгрузкаС, ДЕНЬ))
	|			И (РегистрацияНаПЛК.Дата <= КОНЕЦПЕРИОДА(ЗаявкаНаОтгрузкуПродукцииТовары.ОтгрузкаПо, ДЕНЬ))
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|			ПО РегистрацияНаПЛК.Номенклатура = Товары.Ссылка
	|		ПО РегистрацииНаПЛК.ДокументРегистрации = РегистрацияНаПЛК.Ссылка
	|ИТОГИ
	|ПО
	|	ДокументРегистрации";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатПакетаЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
	Возврат Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти",
							РезультатПакетаЗапросов[1], РезультатПакетаЗапросов[2]);
				
КонецФункции

#КонецОбласти

#Область ПереопределяемыеПроцедурыФормы 

// Обрабоктчик при измененении организации 
//
// Параметры:
//   Объект - ДанныеФормыСтруктура - заполняемый документ
//
Процедура ОрганизацияПриИзмененииНаСервере(Объект) Экспорт
	
	Если Объект.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Отгрузка
		И Объект.ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль Тогда
		
		Если Объект.Внутригрупповой Тогда
			Объект.Собственник = Объект.Организация;
		Иначе
			Объект.Собственник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "КонтрагентОрганизации");
		КонецЕсли;
		
	ИначеЕсли Объект.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка	
		И Объект.Внутригрупповой Тогда	
		
		Объект.Собственник = Объект.Организация;		
	КонецЕсли;
		
КонецПроцедуры

// Обрабоктчик при измененении контрагента 
//
// Параметры:
//   Объект - ДанныеФормыСтруктура - заполняемый документ
//
Процедура КонтрагентПриИзмененииНаСервере(Объект) Экспорт
	
	Если Объект.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка
		И Объект.ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт Тогда
		
		Объект.ОтправительПолучатель = Объект.Контрагент;
	КонецЕсли;	
	
КонецПроцедуры

// Заполняет спецификацию в форме документа 
//
// Параметры:
//   Объект - ДанныеФормыСтруктура - заполняемый документ
//
Процедура ПодобратьСпецификациюНаСервере(Объект) Экспорт
	
	Объект.Спецификация = Документы.гкс_СпецификацияКДоговоруКонтрагента.ПустаяСсылка();
	
КонецПроцедуры

// Заполняет реквизиты по транспортному документу 
//
// Параметры:
//   Объект - ДанныеФормыСтруктура - заполняемый документ
//
//   ТранспортныйДокумент - ДокументСсылка.гкс_ТранспортныйДокумент - ссылка на транспортный документ
//
Процедура ЗаполнитьРеквизитыДокументаПоставщика(Объект, ТранспортныйДокумент) Экспорт
	
	Если Не ЗначениеЗаполнено(ТранспортныйДокумент) Тогда
		Возврат;	
	КонецЕсли;	
		
	РеквизитыТД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ТранспортныйДокумент, "НомерДокумента, Номер, ДатаДокумента, Дата");
		
	Объект.НомерДокументаПоставщика = ?(ЗначениеЗаполнено(РеквизитыТД.НомерДокумента),
		РеквизитыТД.НомерДокумента, РеквизитыТД.Номер);
		
	Объект.ДатаДокументаПоставщика = ?(ЗначениеЗаполнено(РеквизитыТД.ДатаДокумента), 
		РеквизитыТД.ДатаДокумента, РеквизитыТД.Дата);
					
КонецПроцедуры

#Область ПереопределяемыеМодуляОбъекта

// Проверяет наличие транспортного документа для регистрации 
//
// Параметры:
//   Объект - ДокументОбъект.гкс_РегистрацияНаПЛК - заполняемый документ
//
// Возвращаемое значение:
//	Булево - Истина, если проверка прошла успешно
// 
Функция ТранспортныйДокументЗаполненКорректно(Объект) Экспорт
	
	ЗаполненКорректно = Истина;
	
	КлючевыеРеквизиты = "ВидПеревозки, ТипРегистрации, Внутригрупповой";
	ЗначенияРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, КлючевыеРеквизиты);

	Если ЗначенияРегистрации.ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт
		И ЗначенияРегистрации.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка
		И ЗначенияРегистрации.Внутригрупповой Тогда
		
		Если Объект.ДополнительныеСвойства.Свойство("ТранспортныйДокумент") Тогда		
			ЗаполненКорректно = ЗначениеЗаполнено(Объект.ДополнительныеСвойства.ТранспортныйДокумент);		
		Иначе 
			
			ИнформацияОТранспорте = гкс_ПриемкаТранспортаВызовСервера.ИнформацияОТранспортеПоРегистрации(Объект.Ссылка);
			Если Не (ЗначениеЗаполнено(ИнформацияОТранспорте) 
				И ЗначениеЗаполнено(ИнформацияОТранспорте.ТранспортныйДокумент)) Тогда
		
				ЗаполненКорректно = Ложь;		
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗаполненКорректно;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДанныеФактическихВесов(ДокументыРегистрации, ДанныеВзвешивания)
	
	АдресХранилища = гкс_ПриемкаНаПЛКСервер.
					 ПоказанияВесовДляСпискаРегистраций(ДокументыРегистрации, Новый УникальныйИдентификатор);
	 
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) = Тип("Структура") 
		И СтруктураДанных.Успешно Тогда
		
		ПерваяСтрока = 0;
		ЗначенияВесовРегистраций = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(
			СтруктураДанных.ЗначенияВесовРегистраций[ПерваяСтрока]);
		
		ДанныеВзвешивания.Вставить("ДокументРегистрации", ЗначенияВесовРегистраций.ДокументРегистрации);
		ДанныеВзвешивания.Вставить("БруттоФакт", ЗначенияВесовРегистраций.Брутто);
		ДанныеВзвешивания.Вставить("НеттоФакт", ЗначенияВесовРегистраций.Нетто);
		ДанныеВзвешивания.Вставить("ТараФакт", ЗначенияВесовРегистраций.Тара);
	КонецЕсли;
				
КонецПроцедуры

#КонецОбласти