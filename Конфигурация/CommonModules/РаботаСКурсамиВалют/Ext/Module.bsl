
#Область ПрограммныйИнтерфейс

// Добавляет в справочник валют валюты из классификатора.
// При отсутствии обработки ЗагрузкаКурсовВалют валюты добавляются с наименованием "Валюта",
// символьный код соответствует цифровому.
//
// Параметры:
//   Коды - Массив из Строка - цифровые коды добавляемых валют.
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.Валюты - ссылки созданных валют.
//
Функция ДобавитьВалютыПоКоду(Знач Коды) Экспорт
	
	Результат = Новый Массив();
	Если Метаданные.Обработки.Найти("ЗагрузкаКурсовВалют") <> Неопределено Тогда
		Результат = Обработки["ЗагрузкаКурсовВалют"].ДобавитьВалютыПоКоду(Коды);
	Иначе
		Для Каждого Код Из Коды Цикл
			ВалютаСсылка = Справочники.Валюты.НайтиПоКоду(Код);
			Если ВалютаСсылка.Пустая() Тогда
				ВалютаОбъект = Справочники.Валюты.СоздатьЭлемент();
				ВалютаОбъект.Код = Код;
				ВалютаОбъект.Наименование = Код;
				ВалютаОбъект.НаименованиеПолное = НСтр("ru = 'Валюта'");
				ВалютаОбъект.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
				ВалютаОбъект.Записать();
				ВалютаСсылка = ВалютаОбъект.Ссылка;
			КонецЕсли;
			Результат.Добавить(ВалютаСсылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает курс валюты на дату.
//
// Параметры:
//   Валюта    - СправочникСсылка.Валюты - валюта, для которой получается курс.
//   ДатаКурса - Дата - дата, на которую получается курс.
//
// Возвращаемое значение: 
//   Структура:
//    * Курс      - Число - курс валюты на указанную дату.
//    * Кратность - Число - кратность валюты на указанную дату.
//    * Валюта    - СправочникСсылка.Валюты - ссылка валюты.
//    * ДатаКурса - Дата - дата получения курса.
//
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса) Экспорт
	
	Результат = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
	
	Результат.Вставить("Валюта",    Валюта);
	Результат.Вставить("ДатаКурса", ДатаКурса);
	
	Возврат Результат;
	
КонецФункции

// Формирует представление суммы прописью в указанной валюте.
//
// Параметры:
//   СуммаЧислом - Число - сумма, которую надо представить прописью.
//   Валюта - СправочникСсылка.Валюты - валюта, в которой нужно представить сумму.
//   БезДробнойЧасти - Булево - указать Истина, если требуется получить сумму без дробной части (без копеек).
//   КодЯзыка - Строка - язык, на котором требуется получить сумму прописью.
//                       Состоит из кода языка по ISO 639-1 и, опционально, кода страны по ISO 3166-1, разделенных
//                       символом подчеркивания. Примеры: "en", "en_US", "en_GB", "ru", "ru_RU".
//                       Значение по умолчанию - язык конфигурации.
//
// Возвращаемое значение:
//   Строка - сумма прописью.
//
Функция СформироватьСуммуПрописью(СуммаЧислом, Валюта, БезДробнойЧасти = Ложь, Знач КодЯзыка = Неопределено) Экспорт
	
	Если Метаданные.Обработки.Найти("ЗагрузкаКурсовВалют") <> Неопределено Тогда
		Результат = Обработки["ЗагрузкаКурсовВалют"].СформироватьСуммуПрописью(СуммаЧислом, Валюта, БезДробнойЧасти, КодЯзыка);
	Иначе
		Результат = "";
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Пересчитывает сумму из одной валюты в другую.
//
// Параметры:
//  Сумма          - Число - сумма, которую необходимо пересчитать;
//  ИсходнаяВалюта - СправочникСсылка.Валюты - пересчитываемая валюта;
//  НоваяВалюта    - СправочникСсылка.Валюты - валюта, в которую необходимо пересчитать;
//  Дата           - Дата - дата курсов валют.
//
// Возвращаемое значение:
//  Число - пересчитанная сумма.
//
Функция ПересчитатьВВалюту(Сумма, ИсходнаяВалюта, НоваяВалюта, Дата) Экспорт
	
	Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Сумма,
		ПолучитьКурсВалюты(ИсходнаяВалюта, Дата),
		ПолучитьКурсВалюты(НоваяВалюта, Дата));
		
КонецФункции

// Предназначена для использования в конструкторе типа Число для денежных полей.
//
// Параметры:
//  ДопустимыйЗнакПоля - ДопустимыйЗнак - определяет допустимый знак числа. Значение по умолчанию - ДопустимыйЗнак.Любой.
// 
// Возвращаемое значение:
//  ОписаниеТипов - тип значения для денежного поля.
//
Функция ОписаниеТипаДенежногоПоля(Знач ДопустимыйЗнакПоля = Неопределено) Экспорт
	
	Если ДопустимыйЗнакПоля = Неопределено Тогда
		ДопустимыйЗнакПоля = ДопустимыйЗнак.Любой;
	КонецЕсли;
	
	Если ДопустимыйЗнакПоля = ДопустимыйЗнак.Любой Тогда
		Возврат Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип;
	КонецЕсли;
	
	Возврат Метаданные.ОпределяемыеТипы.ДенежнаяСуммаНеотрицательная.Тип;
	
КонецФункции

// Добавляет возможность вывода числового реквизита прописью при печати.
// Для вызова из УправлениеПечатьюПереопределяемый.ПриОпределенииИсточниковДанныхПечати.
// 
// Параметры:
//  ИсточникиДанныхПечати - см. УправлениеПечатьюПереопределяемый.ПриОпределенииИсточниковДанныхПечати.ИсточникиДанныхПечати
//
Процедура ПодключитьИсточникДанныхПечатиЧислоПрописью(ИсточникиДанныхПечати) Экспорт
	
	ИсточникиДанныхПечати.Добавить(СхемаДанныеПечатиСуммаПрописью(), "ДанныеПечатиСуммаПрописью");	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// Параметры:
//   ТекущиеДела - см. ТекущиеДелаСервер.ТекущиеДела.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ОбъектМетаданных = Метаданные.Обработки.Найти("ЗагрузкаКурсовВалют");
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если ОбщегоНазначения.РазделениеВключено() // В модели сервиса обновляется автоматически.
		Или ОбщегоНазначения.ЭтоАвтономноеРабочееМесто()
		Или Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КурсыВалют)
		Или МодульТекущиеДелаСервер.ДелоОтключено("КлассификаторВалют") Тогда
		Возврат;
	КонецЕсли;
	
	КурсыАктуальны = КурсыАктуальны();
	
	// Процедура вызывается только при наличии подсистемы "Текущие дела", поэтому здесь
	// не делается проверка существования подсистемы.
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(ОбъектМетаданных.ПолноеИмя());
	
	Для Каждого Раздел Из Разделы Цикл
		
		ИдентификаторВалюты = "КлассификаторВалют" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "");
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторВалюты;
		Дело.ЕстьДела       = Не КурсыАктуальны;
		Дело.Представление  = НСтр("ru = 'Курсы валют устарели'");
		Дело.Важное         = Истина;
		Дело.Форма          = "Обработка.ЗагрузкаКурсовВалют.Форма";
		Дело.ПараметрыФормы = Новый Структура("ОткрытиеИзСписка", Истина);
		Дело.Владелец       = Раздел;
		
	КонецЦикла;
	
КонецПроцедуры

// См. ЗагрузкаДанныхИзФайлаПереопределяемый.ПриОпределенииСправочниковДляЗагрузкиДанных.
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
	// Загрузка в классификатор валюты запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.Валюты.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами.
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.Валюты.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	Если Метаданные.Обработки.Найти("ЗагрузкаКурсовВалют") <> Неопределено Тогда
		Обработки["ЗагрузкаКурсовВалют"].ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриОпределенииНазначенияРолей.
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	// СовместноДляПользователейИВнешнихПользователей.
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(
		Метаданные.Роли.ЧтениеКурсовВалют.Имя);
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ОповещатьОНеобходимостиОбновленияКурсовВалют = ОповещатьОНеобходимостиОбновленияКурсовВалют();
	
	Параметры.Вставить("Валюты", Новый ФиксированнаяСтруктура("ТребуетсяОбновитьКурсыВалют",
		ОповещатьОНеобходимостиОбновленияКурсовВалют И Не КурсыАктуальны()));
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок.
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.КурсыВалют.ПолноеИмя());
	
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	ЗапросыРазрешений.Добавить(
		МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения()));
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если Метаданные.Обработки.Найти("ЗагрузкаКурсовВалют") <> Неопределено Тогда
		Обработки["ЗагрузкаКурсовВалют"].ПриДобавленииОбработчиковОбновления(Обработчики);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтернетПоддержкаПользователейПереопределяемый.ПриИзмененииДанныхАутентификацииИнтернетПоддержки.
Процедура ПриИзмененииДанныхАутентификацииИнтернетПоддержки(ДанныеПользователя) Экспорт
	
	Если Метаданные.Обработки.Найти("ЗагрузкаКурсовВалют") <> Неопределено Тогда
		Обработки["ЗагрузкаКурсовВалют"].ПриИзмененииДанныхАутентификацииИнтернетПоддержки(ДанныеПользователя);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие установленного курса и кратности валюты на 1 января 1980 года.
// В случае отсутствия устанавливает курс и кратность равными единице.
//
// Параметры:
// 	Валюта - СправочникСсылка.Валюты
//
Процедура ПроверитьКорректностьКурсаНа01_01_1980(Валюта) Экспорт
	
	ДатаКурса = Дата("19800101");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КурсыВалют");
	ЭлементБлокировки.УстановитьЗначение("Валюта", Валюта);
	ЭлементБлокировки.УстановитьЗначение("Период", ДатаКурса);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		СтруктураКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
		
		Если (СтруктураКурса.Курс = 0) Или (СтруктураКурса.Кратность = 0) Тогда
			НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Валюта.Установить(Валюта);
			НаборЗаписей.Отбор.Период.Установить(ДатаКурса);
			Запись = НаборЗаписей.Добавить();
			Запись.Валюта = Валюта;
			Запись.Период = ДатаКурса;
			Запись.Курс = 1;
			Запись.Кратность = 1;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриПодготовкеДанныхПечати
Процедура ПриПодготовкеДанныхПечати(ИсточникиДанных, ВнешниеНаборыДанных, ИдентификаторСхемыКомпоновкиДанных, КодЯзыка,
	ДополнительныеПараметры) Экспорт
	
	Если ИдентификаторСхемыКомпоновкиДанных = "ДанныеПечатиСуммаПрописью" Тогда
		ВнешниеНаборыДанных.Вставить("Данные", ДанныеПечатиСуммаПрописью(ДополнительныеПараметры.ОписанияИсточниковДанных, КодЯзыка));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаКурсовВалютРББезИнтеренетПоддержки

Процедура ЗагрузитьАктуальныйКурс(ПараметрыЗагрузки = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	НачалоПериодаЗагрузки = ТекущаяДатаСеанса();
	ОкончаниеПериодаЗагрузки = ТекущаяДатаСеанса();
	
	Если ТипЗнч(ПараметрыЗагрузки) = Тип("Структура") Тогда
		НачалоПериодаЗагрузки = ПараметрыЗагрузки.НачалоПериода;
		ОкончаниеПериодаЗагрузки = ПараметрыЗагрузки.КонецПериода;	
	КонецЕсли;
	
	СостояниеЗагрузки        = Новый Массив;
	
	ТаблицаАдресов = Новый ТаблицаЗначений;
	ТаблицаАдресов.Колонки.Добавить("Адрес");
	ТаблицаАдресов.Колонки.Добавить("ТМП");
	ТаблицаАдресов.Колонки.Добавить("НачалоПериодаЗагрузки");
	ТаблицаАдресов.Колонки.Добавить("ОкончаниеПериодаЗагрузки");
	
	СерверИсточник = "www.nbrb.by";
	
	НачалоПериода  = НачалоПериодаЗагрузки;
	
	Пока НачалоПериода <= ОкончаниеПериодаЗагрузки Цикл 
		
		Адрес          = "Services/XmlExRates.aspx?ondate=";
		ДеньВФормате   = Формат(НачалоДня(НачалоПериода), "ДФ=MM/dd/yyyy");
		Адрес          = Адрес + ДеньВФормате;
		
		НоваяСтрока       = ТаблицаАдресов.Добавить();
		НоваяСтрока.Адрес = Адрес;
		НоваяСтрока.ТМП   = "";
		
		ОдинДень = гкс_ОбщегоНазначенияКлиентСервер.ЧислоСекундВСутках();
		
		НоваяСтрока.НачалоПериодаЗагрузки    = НачалоПериода;
	    НоваяСтрока.ОкончаниеПериодаЗагрузки = НачалоПериода;
		НачалоПериода                        = НачалоПериода + ОдинДень;
		
	КонецЦикла;
	
	Валюты = ЗагружаемыеВалюты();
	
	Для Каждого  ТекСтрока Из ТаблицаАдресов Цикл 

		СтруктураАдреса     = Новый Структура("Адрес, ТМП", ТекСтрока.Адрес, ТекСтрока.ТМП);
	
		СтруктураПараметров = Новый Структура("НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки, ИсточникКотировки",
												ТекСтрока.НачалоПериодаЗагрузки, ТекСтрока.ОкончаниеПериодаЗагрузки);

		ЗащищенноеСоединение = Истина;
		
		Результат  = ПолучитьФайлНаВебСервере(СерверИсточник, СтруктураАдреса, ЗащищенноеСоединение);
		ВыполнитьЗагрузку(Валюты, Результат, СтруктураПараметров, СостояниеЗагрузки);

	КонецЦикла;

КонецПроцедуры

// Получить файл на веб сервере.
// 
// Параметры:
//  СерверИсточник - Строка - веб-адрес
//  СтруктураАдреса - Структура - Структура адреса: свойство Адрес -строка - продолжение веб-адреса
//  ЗащищенноеСоединение - Булево - Защищенное соединение
// 
// Возвращаемое значение:
//  Структура - Получить файл на веб сервере:
// 	успех  - булево - успех или неудача операции
// 	строка - строка - в случае успеха либо строка-путь сохранения файла
//                   либо адрес во временном хранилище
//                   в случае неуспеха сообщение об ошибке
Функция ПолучитьФайлНаВебСервере(СерверИсточник, СтруктураАдреса, ЗащищенноеСоединение = Ложь)
	
	ПараметрыПолучения = Новый Структура;

	Если ЗащищенноеСоединение Тогда 
		Протокол = "https://";
		ПараметрыПолучения.Вставить("ЗащищенноеСоединение", Новый ЗащищенноеСоединениеOpenSSL);	
	Иначе
		Протокол = "http://";
	КонецЕсли; 
	ФайлНаВебСервере = СтрШаблон("%1%2/%3", Протокол, СерверИсточник, СтруктураАдреса.Адрес);
	
	Возврат ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(ФайлНаВебСервере, ПараметрыПолучения);
	
КонецФункции

// Выполняет загрузку по заполненным параметрам
// Параметры:
//	МассивВалют - массив из Структура - набор с обязательными свойствами Валюта - справочник, КодВалюты 
//	Результат - структура - результат ф-и ПолучитьФайлНаВебСервере
//	СтруктураПараметров - структура - свойства:НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки, ИсточникКотировки
//	СостояниеЗагрузки - массив из структура - вида (Валюта, СтатусОперации - булево, Сообщение)
Процедура ВыполнитьЗагрузку(МассивВалют, Результат, СтруктураПараметров, СостояниеЗагрузки) Экспорт
	
	НачалоПериодаЗагрузки    = СтруктураПараметров.НачалоПериодаЗагрузки;
	ОкончаниеПериодаЗагрузки = СтруктураПараметров.ОкончаниеПериодаЗагрузки;
	
	Если Результат.Статус И ЗначениеЗаполнено(Результат.Путь) Тогда
		
		АдресФайла = Результат.Путь;
		
		ПоясняющееСообщение = ЗагрузитьКурсВалютыИзФайлаРБ(МассивВалют, 
															АдресФайла, 
															НачалоПериодаЗагрузки);
		
		УдалитьФайлы(Результат.Путь);
		СтатусОперации = Истина;
	
	ИначеЕсли Результат.Статус Тогда
		ПоясняющееСообщение = ЗагрузитьКурсВалютыИзСтрокиXML(МассивВалют, 
																Результат.ТекстОтвета, 
																НачалоПериодаЗагрузки, 
																ОкончаниеПериодаЗагрузки) + Символы.ПС;
		СтатусОперации = Истина;

	Иначе
		СтатусОперации = Ложь;
	КонецЕсли;
	
	Для Каждого Валюта Из МассивВалют Цикл 
		Если Не Результат.Статус Тогда
			ПоясняющееСообщение= НСтр("ru = 'Не возможно получить файл данных с курсами валюты (%1 - %2):
                                       |%3
                                       |Возможно, нет доступа к веб сайту с курсами валют, либо указана несуществующая 
                                       |валюта.'");
			ПоясняющееСообщение 
				= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПоясняющееСообщение,
																			Валюта.КодВалюты,
																			Валюта.Валюта,
																			Результат.СообщениеОбОшибке);
		КонецЕсли;	
		
		СтруктураСостоянйВалют = Новый Структура("Валюта,СтатусОперации,Сообщение", 
													Валюта, 
													СтатусОперации, 
													ПоясняющееСообщение);
		СостояниеЗагрузки.Добавить(СтруктураСостоянйВалют);
	КонецЦикла;
	
КонецПроцедуры

//Функция выполняет автоматическую загрузку из файла для РБ Беларусь, валюты загружаются из файла XML
// Параметры:
// 	Валюты - массив из СправочникСсылка.Валюты - набор с обязательными свойствами Валюта - справочник, КодВалюты 
// 	ПутьКФайлу - строка - содержит путь к загруженному файлу курсов
// 	НачалоПериодаЗагрузки - дата - начало периода загрузки курса
// 	ОкончаниеПериодаЗагрузки - дата - окончание периода загрузки курса
// Возвращаемое значение:
// 	Строка - пояснение о загрузке
Функция ЗагрузитьКурсВалютыИзФайлаРБ(Знач Валюты, Знач ПутьКФайлу, Знач НачалоПериодаЗагрузки) Экспорт
	
	ИмяФайла = ОпределитьИмяФайла(ПутьКФайлу);
	
	ВходящийФайл = Новый Файл(ИмяФайла);
	Если Не ВходящийФайл.Существует() Тогда
		Возврат "";
	КонецЕсли;
	
	ТаблицаКурсы = Новый ТаблицаЗначений;

	ИнициализироватьТаблицуКурсы(ТаблицаКурсы);
	
	// читаем файл
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ИмяФайла);
	
	ПостроительДОМ = Новый ПостроительDOM;
	ДокументДом    = ПостроительДОМ.Прочитать(ЧтениеХМЛ);
	ЧтениеХМЛ.Закрыть();
	
	КорневойДОМ    = ДокументДом.ЭлементДокумента;

	Для Каждого Узел Из КорневойДОМ.ДочерниеУзлы Цикл
		Если Узел.ИмяУзла = "Currency" Тогда
			ОбработатьУзелВалютаФайлаXML(Узел.ДочерниеУзлы, НачалоПериодаЗагрузки, ТаблицаКурсы);
		КонецЕсли;
	КонецЦикла;
	
	ПояснениеОЗагрузке = "";
	Если ТаблицаКурсы.Количество() = 0 Тогда
		ПояснениеОЗагрузке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Курсы валют РБ не загружены. На %1 нет данных.'"),
										НачалоПериодаЗагрузки);
	КонецЕсли;
	
	ЗаполнитьРегистрКурсыВалют(Валюты, ТаблицаКурсы, ПояснениеОЗагрузке);
		
	ПояснениеОЗагрузке = Лев(ПояснениеОЗагрузке, СтрДлина(ПояснениеОЗагрузке) - 1);							

 	Возврат ПояснениеОЗагрузке;

КонецФункции

// Параметры:
// 	Валюты - массив из СправочникСсылка.Валюты - набор с обязательными свойствами Валюта - справочник, КодВалюты
// 	СтрокаXML - строка - содержит данные XML об одной валюте за несколько дней
// 	НачалоПериодаЗагрузки - дата - начало периода загрузки курса
// 	ОкончаниеПериодаЗагрузки - дата - окончание периода загрузки курса
// Возвращаемое значение:
// 	Строка - пояснение о загрузке
Функция ЗагрузитьКурсВалютыИзСтрокиXML(Знач Валюты, Знач СтрокаXML, Знач НачалоПериодаЗагрузки, 
										Знач ОкончаниеПериодаЗагрузки) Экспорт
	
	ЧтениеСтрокиXML = Новый ЧтениеXML();
	ЧтениеСтрокиXML.УстановитьСтроку(СтрокаXML);
		
	Построитель = Новый ПостроительDOM;
   	ДокументDOM = Построитель.Прочитать(ЧтениеСтрокиXML);
	ЧтениеСтрокиXML.Закрыть();

	КорневойДОМ   = ДокументDOM.ЭлементДокумента;
	
	РегистрКурсыВалют  = РегистрыСведений.КурсыВалют;
	
	СекундВСутках = 86400;
	ЧислоЗагружаемыхДнейВсего = 1 + (ОкончаниеПериодаЗагрузки - НачалоПериодаЗагрузки) / СекундВСутках;
	ЧислоЗагруженныхДней = 0;
	
	ТаблицаКурсы = Новый ТаблицаЗначений;
	ИнициализироватьТаблицуКурсы(ТаблицаКурсы);

	ОжидаемаяДатаЗагрузки = НачалоПериодаЗагрузки;
	
	Для Каждого ЭлементBody Из КорневойДОМ.ДочерниеУзлы Цикл
				
		Для Каждого ЭлементResponse из ЭлементBody.ДочерниеУзлы Цикл
			Для Каждого ЭлементResult из ЭлементResponse.ДочерниеУзлы Цикл
				Для Каждого ЭлементDataSet из ЭлементResult.ДочерниеУзлы Цикл
					ОбработатьКурсНаДатуXML(ЭлементDataSet.ДочерниеУзлы, НачалоПериодаЗагрузки, 
											ОкончаниеПериодаЗагрузки, ТаблицаКурсы, ЧислоЗагруженныхДней);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Если ЧислоЗагружаемыхДнейВсего = ЧислоЗагруженныхДней Тогда
		ПояснениеОЗагрузке = "";
	ИначеЕсли ЧислоЗагруженныхДней = 0 Тогда
		ПояснениеОЗагрузке = НСтр("ru = 'Курсы валюты %1 - %2 загружены по данным ИБ.'");
		ОжидаемаяДатаЗагрузки = ОкончаниеПериодаЗагрузки;
		ЗаполнитьТаблицуТекущимКурсом(ТаблицаКурсы, ОжидаемаяДатаЗагрузки, НачалоПериодаЗагрузки, Валюты[0].Валюта);
	Иначе
		ПояснениеОЗагрузке = НСтр("ru = 'Загружены не все курсы по валюте %1 - %2.'");
	КонецЕсли;

	Для Каждого СтрокаТЗ Из ТаблицаКурсы Цикл
		ЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьКурсовВалют, СтрокатЗ);
		ЗаписьКурсовВалют.Записать();	
	КонецЦикла;
	
	Для Каждого СтрокаВалюты Из Валюты Цикл
		ВыбраннаяВалюта = СтрокаВалюты.Валюта;
		ПояснениеОЗагрузке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													ПояснениеОЗагрузке,
													ВыбраннаяВалюта.Код,
													ВыбраннаяВалюта.Наименование) + ",";
	КонецЦикла;

	ПояснениеОЗагрузке = Лев(ПояснениеОЗагрузке, СтрДлина(ПояснениеОЗагрузке) - 1);							
	
	Возврат ПояснениеОЗагрузке;
	
КонецФункции

Функция ОпределитьИмяФайла(Знач ПутьКФайлу)
	
	ИмяФайла = "";
	Если ЭтоАдресВременногоХранилища(ПутьКФайлу) Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПутьКФайлу);
		ДвоичныеДанные.Записать(ИмяФайла);
	Иначе
		ИмяФайла = ПутьКФайлу;
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции


Процедура ИнициализироватьТаблицуКурсы(ТЗ)
	
	КвалификаторыЧислаКратность = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой);
	КвалификаторыЧислаКурс 		= Новый КвалификаторыЧисла(10, 4, ДопустимыйЗнак.Любой);
	КвалификаторыДаты 			= Новый КвалификаторыДаты(ЧастиДаты.Дата);
	
	ТЗ.Колонки.Добавить("Период", 		Новый ОписаниеТипов("Дата",,,КвалификаторыДаты));
	ТЗ.Колонки.Добавить("Валюта");
	ТЗ.Колонки.Добавить("Кратность", 	Новый ОписаниеТипов("Число", КвалификаторыЧислаКратность));
	ТЗ.Колонки.Добавить("Курс", 		Новый ОписаниеТипов("Число", КвалификаторыЧислаКурс));

КонецПроцедуры

Процедура ОбработатьУзелВалютаФайлаXML(Знач УзелВалюта, Знач ПериодЗагрузки, ТаблицаКурсы)
											
	ПустаяВалюта = Справочники.Валюты.ПустаяСсылка();
	СтруктураКурс = Новый Структура("Период, Валюта", '00010101', ПустаяВалюта);
	СтруктураКурс.Вставить("Кратность", 1);
	СтруктураКурс.Вставить("Курс", 0);
			
	ЗаполнитьСтруктуруКурсаВалютыРБ(СтруктураКурс, УзелВалюта, ПериодЗагрузки);

	Если СтруктураКурс.Валюта <> ПустаяВалюта И СтруктураКурс.Курс <> 0 Тогда 
		НоваяСтрокаТЗ 			= ТаблицаКурсы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, СтруктураКурс);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруКурсаВалютыРБ(СтруктураКурс, Знач УзлыВалют, Знач ПериодЗагрузки)
	
	Для Каждого УзелВалюта Из УзлыВалют Цикл
	
		Если УзелВалюта.ИмяЭлемента = "NumCode" Тогда
			Код       				= УзелВалюта.ТекстовоеСодержимое;
			Валюта    				= АльтернативнаяВалютаПоКоду(Код);
			СтруктураКурс.Период 	= ПериодЗагрузки;
			СтруктураКурс.Валюта 	= Валюта;
		ИначеЕсли УзелВалюта.ИмяЭлемента = "Scale" Тогда
			СтруктураКурс.Кратность = Число(УзелВалюта.ТекстовоеСодержимое);
		ИначеЕсли УзелВалюта.ИмяЭлемента = "Rate" Тогда
			СтруктураКурс.Курс = Число(УзелВалюта.ТекстовоеСодержимое);
		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры

Функция АльтернативнаяВалютаПоКоду(КодВалюты) Экспорт
	
	Запрос       = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Валюты.Ссылка КАК АльтернативнаяВалюта
	               |ИЗ
	               |	Справочник.Валюты КАК Валюты
	               |ГДЕ 
	               |	Валюты.Код ПОДОБНО &Код";
	
	ПараметрКод = СтрШаблон("%%%1%%", КодВалюты);
	Запрос.УстановитьПараметр("Код", ПараметрКод);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой()Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.АльтернативнаяВалюта;
	КонецЕсли;	
	
	Возврат Справочники.Валюты.ПустаяСсылка();
	
КонецФункции

Процедура ЗаполнитьРегистрКурсыВалют(Знач Валюты, Знач ТаблицаКурсы, ШаблонПояснениеОЗагрузке)
	
	РегистрКурсыВалют  = РегистрыСведений.КурсыВалют;
	ПояснениеОЗагрузке = "";
	
	Для Каждого СтрокаВалюты Из Валюты Цикл
	
		Валюта = СтрокаВалюты.Ссылка;
		РеквизитыВалюты = гкс_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Валюта, "Код, Наименование");
		
		СтрокаПараметров = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПояснениеОЗагрузке,
																					РеквизитыВалюты.Код,
																					РеквизитыВалюты.Наименование);
		
		ПояснениеОЗагрузке = СтрШаблон("%1%2,", ПояснениеОЗагрузке, СтрокаПараметров);

		СтрокиКурсы = ТаблицаКурсы.НайтиСтроки(ПолучитьСтруктуруОтбораВалюты(Валюта));
		Для Каждого СтрокаКурсы Из СтрокиКурсы Цикл
			
			ЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьКурсовВалют, СтрокаКурсы);
			ЗаписьКурсовВалют.Записать();
				
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСтруктуруОтбораВалюты(Валюта)
	Возврат Новый Структура("Валюта", Валюта);
КонецФункции

Процедура ОбработатьКурсНаДатуXML(Знач УзлыRate, Знач НачалоПериодаЗагрузки, 
								Знач ОкончаниеПериодаЗагрузки, ТаблицаКурсы, ЧислоЗагруженныхДней)
	
	ПустаяВалюта = Справочники.Валюты.ПустаяСсылка();
	СекундВСутках = 86400;
	
	Для Каждого ЭлементRate Из УзлыRate Цикл
		// уровень курса валюты на дату
		СтруктураКурс = Новый Структура("Период, ПериодДо, Валюта", '00010101','00010101', ПустаяВалюта);
		СтруктураКурс.Вставить("Кратность", 1);
		СтруктураКурс.Вставить("Курс", 0);
		
		Для Каждого ЭлементДанныеКурса Из ЭлементRate.ДочерниеУзлы Цикл
			
			Если ЭлементДанныеКурса.ТипУзла = ТипУзлаDOM.Элемент Тогда
				ДополнитьСтруктуруКурсаПоЭлементуDOM(СтруктураКурс, ЭлементДанныеКурса, ОкончаниеПериодаЗагрузки);
			КонецЕсли;
						
		КонецЦикла;
		
		Если СтруктураКурс.Валюта <> ПустаяВалюта И СтруктураКурс.Курс <> 0 Тогда
			// т.к. в ответе данные по курсу приходят в виде периода действия курса, то грузим за каждый день указанного периода
			// границы периода действия в файле могут находиться за пределами загружаемого
			ДатаКурса = Макс(СтруктураКурс.Период, НачалоПериодаЗагрузки);
			ВерхняяГраницаПериода = Мин(СтруктураКурс.ПериодДо, ОкончаниеПериодаЗагрузки);
			Пока ДатаКурса <= ВерхняяГраницаПериода  Цикл
				НоваяСтрокаТЗ 			= ТаблицаКурсы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, СтруктураКурс);
				НоваяСтрокаТЗ.Период	= ДатаКурса;
				ЧислоЗагруженныхДней = ЧислоЗагруженныхДней + 1;
				ДатаКурса = ДатаКурса + СекундВСутках;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруКурсаПоЭлементуDOM(СтруктураКурс, Знач ДанныеЭлемента, Знач ОкончаниеПериодаЗагрузки)
	
	СекундВСутках = 86400;
	Если ДанныеЭлемента.ИмяУзла = "Date" Тогда
		СоставДаты 
				= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеЭлемента.ТекстовоеСодержимое, ".");
		ДатаКурса 
				= Дата(СоставДаты[2], СоставДаты[1], СоставДаты[0]);
		СтруктураКурс.Период = ДатаКурса;
	ИначеЕсли ДанныеЭлемента.ИмяУзла = "DateTo" Тогда
		СоставДаты
				= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеЭлемента.ТекстовоеСодержимое, ".");
		ДатаКурса = Дата(СоставДаты[2], СоставДаты[1], СоставДаты[0]);
		СтруктураКурс.ПериодДо = ?(СоставДаты[2] - Год(СтруктураКурс.Период) > 1, 
									ОкончаниеПериодаЗагрузки + СекундВСутках, ДатаКурса);
	ИначеЕсли ДанныеЭлемента.ИмяУзла = "Unit" Тогда
		СтруктураКурс.Кратность = Число(ДанныеЭлемента.ТекстовоеСодержимое);
	ИначеЕсли ДанныеЭлемента.ИмяУзла = "MiddleRate" Тогда
		СтруктураКурс.Курс = Число(ДанныеЭлемента.ТекстовоеСодержимое);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТаблицуТекущимКурсом(ТаблицаКурсы, ОжидаемаяДатаЗагрузки, Знач НачалоПериодаЗагрузки, 
									Знач ЗагружаемаяВалюта, Знач Кратность = 1)
	ТекущийКурс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(НачалоПериодаЗагрузки, 
					ПолучитьСтруктуруОтбораВалюты(ЗагружаемаяВалюта));
	
	СекундВСутках = 86400;
	Пока ОжидаемаяДатаЗагрузки >= НачалоПериодаЗагрузки Цикл
		
		НоваяСтрокаТЗ = ТаблицаКурсы.Добавить();
		НоваяСтрокаТЗ.Период	= ОжидаемаяДатаЗагрузки;
		НоваяСтрокаТЗ.Валюта	= ЗагружаемаяВалюта;
		НоваяСтрокаТЗ.Кратность = Кратность;
		НоваяСтрокаТЗ.Курс		= ТекущийКурс.Курс;
		
		ОжидаемаяДатаЗагрузки = ОжидаемаяДатаЗагрузки - СекундВСутках;
	КонецЦикла;
КонецПроцедуры


#КонецОбласти

// Возвращает список разрешений для загрузки курсов валют из внешних ресурсов.
//
// Возвращаемое значение:
//  Массив из Строка
//
Функция Разрешения()
	
	Разрешения = Новый Массив;
	ИмяОбработки = "ЗагрузкаКурсовВалют";
	Если Метаданные.Обработки.Найти(ИмяОбработки) <> Неопределено Тогда
		Обработки[ИмяОбработки].ДобавитьРазрешения(Разрешения);
	КонецЕсли;
	
	Возврат Разрешения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции.

// Возвращаемое значение:
// 	Массив из СправочникСсылка.Валюты - курсы которых загружаются из внешних ресурсов.
//
Функция ЗагружаемыеВалюты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
	|	И НЕ Валюты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюты.НаименованиеПолное";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ЗаполнитьДанныеКурсаДляВалюты(ВыбраннаяВалюта) Экспорт
	
	ДанныеКурса = Новый Структура("ДатаКурса, Курс, Кратность");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РегКурсы.Период КАК Период, 
	|	РегКурсы.Курс КАК Курс, 
	|	РегКурсы.Кратность КАК Кратность
	| ИЗ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ОкончаниеПериодаЗагрузки, Валюта = &ВыбраннаяВалюта) КАК РегКурсы";
	
	Запрос.УстановитьПараметр("ВыбраннаяВалюта", ВыбраннаяВалюта);
	Запрос.УстановитьПараметр("ОкончаниеПериодаЗагрузки", ТекущаяДатаСеанса());
	
	ВыборкаКурс = Запрос.Выполнить().Выбрать();
	ВыборкаКурс.Следующий();
	
	ДанныеКурса.ДатаКурса = ВыборкаКурс.Период;
	ДанныеКурса.Курс      = ВыборкаКурс.Курс;
	ДанныеКурса.Кратность = ВыборкаКурс.Кратность;
	
	Возврат ДанныеКурса;
	
КонецФункции

Функция СписокЗависимыхВалют(ВалютаБазовая, ДополнительныеСвойства = Неопределено) Экспорт
	
	Кэшировать = (ТипЗнч(ДополнительныеСвойства) = Тип("Структура"));
	
	Если Кэшировать Тогда
		
		ЗависимыеВалюты = ДополнительныеСвойства.ЗависимыеВалюты.Получить(ВалютаБазовая);
		
		Если ТипЗнч(ЗависимыеВалюты) = Тип("ТаблицаЗначений") Тогда
			Возврат ЗависимыеВалюты;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпрВалюты.Ссылка,
	|	СпрВалюты.Наценка,
	|	СпрВалюты.СпособУстановкиКурса,
	|	СпрВалюты.ФормулаРасчетаКурса
	|ИЗ
	|	Справочник.Валюты КАК СпрВалюты
	|ГДЕ
	|	СпрВалюты.ОсновнаяВалюта = &ВалютаБазовая
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпрВалюты.Ссылка,
	|	СпрВалюты.Наценка,
	|	СпрВалюты.СпособУстановкиКурса,
	|	СпрВалюты.ФормулаРасчетаКурса
	|ИЗ
	|	Справочник.Валюты КАК СпрВалюты
	|ГДЕ
	|	СпрВалюты.ФормулаРасчетаКурса ПОДОБНО &СимвольныйКод СПЕЦСИМВОЛ ""~""";
	
	Запрос.УстановитьПараметр("ВалютаБазовая", ВалютаБазовая);
	Запрос.УстановитьПараметр("СимвольныйКод", "%" +  ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(ВалютаБазовая) + "%");
	ЗависимыеВалюты = Запрос.Выполнить().Выгрузить();	
	Если Кэшировать Тогда		
		ДополнительныеСвойства.ЗависимыеВалюты.Вставить(ВалютаБазовая, ЗависимыеВалюты);		
	КонецЕсли;
	
	Возврат ЗависимыеВалюты;
	
КонецФункции

Процедура ОбновитьКурсВалюты(Параметры, АдресРезультата) Экспорт
	
	ЗависимаяВалюта = Параметры.Валюта;
	СписокВалют = Параметры.Валюта.ИспользуемыеВалютыПриРасчетеКурса;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КурсыВалют.Период КАК Период,
	|	КурсыВалют.Валюта КАК Валюта
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Валюта В(&Валюта)
	|
	|СГРУППИРОВАТЬ ПО
	|	КурсыВалют.Период,
	|	КурсыВалют.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Валюта", СписокВалют);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбновленныеПериоды = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Если ОбновленныеПериоды[Выборка.Период] <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			Для Каждого Валюта Из СписокВалют Цикл
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КурсыВалют");
				ЭлементБлокировки.УстановитьЗначение("Валюта", Валюта);
				ЭлементБлокировки.УстановитьЗначение("Период", Выборка.Период);
			КонецЦикла;
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Валюта.Установить(Выборка.Валюта);
			НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
			НаборЗаписей.Прочитать();
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОбновитьКурсЗависимойВалюты", ЗависимаяВалюта);
			НаборЗаписей.ДополнительныеСвойства.Вставить("КодыВалют", Параметры.КодыВалют);
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОбновленныеПериоды", ОбновленныеПериоды);
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		ОбновленныеПериоды.Вставить(Выборка.Период, Истина);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление курсов валют

// Проверяет актуальность курсов всех валют.
//
Функция КурсыАктуальны() Экспорт
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втВалюты
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
	|	И Валюты.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	втВалюты КАК Валюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО Валюты.Ссылка = КурсыВалют.Валюта
	|			И (КурсыВалют.Период = &ТекущаяДата)
	|ГДЕ
	|	КурсыВалют.Валюта ЕСТЬ NULL ";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Пустой();
КонецФункции

// Для процедуры ПриДобавленииПараметровРаботыКлиентаПриЗапуске
//
Функция ОповещатьОНеобходимостиОбновленияКурсовВалют()
	
	// В модели сервиса обновляются автоматически.
	Если ОбщегоНазначения.РазделениеВключено() Или ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() 
		Или Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КурсыВалют) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВключитьОповещение = Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела");
	РаботаСКурсамиВалютПереопределяемый.ПриОпределенииНеобходимостиПоказаПредупрежденияОбУстаревшихКурсахВалют(ВключитьОповещение);
	
	Возврат ВключитьОповещение;
	
КонецФункции

Функция СхемаДанныеПечатиСуммаПрописью()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
	
		СписокПолей = МодульУправлениеПечатью.ТаблицаПолейДанныхПечати();
		
		Поле = СписокПолей.Добавить();
		Поле.Идентификатор = "Ссылка";
		Поле.Представление = НСтр("ru = 'Ссылка'");
		Поле.ТипЗначения = Новый ОписаниеТипов();	
	
		Поле = СписокПолей.Добавить();
		Поле.Идентификатор = "Валюта";
		Поле.Представление = НСтр("ru = 'Валюта'");
		Поле.ТипЗначения = Новый ОписаниеТипов();	
	
		Поле = СписокПолей.Добавить();
		Поле.Идентификатор = "ЧислоПрописью";
		Поле.Представление = НСтр("ru = 'Число прописью'");
		Поле.ТипЗначения = Новый ОписаниеТипов("Строка");
		
		Возврат МодульУправлениеПечатью.СхемаКомпоновкиДанныхПечати(СписокПолей);
	КонецЕсли;
	
КонецФункции

Функция ДанныеПечатиСуммаПрописью(ОписанияИсточниковДанных, КодЯзыка)
	
	ДанныеПечати = Новый ТаблицаЗначений();
	ДанныеПечати.Колонки.Добавить("Ссылка");
	ДанныеПечати.Колонки.Добавить("Валюта");
	ДанныеПечати.Колонки.Добавить("ЧислоПрописью");
	
	Для Каждого ОписаниеИсточника Из ОписанияИсточниковДанных Цикл
		СтрокаТаблицы = ДанныеПечати.Добавить();
		СтрокаТаблицы.Ссылка = ОписаниеИсточника.Значение;
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОписаниеИсточника.Владелец)) Тогда
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ОписаниеИсточника.Владелец));
			Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.Валюты")) Тогда
					Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеИсточника.Владелец, Реквизит.Имя);
					Если ЗначениеЗаполнено(Валюта) Тогда
						СтрокаТаблицы.Валюта = Валюта;
						СтрокаТаблицы.ЧислоПрописью = СформироватьСуммуПрописью(
							ОписаниеИсточника.Значение, Валюта, , КодЯзыка);
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеПечати;
	
КонецФункции

#КонецОбласти
