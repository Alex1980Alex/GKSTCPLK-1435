#Область СлужебныеПроцедурыиФункции

Процедура ПоФИФОИзОчередиИсходящих(ОтборСервер = Неопределено, 
	                                        ОтборТочкаПубликации = Неопределено, 
	                                        ОтборСообщения = Неопределено) Экспорт       	
											
	гкс_ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания("ОтправкаИсходящихСообщений");

	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ гкс_ОчередьСообщенийRMQВызовСервера.ВключенОбменСRMQ() Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СерверОчередей", ОтборСервер);
	Запрос.УстановитьПараметр("ТочкаПубликации", ОтборТочкаПубликации);	
	Запрос.УстановитьПараметр("МассивСообщений", ОтборСообщения);
	
	Запрос.Текст = Справочники.ИсходящиеСообщения.ТекстЗапросаИсходящиеСообщенияКОтправке(ОтборСервер,
                                                                                          ОтборТочкаПубликации,
																						  ОтборСообщения);
																						  
	ВыборкаВиртуальныйХост = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВиртуальныйХост.Следующий() Цикл
		
		ВыборкаТочкаПубликации = ВыборкаВиртуальныйХост.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаТочкаПубликации.Следующий() Цикл
			
			Издатель = ПолучитьИздателяПоПараметрам(ВыборкаТочкаПубликации.ТочкаПубликации, 
			                                        ВыборкаТочкаПубликации.КлючСоединения, 
			                                        ВыборкаТочкаПубликации.ТипТочкиОбмена);			
			Если Издатель = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Выборка = ВыборкаТочкаПубликации.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Сообщение = Новый Структура("СообщениеСсылка, 
				                            |СвойстваСообщения, 
											|НомерСообщения, 
											|КлючМаршрутизации, 
											|Сообщение");				
				ЗаполнитьЗначенияСвойств(Сообщение, Выборка);				
				ВыполнитьОбработкуСообщения(Издатель, Сообщение);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	                                                                             	
КонецПроцедуры	

Функция ПолучитьИздателяПоПараметрам(ТочкаПубликации, КлючСоединения, ТипТочкиОбмена) Экспорт
	
	Попытка
		
		Если ТипТочкиОбмена = ПредопределенноеЗначение("Перечисление.гкс_ТипыТочекОбменаRMQ.Fanout") Тогда	
			Издатель = ОчередьСообщений.НовыйИздатель(ТочкаПубликации, КлючСоединения);		
		ИначеЕсли ТипТочкиОбмена = ПредопределенноеЗначение("Перечисление.гкс_ТипыТочекОбменаRMQ.Direct") Тогда		
			Издатель = ОчередьСообщений.НовыйАдресныйИздатель(ТочкаПубликации, КлючСоединения);		
		Иначе		
			Издатель = ОчередьСообщений.НовыйТематическийИздатель(ТочкаПубликации, КлючСоединения);		
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
		"ОтправкаСообщений.Ошибка",
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		"Ошибка инициализации адресного издателя: " + Символы.ПС + ОписаниеОшибки()
		);
		
		Издатель = Неопределено;
		
	КонецПопытки;

	Возврат Издатель;
	
КонецФункции

Процедура ВыполнитьОбработкуСообщения(Издатель, Сообщение)
	
	Перем СообщениеСсылка; 
		
	Сообщение.Свойство("СообщениеСсылка", СообщениеСсылка);
	
	НачатьТранзакцию();
	Попытка
		
		НеобходимоОтправитьВОчередь = Справочники.ИсходящиеСообщения.ОтметитьОтправкуСообщенияВОчередь(СообщениеСсылка);
		
		Если НеобходимоОтправитьВОчередь Тогда			
			// Подготовка и отправка через клиент - объект - обработкау "ИздательСобытий" 
			ОтправитьСообщениеВОчередь(Издатель, Сообщение);		
		КонецЕсли;
				
		ЗафиксироватьТранзакцию(); 	
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОтправкаСообщений.Ошибка",
		                         УровеньЖурналаРегистрации.Ошибка,
		                         ,
		                         ,
		                         ТекстОшибки);	
	КонецПопытки;
	
КонецПроцедуры

#Область Прочее

Процедура ОтправитьСообщениеВОчередь(Издатель, Сообщение)
	
	Перем СвойстваСообщения;
	Перем НомерСообщения;
	Перем КлючМаршрутизации;
	Перем СообщениеТекст;

	Сообщение.Свойство("СвойстваСообщения", СвойстваСообщения);
	Сообщение.Свойство("НомерСообщения", НомерСообщения);
	Сообщение.Свойство("КлючМаршрутизации", КлючМаршрутизации);
	Сообщение.Свойство("Сообщение", СообщениеТекст);

	СвойстваИздателя = ПолучитьСвойстваИздателяИзСвойствСообщения(СвойстваСообщения);
	ДополнитьСвойстваИздателя(СвойстваИздателя, НомерСообщения);
	УстановитьСвойстваИздателя(Издатель, СвойстваИздателя);
	Издатель.ОтправитьСообщение(СообщениеТекст, КлючМаршрутизации, 0, Истина);
	
КонецПроцедуры

Процедура ДополнитьСвойстваИздателя(СвойстваИздателя, НомерСообщения)
	
	Если ТипЗнч(СвойстваИздателя) = Тип("Структура") Тогда
		СвойстваИздателя.Вставить("НомерСообщения", НомерСообщения);		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСвойстваИздателяИзСвойствСообщения(СвойстваСообщения)
	
	Если ЗначениеЗаполнено(СвойстваСообщения) Тогда
		
		Попытка
			СвойстваИздателя = ЗначениеИзСтрокиВнутр(СвойстваСообщения);
		Исключение
			СвойстваИздателя = Неопределено;
		КонецПопытки;
		
		Возврат СвойстваИздателя;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УстановитьСвойстваИздателя(Издатель, СвойстваИздателя)
	
	Издатель.СброситьЗначенияСвойств();
	
	Если ЗначениеЗаполнено(СвойстваИздателя) Тогда	
		Издатель.УстановитьСвойстваСообщения(СвойстваИздателя);			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

