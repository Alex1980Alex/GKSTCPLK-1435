////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры для интеграции с 1С:Документооборот 
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает пароль, установленный сервисом авторизации для текущего пользователя
//
// Возвращаемое значение:
// Структура - структура с полями Пользователь, Пароль, ЕстьПравоНаВывод
//
Функция УстановитьАвторизациюТекущегоПользователя() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("Пользователь, Пароль, ЕстьПравоНаВывод", "", "", Ложь);
	Если НЕ ПолучитьФункциональнуюОпцию("гкс_ИспользоватьСервисАутентификации1СДокументооборот") Тогда
		Возврат Результат;
	КонецЕсли;

	Попытка	
		
		Прокси	= ПолучитьПроксиСервисаАвторизации();
		
		СвойстваПользователя	= ПользователиСлужебныйПовтИсп.СвойстваТекущегоПользователяИБ();
		Пользователь			= СвойстваПользователя.Имя;
		Результат.Пользователь	= Пользователь;
		Результат.ЕстьПравоНаВывод	= ПравоДоступа("Вывод", Метаданные, 
		ПользователиИнформационнойБазы.ТекущийПользователь());
		
		Запрос	= Прокси.ФабрикаXDTO.Создать(СоздатьОбъектСервисаАвторизации(Прокси, "ASPassRequest"));
		Запрос.userId = СокрЛП(Пользователь);
		
		Ответ	= Прокси.execute(Запрос);
		Если Ответ.Тип() = СоздатьОбъектСервисаАвторизации(Прокси, "ASPassResponse") Тогда
			Результат.Пароль = Ответ.password;
		ИначеЕсли Ответ.Тип() = СоздатьОбъектСервисаАвторизации(Прокси, "ASError") Тогда
			ВызватьИсключение Ответ.description;
		Иначе
			ВызватьИсключение НСтр("ru='Неизвестный ответ сервиса';");
		КонецЕсли;
		
	Исключение
		
		Информация = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Запрос сервиса авторизации",
		УровеньЖурналаРегистрации.Ошибка,
		, , Информация.Описание + ", " + Пользователь);		
		
	КонецПопытки;
	
	Возврат Результат;

КонецФункции // УстановитьАвторизациюТекщегоПользователя()

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид				= ВидыПодключаемыхКоманд.Добавить();
    Вид.Имя         = "ПрисоединенныеФайлы1СДокументоборот";
    Вид.ИмяПодменю  = "ПодменюПрисоединенныеФайлы1СДокументоборот";
    Вид.Заголовок   = НСтр("ru = 'Присоединенные файлы 1С:Документооборот'");
	Вид.Картинка	= БиблиотекаКартинок.Скрепка;
	Вид.Отображение = ОтображениеКнопки.Картинка;
	
	Вид.ВидГруппыФормы = ВидГруппыФормы.Подменю;
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов.
Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	
	Настройка = НастройкиПрограммногоИнтерфейса.Добавить();
	Настройка.Ключ = "ДобавитьКомандыПрисоединенныеФайлы1СДокументоборот";
	Настройка.ОписаниеТипов = Новый ОписаниеТипов("Булево");
	Настройка.ВидыПодключаемыхОбъектов = "Документ";
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюС1СДокументооборот") Тогда
		
		Команда = Команды.Добавить();
		Команда.Вид = "ПрисоединенныеФайлы1СДокументоборот";
		Команда.Идентификатор = "ПрисоединенныеФайлы1СДокументоборот";
		Команда.Представление = НСтр("ru='Присоединенные файлы 1С:Документооборот'");
		Команда.Важность = "Обычное";
		Команда.Порядок = 1;
		Команда.ОтображениеКнопки	= ОтображениеКнопки.Картинка;
		Команда.Картинка 			= БиблиотекаКартинок.Скрепка;
		Команда.ТипПараметра 		= Метаданные.ОпределяемыеТипы.гкс_ИнтеграцияС1СДокументоборотСсылкиПрисоединенныеФайлы.Тип;
		
		Команда.ИзменяетВыбранныеОбъекты = Ложь;
		Команда.МножественныйВыбор = Ложь;
		Команда.РежимЗаписи = "Записывать";
		Команда.Обработчик = "гкс_Интеграция1СДокументооборотКлиент.Подключаемый_ПрисоединенныеФайлы1СДокументоборот";
		
	КонецЕсли;
	
КонецПроцедуры
 
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Это служебное доп свойство объекта.
// 
// Параметры:
//  ИмяСвойства - Строка - Имя свойства объекта XDTO
// 
// Возвращаемое значение:
//  Булево - Это служебное доп свойство объекта
Функция ЭтоСлужебноеДопСвойствоОбъекта(ИмяСвойства) Экспорт
	Возврат СтрНайти(ИмяСвойства, "гкс_Задача") <> 0;	
КонецФункции

// Процедура удаляет полученные при обмене служебные доп.свойства, которые не должны быть записаны в базу на стороне ДО
// Служебные доп.свойства добавляются на стороне ДО в объект XDTO при выгрузке задач для базы-клиента
// Наименования служебных свойств начинаются с префикса "гкс_Задача"
// С помощью этих свойств выгружаются реквизиты предмета задачи: Организация, Контрагент, Валюта, Сумма и СуммаНДС   
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - XDTO объект с сохраняемыми данными
Процедура УдалитьСлужебныеДопСвойстваОбъекта(ОбъектXDTO) Экспорт

	Если ОбъектXDTO.Свойства().Получить("additionalProperties") <> Неопределено
		И ОбъектXDTO.Установлено("additionalProperties") Тогда
		
		СписокДопСвойствXDTO = ОбъектXDTO.additionalProperties;
		Индекс = СписокДопСвойствXDTO.Количество() - 1; 
		Пока Индекс >= 0 Цикл 
			Если ЭтоСлужебноеДопСвойствоОбъекта(СписокДопСвойствXDTO[Индекс].name) Тогда
				СписокДопСвойствXDTO.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПроксиСервисаАвторизации()
	
	МестоположениеWSDL	= Константы.АдресВебСервиса1СДокументооборот.Получить();
	Если ЗначениеЗаполнено(МестоположениеWSDL) И 
		Прав(МестоположениеWSDL, 1) <> "/" И Прав(МестоположениеWSDL, 1) <> "\" Тогда
		МестоположениеWSDL = МестоположениеWSDL + "/";
	КонецЕсли;
	
	// При необходимости создадим защищенное соединение. Используем сертификаты из хранилища
	// Windows, если это имеет смысл для текущей платформы.
	ЭтоСоединениеSSL = СтрНачинаетсяС(МестоположениеWSDL, "https");
	Если ЭтоСоединениеSSL Тогда
		Если ИнтеграцияС1СДокументооборот.СерверРаботаетПодWindows() Тогда
			ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(
				Новый СертификатКлиентаWindows(),
				Новый СертификатыУдостоверяющихЦентровWindows());
		Иначе
			ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
		КонецЕсли;
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	НастройкиПодключения	= 
	гкс_Интеграция1СДокументооборотПовтИсп.ПолучитьНастройкиПодключенияСервисаАвторизации();
	
	МестоположениеWSDL	= МестоположениеWSDL + НастройкиПодключения.ПутьКWSDL;
	
	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ПараметрыПодключения.АдресWSDL 				= МестоположениеWSDL;
	ПараметрыПодключения.URIПространстваИмен 	= НастройкиПодключения.URIПространстваИмен;
	ПараметрыПодключения.ИмяСервиса 			= НастройкиПодключения.ИмяСервиса;
	ПараметрыПодключения.Таймаут 				= ИнтеграцияС1СДокументооборот.ТаймаутСервиса();
	Если НастройкиПодключения.ИспользоватьАутентификациюОС Тогда
		ПараметрыПодключения.ИспользоватьАутентификациюОС 	= Истина;
	Иначе
		ПараметрыПодключения.ИспользоватьАутентификациюОС 	= Ложь;
		ПараметрыПодключения.Пользователь 	= НастройкиПодключения.Пользователь;
		ПараметрыПодключения.Пароль		 	= НастройкиПодключения.Пароль;
	КонецЕсли;
	ПараметрыПодключения.ЗащищенноеСоединение			= ЗащищенноеСоединение;
	ПараметрыПодключения.ДелатьКонтрольныйВызов 		= Истина;
	
	WSПрокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
	
	Возврат WSПрокси;
	
КонецФункции

Функция СоздатьОбъектСервисаАвторизации(Прокси, ИмяОбъекта)
	
	Возврат Прокси.ФабрикаXDTO.Тип("http://sodru.com/authService", ИмяОбъекта);
	
КонецФункции

#КонецОбласти

