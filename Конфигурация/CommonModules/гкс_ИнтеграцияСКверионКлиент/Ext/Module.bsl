#Область ПрограммныйИнтерфейс

#Область ВзаимодействиеСоСчитывателемRFIDМеток

// Выполняет запрос к сервису (драйверу, прослойке, для общения между устройством и 1С)данных EPC и TID
// TID читается только при условии, что указан корректный текущий пароль
//
// Параметры:
//   ПараметрыСчитывателя - Структура:
//     * АдресСлужбы - Строка - IP адрес или DNS имя компьюетра с работающей службой
//     * НомерПортаСлужбы - Число - порт, на котором крутиться служба
//
// Возвращаемое значение: 
//  Структура - содержит ключи (КодОтвета, Заголовки, ТелоОтвета) и их значения 
//
// Пример:
//
// GET
// 	http://<service-ip>:<port>/api/v1/read?port=<PORT>&password=<password_value>
// 		service-ip - IP-адрес службы считывателя;
// 		port - последовательный порт к которому подключен считыватель;
//		password - текущий пароль;
// ОТВЕТ:
// 		{
//		error: <boolean>,
//		message: <string>,
//		card:{
//				epc: <string>,
//				tid: <string>,
//				user: <string>,
//			}
//		}
//
Функция ПрочитатьДанныеМетки(Знач ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ПараметрыЗапроса = Неопределено Тогда		
		ПараметрыЗапроса = Новый Структура;		
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("МетодAPI", "read");
	
	Возврат ВыполнитьЗапросКСервисуВзаимодействияСRFID(ПараметрыЗапроса);
	
КонецФункции

// Выполняет запрос к сервису (драйверу, прослойке, для общения между устройством и 1С)данных EPC и TID
// TID читается только при условии, что указан корректный текущий пароль
//
// Параметры:
//   ПараметрыСчитывателя - Структура:
//     * АдресСлужбы - Строка - IP адрес или DNS имя компьюетра с работающей службой
//     * НомерПортаСлужбы - Число - порт, на котором крутиться служба
//
// Возвращаемое значение: 
//  Структура - содержит ключи (КодОтвета, Заголовки, ТелоОтвета) и их значения 
//
// Пример:
//
// GET
// 	http://<service-ip>:<port>/api/v1/read?port=<PORT>&password=<password_value>
// 		service-ip - IP-адрес службы считывателя;
// 		port - последовательный порт к которому подключен считыватель;
//		password - текущий пароль;
// ОТВЕТ:
// 		{
//		error: <boolean>,
//		message: <string>,
//		card:{
//				epc: <string>,
//				tid: <string>,
//				user: <string>,
//			}
//		}
//
Функция СменитьПароль(Знач ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ПараметрыЗапроса = Неопределено Тогда		
		ПараметрыЗапроса = Новый Структура;		
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("МетодAPI", "password");
	
	Возврат ВыполнитьЗапросКСервисуВзаимодействияСRFID(ПараметрыЗапроса);
	
КонецФункции

// Выполняет запрос к сервису (драйверу, прослойке, для общения между устройством и 1С)данных EPC и TID
// TID читается только при условии, что указан корректный текущий пароль
//
// Параметры:
//   ПараметрыСчитывателя - Структура:
//     * АдресСлужбы - Строка - IP адрес или DNS имя компьюетра с работающей службой
//     * НомерПортаСлужбы - Число - порт, на котором крутиться служба
//
// Возвращаемое значение: 
//  Структура - содержит ключи (КодОтвета, Заголовки, ТелоОтвета) и их значения 
//
// Пример:
//
// GET
// 	http://<service-ip>:<port>/api/v1/read?port=<PORT>&password=<password_value>
// 		service-ip - IP-адрес службы считывателя;
// 		port - последовательный порт к которому подключен считыватель;
//		password - текущий пароль;
// ОТВЕТ:
// 		{
//		error: <boolean>,
//		message: <string>,
//		card:{
//				epc: <string>,
//				tid: <string>,
//				user: <string>,
//			}
//		}
//
Функция ИнициализироватьМетку(Знач ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ПараметрыЗапроса = Неопределено Тогда		
		ПараметрыЗапроса = Новый Структура;		
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("МетодAPI", "init");
	
	Возврат ВыполнитьЗапросКСервисуВзаимодействияСRFID(ПараметрыЗапроса);
	
КонецФункции

// Выполняет запрос к сервису (драйверу, прослойке, для общения между устройством и 1С)данных EPC и TID
// TID читается только при условии, что указан корректный текущий пароль
//
// Параметры:
//   ПараметрыСчитывателя - Структура:
//     * АдресСлужбы - Строка - IP адрес или DNS имя компьюетра с работающей службой
//     * НомерПортаСлужбы - Число - порт, на котором крутиться служба
//
// Возвращаемое значение: 
//  Структура - содержит ключи (КодОтвета, Заголовки, ТелоОтвета) и их значения 
//
// Пример:
//
// GET
// 	http://<service-ip>:<port>/api/v1/read?port=<PORT>&password=<password_value>
// 		service-ip - IP-адрес службы считывателя;
// 		port - последовательный порт к которому подключен считыватель;
//		password - текущий пароль;
// ОТВЕТ:
// 		{
//		error: <boolean>,
//		message: <string>,
//		card:{
//				epc: <string>,
//				tid: <string>,
//				user: <string>,
//			}
//		}
//
Функция ТестСоединения(Знач ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ПараметрыЗапроса = Неопределено Тогда		
		ПараметрыЗапроса = Новый Структура;		
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("МетодAPI", "test");
	
	Возврат ВыполнитьЗапросКСервисуВзаимодействияСRFID(ПараметрыЗапроса);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьЗапросКСервисуВзаимодействияСRFID(ПараметрыЗапроса)
	
	Перем ИспользоватьЗащищенноеСоединение;
	Перем МетодAPI;
	Перем АдресСлужбы;
	Перем НомерПортаСлужбы;
	Перем СсылкаНаСчитыватель;
	Перем ПользовательСервиса;
	Перем ПарольСервиса;
	Перем ПараметрыПодключенияКСчитывателю;
	Перем Таймаут;

	Результат = Новый Структура("КодОтвета, Заголовки, ТелоОтвета");
		
	ПараметрыЗапроса.Свойство("МетодAPI", МетодAPI);
		
	ИсключениеНеУказанТипЗапроса(МетодAPI);
	
	ПараметрыЗапроса.Свойство("ПараметрыПодключенияКСчитывателю", ПараметрыПодключенияКСчитывателю);
	Если НЕ ЗначениеЗаполнено(ПараметрыПодключенияКСчитывателю) Тогда
		ПараметрыПодключенияКСчитывателю = гкс_ИнтеграцияСКверионВызовСервера.ПараметрыПодключенияКСчитывателю();
	КонецЕсли;
	
	ИсключениеНеУказаныПараметрыПодключенияКСчитывателю(МетодAPI);
	
	ПараметрыПодключенияКСчитывателю.Свойство("АдресСлужбы", АдресСлужбы);
	ПараметрыПодключенияКСчитывателю.Свойство("НомерПортаСлужбы", НомерПортаСлужбы);
	ПараметрыПодключенияКСчитывателю.Свойство("ИспользоватьЗащищенноеСоединение", ИспользоватьЗащищенноеСоединение);
	ПараметрыПодключенияКСчитывателю.Свойство("ПользовательСервиса", ПользовательСервиса);
	ПараметрыПодключенияКСчитывателю.Свойство("ПарольСервиса", ПарольСервиса);
	ПараметрыПодключенияКСчитывателю.Свойство("Таймаут", Таймаут);
	
	Если ИспользоватьЗащищенноеСоединение = Неопределено Тогда
		ИспользоватьЗащищенноеСоединение = Истина;
	КонецЕсли;
	
	Если Таймаут = Неопределено Тогда
		Таймаут = 10;
	КонецЕсли;
	
	ДополнитьПараметрыПодключенияКСчитывателю(ПараметрыПодключенияКСчитывателю, ПараметрыЗапроса);
	
	Прокси = Неопределено;
	
	ЗащищенноеСоединение = ?(ИспользоватьЗащищенноеСоединение, 
	                         Новый ЗащищенноеСоединениеOpenSSL, 
							 Неопределено);
	
	Попытка
		
		HTTPСоединение = Новый HTTPСоединение(АдресСлужбы, 
					                          НомерПортаСлужбы, 
											  ПользовательСервиса, 
											  ПарольСервиса, 
										      Прокси, 
											  Таймаут, 
											  ЗащищенноеСоединение);
	Исключение						  
		ВызватьИсключение НСтр("ru='Не удалось соединиться со службой драйвера.'") 
		                  + Символы.ПС 
						  + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 
	КонецПопытки;

	
	АдресРесурса = СформироватьАдресРесурсаПоПараметрамИМетодуAPI(ПараметрыПодключенияКСчитывателю, МетодAPI);
	Заголовки = Новый Соответствие;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	
	Попытка
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(ТипЗапросаПоМетодуAPI(МетодAPI), HTTPЗапрос);
	Исключение
		ВызватьИсключение НСтр("ru='Ошибка при отправке запроса: '")
		                       + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

	Результат.КодОтвета = HTTPОтвет.КодСостояния;
	Результат.Заголовки = HTTPОтвет.Заголовки;
	Результат.ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	#Если НЕ ВебКлиент Тогда
	Результат.Вставить("ТелоОтветаВСтруктуре", ТелоОтветаВСтруктуре(Результат.ТелоОтвета));
	#КонецЕсли
		
	Возврат Результат;
	
КонецФункции

Процедура ИсключениеНеУказанТипЗапроса(МетодAPI)
	
	Если МетодAPI = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не указан тип запрова. Запрос не может быть выполнен.'"); 
	КонецЕсли;

КонецПроцедуры

Процедура ИсключениеНеУказаныПараметрыПодключенияКСчитывателю(ПараметрыПодключенияКСчитывателя)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПодключенияКСчитывателя) Тогда
		ВызватьИсключение НСтр("ru='Не заданы параметры подключения к сервису. Запрос не может быть выполнен.'"); 
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьПараметрыПодключенияКСчитывателю(ПараметрыПодключенияКСчитывателю, ПараметрыЗапроса)
		
	Если ПараметрыЗапроса.МетодAPI = "password" 
		И ПараметрыЗапроса.Свойство("ТекущийПароль")
		И ПараметрыЗапроса.Свойство("НовыйПароль") Тогда
		
		ПараметрыПодключенияКСчитывателю.Вставить("ТекущийПароль");
		ПараметрыПодключенияКСчитывателю.Вставить("НовыйПароль");
		
		ЗаполнитьЗначенияСвойств(ПараметрыПодключенияКСчитывателю, ПараметрыЗапроса, "ТекущийПароль,НовыйПароль");		
		
	КонецЕсли;	
	
КонецПроцедуры

Функция СформироватьАдресРесурсаПоПараметрамИМетодуAPI(ПараметрыПодключенияКСчитывателя, Знач МетодAPI)
	
	АдресРесурса = "";
	МетодAPI = НРег(МетодAPI);
	
	Если МетодAPI = "read" Тогда		
		
		АдресРесурса = ПараметрыПодключенияКСчитывателя.ApiUrl 
		               + "/read?port="
		               + ПараметрыПодключенияКСчитывателя.ПортСчитывателя
					   + "&password="
					   + ПараметрыПодключенияКСчитывателя.ПарольДоступаКМетке;
					   
	ИначеЕсли МетодAPI = "init" Тогда
		
		АдресРесурса = ПараметрыПодключенияКСчитывателя.ApiUrl 
		               + "/init?port="
		               + ПараметрыПодключенияКСчитывателя.ПортСчитывателя
					   + "&current_password=00000000&new_password="
					   + ПараметрыПодключенияКСчитывателя.ПарольДоступаКМетке;
					   
	ИначеЕсли МетодAPI = "password" Тогда
		
		АдресРесурса = ПараметрыПодключенияКСчитывателя.ApiUrl 
		               + "/password?port="
		               + ПараметрыПодключенияКСчитывателя.ПортСчитывателя
					   + "&current_password="
					   + ПараметрыПодключенияКСчитывателя.ТекущийПароль 
					   + "&new_password="
					   + ПараметрыПодключенияКСчитывателя.НовыйПароль;			   
					   					   
	ИначеЕсли МетодAPI = "test" Тогда
					   
		АдресРесурса = ПараметрыПодключенияКСчитывателя.ApiUrl + "/test";			   
		
	КонецЕсли;
		
	Возврат АдресРесурса;
	
КонецФункции

Функция ТелоОтветаВСтруктуре(СтрокаJSON)
	
	Если НЕ ЗначениеЗаполнено(СтрокаJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Читатор = Новый ЧтениеJSON;
	Читатор.УстановитьСтроку(СтрокаJSON);
	Данные = ПрочитатьJSON(Читатор, Ложь);
	
	Возврат Данные;
	
КонецФункции

Функция ТипЗапросаПоМетодуAPI(МетодAPI)
	
	Если НРег(МетодAPI) = "read" ИЛИ НРег(МетодAPI) = "test" Тогда
		Возврат "GET";
	КонецЕсли;
	
	Возврат "POST";
	
КонецФункции

#КонецОбласти