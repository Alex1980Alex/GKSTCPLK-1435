
#Область ПрограммныйИнтерфейс

// Получить ответ по запросу кода пробы.
// 
// Параметры:
//  КодПробы - Строка - 
// 
// Возвращаемое значение:
//  Строка - Получить ответ по запросу кода пробы
Функция ПолучитьОтветПоЗапросуКодаПробы(КодПробы) Экспорт
	
	СтруктураОтвета	= ПолучитьСтруктуруОтветаПоКодуПробы();	
	
	Попытка
		ОбработатьЗапросПоКодуПробы(КодПробы, СтруктураОтвета);
	Исключение
		
		КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибкуВЖурнал("АнализПоКодуПробы", ПодробноеПредставлениеОшибки);
	
		ВызватьИсключение КраткоеПредставлениеОшибки;
	
	КонецПопытки;
		
	ПисательВJSON = ПисательВJSON();
	ЗаписатьJSON(ПисательВJSON, СтруктураОтвета, НастройкиЗаписиВJSON()); 
	
	Возврат ПисательВJSON.Закрыть();
	
КонецФункции

// Обработка запроса сервиса gks_LIMSIntegrationService.api_Samples_ExportByCode
//
// Параметры:
//  КодПробы - Строка - код пробы лабораторного анализа
//  СтруктураДанныхОтвета - Структура - см. гкс_ИнтеграцияЛИМССервер.ПолучитьСтруктуруОтветаПоКодуПробы() 
//
Процедура ОбработатьЗапросПоКодуПробы(КодПробы, СтруктураДанныхОтвета) Экспорт
	
	Если Не ЗначениеЗаполнено(КодПробы) Тогда
		ВызватьИсключение НСтр("ru='Код пробы не заполнен';");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоКодуПробы();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТипыПроб = Перечисления.гкс_ТипыПроб;
	ТипыРегистрации = Перечисления.гкс_ТипРегистрации;
	СтатусыЛабАнализа = Перечисления.гкс_СтатусыЛабораторногоАнализа;
	
	Запрос.УстановитьПараметр("КодПробы", КодПробы);
	Запрос.УстановитьПараметр("ТипыПробЕдиничная", ТипыПроб.Единичная);
	Запрос.УстановитьПараметр("ТипыПробКомпозитная", ТипыПроб.Композитная);
	Запрос.УстановитьПараметр("ТипРегистрацииПриемка", ТипыРегистрации.Приемка);
	Запрос.УстановитьПараметр("ТипРегистрацииОтгрузка", ТипыРегистрации.Отгрузка);
	Запрос.УстановитьПараметр("КонтрагентыПустая", Справочники.Контрагенты.ПустаяСсылка());	
	Запрос.УстановитьПараметр("ТипыВзвешиванияВъезд", Перечисления.гкс_ТипыВзвешивания.Въезд);
	Запрос.УстановитьПараметр("ОборудованиеПЛКПустая", Справочники.гкс_ОборудованиеПЛК.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтатусыЛабАнализаОтборПробы", СтатусыЛабАнализа.ОтборПробы);
	Запрос.УстановитьПараметр("СтатусыЛабораторногоАнализаПустая", 	СтатусыЛабАнализа.ПустаяСсылка());
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	УстановитьПривилегированныйРежим(Ложь);
	
	АнализПроведен	= Ложь;
	ТипПробы = ТипыПроб.Композитная;
	
	ОбработатьДанныеДокументАнализа(КодПробы, СтруктураДанныхОтвета, РезультатЗапроса, АнализПроведен);
	ОбработатьДанныеДокументФормирования(КодПробы, СтруктураДанныхОтвета, РезультатЗапроса, АнализПроведен, ТипПробы);
	ОбработатьДанныеПоказателей(КодПробы, СтруктураДанныхОтвета, РезультатЗапроса);
	ОбработатьДанныеРегистрацииПЛК(КодПробы, СтруктураДанныхОтвета, РезультатЗапроса);
	ОбработатьДанныеСостоянияРегистрации(КодПробы, СтруктураДанныхОтвета, РезультатЗапроса, ТипПробы);	
	ОбработатьДанныеНормативнаяДокументация(КодПробы, СтруктураДанныхОтвета, РезультатЗапроса);
	
КонецПроцедуры

// Обработка запроса сервиса gks_LIMSIntegrationService.api_Samples
//
// Параметры:
// СтруктураДанныхЗапроса - Структура - см. ПолучитьСтруктуруЗапросаПоИдентификатору()
//
Процедура ОбработатьЗапросПоИдентификаторуАнализа(СтруктураДанныхЗапроса) Экспорт
	
	ДокументАнализа	= Документы.гкс_ЛабораторныйАнализ.
		ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанныхЗапроса.id));
		
	ВызватьИсключениеЕслиДокументАнализаНеСуществует(ДокументАнализа);

	ДокументАнализаОбъект = ДокументАнализа.ПолучитьОбъект();

	ЗаполнитьШапкуДокументаПоДаннымЛИМС(ДокументАнализаОбъект, СтруктураДанныхЗапроса);
	ДокументАнализаОбъект.УстановитьСвойствоПроведенияСостоянияРегистрации();
	
	ЗаполнитьПоказателиПоДаннымЛИМС(ДокументАнализаОбъект, СтруктураДанныхЗапроса);
	
	ДокументАнализаОбъект.ЗаписатьДокументПослеОбработки();
	
КонецПроцедуры

// Возвращает ответ для сервиса gks_LIMSIntegrationService.api_Samples
//
// Параметры:
// Идентификатор - Строка - GUID документа ЦБТ_ЛаборатныйАнализ
//
// ТелоЗапроса - Строка - тело http запроса
//
// Возвращаемое значение:
//  Строка - ответ в виде строки
//
Функция ПолучитьОтветПоИдентификаторуАнализа(Идентификатор, ТелоЗапроса) Экспорт
	
	ИменаСоЗначениемДата	= "date,testResultDate,analisysStartDate,analisysEndDate";
	
	ЧтениеJSON	= Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	
	ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON, Истина, ИменаСоЗначениемДата, ФорматДатыJSON.ISO);
	СтруктураДанныхЗапроса = ПолучитьСтруктуруЗапросаПоИдентификатору();
	
	Для Каждого ТекЗначение Из СтруктураДанныхЗапроса Цикл
		
		ЗначениеЗапроса	= ДанныеЗапроса[ТекЗначение.Ключ];
		Если ЗначениеЗапроса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхЗапроса.Вставить(ТекЗначение.Ключ, ЗначениеЗапроса);
		
	КонецЦикла;
	
	Результат = "ОК";
	
	Попытка
		ОбработатьЗапросПоИдентификаторуАнализа(СтруктураДанныхЗапроса);
	Исключение	
		КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибкуВЖурнал("АнализПоИдентификатору", ПодробноеПредставлениеОшибки);
	
		ВызватьИсключение КраткоеПредставлениеОшибки;
	
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ЧтениеПробыПоДаннымЛИМС

Процедура ОбработатьДанныеДокументАнализа(КодПробы, СтруктураДанныхОтвета, РезультатЗапроса, АнализПроведен)
	
	ДокументАнализа = РезультатЗапроса[0].Выбрать();	
	Если ДокументАнализа.Следующий() Тогда
		
		СтруктураДанныхОтвета.id = XMLСтрока(ДокументАнализа.Ссылка);
		СтруктураДанныхОтвета.code = КодПробы;
		СтруктураДанныхОтвета.date = ДокументАнализа.Дата;
		СтруктураДанныхОтвета.isDeleted	= ДокументАнализа.ПометкаУдаления;
		СтруктураДанныхОтвета.updatedOn	= ДокументАнализа.Дата;
		СтруктураДанныхОтвета.userName = Строка(ДокументАнализа.Ответственный);
		СтруктураДанныхОтвета.fio = СтруктураДанныхОтвета.userName;
		СтруктураДанныхОтвета.responseUserFullName = СтруктураДанныхОтвета.userName;
		
		АнализПроведен = ДокументАнализа.Проведен;
		
		СтруктураДанныхОтвета.goodId = XMLСтрока(ДокументАнализа.Номенклатура);
		СтруктураДанныхОтвета.goodName = ДокументАнализа.НоменклатураНаименование;
		СтруктураДанныхОтвета.goodName_en = ДокументАнализа.НоменклатураНаименование;
		
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru='Анализ с кодом пробы %1 не найден';"), КодПробы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанныеДокументФормирования(КодПробы, СтруктураДанныхОтвета, РезультатЗапроса, 
	АнализПроведен, ТипПробы)
	
	// данные формирования проб
	ДокументФормирования = РезультатЗапроса[1].Выбрать();
	Если ДокументФормирования.Следующий() Тогда
		
		ТипПробы = ДокументФормирования.ТипПробы;
		ВидПеревозки = ДокументФормирования.ВидПеревозки;
		
		СтруктураДанныхОтвета.operType = ДокументФормирования.ТипОперации;
		СтруктураДанныхОтвета.sampleTypeId = ПолучитьGUIDТипаПробы(ТипПробы);
				
		Статус = СтатусПоСостояниюДокумента(ДокументФормирования, АнализПроведен);
		
		СтруктураДанныхОтвета.status = Статус;
		
		ЭтоВнутреннийКонтрагент = ДокументФормирования.Внутригрупповой
			И (ДокументФормирования.Собственник = ДокументФормирования.Контрагент
			Или ДокументФормирования.Собственник = ДокументФормирования.ОрганизацияКонтрагента);
		
		Если ЭтоВнутреннийКонтрагент Тогда			
			СтруктураДанныхОтвета.firmID = XMLСтрока(ДокументФормирования.ОтправительПолучатель);
			СтруктураДанныхОтвета.firmName = ДокументФормирования.ОтправительПолучательНаименование;	
		Иначе
			СтруктураДанныхОтвета.firmID = XMLСтрока(ДокументФормирования.Контрагент);
			СтруктураДанныхОтвета.firmName = ДокументФормирования.КонтрагентНаименование;		
		КонецЕсли;			
		// станция погрузки
		Если ЗначениеЗаполнено(ДокументФормирования.СтанцияПогрузки) Тогда
			СтруктураДанныхОтвета.stationID = XMLСтрока(ДокументФормирования.СтанцияПогрузки);
			СтруктураДанныхОтвета.stationName = ДокументФормирования.СтанцияПогрузкиНаименование;
		КонецЕсли;
		СтруктураДанныхОтвета.counterpatyID = XMLСтрока(ДокументФормирования.Собственник);
		СтруктураДанныхОтвета.counterpatyName = ДокументФормирования.СобственникНаименование;
		
		Если ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт Тогда
			СтруктураДанныхОтвета.receiptDocType = 1;
		ИначеЕсли ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль Тогда
			СтруктураДанныхОтвета.receiptDocType = 2;
		ИначеЕсли ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.Судно Тогда
			СтруктураДанныхОтвета.receiptDocType = 3;
		Иначе
			СтруктураДанныхОтвета.receiptDocType = 0;
		КонецЕсли;
		
		Если ТипПробы = Перечисления.гкс_ТипыПроб.Композитная Тогда
			СтруктураДанныхОтвета.smpTypeCode = 9;
		Иначе
			СтруктураДанныхОтвета.smpTypeCode = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанныеПоказателей(КодПробы, СтруктураДанныхОтвета, РезультатЗапроса)
	
	// данные показателей качества
	ДанныеПоказателей	= РезультатЗапроса[7].Выбрать();
	Пока ДанныеПоказателей.Следующий() Цикл
		
		СтруктураСтрокиПоказателей	= ПолучитьСтруктуруСтрокиПоказателя();
		
		СтруктураСтрокиПоказателей.id = "";
		СтруктураСтрокиПоказателей.sampleId = СтруктураДанныхОтвета.id ;
		СтруктураСтрокиПоказателей.qualityIndicatorCode	= ДанныеПоказателей.КодЛИМС;
		СтруктураСтрокиПоказателей.qualityIndicatorId = XMLСтрока(ДанныеПоказателей.Показатель);
		СтруктураСтрокиПоказателей.value = ДанныеПоказателей.Значение;
		СтруктураСтрокиПоказателей.userName = СтруктураДанныхОтвета.userName;
		СтруктураСтрокиПоказателей.comment = ДанныеПоказателей.Примечание;
		СтруктураСтрокиПоказателей.updatedOn = СтруктураДанныхОтвета.date;
		
		СтруктураДанныхОтвета.testResults.Добавить(СтруктураСтрокиПоказателей);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьДанныеРегистрацииПЛК(КодПробы, СтруктураДанныхОтвета, РезультатЗапроса)
	
	// все регистрации на ПЛК
	ДанныеРегистрации	= РезультатЗапроса[8].Выбрать();
	МассивТранспортныхСредств = Новый Массив;
	Пока ДанныеРегистрации.Следующий() Цикл

		СтруктураДанныхОтвета.receiptIds.Добавить(XMLСтрока(ДанныеРегистрации.ДокументРегистрации));
		МассивТранспортныхСредств.Добавить(Строка(ДанныеРегистрации.ТранспортноеСредствоНаименование));
	КонецЦикла;

	СтруктураДанныхОтвета.receiptTransports = СтрСоединить(МассивТранспортныхСредств, ", ");
КонецПроцедуры

Процедура ОбработатьДанныеСостоянияРегистрации(КодПробы, СтруктураДанныхОтвета, РезультатЗапроса, ТипПробы)
	
	// все состояния регистрации
	СостоянияРегистрации = РезультатЗапроса[9].Выгрузить(); 
	
	КолонкаПоиска = "Состояние";
	ГотовКОтборуПроб = Перечисления.гкс_СостоянияРегистрации.ГотовКОтборуПроб;
	ЕстьСтатусГотовКОтборуПроб = Ложь;
	СтатусГотовКОтборуПроб = СостоянияРегистрации.Найти(ГотовКОтборуПроб, КолонкаПоиска); 
	Если СтатусГотовКОтборуПроб <> Неопределено Тогда  
		УстановитьДатыАнализа(СтруктураДанныхОтвета, СтатусГотовКОтборуПроб, ТипПробы);
		ЕстьСтатусГотовКОтборуПроб = Истина;
	КонецЕсли;
	
	ПробыВзяты = Перечисления.гкс_СостоянияРегистрации.ВзятыПробы; 
	СтатусПробыВзяты = СостоянияРегистрации.Найти(ПробыВзяты, КолонкаПоиска); 
	Если СтатусПробыВзяты <> Неопределено Тогда
		СтруктураДанныхОтвета.fio = СтатусПробыВзяты.Пользователь;                                                                       
		РазрешитьВходнойКонтрольДоВзвешивания = 
			гкс_ПриемкаТранспорта.РазрешитьВходнойКонтрольДоВзвешивания(
				СтатусПробыВзяты.ТипРегистрации, СтатусПробыВзяты.ВидПеревозки);
		Если РазрешитьВходнойКонтрольДоВзвешивания 
			И Не ЕстьСтатусГотовКОтборуПроб Тогда
			УстановитьДатыАнализа(СтруктураДанныхОтвета, СтатусПробыВзяты, ТипПробы);			
		КонецЕсли;			
	КонецЕсли;
	
	ПринятыПробы = Перечисления.гкс_СостоянияРегистрации.ПринятыПробы; 
	СтатусПринятыПробы = СостоянияРегистрации.Найти(ПринятыПробы, КолонкаПоиска); 
	Если СтатусПринятыПробы <> Неопределено Тогда
		СтруктураДанныхОтвета.finishDate = СтатусПринятыПробы.Период;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДатыАнализа(СтруктураДанныхОтвета, СтатусСостояния, ТипПробы)
	СтруктураДанныхОтвета.startDate = СтатусСостояния.Период;
	Если ТипПробы = Перечисления.гкс_ТипыПроб.Единичная Тогда
		СтруктураДанныхОтвета.date		= СтатусСостояния.Период;
	КонецЕсли;                                           
КонецПроцедуры		

Процедура ОбработатьДанныеНормативнаяДокументация(КодПробы, СтруктураДанныхОтвета, РезультатЗапроса)
	
	НормативнаяДокументация = РезультатЗапроса[10].Выбрать();
	Если НормативнаяДокументация.Следующий() Тогда
		СтруктураДанныхОтвета.smpNormDoc = НормативнаяДокументация.НормативнаяДокументацияНаОтборПроб;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьПробыПоДаннымЛИМС
 
Процедура ЗаполнитьПоказателиПоДаннымЛИМС(ДокументОбъект, СтруктураДанныхЗапроса)

	Для Каждого ТекПоказатель Из СтруктураДанныхЗапроса.testResults Цикл
		
		ЗначениеПоказателя = ТекПоказатель["value"];
		ПримечаниеПоказателя = ТекПоказатель["comment"];
		
		Если ЗначениеПоказателя = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Показатель = ПолучитьПоказательКачества1С(ТекПоказатель, ДокументОбъект.ТочкаМаршрута);
		Если Показатель.Пустая() Тогда
			Продолжить;
		КонецЕсли; 
		
		НайденнаяСтрока	= ДокументОбъект.КачественныеПоказатели.Найти(Показатель, "Показатель");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = ДокументОбъект.КачественныеПоказатели.Добавить();
			
			НайденнаяСтрока.Показатель = Показатель;
			НайденнаяСтрока.ЕдиницаИзмерения = ОбщегоНазначения
				.ЗначениеРеквизитаОбъекта(Показатель, "ЕдиницаИзмерения");
		КонецЕсли;
		
		НайденнаяСтрока.Значение = ЗначениеПоказателя;
		
		КомментарийСоотвествия = ДокументОбъект.КомментарийСоотвествия(НайденнаяСтрока);
		
		НайденнаяСтрока.гкс_Примечание = СокрЛП(СтрШаблон("%1 %2" , ПримечаниеПоказателя, КомментарийСоотвествия));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьШапкуДокументаПоДаннымЛИМС(ДокументОбъект, ДанныеЛИМС)
	 
	ДокументОбъект.гкс_ДатаПолученияАнализа	= ТекущаяДатаСеанса();
	
	ДокументОбъект.гкс_ДатаНачалаАнализа = ДанныеЛИМС.analisysStartDate;
	ДокументОбъект.гкс_ДатаОкончанияАнализа	= ДанныеЛИМС.analisysEndDate;
	
	Если СтрНайти(ДокументОбъект.Примечание, ДанныеЛИМС.userName) = 0 Тогда
		ДокументОбъект.Примечание = ДокументОбъект.Примечание + " " + ДанныеЛИМС.userName;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВызватьИсключениеЕслиДокументАнализаНеСуществует(ДокументАнализа)

	Если НЕ ОбщегоНазначения.СсылкаСуществует(ДокументАнализа) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Документ по идентификатору %1 не найден';"), XMLСтрока(ДокументАнализа));
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПоказательКачества1С(ОписаниеПоказателя, ТочкаМаршрута)
	
	МенеджерПоказателей = Справочники.гкс_ПоказателиАнализовНоменклатуры;
	Показатель = МенеджерПоказателей.ПустаяСсылка();
	
	ИдентификаторПоказателя	= ОписаниеПоказателя["qualityIndicatorId"];
	Если ЗначениеЗаполнено(ИдентификаторПоказателя) Тогда 		
		Показатель = МенеджерПоказателей.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторПоказателя));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Показатель) Тогда
		
		КодЛИМС = ОписаниеПоказателя["qualityIndicatorCode"]; 
		КодЛИМС = ?(ЗначениеЗаполнено(КодЛИМС), КодЛИМС, "");
		
		Показатель = РегистрыСведений.гкс_КодыПоказателейКачестваЛИМС.
			ПолучитьПоказательКачестваПоКодуЛИМС(КодЛИМС, ТочкаМаршрута);
	
	КонецЕсли;
	
	Возврат Показатель;
	
КонецФункции

#КонецОбласти

#Область Прочие

Процедура ЗаписатьОшибкуВЖурнал(ИмяСобытия, ТекстОшибки)

	ИмяСобытияДляЖурнала = "ИнтеграцияЛИМС." + ИмяСобытия;
	ЗаписьЖурналаРегистрации(ИмяСобытияДляЖурнала, 
	                         УровеньЖурналаРегистрации.Ошибка, 
	                         Метаданные.HTTPСервисы.gks_LIMSIntegrationService,
	                         Неопределено,
	                         ТекстОшибки);

КонецПроцедуры

Функция ПисательВJSON()
	
	ЗаписьJSON	= Новый ЗаписьJSON;	
	ПараметрыЗаписиJSON	= Новый ПараметрыЗаписиJSON();	
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	Возврат ЗаписьJSON;
	
КонецФункции

Функция НастройкиЗаписиВJSON()
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализации.СериализовыватьМассивыКакОбъекты = Ложь;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	Возврат НастройкиСериализации;
	
КонецФункции

Функция ПолучитьТекстЗапросаПоКодуПробы()
	
	// При определении кода ЛИМС для показателей качества учитывается аналитика по Весам
	// Если Аналитика по весам не указана - выбирается показатель с пустым значением весов
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛабораторныйАнализ.Ссылка КАК Ссылка,
	|	ЛабораторныйАнализ.НомерПробы КАК НомерПробы,
	|	ЛабораторныйАнализ.Дата КАК Дата,
	|	ЛабораторныйАнализ.Номер КАК Номер,
	|	ЛабораторныйАнализ.ПометкаУдаления КАК ПометкаУдаления,
	|	ЛабораторныйАнализ.Ответственный КАК Ответственный,
	|	ЛабораторныйАнализ.Номенклатура КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ЛабораторныйАнализ.Номенклатура) КАК НоменклатураНаименование,
	|	ЛабораторныйАнализ.Проведен КАК Проведен,
	|	ЛабораторныйАнализ.гкс_ДокументРегистрации КАК ДокументРегистрации,
	|	ВЫБОР
	|		КОГДА ЛабораторныйАнализ.Статус = &СтатусыЛабораторногоАнализаПустая
	|			ТОГДА &СтатусыЛабАнализаОтборПробы
	|		ИНАЧЕ ЛабораторныйАнализ.Статус
	|	КОНЕЦ КАК Статус
	|ПОМЕСТИТЬ ВТ_ДокументыЛабораторныйАнализ
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ КАК ЛабораторныйАнализ
	|ГДЕ
	|	ЛабораторныйАнализ.НомерПробы = &КодПробы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гкс_ФормированиеНомераПробы.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ДокументыЛабораторныйАнализ.Статус, &СтатусыЛабораторногоАнализаПустая) КАК СтатусЛабАнализа,
	|	гкс_ФормированиеНомераПробы.ТочкаМаршрута КАК ТочкаМаршрута,
	|	гкс_ФормированиеНомераПробы.ТипПробы КАК ТипПробы,
	|	гкс_ФормированиеНомераПробы.НомерПробы КАК НомерПробы,
	|	гкс_РегистрацияНаПЛК.ТипРегистрации КАК ТипРегистрации,
	|	ЕСТЬNULL(КонтрагентыНоменклатурыЛИМС.Контрагент, ЕСТЬNULL(гкс_РегистрацияНаПЛК.Собственник, &КонтрагентыПустая)) КАК
	|		Собственник,
	|	гкс_РегистрацияНаПЛК.ОтправительПолучатель КАК ОтправительПолучатель,
	|	ПРЕДСТАВЛЕНИЕ(гкс_РегистрацияНаПЛК.ОтправительПолучатель) КАК ОтправительПолучательНаименование,
	|	гкс_РегистрацияНаПЛК.Внутригрупповой КАК Внутригрупповой,
	|	ВЫБОР
	|		КОГДА НЕ ТочкиМаршрута.Ссылка ЕСТЬ NULL
	|			ТОГДА ТочкиМаршрута.КодСтанцииЖД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.гкс_КлассификаторСтанцийЖД.ПустаяСсылка)
	|	КОНЕЦ КАК СтанцияПогрузки,
	|	ВЫБОР
	|		КОГДА НЕ ТочкиМаршрута.Ссылка ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(КлассификаторСтанцийЖД.НаименованиеПолное, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СтанцияПогрузкиНаименование,
	|	ЕСТЬNULL(КонтрагентыОрганизаций.Ссылка, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ОрганизацияКонтрагента,
	|	гкс_РегистрацияНаПЛК.ТранспортноеСредство КАК ТранспортноеСредство,
	|	ВЫБОР
	|		КОГДА гкс_ФормированиеНомераПробы.ТипПробы = &ТипыПробЕдиничная
	|		И гкс_РегистрацияНаПЛК.ТипРегистрации = &ТипРегистрацииПриемка
	|			ТОГДА 0
	|		КОГДА гкс_ФормированиеНомераПробы.ТипПробы = &ТипыПробКомпозитная
	|		И гкс_РегистрацияНаПЛК.ТипРегистрации = &ТипРегистрацииПриемка
	|			ТОГДА 1
	|		КОГДА гкс_ФормированиеНомераПробы.ТипПробы = &ТипыПробЕдиничная
	|		И гкс_РегистрацияНаПЛК.ТипРегистрации = &ТипРегистрацииОтгрузка
	|			ТОГДА 2
	|		КОГДА гкс_ФормированиеНомераПробы.ТипПробы = &ТипыПробКомпозитная
	|		И гкс_РегистрацияНаПЛК.ТипРегистрации = &ТипРегистрацииОтгрузка
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТипОперации,
	|	гкс_РегистрацияНаПЛК.ВидПеревозки КАК ВидПеревозки,
	|	СостояниеТекущее.Состояние КАК ТекущееСостояние,
	|	гкс_ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации КАК ДокументРегистрации,
	|	ЕСТЬNULL(гкс_РегистрацияНаПЛК.Контрагент, &КонтрагентыПустая) КАК Контрагент,
	|	ПРЕДСТАВЛЕНИЕ(гкс_РегистрацияНаПЛК.Контрагент) КАК КонтрагентНаименование,
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(КонтрагентыНоменклатурыЛИМС.Контрагент, ЕСТЬNULL(гкс_РегистрацияНаПЛК.Собственник,
	|		&КонтрагентыПустая))) КАК СобственникНаименование,
	|	гкс_РегистрацияНаПЛК.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_ФормированиеПробы
	|ИЗ
	|	Справочник.гкс_НомерПробы КАК гкс_НомерПробы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ФормированиеНомераПробы КАК гкс_ФормированиеНомераПробы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ФормированиеНомераПробы.СписокРегистраций КАК
	|				гкс_ФормированиеНомераПробыСписокРегистраций
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК гкс_РегистрацияНаПЛК
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СостоянияРегистрации.СрезПоследних КАК СостояниеТекущее
	|					ПО гкс_РегистрацияНаПЛК.ТочкаМаршрута = СостояниеТекущее.ТочкаМаршрута
	|					И гкс_РегистрацияНаПЛК.ТипРегистрации = СостояниеТекущее.ТипРегистрации
	|					И гкс_РегистрацияНаПЛК.ВидПеревозки = СостояниеТекущее.ВидПеревозки
	|					И гкс_РегистрацияНаПЛК.Ссылка = СостояниеТекущее.ДокументРегистрации
	|					И гкс_РегистрацияНаПЛК.ТранспортноеСредство = СостояниеТекущее.ТранспортноеСредство
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СвязьРегистрацииИТранспортногоДокумента КАК
	|						СвязьРегистрацииИТранспортногоДокумента
	|						ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ТранспортныйДокумент КАК ГКСТранспортныйДокумент
	|							ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_ТочкиМаршрута КАК ТочкиМаршрута
	|								ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_КлассификаторСтанцийЖД КАК КлассификаторСтанцийЖД
	|								ПО ТочкиМаршрута.КодСтанцииЖД = КлассификаторСтанцийЖД.Ссылка
	|							ПО ГКСТранспортныйДокумент.ПунктПогрузки = ТочкиМаршрута.Ссылка
	|						ПО СвязьРегистрацииИТранспортногоДокумента.ТранспортныйДокумент = ГКСТранспортныйДокумент.Ссылка
	|					ПО гкс_РегистрацияНаПЛК.Ссылка = СвязьРегистрацииИТранспортногоДокумента.ДокументРегистрации
	|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК КонтрагентыОрганизаций
	|					ПО гкс_РегистрацияНаПЛК.Контрагент = КонтрагентыОрганизаций.КонтрагентОрганизации
	|					И (НЕ гкс_РегистрацияНаПЛК.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_КонтрагентыНоменклатурыЛИМС КАК КонтрагентыНоменклатурыЛИМС
	|					ПО гкс_РегистрацияНаПЛК.Номенклатура = КонтрагентыНоменклатурыЛИМС.Номенклатура
	|				ПО гкс_ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации = гкс_РегистрацияНаПЛК.Ссылка
	|			ПО гкс_ФормированиеНомераПробы.Ссылка = гкс_ФормированиеНомераПробыСписокРегистраций.Ссылка
	|			И (гкс_ФормированиеНомераПробыСписокРегистраций.НомерСтроки = 1)
	|		ПО гкс_НомерПробы.Ссылка = гкс_ФормированиеНомераПробы.НомерПробы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыЛабораторныйАнализ КАК ДокументыЛабораторныйАнализ
	|		ПО (ДокументыЛабораторныйАнализ.НомерПробы = гкс_НомерПробы.Код)
	|ГДЕ
	|	гкс_НомерПробы.Код = &КодПробы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыЛабораторныйАнализ.Ссылка КАК ЛабораторныйАнализ,
	|	ВТ_ДокументыЛабораторныйАнализ.ДокументРегистрации КАК ДокументРегистрации,
	|	МАКСИМУМ(гкс_Взвешивание.Дата) КАК ДатаВзвешивания
	|ПОМЕСТИТЬ ВТ_ПоследниеДатыВзешиванияПоРегистрациям
	|ИЗ
	|	ВТ_ДокументыЛабораторныйАнализ КАК ВТ_ДокументыЛабораторныйАнализ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК гкс_РегистрацияНаПЛК
	|		ПО ВТ_ДокументыЛабораторныйАнализ.ДокументРегистрации = гкс_РегистрацияНаПЛК.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_Взвешивание КАК гкс_Взвешивание
	|		ПО ВТ_ДокументыЛабораторныйАнализ.ДокументРегистрации = гкс_Взвешивание.ДокументРегистрации
	|		И (гкс_Взвешивание.ТипВзвешивания = &ТипыВзвешиванияВъезд)
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыЛабораторныйАнализ.Ссылка,
	|	ВТ_ДокументыЛабораторныйАнализ.ДокументРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеДатыВзешиванияПоРегистрациям.ЛабораторныйАнализ КАК ЛабораторныйАнализ,
	|	МАКСИМУМ(гкс_Взвешивание.Весы) КАК Весы
	|ПОМЕСТИТЬ ВТ_СписокВесовДляЛабАнализа
	|ИЗ
	|	ВТ_ПоследниеДатыВзешиванияПоРегистрациям КАК ВТ_ПоследниеДатыВзешиванияПоРегистрациям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_Взвешивание КАК гкс_Взвешивание
	|		ПО ВТ_ПоследниеДатыВзешиванияПоРегистрациям.ДокументРегистрации = гкс_Взвешивание.ДокументРегистрации
	|		И (гкс_Взвешивание.ТипВзвешивания = &ТипыВзвешиванияВъезд)
	|		И (гкс_Взвешивание.Дата = ВТ_ПоследниеДатыВзешиванияПоРегистрациям.ДатаВзвешивания)
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПоследниеДатыВзешиванияПоРегистрациям.ЛабораторныйАнализ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(гкс_ЛабораторныйАнализКачественныеПоказатели.Показатель,
	|		ЗНАЧЕНИЕ(Справочник.гкс_ПоказателиАнализовНоменклатуры.ПустаяСсылка)) КАК Показатель,
	|	ВТ_ФормированиеПробы.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ВТ_ФормированиеПробы.ВидПеревозки КАК ВидПеревозки,
	|	ВТ_ФормированиеПробы.ТипРегистрации КАК ТипРегистрации,
	|	ВТ_ДокументыЛабораторныйАнализ.Номенклатура КАК Номенклатура,
	|	ВТ_ФормированиеПробы.ТипПробы КАК ТипПробы,
	|	ЕСТЬNULL(гкс_ЛабораторныйАнализКачественныеПоказатели.Значение, НЕОПРЕДЕЛЕНО) КАК Значение,
	|	ЕСТЬNULL(гкс_ЛабораторныйАнализКачественныеПоказатели.гкс_Примечание, """") КАК гкс_Примечание,
	|	ЕСТЬNULL(ВТ_СписокВесовДляЛабАнализа.Весы, &ОборудованиеПЛКПустая) КАК Весы
	|ПОМЕСТИТЬ ВТ_ПоказателиКачества
	|ИЗ
	|	ВТ_ДокументыЛабораторныйАнализ КАК ВТ_ДокументыЛабораторныйАнализ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ЛабораторныйАнализ.КачественныеПоказатели КАК
	|			гкс_ЛабораторныйАнализКачественныеПоказатели
	|		ПО ВТ_ДокументыЛабораторныйАнализ.Ссылка = гкс_ЛабораторныйАнализКачественныеПоказатели.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокВесовДляЛабАнализа КАК ВТ_СписокВесовДляЛабАнализа
	|		ПО ВТ_ДокументыЛабораторныйАнализ.Ссылка = ВТ_СписокВесовДляЛабАнализа.ЛабораторныйАнализ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФормированиеПробы КАК ВТ_ФормированиеПробы
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоказателиКачества.Показатель КАК Показатель,
	|	ВТ_ПоказателиКачества.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ВТ_ПоказателиКачества.ВидПеревозки КАК ВидПеревозки,
	|	ВТ_ПоказателиКачества.ТипРегистрации КАК ТипРегистрации,
	|	ВТ_ПоказателиКачества.Номенклатура КАК Номенклатура,
	|	ВТ_ПоказателиКачества.ТипПробы КАК ТипПробы,
	|	ВТ_ПоказателиКачества.Значение КАК Значение,
	|	ВТ_ПоказателиКачества.гкс_Примечание КАК Примечание,
	|	ВТ_ПоказателиКачества.Весы КАК Весы,
	|	ЕСТЬNULL(гкс_КодыПоказателейКачестваЛИМС.КодЛИМС, """") КАК КодЛИМС
	|ПОМЕСТИТЬ ВТ_ПоказателиКачестваСВесамиИБез
	|ИЗ
	|	ВТ_ПоказателиКачества КАК ВТ_ПоказателиКачества
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_КодыПоказателейКачестваЛИМС КАК гкс_КодыПоказателейКачестваЛИМС
	|		ПО ВТ_ПоказателиКачества.Показатель = гкс_КодыПоказателейКачестваЛИМС.Показатель
	|		И ВТ_ПоказателиКачества.ТочкаМаршрута = гкс_КодыПоказателейКачестваЛИМС.ТочкаМаршрута
	|		И ВТ_ПоказателиКачества.ВидПеревозки = гкс_КодыПоказателейКачестваЛИМС.ВидПеревозки
	|		И ВТ_ПоказателиКачества.ТипРегистрации = гкс_КодыПоказателейКачестваЛИМС.ТипРегистрации
	|		И ВТ_ПоказателиКачества.Номенклатура = гкс_КодыПоказателейКачестваЛИМС.Номенклатура
	|		И ВТ_ПоказателиКачества.ТипПробы = гкс_КодыПоказателейКачестваЛИМС.ТипПробы
	|		И ВТ_ПоказателиКачества.Весы = гкс_КодыПоказателейКачестваЛИМС.Весы
	|ГДЕ
	|	НЕ ВТ_ПоказателиКачества.Весы = &ОборудованиеПЛКПустая
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПоказателиКачества.Показатель,
	|	ВТ_ПоказателиКачества.ТочкаМаршрута,
	|	ВТ_ПоказателиКачества.ВидПеревозки,
	|	ВТ_ПоказателиКачества.ТипРегистрации,
	|	ВТ_ПоказателиКачества.Номенклатура,
	|	ВТ_ПоказателиКачества.ТипПробы,
	|	ВТ_ПоказателиКачества.Значение,
	|	ВТ_ПоказателиКачества.гкс_Примечание,
	|	&ОборудованиеПЛКПустая,
	|	ЕСТЬNULL(гкс_КодыПоказателейКачестваЛИМС.КодЛИМС, """")
	|ИЗ
	|	ВТ_ПоказателиКачества КАК ВТ_ПоказателиКачества
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_КодыПоказателейКачестваЛИМС КАК гкс_КодыПоказателейКачестваЛИМС
	|		ПО ВТ_ПоказателиКачества.Показатель = гкс_КодыПоказателейКачестваЛИМС.Показатель
	|		И ВТ_ПоказателиКачества.ТочкаМаршрута = гкс_КодыПоказателейКачестваЛИМС.ТочкаМаршрута
	|		И ВТ_ПоказателиКачества.ВидПеревозки = гкс_КодыПоказателейКачестваЛИМС.ВидПеревозки
	|		И ВТ_ПоказателиКачества.ТипРегистрации = гкс_КодыПоказателейКачестваЛИМС.ТипРегистрации
	|		И ВТ_ПоказателиКачества.Номенклатура = гкс_КодыПоказателейКачестваЛИМС.Номенклатура
	|		И ВТ_ПоказателиКачества.ТипПробы = гкс_КодыПоказателейКачестваЛИМС.ТипПробы
	|		И (гкс_КодыПоказателейКачестваЛИМС.Весы = &ОборудованиеПЛКПустая)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоказателиКачестваСВесамиИБез.Показатель КАК Показатель,
	|	ВТ_ПоказателиКачестваСВесамиИБез.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ВТ_ПоказателиКачестваСВесамиИБез.ВидПеревозки КАК ВидПеревозки,
	|	ВТ_ПоказателиКачестваСВесамиИБез.ТипРегистрации КАК ТипРегистрации,
	|	ВТ_ПоказателиКачестваСВесамиИБез.Номенклатура КАК Номенклатура,
	|	ВТ_ПоказателиКачестваСВесамиИБез.ТипПробы КАК ТипПробы,
	|	ВТ_ПоказателиКачестваСВесамиИБез.Значение КАК Значение,
	|	ВТ_ПоказателиКачестваСВесамиИБез.Примечание КАК Примечание,
	|	МАКСИМУМ(ВТ_ПоказателиКачестваСВесамиИБез.Весы) КАК Весы
	|ПОМЕСТИТЬ ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС
	|ИЗ
	|	ВТ_ПоказателиКачестваСВесамиИБез КАК ВТ_ПоказателиКачестваСВесамиИБез
	|ГДЕ
	|	ВТ_ПоказателиКачестваСВесамиИБез.КодЛИМС <> """"
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПоказателиКачестваСВесамиИБез.Показатель,
	|	ВТ_ПоказателиКачестваСВесамиИБез.ТочкаМаршрута,
	|	ВТ_ПоказателиКачестваСВесамиИБез.ВидПеревозки,
	|	ВТ_ПоказателиКачестваСВесамиИБез.ТипРегистрации,
	|	ВТ_ПоказателиКачестваСВесамиИБез.Номенклатура,
	|	ВТ_ПоказателиКачестваСВесамиИБез.ТипПробы,
	|	ВТ_ПоказателиКачестваСВесамиИБез.Значение,
	|	ВТ_ПоказателиКачестваСВесамиИБез.Примечание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС.Показатель КАК Показатель,
	|	ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС.ВидПеревозки КАК ВидПеревозки,
	|	ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС.ТипРегистрации КАК ТипРегистрации,
	|	ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС.Номенклатура КАК Номенклатура,
	|	ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС.ТипПробы КАК ТипПробы,
	|	ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС.Значение КАК Значение,
	|	ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС.Примечание КАК Примечание,
	|	ВТ_ПоказателиКачестваСВесамиИБез.КодЛИМС КАК КодЛИМС
	|ПОМЕСТИТЬ ВТ_ПоказателиКачестваИтог
	|ИЗ
	|	ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС КАК ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоказателиКачестваСВесамиИБез КАК ВТ_ПоказателиКачестваСВесамиИБез
	|		ПО ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС.Показатель = ВТ_ПоказателиКачестваСВесамиИБез.Показатель
	|		И ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС.ТочкаМаршрута = ВТ_ПоказателиКачестваСВесамиИБез.ТочкаМаршрута
	|		И ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС.ВидПеревозки = ВТ_ПоказателиКачестваСВесамиИБез.ВидПеревозки
	|		И ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС.ТипРегистрации = ВТ_ПоказателиКачестваСВесамиИБез.ТипРегистрации
	|		И ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС.Номенклатура = ВТ_ПоказателиКачестваСВесамиИБез.Номенклатура
	|		И ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС.ТипПробы = ВТ_ПоказателиКачестваСВесамиИБез.ТипПробы
	|		И ВТ_ВесыПоказателейКачестваСЗаполненнымКодомЛИМС.Весы = ВТ_ПоказателиКачестваСВесамиИБез.Весы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гкс_ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации КАК ДокументРегистрации,
	|	ПРЕДСТАВЛЕНИЕ(гкс_ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации.ТранспортноеСредство) КАК
	|		ТранспортноеСредствоНаименование
	|ПОМЕСТИТЬ ВТ_ВсеРегистрации
	|ИЗ
	|	ВТ_ФормированиеПробы КАК ВТ_ФормированиеПробы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ФормированиеНомераПробы.СписокРегистраций КАК
	|			гкс_ФормированиеНомераПробыСписокРегистраций
	|		ПО ВТ_ФормированиеПробы.Ссылка = гкс_ФормированиеНомераПробыСписокРегистраций.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СостоянияРегистрации.МестнаяДата) КАК Период,
	|	СостоянияРегистрации.Состояние КАК Состояние,
	|	ПРЕДСТАВЛЕНИЕ(СостоянияРегистрации.Пользователь) КАК Пользователь,
	|	МАКСИМУМ(СостоянияРегистрации.ВидПеревозки) КАК ВидПеревозки,
	|	МАКСИМУМ(СостоянияРегистрации.ТипРегистрации) КАК ТипРегистрации
	|ПОМЕСТИТЬ ВТ_ВсеСостоянияРегистрации
	|ИЗ
	|	РегистрСведений.гкс_СостоянияРегистрации КАК СостоянияРегистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ФормированиеПробы КАК ВТ_ФормированиеПробы
	|		ПО СостоянияРегистрации.ТочкаМаршрута = ВТ_ФормированиеПробы.ТочкаМаршрута
	|		И СостоянияРегистрации.ТипРегистрации = ВТ_ФормированиеПробы.ТипРегистрации
	|		И СостоянияРегистрации.ВидПеревозки = ВТ_ФормированиеПробы.ВидПеревозки
	|		И СостоянияРегистрации.ДокументРегистрации = ВТ_ФормированиеПробы.ДокументРегистрации
	|		И СостоянияРегистрации.ТранспортноеСредство = ВТ_ФормированиеПробы.ТранспортноеСредство
	|СГРУППИРОВАТЬ ПО
	|	СостоянияРегистрации.Состояние,
	|	ПРЕДСТАВЛЕНИЕ(СостоянияРегистрации.Пользователь)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(гкс_НоменклатураПЛКСрезПоследних.НормативнаяДокументацияНаОтборПроб, """") КАК
	|		НормативнаяДокументацияНаОтборПроб
	|ПОМЕСТИТЬ ВТ_НормативнаяДокументация
	|ИЗ
	|	ВТ_ФормированиеПробы КАК ВТ_ФормированиеПробы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_НоменклатураПЛК.СрезПоследних КАК гкс_НоменклатураПЛКСрезПоследних
	|		ПО ВТ_ФормированиеПробы.ТочкаМаршрута = гкс_НоменклатураПЛКСрезПоследних.ТочкаМаршрута
	|		И ВТ_ФормированиеПробы.ВидПеревозки = гкс_НоменклатураПЛКСрезПоследних.ВидПеревозки
	|		И ВТ_ФормированиеПробы.Номенклатура = гкс_НоменклатураПЛКСрезПоследних.Номенклатура
	|		И (гкс_НоменклатураПЛКСрезПоследних.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка))";
	
	Возврат ТекстЗапроса;

КонецФункции 

Функция ПолучитьСтруктуруОтветаПоКодуПробы()
	
	ПустаяДата = гкс_ОбщегоНазначенияКлиентСервер.ПустаяДата();
		
	Результат	= Новый Структура;
	
	Результат.Вставить("id", "00000000-0000-0000-0000-000000000000");
	Результат.Вставить("code", "");
	Результат.Вставить("date", ПустаяДата);
	Результат.Вставить("testResultDate", ПустаяДата);
	Результат.Вставить("isDeleted", Ложь);
	Результат.Вставить("updatedOn", ПустаяДата);
	Результат.Вставить("userName", "");
	Результат.Вставить("labFirmId", "00000000-0000-0000-0000-000000000000");
	Результат.Вставить("operType", 0);
	Результат.Вставить("sampleTypeId", "00000000-0000-0000-0000-000000000000");
	Результат.Вставить("samplePackageTypeId", "00000000-0000-0000-0000-000000000000");
	Результат.Вставить("fio", "");
	Результат.Вставить("testResults", Новый Массив);
	Результат.Вставить("status", 0);
	Результат.Вставить("receiptIds", Новый Массив);
	Результат.Вставить("goodId", "00000000-0000-0000-0000-000000000000");
	Результат.Вставить("goodName", "");
	Результат.Вставить("goodName_en", "");
	Результат.Вставить("startDate", ПустаяДата);
	Результат.Вставить("finishDate", ПустаяДата);
	Результат.Вставить("analisysStartDate", ПустаяДата);
	Результат.Вставить("analisysEndDate", ПустаяДата);
	Результат.Вставить("responseUserFullName", "");
	Результат.Вставить("firmID", "00000000-0000-0000-0000-000000000000");
	Результат.Вставить("firmName", "");
	Результат.Вставить("stationID", "00000000-0000-0000-0000-000000000000");
	Результат.Вставить("stationName", "");
	Результат.Вставить("counterpatyID", "00000000-0000-0000-0000-000000000000");
	Результат.Вставить("counterpatyName", "");
	Результат.Вставить("receiptTransports", "");
	Результат.Вставить("receiptDocType", 0);
	Результат.Вставить("goodPackingCode", "01");
	Результат.Вставить("smpTypeCode", "");
	Результат.Вставить("smpNormDoc", "");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруСтрокиПоказателя()
	
	Результат	= Новый Структура;
	
	Результат.Вставить("id", "");
	Результат.Вставить("sampleId", "00000000-0000-0000-0000-000000000000");
	Результат.Вставить("qualityIndicatorCode", "");
	Результат.Вставить("qualityIndicatorId", "00000000-0000-0000-0000-000000000000");
	Результат.Вставить("value", 0);
	Результат.Вставить("userName", "");
	Результат.Вставить("comment", "");
	Результат.Вставить("order", 0);
	Результат.Вставить("updatedOn", Дата(1,1,1,0,0,0));
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьGUIDТипаПробы(ТипПробы)
	
	Если ТипПробы = Перечисления.гкс_ТипыПроб.Единичная Тогда
		Возврат "5e5be7b3-be4f-474f-82be-94748485d6b4";
	Иначе
		Возврат "68b83ae1-cb26-460c-b9ec-a816ce5ad2a2";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруЗапросаПоИдентификатору()
	
	Результат	= Новый Структура;
	
	Результат.Вставить("id", "00000000-0000-0000-0000-000000000000");
	Результат.Вставить("code", "");
	Результат.Вставить("userName", "");
	Результат.Вставить("testResults", Новый Массив);
	Результат.Вставить("analisysStartDate", "");
	Результат.Вставить("analisysEndDate", "");
	
	Возврат Результат;
	
КонецФункции

Функция СтатусПоСостояниюДокумента(ДанныеПробы, АнализПроведен)
		
	ТекущееСостояние = ДанныеПробы.ТекущееСостояние;
	ТипПробы = ДанныеПробы.ТипПробы;
	
	ВсеТипыПроб = Перечисления.гкс_ТипыПроб;
	ВсеСостоянияРегистрации = Перечисления.гкс_СостоянияРегистрации;
	ВсеСтатусыЛабАнализа = Перечисления.гкс_СтатусыЛабораторногоАнализа;
	
	ЭтоПринятыПробы 		= ТекущееСостояние = ВсеСостоянияРегистрации.ПринятыПробы ;	
	ЭтоЕдининчнаяПроба 		= ТипПробы = ВсеТипыПроб.Единичная;	
	ЭтоКомпозитнаяПроба 	= ТипПробы = ВсеТипыПроб.Композитная;
	ЭтоВыполененаПроба		= АнализПроведен И ДанныеПробы.СтатусЛабАнализа = ВсеСтатусыЛабАнализа.Выполнен;
	
	Если ЭтоПринятыПробы Тогда
		
		Статус	= 1;
				
	ИначеЕсли ЭтоЕдининчнаяПроба И ЭтоВыполененаПроба Тогда 			
		
		Статус	= 2;
					
	ИначеЕсли ЭтоКомпозитнаяПроба Тогда
		
		Если ЭтоВыполененаПроба Тогда			
			Статус	= 5;
		Иначе
			Статус	= 4;
		КонецЕсли;
		
	Иначе
		Статус  = 0;
	КонецЕсли;
		
	Возврат Статус;
	
КонецФункции

#КонецОбласти

#КонецОбласти 