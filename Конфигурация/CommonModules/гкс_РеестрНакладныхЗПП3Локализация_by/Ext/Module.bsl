#Область ПрограммныйИнтерфейс

#Область ПодключаемыеКоманды

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт 
	
	// форма ЗПП-3 
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФЗПП3";
	КомандаПечати.Идентификатор = "ПФ_MXL_ЗПП3";
	КомандаПечати.Представление = НСтр("ru = 'Реестр (форма ЗПП-3)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;    
	КомандаПечати.Порядок = 1;
	
	// Приемный акт
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_ПриемныйАктЛокализация_by";
	КомандаПечати.Представление = НСтр("ru = 'Приемный акт ЗПП-14 (Беларусь)';en='Priemniy akt ZPP-14'");
	КомандаПечати.МенеджерПечати = "Обработка.гкс_ПечатьПриемныйАкт_ЗПП14";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик  = "гкс_УправлениеПечатьюКлиент_by.ВыполнитьКомандуПечати_ПриемныйАкт_ЗПП14";
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Функция получает данные для формирования ЗПП-14
// Возвращает данные, необходимые для печатной формы.
// 
// Параметры:
// 	ПараметрыПечати - Структура - дополнительные настройки печати
//	МассивОбъектов - Массив - Массив ссылок на документы РегистрацияНаПЛК, по которым необходимо получить данные.
//
// Возвращаемое значение:
//	Структура - структура с данными для печати формы.
// 
Функция ДанныеДляПечатнойФормыАктПриемкиЗПП14(ПараметрыПечати, МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеестрыНакладных.Ссылка КАК РеестрНакладных
	|ПОМЕСТИТЬ ВТ_РеестрыНакладных
	|ИЗ
	|	Документ.гкс_РеестрНакладныхЗПП3 КАК РеестрыНакладных
	|ГДЕ
	|	РеестрыНакладных.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РеестрНакладных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РеестрыНакладных.РеестрНакладных КАК Ссылка,
	|	РеестрНакладныхЗПП3.Номер КАК НомерАкта,
	|	РеестрНакладныхЗПП3.Дата КАК ДатаАкта,
	|	ЕСТЬNULL(ОрганизацияДокумента.НаименованиеПолное, """") КАК Организация,
	|	ЕСТЬNULL(ОрганизацияДокумента.КодПоОКПО, """") КАК КодОКПО,
	|	Товары.НаименованиеДляПечати КАК ТоварНаименование,
	|	Товары.НаименованиеПолное КАК ТоварНаименованиеПолное,
	|	Товары.ЕдиницаИзмерения КАК ТоварЕдиницаИзмерения
	|ПОМЕСТИТЬ ВТ_Шапка
	|ИЗ
	|	ВТ_РеестрыНакладных КАК ВТ_РеестрыНакладных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_РеестрНакладныхЗПП3 КАК РеестрНакладныхЗПП3
	|		ПО ВТ_РеестрыНакладных.РеестрНакладных = РеестрНакладныхЗПП3.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОрганизацияДокумента
	|		ПО (РеестрНакладныхЗПП3.Организация = ОрганизацияДокумента.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|		ПО (РеестрНакладныхЗПП3.Номенклатура = Товары.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РеестрыНакладных.РеестрНакладных КАК РеестрНакладных,
	|	РеестрНакладныхЗПП3Накладные.ДокументРегистрации КАК ДокументРегистрации,
	|	РегистрацияНаПЛК.НомерДокументаПоставщика КАК НомерНакладной,
	|	РегистрацияНаПЛК.Дата КАК ДатаДокумента,
	|	РегистрацияНаПЛК.ЕдиницаИзмеренияВеса КАК ЕдиницаИзмеренияВеса,
	|	ЕСТЬNULL(КонтрагентРегистрации.НаименованиеПолное, """") КАК Отправитель,
	|	ПРЕДСТАВЛЕНИЕ(РегистрацияНаПЛК.ТранспортноеСредство) КАК ТранспортноеСредствоПредставление,
	|	ПРЕДСТАВЛЕНИЕ(РегистрацияНаПЛК.Прицеп) КАК ПрицепПредставление,
	|	ЕСТЬNULL(НаправлениеНаРазгрузку.Склад, """") КАК Силос,
	|	РегистрацияНаПЛК.ВесБрутто КАК Брутто,
	|	РегистрацияНаПЛК.ВесНетто КАК Нетто,
	|	РегистрацияНаПЛК.ВесТары КАК Тара
	|ИЗ
	|	Документ.гкс_РеестрНакладныхЗПП3.Накладные КАК РеестрНакладныхЗПП3Накладные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РеестрыНакладных КАК ВТ_РеестрыНакладных
	|		ПО (ВТ_РеестрыНакладных.РеестрНакладных = РеестрНакладныхЗПП3Накладные.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ПО РеестрНакладныхЗПП3Накладные.ДокументРегистрации = РегистрацияНаПЛК.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_НаправлениеНаРазгрузку КАК НаправлениеНаРазгрузку
	|		ПО (НаправлениеНаРазгрузку.ДокументРегистрации = РегистрацияНаПЛК.Ссылка)
	|			И (НаправлениеНаРазгрузку.Проведен)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК КонтрагентРегистрации
	|		ПО (РегистрацияНаПЛК.Контрагент = КонтрагентРегистрации.Ссылка)
	|ИТОГИ ПО
	|	РеестрНакладных";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатПакетаЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
	Возврат Новый Структура(
		"РезультатПоШапке, РезультатПоТабличнойЧасти",
		РезультатПакетаЗапросов[1], РезультатПакетаЗапросов[2]);
				
КонецФункции

#КонецОбласти

// переопределяемая процедура заполнения документа на основании переданного значения.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.гкс_РеестрНакладныхЗПП3 - заполняемый документ               
//  ДанныеЗаполнения  - Произвольный- Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения  - Строка, Неопределено. - Текст, используемый для заполнения документа.
//  СтандартнаяОбработка  - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
			
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда	
		
		Если ДанныеЗаполнения.Свойство("Дата") Тогда
			ДокументОбъект.Дата = ДанныеЗаполнения.Дата;
		КонецЕсли;	
			
		гкс_ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеЗаполнения);
		
		ЗначенияРеквизитовРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеЗаполнения.ДокументРегистрации, 
			"Организация, Номенклатура, Спецификация, Контрагент, ОтправительПолучатель, Собственник");
			
		РеквизитыИсключения = "Номер, Дата, Собственник";
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеЗаполнения.ДокументРегистрации, , РеквизитыИсключения);
		ДокументОбъект.Грузоотправитель = ЗначенияРеквизитовРегистрации.ОтправительПолучатель;
		
		ДокументОбъект.ТочкаМаршрута = Константы.гкс_ТочкаМаршрутаБазы.Получить();
		
		РеквизитыСпецификации = Документы.гкс_СпецификацияКДоговоруКонтрагента.
			ПолучитьСуммовыеПоказатели(ЗначенияРеквизитовРегистрации.Спецификация, 
									   ЗначенияРеквизитовРегистрации.Номенклатура);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыСпецификации);
		
		Если ТипЗнч(ЗначенияРеквизитовРегистрации.Собственник) = Тип("СправочникСсылка.Организации") Тогда
			ДокументОбъект.Собственник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ЗначенияРеквизитовРегистрации.Собственник, "КонтрагентОрганизации");
		Иначе
			ДокументОбъект.Собственник = ЗначенияРеквизитовРегистрации.Собственник;
		КонецЕсли;
		
		Веса = ДанныеЗаполнения.ДанныеВзвешивания;
		ЕдиницаТонна = гкс_ПриемкаТранспортаПовтИсп.ПолучитьЕдиницуИзмеренияТранспортногоДокумента();
        Коэффициент = гкс_ПриемкаТранспортаПовтИсп.
			ПолучитьКоэффициентПересчетаЕдиниц(Веса.ЕдиницаИзмеренияВеса, ЕдиницаТонна);
				
		ДокументОбъект.Накладные.Очистить();
		НоваяСтрока = ДокументОбъект.Накладные.Добавить();
		НоваяСтрока.Брутто 	= Коэффициент * Веса.Брутто;
		НоваяСтрока.Тара 	= Коэффициент * Веса.Тара;
		НоваяСтрока.Нетто 	= Коэффициент * Веса.Нетто;
		НоваяСтрока.ДокументРегистрации = ДанныеЗаполнения.ДокументРегистрации;
		
		ДокументОбъект.ФизическийВес = ДокументОбъект.Накладные.Итог("Нетто");
		ДокументОбъект.ЗачетныйВес = ДокументОбъект.ФизическийВес;	
		
		РазрядностьСуммы = 2;
		ДокументОбъект.Сумма = Окр(ДокументОбъект.ФизическийВес * ДокументОбъект.Цена, 
											РазрядностьСуммы, РежимОкругления.Окр15как20);
											
		ДокументОбъект.СуммаНДС	= гкс_ОбщегоНазначенияПЛККлиентСервер.
			РассчитатьСуммуНДС(ДокументОбъект.Сумма, ДокументОбъект.СтавкаНДС, Ложь);
					
		ДокументОбъект.СуммаСНДС = ДокументОбъект.Сумма 
			+ ?(ДокументОбъект.ЦенаВключаетНДС, 0, ДокументОбъект.СуммаНДС);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти
