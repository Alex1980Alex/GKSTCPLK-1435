
#Область ПрограммныйИнтерфейс

Процедура ОтправитьДанныеНаЭлектронноеТабло(ОбъектЭлектронноеТабло, Событие = Неопределено) Экспорт

	ИспользоватьЭлектронноеТабло = ПолучитьФункциональнуюОпцию("гкс_ИспользоватьЭлектронноеТабло");	
	Если НЕ ИспользоватьЭлектронноеТабло Тогда
		Возврат;	
	КонецЕсли;
	
	Если Событие = Неопределено Тогда
		Событие = "ЭлектронноеТабло.Актуализация";
	КонецЕсли;
	
	гкс_ОчередьСообщенийRMQ.СоздатьСообщенияПоСобытиюОбъекта(Событие, ОбъектЭлектронноеТабло);
	
КонецПроцедуры

// обновляет информацию передаваемую на табло
//
// Параметры:
//  СтруктураПараметров - Структура - Параметры для установки фильтра
//  Отказ - Булево - Отказ или нет
//
Процедура ОбновитьТабло(ВидТабло, СтруктураПараметров, Отказ) Экспорт
	
	ИспользоватьЭлектронноеТабло = ПолучитьФункциональнуюОпцию("гкс_ИспользоватьЭлектронноеТабло");	
	Если НЕ ИспользоватьЭлектронноеТабло Тогда
		Возврат;	
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);

	СписокРегистраций = ПолучитьСписокРегистрацийДляТабло(СтруктураПараметров);	

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.гкс_ЭлектронныеТабло");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

	ЭлементБлокировки.УстановитьЗначение("ТочкаМаршрута", СтруктураПараметров.ТочкаМаршрута);
	ЭлементБлокировки.УстановитьЗначение("ВидТабло", ВидТабло);

	Если ВидТабло <> ПредопределенноеЗначение("Перечисление.гкс_ВидыЭлектронныхТабло.ОжиданияПроб") Тогда
		ЭлементБлокировки.УстановитьЗначение("Номенклатура", СтруктураПараметров.Номенклатура);
	КонецЕсли;	

	Если ВидТабло = ПредопределенноеЗначение("Перечисление.гкс_ВидыЭлектронныхТабло.ОжиданияПроб") Тогда
		ЭлементБлокировки.УстановитьЗначение("Весы", СтруктураПараметров.Весы);

	ИначеЕсли ВидТабло = ПредопределенноеЗначение("Перечисление.гкс_ВидыЭлектронныхТабло.НазначениеНаВыгрузку") Тогда
		ЭлементБлокировки.УстановитьЗначение("ЯмаРазгрузки", СтруктураПараметров.ЯмаРазгрузки);
	КонецЕсли;
	
	Попытка
		
		Блокировка.Заблокировать();

		НаборЗаписей = РегистрыСведений.гкс_ЭлектронныеТабло.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидТабло.Установить(ВидТабло);
		НаборЗаписей.Отбор.ТочкаМаршрута.Установить(СтруктураПараметров.ТочкаМаршрута);

		Если ВидТабло <> Перечисления.гкс_ВидыЭлектронныхТабло.ОжиданияПроб Тогда
			
			НаборЗаписей.Отбор.Номенклатура.Установить(СтруктураПараметров.Номенклатура);
			
		КонецЕсли;
		
		Если ВидТабло = Перечисления.гкс_ВидыЭлектронныхТабло.ОжиданияПроб Тогда
			НаборЗаписей.Отбор.Весы.Установить(СтруктураПараметров.Весы);

		ИначеЕсли ВидТабло = Перечисления.гкс_ВидыЭлектронныхТабло.НазначениеНаВыгрузку Тогда
			НаборЗаписей.Отбор.ЯмаРазгрузки.Установить(СтруктураПараметров.ЯмаРазгрузки);

		КонецЕсли;
		
		Для Каждого Строка Из СписокРегистраций Цикл

			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураПараметров);
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);

			Если ВидТабло = Перечисления.гкс_ВидыЭлектронныхТабло.ОжиданияПроб Тогда
				
				НаправлениеНаРазгрузку = Документы.гкс_НаправлениеНаРазгрузку.ПолучитьПоРегистрации(Строка.ДокументРегистрации);
				Если ЗначениеЗаполнено(НаправлениеНаРазгрузку) Тогда
					НоваяЗапись.ЯмаРазгрузки = НаправлениеНаРазгрузку.ЯмаРазгрузки;
				КонецЕсли;
				
			Иначе
				
				НоваяЗапись.ВидЗерна = РегистрыСведений.гкс_НоменклатураПЛК.
					ВидЗернаПоПараметрам(Строка.ЗаписьВОчередь, СтруктураПараметров.ТипРегистрации, 
					 СтруктураПараметров.ВидПеревозки, СтруктураПараметров.Номенклатура);
			КонецЕсли;

			НоваяЗапись.Авто = Строка.ДокументРегистрации.ТранспортноеСредство.Наименование;
			
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
	Исключение

		Отказ = Истина;
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'Не удалось сделать запись в электронное табло. Повторите'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Обновляет информацию для отправки на табло для электронной очереди.
//
// Параметры:
//	СтруктураПараметров - Структура - Параметры для блокировки.
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОбновитьТаблоДляЭлектроннойОчереди(СтруктураПараметров, Отказ) Экспорт
	
	ИспользоватьЭлектронноеТабло = ПолучитьФункциональнуюОпцию("гкс_ИспользоватьЭлектронноеТабло");	
	Если НЕ ИспользоватьЭлектронноеТабло Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокРегистраций = РегистрыСведений.гкс_СтатусыЗаписейВОчередиПриемкиПЛК.
		ПолучитьСписокЗаписейВОчередьДляТабло(СтруктураПараметров);
			
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.гкс_ЭлектронныеТабло");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ТочкаМаршрута", СтруктураПараметров.ТочкаМаршрута);
	ЭлементБлокировки.УстановитьЗначение("ВидТабло", СтруктураПараметров.ВидТабло);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.гкс_ЭлектронныеТабло.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТочкаМаршрута.Установить(СтруктураПараметров.ТочкаМаршрута);
		НаборЗаписей.Отбор.ВидТабло.Установить(СтруктураПараметров.ВидТабло);
		
		Для Каждого Строка Из СписокРегистраций Цикл 	
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ТочкаМаршрута = СтруктураПараметров.ТочкаМаршрута;
			НоваяЗапись.ВидТабло = СтруктураПараметров.ВидТабло;
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
			НоваяЗапись.Авто = Строка.НомерТранспортногоСредства;
			
			НоваяЗапись.ВидЗерна = РегистрыСведений.гкс_НоменклатураПЛК.
				ВидЗернаПоПараметрам(Строка.ЗаписьВОчередь, Строка.ТипРегистрации, 
				 Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль, Строка.Номенклатура);
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Отказ = Истина;
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'Не удалось сделать запись в электронное табло. Повторите'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Получает настройки по виду табло с отборами
//
// Параметры:
//	ТочкаМаршрута - СправочникСсылка.гкс_ТочкиМаршрута - Отбор по ПЛК.
//	ВидТабло - ПеречислениеСсылка.гкс_ВидыЭлектронныхТабло - Вид электронного табло по месту использования.
// 	СтруктураОтбора - Структура - структура со значениями отбора
//					-	Номенклатура - СправочникСсылка.Номенклатура - Отбор по номенклатуре.
//					-	Весы - СправочникСсылка.гкс_ОборудованиеПЛК - Отбор по весам.
//					-	ЯмаРазгрузки - СправочникСсылка.гкс_ТочкиМаршрута - Отбор по яме разгрузки.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений со списком подходящих табло.
//
Функция ПолучитьНастройкиПоВидуТабло(ТочкаМаршрута, ВидТабло, СтруктураОтбора = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкаЭлектронногоТабло.Табло КАК Табло,
	|	НастройкаЭлектронногоТабло.Номенклатура КАК Номенклатура,
	|	НастройкаЭлектронногоТабло.Весы КАК Весы,
	|	НастройкаЭлектронногоТабло.ЯмаРазгрузки КАК ЯмаРазгрузки
	|ИЗ
	|	РегистрСведений.гкс_НастройкаЭлектронногоТабло КАК НастройкаЭлектронногоТабло
	|ГДЕ
	|	НастройкаЭлектронногоТабло.ТочкаМаршрута = &ТочкаМаршрута
	|	И НастройкаЭлектронногоТабло.ВидТабло = &ВидТабло";

	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	Запрос.УстановитьПараметр("ВидТабло", ВидТабло);

	Если ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда

		Если СтруктураОтбора.Свойство("Номенклатура") Тогда		
			Запрос.Текст = Запрос.Текст + "
			|И НастройкаЭлектронногоТабло.Номенклатура = &Номенклатура";

			Запрос.УстановитьПараметр("Номенклатура", СтруктураОтбора.Номенклатура);		
		КонецЕсли;
		
		Если СтруктураОтбора.Свойство("Весы") Тогда		
			Запрос.Текст = Запрос.Текст + "
			|И НастройкаЭлектронногоТабло.Весы = &Весы";

			Запрос.УстановитьПараметр("Весы", СтруктураОтбора.Весы);		
		КонецЕсли;

		Если СтруктураОтбора.Свойство("ЯмаРазгрузки") Тогда		
			Запрос.Текст = Запрос.Текст + "
			|И НастройкаЭлектронногоТабло.ЯмаРазгрузки = &ЯмаРазгрузки";

			Запрос.УстановитьПараметр("ЯмаРазгрузки", СтруктураОтбора.ЯмаРазгрузки);		
		КонецЕсли;
	КонецЕсли;	

	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаНастроекТабло = РезультатЗапроса.Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаНастроекТабло;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает первых 10 записей подходящих по условию для авто, зарегистрированных на ПЛК
//
// Параметры:
//  СтруктураПараметров - Структура - Перечень параметров для запроса
//
// Возвращаемое значение:
//  ТаблицаЗначений - Перечень Записей в электронную очередь с авто и временем записи.
//
Функция ПолучитьСписокРегистрацийДляТабло(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидПеревозки", СтруктураПараметров.ВидПеревозки);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТипРегистрации", СтруктураПараметров.ТипРегистрации);
	Запрос.УстановитьПараметр("ТочкаМаршрута", СтруктураПараметров.ТочкаМаршрута);
	Запрос.УстановитьПараметр("ТочкаОтсчета", СтруктураПараметров.ТочкаОтсчета);
	Запрос.УстановитьПараметр("СписокСостояний", СтруктураПараметров.СписокСостояний);	
	
	Если СтруктураПараметров.ВидТабло = Перечисления.гкс_ВидыЭлектронныхТабло.НеПрошедшиеРегистрацию 
		Или СтруктураПараметров.ВидТабло = Перечисления.гкс_ВидыЭлектронныхТабло.НазначениеНаВесы Тогда
		
		Запрос.УстановитьПараметр("Номенклатура", СтруктураПараметров.Номенклатура);
		Запрос.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10
		|	РССостоянияРегистрации.ДокументРегистрации КАК ДокументРегистрации
		|ПОМЕСТИТЬ ВТ_СостоянияРегистрации
		|ИЗ
		|	РегистрСведений.гкс_СостоянияРегистрации.СрезПоследних(&ТекущаяДата, ТочкаМаршрута = &ТочкаМаршрута
		|	И ВидПеревозки = &ВидПеревозки
		|	И ТипРегистрации = &ТипРегистрации
		|	И Период >= &ТочкаОтсчета) КАК РССостоянияРегистрации
		|СГРУППИРОВАТЬ ПО
		|	РССостоянияРегистрации.ДокументРегистрации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РССостоянияРегистрации.ДокументРегистрации КАК ДокументРегистрации,
		|	ЕСТЬNULL(ДокЗаписьВОчередь.НачалоПериода, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаписьВОчередь
		|ИЗ
		|	ВТ_СостоянияРегистрации КАК РССостоянияРегистрации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК ДокРегистрацияНаПЛК
		|		ПО РССостоянияРегистрации.ДокументРегистрации = ДокРегистрацияНаПЛК.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_ЗаписьВОчередьПриемкиПЛК КАК ДокЗаписьВОчередь
		|		ПО (ДокРегистрацияНаПЛК.Ссылка = ДокЗаписьВОчередь.Ссылка)
		|СГРУППИРОВАТЬ ПО
		|	РССостоянияРегистрации.ДокументРегистрации,
		|	ДокЗаписьВОчередь.НачалоПериода
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаписьВОчередь";
		
	ИначеЕсли СтруктураПараметров.ВидТабло = Перечисления.гкс_ВидыЭлектронныхТабло.ОжиданияПроб Тогда
		
		Запрос.УстановитьПараметр("Весы", СтруктураПараметров.Весы);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СостоянияРегистрации.ДокументРегистрации КАК ДокументРегистрации,
			|	МАКСИМУМ(СостоянияРегистрации.Период) КАК Период,
			|	ВЫБОР
			|		КОГДА СостоянияРегистрации.Состояние = ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияРегистрации.ВыгрузкаРазрешена)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Приоритет
			|ПОМЕСТИТЬ ВТ_СписокРегистраций
			|ИЗ
			|	РегистрСведений.гкс_СостоянияРегистрации.СрезПоследних(
			|			&ТекущаяДата,
			|			ТочкаМаршрута = &ТочкаМаршрута
			|				И ВидПеревозки = &ВидПеревозки
			|				И ТипРегистрации = &ТипРегистрации
			|				И Период >= &ТочкаОтсчета) КАК СостоянияРегистрации
			|ГДЕ
			|	СостоянияРегистрации.Состояние В(&СписокСостояний)
			|
			|СГРУППИРОВАТЬ ПО
			|	СостоянияРегистрации.ДокументРегистрации,
			|	ВЫБОР
			|		КОГДА СостоянияРегистрации.Состояние = ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияРегистрации.ВыгрузкаРазрешена)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(Взвешивание.Ссылка) КАК ДокументВзвешивание,
			|	МАКСИМУМ(ВТ_СписокРегистраций.Период) КАК Период,
			|	ВТ_СписокРегистраций.ДокументРегистрации КАК ДокументРегистрации,
			|	ВТ_СписокРегистраций.Приоритет КАК Приоритет
			|ПОМЕСТИТЬ ВТ_Взвешивания
			|ИЗ
			|	ВТ_СписокРегистраций КАК ВТ_СписокРегистраций
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_Взвешивание КАК Взвешивание
			|		ПО ВТ_СписокРегистраций.ДокументРегистрации = Взвешивание.ДокументРегистрации
			|ГДЕ
			|	Взвешивание.ТипВзвешивания = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Въезд)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_СписокРегистраций.ДокументРегистрации,
			|	ВТ_СписокРегистраций.Приоритет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 10
			|	Взвешивание.ДокументРегистрации КАК ДокументРегистрации,
			|	ВТ_Взвешивания.Период КАК ЗаписьВОчередь,
			|	ВТ_Взвешивания.Приоритет КАК Приоритет
			|ИЗ
			|	ВТ_Взвешивания КАК ВТ_Взвешивания
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_Взвешивание КАК Взвешивание
			|		ПО ВТ_Взвешивания.ДокументВзвешивание = Взвешивание.Ссылка
			|ГДЕ
			|	Взвешивание.Весы = &Весы
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет,
			|	ВТ_Взвешивания.Период";
			
	ИначеЕсли СтруктураПараметров.ВидТабло = Перечисления.гкс_ВидыЭлектронныхТабло.НазначениеНаВыгрузку Тогда
		
		Запрос.УстановитьПараметр("ЯмаРазгрузки", СтруктураПараметров.ЯмаРазгрузки);
		
		Если СтруктураПараметров.Свойство("ДокументРегистрации") Тогда
			Запрос.УстановитьПараметр("ДокументРегистрации", СтруктураПараметров.ДокументРегистрации);
		Иначе
			Запрос.УстановитьПараметр("ДокументРегистрации", Неопределено)
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ЗаписьВОчередь") Тогда
			Запрос.УстановитьПараметр("ЗаписьВОчередь", СтруктураПараметров.ЗаписьВОчередь);
		Иначе
			Запрос.УстановитьПараметр("ЗаписьВОчередь", Неопределено)
		КонецЕсли;
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СостоянияРегистрации.ДокументРегистрации КАК ДокументРегистрации,
			|	МАКСИМУМ(СостоянияРегистрации.Период) КАК Период
			|ПОМЕСТИТЬ ВТ_СписокРегистраций
			|ИЗ
			|	РегистрСведений.гкс_СостоянияРегистрации.СрезПоследних(
			|			&ТекущаяДата,
			|			ТочкаМаршрута = &ТочкаМаршрута
			|				И ВидПеревозки = &ВидПеревозки
			|				И ТипРегистрации = &ТипРегистрации
			|				И Период >= &ТочкаОтсчета) КАК СостоянияРегистрации
			|ГДЕ
			|	СостоянияРегистрации.Состояние В(&СписокСостояний)
			|	И СостоянияРегистрации.ДокументРегистрации <> &ДокументРегистрации
			|
			|СГРУППИРОВАТЬ ПО
			|	СостоянияРегистрации.ДокументРегистрации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(НаправлениеНаРазгрузку.Ссылка) КАК ДокументРазгрузка,
			|	МАКСИМУМ(ВТ_СписокРегистраций.Период) КАК Период
			|ПОМЕСТИТЬ ВТ_Направление
			|ИЗ
			|	ВТ_СписокРегистраций КАК ВТ_СписокРегистраций
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_НаправлениеНаРазгрузку КАК НаправлениеНаРазгрузку
			|		ПО ВТ_СписокРегистраций.ДокументРегистрации = НаправлениеНаРазгрузку.ДокументРегистрации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НаправлениеНаРазгрузку.ДокументРегистрации КАК ДокументРегистрации,
			|	ВТ_Направление.Период КАК ЗаписьВОчередь
			|ПОМЕСТИТЬ ВТ_Итог
			|ИЗ
			|	ВТ_Направление КАК ВТ_Направление
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_НаправлениеНаРазгрузку КАК НаправлениеНаРазгрузку
			|		ПО ВТ_Направление.ДокументРазгрузка = НаправлениеНаРазгрузку.Ссылка
			|ГДЕ
			|	НаправлениеНаРазгрузку.ЯмаРазгрузки = &ЯмаРазгрузки
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ДокументРегистрации,
			|	&ЗаписьВОчередь
			|ГДЕ
			|	&ДокументРегистрации <> НЕОПРЕДЕЛЕНО
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 10
			|	ВТ_Итог.ДокументРегистрации КАК ДокументРегистрации,
			|	ВТ_Итог.ЗаписьВОчередь КАК ЗаписьВОчередь
			|ИЗ
			|	ВТ_Итог КАК ВТ_Итог
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЗаписьВОчередь";
			
	 КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	СписокРегистраций = РезультатЗапроса.Выгрузить();
	
	Возврат СписокРегистраций;
	
КонецФункции


#КонецОбласти