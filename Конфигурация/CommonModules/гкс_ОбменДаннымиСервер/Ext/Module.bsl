#Область ПрограммныйИнтерфейс

// Устанавливает значение параметра "Загрузка" для свойства объекта "ОбменДанными".
//
// Параметры:
//  Объект - Любой объект - объект, для которого устанавливается свойство.
//  Значение - Булево - значение устанавливаемого свойства "Загрузка".
//  ОтправкаНазад - Булево - признак необходимости регистрации данных к обратной отправке.
//  УзелОбмена - ПланОбменаСсылка - признак необходимости регистрации данных к обратной отправке.
//
Процедура УстановитьОбменДаннымиЗагрузка(Объект, Значение = Истина, ОтправкаНазад = Ложь, УзелОбмена = Неопределено) Экспорт
	
	Объект.ОбменДанными.Загрузка = Значение;
	
	Если НЕ ОтправкаНазад
		И УзелОбмена <> Неопределено
		И НЕ УзелОбмена.Пустая() Тогда
	
		ТипЗначенияОбъекта = ТипЗнч(Объект);
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначенияОбъекта);
		
		Если Метаданные.ПланыОбмена[УзелОбмена.Метаданные().Имя].Состав.Содержит(ОбъектМетаданных) Тогда
			Объект.ОбменДанными.Отправитель = УзелОбмена;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры
	
// Формирует и возвращает ключ таблицы данных.
// Ключ таблицы используется для выборочной загрузки данных из сообщения обмена по заданному ключу.
//
Функция КлючТаблицыДанных(Знач ТипИсточника, Знач ТипПриемника, Знач ЭтоУдалениеОбъекта) Экспорт
	
	Возврат ТипИсточника + "#" + ТипПриемника + "#" + Строка(ЭтоУдалениеОбъекта);
	
КонецФункции

#Область ОбработкаОбъектов

// Процедура удаления существующих движений документа при перепроведении (отмене проведения).
//
// Параметры:
//   ДокументОбъект - ДокументОбъект - документ, движения которого требуется удалить.
//
Процедура УдалитьДвиженияУДокумента(ДокументОбъект) Экспорт
	
	МассивОбрабатываемыхСтрокТаблицыДвижений = Новый Массив();
	
	// Получение списка регистров, по которым существуют движения.
	ТаблицаДвижений = ОпределитьНаличиеДвиженийПоДокументу(ДокументОбъект.Ссылка);
	ТаблицаДвижений.Колонки.Добавить("НаборЗаписей");
	ТаблицаДвижений.Колонки.Добавить("БезусловноеУдаление", Новый ОписаниеТипов("Булево"));
		
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		
		Набор = Неопределено;
		
		// Имя регистра передается как значение, полученное с помощью
		// функции ПолноеИмя() метаданных регистра.
		ПозицияТочки = СтрНайти(СтрокаДвижения.Имя, ".");
		ТипРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки + 1));

		МассивОбрабатываемыхСтрокТаблицыДвижений.Добавить(СтрокаДвижения);
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
			Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
		КонецЕсли;
		
		Если Набор = Неопределено Тогда // Произошло нечто необъяснимое?=)))
			
			Продолжить;
			
		КонецЕслИ;
		
		Если Не ПравоДоступа("Изменение", Набор.Метаданные()) Тогда
			// Отсутствуют права на всю таблицу регистра.
			ТекстИсключения = НСтр("ru = 'Нарушение прав доступа: %1'");
			ТекстИсключения = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, СтрокаДвижения.Имя);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;

		Набор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);

		// Набор не записывается сразу, чтобы не откатывать транзакцию, если впоследствии
		// выяснится, что на один из регистров не хватает прав.
		СтрокаДвижения.НаборЗаписей = Набор;
		
	КонецЦикла;
		
	Для Каждого СтрокаДвижения Из МассивОбрабатываемыхСтрокТаблицыДвижений Цикл		
		Попытка
			СтрокаДвижения.НаборЗаписей.Записать();
		Исключение
			// Возможно «сработало» ограничение на уровне записей или подсистема даты запрета изменения.
			ТекстИсключения = НСтр("ru = 'Операция не выполнена: %1
				|%2'");
			ТекстИсключения = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, СтрокаДвижения.Имя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
	КонецЦикла;
		
	Для Каждого Движение Из ДокументОбъект.Движения Цикл
		Если Движение.Количество() > 0 Тогда
			Движение.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	// Удаление записей регистрации из всех последовательностей.
	Если ДокументОбъект.Метаданные().ЗаполнениеПоследовательностей = 
		Метаданные.СвойстваОбъектов.ЗаполнениеПоследовательностей.ЗаполнятьАвтоматически Тогда
		
		ТекстЗапроса = "";
		
		Для Каждого Последовательность Из ДокументОбъект.ПринадлежностьПоследовательностям Цикл
			// В запросе получаем имена последовательностей, в которых документ зарегистрирован.
			ТекстЗапроса = ТекстЗапроса + "
			|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
			|ВЫБРАТЬ """ + Последовательность.Метаданные().Имя
			+  """ КАК Имя ИЗ " + Последовательность.Метаданные().ПолноеИмя()
			+ " ГДЕ Регистратор = &Регистратор";
			
		КонецЦикла;
		
		Если ТекстЗапроса = "" Тогда
			ТаблицаРегистраций = Новый ТаблицаЗначений();
		Иначе
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);
			ТаблицаРегистраций = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
		// Получение списка последовательностей в которых зарегистрирован документ.
		КоллекцияПоследовательностей = ДокументОбъект.ПринадлежностьПоследовательностям;
		Для Каждого НаборЗаписейРегистрацииВПоследовательности Из КоллекцияПоследовательностей Цикл
			Если (НаборЗаписейРегистрацииВПоследовательности.Количество() > 0)
				ИЛИ (НЕ ТаблицаРегистраций.Найти(НаборЗаписейРегистрацииВПоследовательности.Метаданные().Имя,"Имя") = Неопределено) Тогда
				НаборЗаписейРегистрацииВПоследовательности.Очистить();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Добавляет одну запись в регистр сведений по переданным значениям структуры.
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо создать набор записей и заполнить этот
//                                набор.
//  ИмяРегистра     - Строка - имя регистра сведений, в который необходимо добавить запись.
// 
Процедура ДобавитьЗаписьВРегистрСведений(СтруктураЗаписи, Знач ИмяРегистра, Загрузка = Ложь) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
	
	НаборЗаписей.ОбменДанными.Загрузка = Загрузка;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет набор записей в регистре по переданным значениям структуры.
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо удалить набор записей.
//  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо удалить набор записей.
// 
Процедура УдалитьНаборЗаписейВРегистреСведений(СтруктураЗаписи, ИмяРегистра, Загрузка = Ложь) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	
	НаборЗаписей.ОбменДанными.Загрузка = Загрузка;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ОтменитьПроведениеОбъектаВИБ(Объект, Отправитель = Неопределено) Экспорт
	
	УстановитьОбменДаннымиЗагрузка(Объект, Истина, Ложь, Отправитель);
	
	// Проверка на коллизии дат запрета загрузки.
	Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
	
	ПроведениеДокументаОтменено = Ложь;
	
	НачатьТранзакцию();
	Попытка
		
		// Отменяем проведение документа.
		Объект.Проведен = Ложь;
		Объект.Записать();
		
		УдалитьДвиженияУДокумента(Объект);
		ПроведениеДокументаОтменено = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат ПроведениеДокументаОтменено;
	
КонецФункции

// Записывает объект в информационную базу.
//
// Параметры:
//  Объект - Произвольный - СправочникОбъект, ДокументОбъект и др записываемый объект.
//  ЗаписыватьВРежимеОбменДаннымиЗагрузка - Булево - признак записи объекта без выполнения платформенных проверок
// 
Функция ЗаписатьОбъектВИБ(Объект, ЗаписыватьВРежимеОбменДаннымиЗагрузка) Экспорт
		
	Результат = Объект;

	гкс_ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(Объект, ЗаписыватьВРежимеОбменДаннымиЗагрузка);
		
	НачатьТранзакцию();
	Попытка
		
		// Записываем объект в транзакцию.
		Объект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	КонецПопытки;
	
	Если гкс_ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(Объект.Метаданные()) Тогда
		Результат = Объект.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет проведение документа при его загрузке в информационную базу.
//
// Параметры:
//  ПараметрыОбмена                          - Структура - содержит все правила и параметры обмена.
//  Объект                                   - ДокументОбъект - Загруженный документ.
//
Процедура ВыполнитьПроведениеДокументаПриЗагрузке(ПараметрыОбмена, ДокументСсылка) Экспорт
	
	ОписаниеОшибки = "";
	ПредставлениеОбъекта = Строка(ДокументСсылка);
	ТипПроблемыОбмена = Справочники.гкс_ТипыПроблемОбменаДанными.ПроведениеДокумента;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(гкс_ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументСсылка));
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
		Блокировка.Заблокировать();
		
		Объект = ДокументСсылка.ПолучитьОбъект();
		
		// Устанавливаем узел-отправитель для предотвращения регистрации объекта на узле, для которого производим загрузку
		// проведение выполняем не в режиме загрузки.
		УстановитьОбменДаннымиЗагрузка(Объект, Ложь, Ложь);
		Объект.ДополнительныеСвойства.Вставить("ОтложенноеПроведение"); 
		Если ПараметрыОбмена.Свойство("ИсключаемыеПолучатели") Тогда
			Объект.ДополнительныеСвойства.Вставить("ИсключаемыеПолучатели", ПараметрыОбмена["ИсключаемыеПолучатели"]) 
		КонецЕсли;
		
		Если Объект.ПроверитьЗаполнение() Тогда
			
			// При проведении документа снимаем запрет на выполнение ПРО,
			// т.к. ПРО были проигнорированы при обычной записи документа с целью оптимизации скорости загрузки данных.
			Если Объект.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
				Объект.ДополнительныеСвойства.Удалить("ОтключитьМеханизмРегистрацииОбъектов");
			КонецЕсли;
			
	        Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
			
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		Пока ТранзакцияАктивна() Цикл 
			ОтменитьТранзакцию();
		КонецЦикла;
		
		ОписаниеОшибки = ПолноеОписаниеОшибкиОбмена(ОписаниеОшибки());		
		УстановитьПараметрыПроблемыОбменаДанными(ПараметрыОбмена, ТипПроблемыОбмена, ПредставлениеОбъекта);
		
		ВызватьИсключение ОписаниеОшибки;

	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьОбъектВИБСПроверкойЗаполнения(ПараметрыОбмена, Объект) Экспорт
	
	// Опишем возможные проблемы. Для чего нужен это программный код здесь? 
	// В случае невосстановимой ошибки в транзакции, всякое обращение к БД вызовет ошибку
	// "В данной транзакции уже происходили ошибки". Поэтому сохраним предопределенные значения в переменные заранее.
	ТипПроблемыНезаполненныеРеквизиты = Справочники.гкс_ТипыПроблемОбменаДанными.НезаполненныеРеквизиты;
	ТипПроблемыОшибкаЗаписи = Справочники.гкс_ТипыПроблемОбменаДанными.ОтложеннаяЗаписьОбъекта;
	ПредставлениеОбъекта = Строка(Объект);
	
	НачатьТранзакцию();

	Попытка

		УстановитьБлокировкуПоТипуОбъекта(Объект);
		
		ЗаписываемыйОбъект = Объект; 
		Если гкс_ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
			ЗаписываемыйОбъект = Объект.ПолучитьОбъект();
		КонецЕсли;
		
		ЗаписываемыйОбъект.ДополнительныеСвойства.Вставить("ОтложеннаяЗапись");
		Если ПараметрыОбмена.Свойство("ИсключаемыеПолучатели") Тогда
			ЗаписываемыйОбъект.ДополнительныеСвойства.Вставить("ИсключаемыеПолучатели", ПараметрыОбмена["ИсключаемыеПолучатели"]) 
		КонецЕсли;
		
		Если ЗаписываемыйОбъект.ПроверитьЗаполнение() Тогда
				
			// При проведении документа снимаем запрет на выполнение ПРО,
			// т.к. ПРО были проигнорированы при обычной записи с целью оптимизации скорости загрузки данных.
			Если ЗаписываемыйОбъект.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
				ЗаписываемыйОбъект.ДополнительныеСвойства.Удалить("ОтключитьМеханизмРегистрацииОбъектов");
			КонецЕсли;

			ЗаписываемыйОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");

			ЗаписываемыйОбъект.Записать();
		Иначе
			ОписаниеОшибки = НСтр("ru = 'Ошибка проверки заполнения реквизитов.'");
			ОписаниеОшибки = ПолноеОписаниеОшибкиОбмена(ОписаниеОшибки);		
			УстановитьПараметрыПроблемыОбменаДанными(ПараметрыОбмена, 
													 ТипПроблемыНезаполненныеРеквизиты, 
													 ПредставлениеОбъекта);
				
			ВызватьИсключение ОписаниеОшибки;
			
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		
		Пока ТранзакцияАктивна() Цикл				
			ОтменитьТранзакцию();				
		КонецЦикла;
			
		ОписаниеОшибки = ПолноеОписаниеОшибкиОбмена(ОписаниеОшибки());		
		УстановитьПараметрыПроблемыОбменаДанными(ПараметрыОбмена, 
		                                         ТипПроблемыОшибкаЗаписи, 
		                                         ПредставлениеОбъекта);
			
		ВызватьИсключение ОписаниеОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьОбъект(Объект, УдалитьНепосредственно, ИмяТипа = "") Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	Если гкс_ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта)
		ИЛИ гкс_ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеОбъекта)
		ИЛИ гкс_ОбщегоНазначения.ЭтоПланСчетов(МетаданныеОбъекта)
		ИЛИ гкс_ОбщегоНазначения.ЭтоПланВидовРасчета(МетаданныеОбъекта) Тогда
		Предопределенный = Объект.Предопределенный;
	Иначе
		Предопределенный = Ложь;
	КонецЕсли;
	
	Если Предопределенный Тогда
		Возврат;
	КонецЕсли;
	
	Если УдалитьНепосредственно Тогда
		Объект.Удалить();
	Иначе
		УстановитьПометкуУдаленияУОбъекта(Объект, Истина, ИмяТипа);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСОшибками

Процедура ЗафиксироватьПроблемыОбработкиСообщения(Результаты, Источник, ШаблонСообшения, ОписаниеОшибки) Экспорт
	
	Перем ТипПроблемы;
	Перем ПредставлениеОбъекта;
	
	Источник.ОшибкиОбработки.Свойство("ТипПроблемы", ТипПроблемы);
	Источник.ОшибкиОбработки.Свойство("ПредставлениеОбъекта", ПредставлениеОбъекта);
		
	Результаты.Вставить("ЕстьОшибки", Истина);
	
	ТекстПроблемы = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообшения, 
	                                                                       ПодробноеПредставлениеОшибки(ОписаниеОшибки));
																				
	Результаты.Вставить("ТекстОшибки", ТекстПроблемы);
	// Тип проблемы определяется в месте непосредственного вызова, 
	// На момент вызова процедуры он должен быть уже заполнен. Если не заполнен - значит не везде перехватили 
	// исключения и предварительно обработали. Для этого проставим значения типа по умолчанию, 
	// представление оставим пустым.	
	Результаты.Вставить("ТипПроблемы", ТипПроблемы);
	Результаты.Вставить("ПредставлениеОбъекта", ПредставлениеОбъекта);
				
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьБлокировкуПоТипуОбъекта(Объект)
	
//	Блокировка = Новый БлокировкаДанных;
//	ЭлементБлокировки = Блокировка.Добавить(гкс_ОбщегоНазначения.ИмяТаблицыПоСсылке(ОбъектСоответствия.Ключ));
//	ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектСоответствия.Ключ);
//	Блокировка.Заблокировать();
	
КонецПроцедуры

Функция ОпределитьНаличиеДвиженийПоДокументу(ДокументСсылка)
	ТекстЗапроса = "";	
	// Для исключения падения для документов, проводящимся более чем по 256 таблицам.
	счетчик_таблиц = 0;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		// В запросе получаем имена регистров, по которым есть хотя бы одно движение.
		// Например,
		// ВЫБРАТЬ Первые 1 "РегистрНакопления.ТоварыНаСкладах"
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор.
		
		// Имя регистра приводим к Строка(200), см. ниже.
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// Если в запрос попадает более 256 таблиц - разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным).
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// При выгрузке для колонки "Имя" тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200).
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// Если количество таблиц не превысило 256 - возвращаем таблицу.
	Если счетчик_таблиц = МетаданныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// Таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

// Создает набор записей регистра сведений по переданным значениям структуры. Добавляет одну запись в набор.
//
// Параметры:
//  СтруктураЗаписи - Структура - структура по значениям которой необходимо создать набор записей и заполнить этот
//                                набор.
//  ИмяРегистра     - Строка - имя регистра сведений.
// 
Функция СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра)
	
	Перем Период;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];

	// Создаем набор записей регистра.
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	
	Если ЭтоПериодическийРегистрСведений(ИмяРегистра) И СтруктураЗаписи.Свойство("Период", Период) 
		И ЗначениеЗаполнено(Период) Тогда
		
		НаборЗаписей.Отбор["Период"].Установить(Период);
		
	КонецЕсли;
	
	// Устанавливаем отбор по измерениям регистра.
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		// Если задано значение в структуре, то отбор устанавливаем.
		Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			
			НаборЗаписей.Отбор[Измерение.Имя].Установить(СтруктураЗаписи[Измерение.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборЗаписей;
	
КонецФункции

Функция ЭтоПериодическийРегистрСведений(ИмяРегистра) 
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	Возврат НЕ (МетаданныеРегистра.ПериодичностьРегистраСведений = 
	Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический);
	
КонецФункции

Функция ПолноеОписаниеОшибкиОбмена(БазовоеОписание) 
	
	Возврат гкс_ОбщегоНазначения.РасширенноеОписаниеОшибки(БазовоеОписание);
	
КонецФункции

Процедура УстановитьПараметрыПроблемыОбменаДанными(ПараметрыОбмена, ТипПроблемы, ПредставлениеОбъекта = Неопределено)
	
	Если НЕ ПараметрыОбмена.ОшибкиОбработки.Свойство("ТипПроблемы") Тогда		
		ПараметрыОбмена.ОшибкиОбработки.Вставить("ТипПроблемы", ТипПроблемы);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеОбъекта) 
		И НЕ ПараметрыОбмена.ОшибкиОбработки.Свойство("ПредставлениеОбъекта") Тогда		
		ПараметрыОбмена.ОшибкиОбработки.Вставить("ПредставлениеОбъекта", ПредставлениеОбъекта);		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает пометку удаления.
//
// Параметры:
//  Объект - СправочникОбъект
//         - ДокументОбъект - объект для установки пометки.
//  ПометкаУдаления - Булево - флаг пометки удаления.
//  ИмяТипаОбъекта - Строка - тип объекта строкой.
//
Процедура УстановитьПометкуУдаленияУОбъекта(Объект, ПометкаУдаления, ИмяТипаОбъекта)
	
	Если (ПометкаУдаления = Неопределено И Объект.ПометкаУдаления <> Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТипаОбъекта = "Документ" Тогда
		УстановитьОбменДаннымиЗагрузка(Объект, Ложь);
	КонецЕсли;
	
	ПометкаДляУстановки = ?(ПометкаУдаления <> Неопределено, ПометкаУдаления, Ложь);
	
	УстановитьОбменДаннымиЗагрузка(Объект);
		
	// Дли иерархических объектов пометку удаления только у конкретного объекта ставим.
	Если ИмяТипаОбъекта = "Справочник"
		ИЛИ ИмяТипаОбъекта = "ПланВидовХарактеристик"
		ИЛИ ИмяТипаОбъекта = "ПланСчетов" Тогда
		
		Если НЕ Объект.Предопределенный Тогда
			Объект.УстановитьПометкуУдаления(ПометкаДляУстановки, Ложь);
		КонецЕсли;
		
	Иначе
		Объект.УстановитьПометкуУдаления(ПометкаДляУстановки);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти
