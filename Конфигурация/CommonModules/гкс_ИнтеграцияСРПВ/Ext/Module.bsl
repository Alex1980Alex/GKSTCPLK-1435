#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.РегламентныеЗадания

// Определяет зависимости регламентных заданий и их дополнительные свойства.
//
// Параметры:
//  Настройки - ТаблицаЗначений:
//    * РегламентноеЗадание - ОбъектМетаданныхРегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданныхФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ - Булево - если регламентное задание зависит более чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево
//                                              - Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - Неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево
//                                  - Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - Неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево
//                                      - Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - Неопределено.
//    * ДоступноВМоделиСервиса - Булево
//                             - Неопределено - Ложь, если необходимо блокировать выполнение регламентного
//        задания (в т.ч. задания очереди) в информационной базе с включенным использованием разделителя.
//        Значение Неопределено трактуется как Истина.
//        По умолчанию - Неопределено.
//    * РаботаетСВнешнимиРесурсами - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.). Не следует устанавливать
//        значение Истина для регламентных заданий, не модифицирующих данные во внешних источниках.
//        Например, регламентное задание ЗагрузкаКурсовВалют. Регламентные задания, работающие с внешними ресурсами,
//        автоматически отключаются в копии информационной базы. По умолчанию - Ложь.
//    * Параметризуется - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.гкс_СРПВСозданиеДоументов;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.гкс_ИспользоватьИнтеграциюСРПВ;
	Настройка.РаботаетСВнешнимиРесурсами = Ложь;
	Настройка.ДоступноВМоделиСервиса = Ложь;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РегламентныеЗадания

#КонецОбласти

// Входная точка для формирования сообщения для Кверион
//
// Параметры:
//  СообщениеОбъект - ОбъектXDTO - загруженное сообщение из СРПВ
//	КомпонентыОбмена - Структура - струкутра для проведения обмена
//  
Процедура ОбработатьВходящееСообщение(СообщениеОбъект, КомпонентыОбмена) Экспорт
	
	ТипКонтракта = СообщениеОбъект.Тип().Имя;
	
	Если ТипКонтракта = "srpv.WaggonReceive" Тогда
		МенеджерОбъекта = Документы.гкс_СРПВПрибытиеНаПуть;
		ТипЗагружаемогоОбъекта = "Документ";
		ТипОперации = Перечисления.гкс_ТипРегистрации.Приемка;
		
	ИначеЕсли ТипКонтракта = "srpv.WaggonWeighting" Тогда
		МенеджерОбъекта = Документы.гкс_СРПВПеревеска;
		ТипЗагружаемогоОбъекта = "Документ";
		ТипОперации = ТипОперацииПоДаннымСообщения(СообщениеОбъект);
		
	ИначеЕсли ТипКонтракта = "srpv.CargoOperations" Тогда
		МенеджерОбъекта = Документы.гкс_СРПВРегистрацияОперацииСВагоном;
		ТипЗагружаемогоОбъекта = "Документ";
		ТипОперации = ТипОперацииПоДаннымСообщения(СообщениеОбъект);
	Иначе	
		Возврат;
	КонецЕсли;
	
	// загружаем сообщения только для текущего ПЛК
	Если Не РегистрыСведений.гкс_СоответствияОбъектовСРПВ.ЭтоИдентификаторТекущегоПЛК(СообщениеОбъект.ID_PLK) Тогда
		Возврат;	
	КонецЕсли;
	
	ДанныеОбъекта = ОбъектXDTOВСтруктуру(СообщениеОбъект);
	
	Если ТипЗагружаемогоОбъекта = "Документ" Тогда
		// инициализируем идентификатор отправки
		КлючиАналитикиСРПВМенеджер = Справочники.гкс_КлючиАналитикиСРПВ;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторОтправкиВагона", ДанныеОбъекта.WagonDispatchId);
		Отбор.Вставить("НомерВагона", ДанныеОбъекта.WagonNumber);
		Отбор.Вставить("ТипОперации", ТипОперации);
		ЭтоНовый = Ложь;
		КлючАналитики = КлючиАналитикиСРПВМенеджер.ЗначениеКлючаАналитики(Отбор, ЭтоНовый);
		
		Если ЭтоНовый Тогда	
			КомпонентыОбмена.ЗагруженныеОбъектыСеансаОбмена.Добавить(КлючАналитики.Ссылка); 			
		КонецЕсли;
		
		ДанныеОбъекта.Вставить("ИдентификаторОтправки", КлючАналитики.Ссылка);
		НайденаяЗапись = МенеджерОбъекта.ПолучитьСсылкуПоИдентификаторуОтправки(КлючАналитики.Ссылка);
		
		Если ЗначениеЗаполнено(НайденаяЗапись) Тогда
			ОбъектПриемник = НайденаяЗапись.ПолучитьОбъект();
			Попытка
				ОбъектПриемник.Заблокировать();
			Исключение
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;	
		Иначе
			
			ОбъектПриемник = МенеджерОбъекта.СоздатьДокумент();							
		КонецЕсли;
		
	Иначе	
		ВызватьИсключение НСтр("Обработку справочников необходимо доработать");
	КонецЕсли;
	
	ПравилаКонвертации = МенеджерОбъекта.ИнициализацияПравилКонвертацийСвойств();
	ОбработатьОбъектКонвертации(ПравилаКонвертации, ДанныеОбъекта, ОбъектПриемник);
	КомпонентыОбмена.ЗагруженныеОбъектыСеансаОбмена.Добавить(ОбъектПриемник.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ТипКонтрактаXDTO(ТипКонтракта) Экспорт
	
	ПространствоИмен = ОсновноеПространствоИмен();

	Возврат ФабрикаXDTO.Тип(ПространствоИмен, ТипКонтракта);
	
КонецФункции

Функция ОсновноеПространствоИмен() Экспорт
	
	Возврат "http://sodrugestvo.com/srpv-messages/1.00";
	
КонецФункции

// Инициализирует таблицу правил конвертации объекта.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пустая таблица значений с колонками.
//		- СвойствоКонфигурации 				- имя реквизита кофигурации для заполнения
//		- СвойствоИсточника 				- имя свойства источника для получения значения данных заполнения
//		- ИспользуетсяАлгоритмКонвертации 	- признак использования обработчика заполнения
//		- ПравилоКонвертацииСвойства 		- имя процедуры обработчика заполнения свойства
//
Функция ИнициализацияПравилКонвертацийСвойств() Экспорт
	
	ПравилаКонвертации = Новый ТаблицаЗначений;
	ПравилаКонвертации.Колонки.Добавить("СвойствоКонфигурации");
	ПравилаКонвертации.Колонки.Добавить("СвойствоИсточника");
	ПравилаКонвертации.Колонки.Добавить("ИспользуетсяАлгоритмКонвертации");
	ПравилаКонвертации.Колонки.Добавить("ПравилоКонвертацииСвойства");
		
	Возврат ПравилаКонвертации;
	
КонецФункции

// Заполняет строку правил конвертации значениями.
//
// Параметры:
//  ПравилаКонвертации - СтрокаТаблицыЗначений - строка таблицы правил конвертации.
//  СвойствоКонфигурации - Строка - имя реквизита кофигурации для заполнения.
//	СвойствоИсточника - Строка - имя свойства источника для получения значения данных заполнения
//	ИспользуетсяАлгоритмКонвертации - Число	- 1 если используется обработчик заполнения, 0 - обработчик не используется
//	ПравилоКонвертацииСвойства - Строка	- имя процедуры обработчика заполнения свойства
// 
Процедура ДобавитьПКС(ПравилаКонвертации, СвойствоКонфигурации, СвойствоИсточника, ИспользуетсяАлгоритмКонвертации = 0, 
		ПравилоКонвертацииСвойства = "") Экспорт
	
	НоваяСтрока                                 = ПравилаКонвертации.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоИсточника               = СвойствоИсточника;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаВходящихСообщений

Процедура ОбработатьОбъектКонвертации(ПравилаКонвертации, ПолученныеДанные, ОбъектКонфигурации)
	
	МетаданныеОбъекта = ОбъектКонфигурации.Метаданные();
	
	Если гкс_ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
		МенеджерОбъекта = Документы[МетаданныеОбъекта.Имя];	
	ИначеЕсли гкс_ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
		МенеджерОбъекта = Справочники[МетаданныеОбъекта.Имя];
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип загрузки'");	
	КонецЕсли;	
		
	ДанныеЗаполнения = Новый Структура;		
	Для Каждого ПравилоКонвертации Из ПравилаКонвертации Цикл
		
		Если ПравилоКонвертации.ИспользуетсяАлгоритмКонвертации Тогда
			МенеджерОбъекта.ВыполнитьПроцедуруОбработчикаЗаполнения(ПравилоКонвертации, ПолученныеДанные, ДанныеЗаполнения);
		Иначе
			НайденноеЗначение = Неопределено;
			Если ПолученныеДанные.Свойство(ПравилоКонвертации.СвойствоИсточника, НайденноеЗначение) Тогда
				ДанныеЗаполнения.Вставить(ПравилоКонвертации.СвойствоКонфигурации, НайденноеЗначение);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ОбъектКонфигурации, ДанныеЗаполнения);
	ПровестиГенерациюКодаНомераПриНеобходимости(ОбъектКонфигурации);
	
	Если ПолученныеДанные.Свойство("Method")
		И ПолученныеДанные.Method = "Delete" Тогда
		ОбъектКонфигурации.ПометкаУдаления = Истина;
	Иначе
		ОбъектКонфигурации.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Попытка
		
		Если гкс_ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда			
			РежимЗаписи = ?(ОбъектКонфигурации.ПометкаУдаления, 
				РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Проведение);
				
			ОбъектКонфигурации.Записать(РежимЗаписи);
		Иначе	
			ОбъектКонфигурации.Записать();
		КонецЕсли;
		
	Исключение
			
		СообщениеОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());	
			
		ЗаписьЖурналаРегистрации(
			"Интеграция СРПВ. Обработка сообщений",
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось записать %1'"), ОбъектКонфигурации);			
		ВызватьИсключение ТекстОшибки;	
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

Функция ТипОперацииПоДаннымСообщения(ДанныеОбъекта)
	
	МэппингТиповРегистрации = Новый Соответствие();
	МэппингТиповРегистрации.Вставить(0, Перечисления.гкс_ТипРегистрации.Отгрузка);
	МэппингТиповРегистрации.Вставить(1, Перечисления.гкс_ТипРегистрации.Приемка);
	
	Возврат МэппингТиповРегистрации.Получить(ДанныеОбъекта.OperType);
		
КонецФункции	

// Преобразует объект XDTO в структуру
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO
// 
// Возвращаемое значение:
//  Структура - Структура объекта.
//
Функция ОбъектXDTOВСтруктуру(ОбъектXDTO)
	
	Структура = Новый Структура;

	Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
		
		ИмяСвойства      = Свойство.Имя;
		ЗначениеСвойства = ОбъектXDTO[ИмяСвойства];
		ТипЗначенияСвойства = ТипЗнч(ЗначениеСвойства);
		
		Если ТипЗначенияСвойства = Тип("ОбъектXDTO") Тогда
			
			Если ЗначениеСвойства.Свойства().Получить("value") <> Неопределено Тогда			
				ЗначениеСвойства_value = ЗначениеСвойства.Получить("value");
				Структура.Вставить(ИмяСвойства, ЗначениеСвойства_value);
			Иначе
				Структура.Вставить(ИмяСвойства, ОбъектXDTOВСтруктуру(ЗначениеСвойства));
			КонецЕсли;
			
		ИначеЕсли ТипЗначенияСвойства = Тип("СписокXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, Новый Массив);
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				
				ЭлементСписка = ЗначениеСвойства.Получить(Индекс);
				Если ТипЗнч(ЭлементСписка) = Тип("ОбъектXDTO") Тогда
					Структура[ИмяСвойства].Добавить(ОбъектXDTOВСтруктуру(ЭлементСписка));
				Иначе
					Структура[ИмяСвойства].Добавить(ЭлементСписка);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Структура.Вставить(ИмяСвойства, ЗначениеСвойства);						
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Процедура ПровестиГенерациюКодаНомераПриНеобходимости(Объект)
	
	ОбъектыСНомером = "Документ, БизнесПроцесс, Задача";
	ОбъектыСКодом = "Справочник, ПланВидовХарактеристик";
	
	ИмяТипаОбъекта = гкс_ОбщегоНазначения.ВидОбъектаПоТипу(ТипЗнч(Объект.Ссылка));
	
	// По типу документа смотрим заполнен код или номер.
	Если СтрНайти(ОбъектыСНомером, ИмяТипаОбъекта) > 0 
		И Не ЗначениеЗаполнено(Объект.Номер) Тогда
			
		Объект.УстановитьНовыйНомер();
					
	ИначеЕсли СтрНайти(ОбъектыСКодом, ИмяТипаОбъекта) > 0 
		И Не ЗначениеЗаполнено(Объект.Код)
		И Объект.Метаданные().Автонумерация Тогда
			
		Объект.УстановитьНовыйКод();
	Иначе
		Возврат;				
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти