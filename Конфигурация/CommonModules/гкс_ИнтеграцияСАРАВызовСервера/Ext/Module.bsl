// @strict-types

#Область ПрограммныйИнтерфейс

// Записать в файл.
// 
// Параметры:
//  СсылкаНаНомерПробы - ДокументСсылка.гкс_ФормированиеНомераПробы - 
// 
// Возвращаемое значение:
//  Структура - Записать в файл:
// * ИмяФайла - Строка -
//
Функция ЗаписатьВФайл(СсылкаНаНомерПробы) Экспорт
	
	ДанныеПробы = ДанныеПробы(СсылкаНаНомерПробы);
		
	ИмяФайлаСАРАДляЗаписи = ПолучитьПолноеИмяФайлаСАРАДляЗаписиПоПараметрам(ДанныеПробы);
	СтрокаДляЗаписиВФайлСАРА = ПолучитьДанныеСАРАДляЗаписиПоПараметрам(ДанныеПробы);
	
	ФайловыйПоток = Новый ФайловыйПоток(ИмяФайлаСАРАДляЗаписи, 
	                                    РежимОткрытияФайла.ОткрытьИлиСоздать, 
										ДоступКФайлу.Запись);
										
	ЗаписьДанных = Новый ЗаписьДанных(ФайловыйПоток, КодировкаТекста.UTF8);
	ЗаписьДанных.ЗаписатьСтроку(СтрокаДляЗаписиВФайлСАРА);
	
	ЗаписьДанных.Закрыть();
	
	Файл = Новый Файл(ИмяФайлаСАРАДляЗаписи);
	
	РезультатЗаписи = Новый Структура;
	РезультатЗаписи.Вставить("ИмяФайла", Файл.Имя);
			
	Возврат РезультатЗаписи;
			
КонецФункции

// Проверка на разрешение для формирования файла для САРА 
// 
// Параметры:
//  ФормированиеНомераПробы - ДокументСсылка.гкс_ФормированиеНомераПробы - 
// 
// Возвращаемое значение:
//  Булево - Истина, когда включена функциональная опция интеграции с САРА и передан документ формирования проб
//
Функция ВозможноФормироватьФайлСАРА(ФормированиеНомераПробы) Экспорт
	
	Если Не (ПолучитьФункциональнуюОпцию("гкс_ИспользоватьИнтеграциюССАРА")
		И ЗначениеЗаполнено(ФормированиеНомераПробы)) Тогда	
		Возврат Ложь;
	КонецЕсли;	
		
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФормированиеНомераПробы, "ТипПробы, НомерПробы");
	
	Если ЗначенияРеквизитов.ТипПробы = Перечисления.гкс_ТипыПроб.Единичная
		И ЗначениеЗаполнено(ЗначенияРеквизитов.НомерПробы) И ФормированиеНомераПробы.Проведен Тогда
		
		Возврат Истина;		
	Иначе	
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Данные пробы.
// 
// Параметры:
//  СсылкаНаНомерПробы - ДокументСсылка.гкс_ФормированиеНомераПробы - Ссылка на номер пробы
// 
// Возвращаемое значение:
//  Структура - Данные пробы:
// 			* НомерПробы - Строка -
// 			* Номер - Строка -
// 			* ВидЗерна - Строка -
// 			* ДатаИВремя - Строка -
// 			* ТипПробы - ПеречислениеСсылка.гкс_ТипыПроб -
//
Функция ДанныеПробы(СсылкаНаНомерПробы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаНомерПробы);
	Запрос.Текст = ТекстЗапросаДанныеПробы();
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru='Не обнаружены данные пробы. Возможно проба была удалена'");
	КонецЕсли;
	
	ДанныеПробыВТаблице = РезультатЗапроса.Выгрузить();
	
	СтрокаОписаниеПробы = ДанныеПробыВТаблице[0];
	ДатаПробы = СтрокаОписаниеПробы.Дата;
	
	ДанныеПробыВСтруктуре = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаОписаниеПробы);	
	ДанныеПробыВСтруктуре.Вставить("ДатаИВремя", Формат(ДатаПробы, "ДФ=yyyyMMddhhmmss000"));
	
	Возврат ДанныеПробыВСтруктуре;
	
КонецФункции

Функция ПолучитьДанныеСАРАДляЗаписиПоПараметрам(ДанныеПробы)

	Шаблон = "%1,%2,%3,%4";
	
	Результат =  СтрШаблон(Шаблон,
	                  ДанныеПробы.НомерПробы,
					  ДанныеПробы.Номер,
					  ДанныеПробы.ВидЗерна,
					  ДанныеПробы.ДатаИВремя);
					  
	Возврат Результат;
		
КонецФункции

Функция ПолучитьПолноеИмяФайлаСАРАДляЗаписиПоПараметрам(ДанныеПробы)
	
	ПутьККаталогу = гкс_РаботаСНастройками.КаталогСАРА();
					
	ПоноеИмяФайлаШаблон = "%1\Input_%2_%3.cvs";
	
	Возврат СтрШаблон(ПоноеИмяФайлаШаблон,
					  ПутьККаталогу,
	                  ДанныеПробы.Номер,
					  ДанныеПробы.НомерПробы);

КонецФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаДанныеПробы()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументФормированиеНомераПробы.Дата КАК Дата,
	|	ДокументФормированиеНомераПробы.ТипПробы КАК ТипПробы,
	|	ЕСТЬNULL(НомераПроб.Код, """") КАК НомерПробы
	|ПОМЕСТИТЬ ВТ_ДанныеШапки
	|ИЗ
	|	Документ.гкс_ФормированиеНомераПробы КАК ДокументФормированиеНомераПробы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_НомерПробы КАК НомераПроб
	|		ПО ДокументФормированиеНомераПробы.НомерПробы = НомераПроб.Ссылка
	|ГДЕ
	|	ДокументФормированиеНомераПробы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВсеФормированированияПроб.Дата КАК ДатаСреза,
	|	РегистрацииПЛК.Ссылка КАК СсылкаНаРегистрацию,
	|	РегистрацииПЛК.Номенклатура КАК Номенклатура,
	|	РегистрацииПЛК.ВидПеревозки КАК ВидПеревозки
	|ПОМЕСТИТЬ ВТ_ДанныеРегистрацииДляОтбора
	|ИЗ
	|	Документ.гкс_ФормированиеНомераПробы.СписокРегистраций КАК ТЧ_ФормированияПробыСписокРегистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК РегистрацииПЛК
	|		ПО ТЧ_ФормированияПробыСписокРегистрации.ДокументРегистрации = РегистрацииПЛК.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ФормированиеНомераПробы КАК ВсеФормированированияПроб
	|		ПО ТЧ_ФормированияПробыСписокРегистрации.Ссылка = ВсеФормированированияПроб.Ссылка
	|ГДЕ
	|	ТЧ_ФормированияПробыСписокРегистрации.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатураПЛК.ВидЗерна КАК ВидЗерна,
	|	НоменклатураПЛК.Период КАК Период
	|ПОМЕСТИТЬ ВТ_ДанныеПоВидуЗерна
	|ИЗ
	|	ВТ_ДанныеРегистрацииДляОтбора КАК ВТДанныеРегистрацииДляОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гкс_НоменклатураПЛК КАК НоменклатураПЛК
	|		ПО ВТДанныеРегистрацииДляОтбора.ДатаСреза >= НоменклатураПЛК.Период
	|			И ВТДанныеРегистрацииДляОтбора.Номенклатура = НоменклатураПЛК.Номенклатура
	|			И ВТДанныеРегистрацииДляОтбора.ВидПеревозки = НоменклатураПЛК.ВидПеревозки
	|			И (НоменклатураПЛК.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гкс_ОборудованиеПЛК.Номер КАК Номер
	|ПОМЕСТИТЬ ВТ_ДанныеВесовРегистрации
	|ИЗ
	|	ВТ_ДанныеРегистрацииДляОтбора КАК ВТДанныеРегистрацииДляОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_Взвешивание КАК ДокументВзвешивания
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гкс_ОборудованиеПЛК КАК гкс_ОборудованиеПЛК
	|			ПО ДокументВзвешивания.Весы = гкс_ОборудованиеПЛК.Ссылка
	|		ПО ВТДанныеРегистрацииДляОтбора.СсылкаНаРегистрацию = ДокументВзвешивания.ДокументРегистрации
	|			И (ДокументВзвешивания.ТипВзвешивания = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Въезд))
	|			И (ДокументВзвешивания.Проведен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеШапки.Дата КАК Дата,
	|	ВТДанныеШапки.ТипПробы КАК ТипПробы,
	|	ВТДанныеШапки.НомерПробы КАК НомерПробы,
	|	"""" КАК ВидЗерна,
	|	"""" КАК Номер
	|ПОМЕСТИТЬ ВТ_ИтоговаяБезГруппировки
	|ИЗ
	|	ВТ_ДанныеШапки КАК ВТДанныеШапки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ЗНАЧЕНИЕ(Перечисление.гкс_ТипыПроб.ПустаяСсылка),
	|	"""",
	|	ВТДанныеПоВидуЗерна.ВидЗерна,
	|	""""
	|ИЗ
	|	ВТ_ДанныеПоВидуЗерна КАК ВТДанныеПоВидуЗерна
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ЗНАЧЕНИЕ(Перечисление.гкс_ТипыПроб.ПустаяСсылка),
	|	"""",
	|	"""",
	|	ВТДанныеВесовРегистрации.Номер
	|ИЗ
	|	ВТ_ДанныеВесовРегистрации КАК ВТДанныеВесовРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_ИтоговаяБезГруппировки.НомерПробы) КАК НомерПробы,
	|	МАКСИМУМ(ВТ_ИтоговаяБезГруппировки.Номер) КАК Номер,
	|	МАКСИМУМ(ВТ_ИтоговаяБезГруппировки.ВидЗерна) КАК ВидЗерна,
	|	МАКСИМУМ(ВТ_ИтоговаяБезГруппировки.Дата) КАК Дата,
	|	МАКСИМУМ(ВТ_ИтоговаяБезГруппировки.ТипПробы) КАК ТипПробы
	|ИЗ
	|	ВТ_ИтоговаяБезГруппировки КАК ВТ_ИтоговаяБезГруппировки";
	
	Возврат ТекстЗапроса;
		
КонецФункции

#КонецОбласти

#КонецОбласти
