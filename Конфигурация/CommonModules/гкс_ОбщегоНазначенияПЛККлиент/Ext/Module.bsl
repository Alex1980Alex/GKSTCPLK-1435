// @strict-types

#Область ПрограммныйИнтерфейс

#Область ЗаписьОбъектов

// Записать объект и замерить длительность его записи.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма в которой выполняется вызов этой функции.
//  ЕстьВопросыПередЗаписью - Булево - Истина, если при записи могут отображаться вопросы пользователю.
//  ДействиеПослеЗаписи - ОписаниеОповещения - обработчик, выполняемый после записи объекта.
//
Процедура Записать(Форма, ЕстьВопросыПередЗаписью = Ложь, ДействиеПослеЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиОбъекта();
	ПараметрыЗаписи.ЕстьВопросыПередЗаписью = ЕстьВопросыПередЗаписью;
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	ЗаписатьОбъект(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

// Записать объект, замерить длительность его записи и закрыть форму объекта.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма в которой выполняется вызов этой функции.
//  ЕстьВопросыПередЗаписью - Булево - Истина, если при записи могут отображаться вопросы пользователю.
//  ДействиеПослеЗаписи - ОписаниеОповещения - обработчик, выполняемый после записи объекта.
//
Процедура ЗаписатьИЗакрыть(Форма, ЕстьВопросыПередЗаписью = Ложь, ДействиеПослеЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиОбъекта();
	ПараметрыЗаписи.ЕстьВопросыПередЗаписью = ЕстьВопросыПередЗаписью;
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	ЗаписатьОбъектИЗакрыть(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

// Провести документ и замерить длительность его проведения.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма в которой выполняется вызов этой функции.
//  ЕстьВопросыПередЗаписью - Булево - Истина, если при записи могут отображаться вопросы пользователю.
//  ДействиеПослеЗаписи - ОписаниеОповещения - обработчик, выполняемый после записи объекта.
//
Процедура Провести(Форма, ЕстьВопросыПередЗаписью = Ложь, ДействиеПослеЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиОбъекта();
	ПараметрыЗаписи.ЕстьВопросыПередЗаписью = ЕстьВопросыПередЗаписью;
	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	ЗаписатьОбъект(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

// Провести документ, замерить длительность его проведения и закрыть форму документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма в которой выполняется вызов этой функции.
//  ЕстьВопросыПередЗаписью - Булево - Истина, если при проведении могут отображаться вопросы пользователю.
//  ДействиеПослеЗаписи - ОписаниеОповещения - обработчик, выполняемый после записи объекта.
//
Процедура ПровестиИЗакрыть(Форма, ЕстьВопросыПередЗаписью = Ложь, ДействиеПослеЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиОбъекта();
	ПараметрыЗаписи.ЕстьВопросыПередЗаписью = ЕстьВопросыПередЗаписью;
	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	ЗаписатьОбъектИЗакрыть(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

// Установить пометку удаления документа, имитирует стандартную команду пометки удаления документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа в которой выполняется вызов этой функции:
//  	* Объект - ДокументОбъект -
//
Процедура УстановитьПометкуУдаленияДокумента(Форма) Экспорт
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьПометкуУдаленияДокументаВопрос(Форма);
	
КонецПроцедуры

// Выполняет запись документа в форме
//
// Параметры:
//  Форма - РасширениеУправляемойФормыДляОбъектов - Форма документа в которой выполняется вызов этой функции:
//  	* Объект - ДокументОбъект -
//	ПараметрыЗаписи - Структура - 
//
Функция ЗаписатьОбъект(Форма, ПараметрыЗаписи)
	
	Перем Проведен, ДействиеПослеЗаписи;
	
	ОчиститьСообщения();
	
	Если Не ПараметрыЗаписи.ЕстьВопросыПередЗаписью Тогда
		Если Не Форма.Объект.Свойство("Проведен", Проведен) Тогда
			Проведен =  Ложь;
		КонецЕсли;
		
		Если Проведен И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
			ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ДействиеПослеЗаписи", ДействиеПослеЗаписи) Тогда
		ПараметрыЗаписи.Удалить("ДействиеПослеЗаписи");
	КонецЕсли;
	
	Результат = Форма.Записать(ПараметрыЗаписи);
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		Если Результат Тогда
			ВыполнитьОбработкуОповещения(ДействиеПослеЗаписи, Результат);
		КонецЕсли;
		
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет запись документа в форме
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа в которой выполняется вызов этой функции:
//  	* Объект - ДокументОбъект -
//	ПараметрыЗаписи - Структура - 
//
Процедура ЗаписатьОбъектИЗакрыть(Форма, ПараметрыЗаписи)
	
	ПараметрыЗаписи.ПринудительноЗакрытьФорму = Истина;
	ОчиститьСообщения();
	
	Если ПараметрыЗаписи.ЕстьВопросыПередЗаписью Тогда
		ПараметрыЗаписи.НовыйОбъект = Не ЗначениеЗаполнено(Форма.Объект.Ссылка);
		Форма.ПринудительноЗакрытьФорму = ПараметрыЗаписи.ПринудительноЗакрытьФорму;
		Форма.Записать(ПараметрыЗаписи);
	Иначе
		Если ЗаписатьОбъект(Форма, ПараметрыЗаписи) Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураПараметровЗаписиОбъекта()
	
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить("ЕстьВопросыПередЗаписью", Ложь);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Ложь);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

Процедура НачатьЗамерВремениЗаписиОбъекта(Форма, ПараметрыЗаписи)
	
	Перем ПринудительноЗакрытьФорму;
	Перем РежимЗаписи;
	
	Если Не ПараметрыЗаписи.Свойство("ПринудительноЗакрытьФорму", ПринудительноЗакрытьФорму) Тогда
		ПринудительноЗакрытьФорму = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("РежимЗаписи", РежимЗаписи) Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись И Не ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "Записать.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись И ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "ЗаписатьИЗакрыть.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение И Не ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "Провести.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение И ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "ПровестиИЗакрыть.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И Не ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "ОтменитьПроведение.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "ОтменитьПроведениеИЗакрыть.%1";
	КонецЕсли;
	
	ИмяКлючевойОперации = СтрШаблон(ШаблонКлючевойОперации, Форма.ИмяФормы);
	ОценкаПроизводительностиКлиент.ЗамерВремени(ИмяКлючевойОперации, Ложь,  Истина)
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерактивныеДействия

// Процедура позволяет установить период через стандартный диалог выбора периода
//
// Параметры:
//  Объект                - Произвольный - Объект в котором устанавливается значения периода
//  ПараметрыПериода      - Структура - структура со свойствами "ДатаНачала", "ДатаОкончания" и в значениях имена полей
//                              объекта, для свойства "Вариант" - значение варианта стандартного периода.
//  ОповещениеПослеВыбора - ОписаниеОповещения - Описание оповещение которое выполняется после установки периода. 
//                              Может быть установлена пост-обработка в месте вызова после выбора периода.
// 
Процедура РедактироватьПериод(Объект, ПараметрыПериода = Неопределено, ОповещениеПослеВыбора = Неопределено) Экспорт
	
	Если ПараметрыПериода = Неопределено Тогда
		ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачала", "ДатаОкончания");
	КонецЕсли;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
		Диалог.Период.ДатаНачала = Объект[ПараметрыПериода.ДатаНачала];
	КонецЕсли; 
	Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
		Диалог.Период.ДатаОкончания = Объект[ПараметрыПериода.ДатаОкончания];
	КонецЕсли; 
	Если ПараметрыПериода.Свойство("Вариант") Тогда
		Диалог.Период.Вариант = ПараметрыПериода.Вариант;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект",           Объект);
	ДополнительныеПараметры.Вставить("ПараметрыПериода", ПараметрыПериода);
	Если ОповещениеПослеВыбора <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеПослеВыбора", ОповещениеПослеВыбора);
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения(
		"РедактироватьПериодЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Диалог.Показать(Оповещение);

КонецПроцедуры


// Обработчик команды "Установить пометку удаления", вызываемой из формы документа. Имитирует стандартную команду.
//
// Параметры:
//  Форма	 - 	ЭтаФорма	- форма документа
//
Процедура УстановитьПометкуУдаленияДокументаВопрос(Форма)
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	
	НоваяПометкаУдаления = НЕ Форма.Объект.ПометкаУдаления;
	
	ЗаголовокВопроса = НСтр("ru = 'Изменение пометки удаления';
							|en = 'Change deletion mark'");
	Если НоваяПометкаУдаления Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Пометить ""%1"" на удаление?';
																					|en = 'Do you want to mark %1 for deletion?'"),Форма.Объект.Ссылка);
	Иначе
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Снять с ""%1"" пометку на удаление?';
																					|en = 'Do you want to clear a deletion mark for ""%1""?'"),Форма.Объект.Ссылка);
	КонецЕсли; 
	
	Дополнительныепараметры = Новый Структура;
	Дополнительныепараметры.Вставить("НоваяПометкаУдаления",НоваяПометкаУдаления);
	Дополнительныепараметры.Вставить("ДокументПроведен",Форма.Объект.Проведен);
	Дополнительныепараметры.Вставить("Форма",Форма);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПометкуУдаленияДокументаВопросЗавершение", ЭтотОбъект, Дополнительныепараметры);
	
	ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНет,60,,ЗаголовокВопроса);
	
КонецПроцедуры

// Обработчик оповещения ответа на вопрос об установке/снятии пометки удаления документа
//
//	Параметры:
//		РезультатВопроса 		- КодВозвратаДиалога 	- результат ответа на вопрос,
//		ДополнительныеПараметры - Структура 			- дополнительные параметры.
//
Процедура УстановитьПометкуУдаленияДокументаВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Перем НоваяПометкаУдаления, ДокументПроведен, Форма;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ДополнительныеПараметры.Свойство("НоваяПометкаУдаления", НоваяПометкаУдаления) Тогда
		НоваяПометкаУдаления = Ложь;
	КонецЕсли; 
	Если НЕ ДополнительныеПараметры.Свойство("ДокументПроведен", ДокументПроведен) Тогда
		ДокументПроведен = Ложь;
	КонецЕсли; 
	ДополнительныеПараметры.Свойство("Форма", Форма);
	
	Если НоваяПометкаУдаления И ДокументПроведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли; 
	
	Форма.Объект.ПометкаУдаления = НоваяПометкаУдаления;
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиОбъекта();
	ПараметрыЗаписи.Вставить("РежимЗаписи",РежимЗаписи);
	ЗаписатьОбъект(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыборПериодаИзСписка

// Процедура завершения для РедактироватьПериод()
// см. подробней для процедуры РедактироватьПериод.
Процедура РедактироватьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт 

	ПараметрыПериода = ДополнительныеПараметры.ПараметрыПериода;
	Объект           = ДополнительныеПараметры.Объект;
	Если Период <> Неопределено Тогда
		Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
			Объект[ПараметрыПериода.ДатаНачала]= Период.ДатаНачала;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
			Объект[ПараметрыПериода.ДатаОкончания]= Период.ДатаОкончания;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("Вариант") Тогда
			Объект[ПараметрыПериода.Вариант]= Период.Вариант;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеПослеВыбора") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеВыбора, Период);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
