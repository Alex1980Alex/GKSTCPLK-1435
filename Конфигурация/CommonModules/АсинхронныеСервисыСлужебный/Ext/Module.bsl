
#Область ПрограммныйИнтерфейс

// Добавляет обработчик вызова асинхронного сервиса
//
Процедура ДобавитьОбработчикВызова(Знач Обработчики, Знач ИмяСервиса, Знач ИмяМетода, Знач МетодОбработчик, Знач ВерсияПротокола = Неопределено) Экспорт
	
	Если ВерсияПротокола = Неопределено Тогда
		ВерсияПротокола = АсинхронныеСервисыПереопределяемый.ВерсияПротоколаRPCПоУмолчанию();
	КонецЕсли;
	
	ОписаниеОбработчика = Обработчики.Добавить();
	ОписаниеОбработчика.ИмяСервиса = ИмяСервиса;
	ОписаниеОбработчика.ИмяМетода  = ИмяМетода;
	ОписаниеОбработчика.МетодОбработчик = МетодОбработчик;
	ОписаниеОбработчика.ВерсияПротокола = ВерсияПротокола;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Вызов клиентской подсистемы для получения методов-обработчиков
//
Функция ПолучитьОбработчикиСообщений(Знач ИмяСервиса)
	
	Коллекция = ОчередьСообщенийПовтИсп.ПолучитьОбработчикиВызововRPC();
	Фильтр = Новый Структура;
	Фильтр.Вставить("ИмяОчереди", ИмяСервиса);
	
	Возврат Коллекция.Скопировать(Фильтр);
	
КонецФункции

// Вызывается регламентным заданием ОбработкаВызововАсинхронныхСервисов
//
// Параметры:
//   ИмяОчереди - Строка - Имя очереди
//   ИнтервалОжидания - Число - интервал ожидания в секундах
//   КлючСоединения - Строка - ключ соединения, например, псевдоним/код подключенного сервера из Справочника СерверыОчередейRMQ
//		(необязательно) Значение по умолчанию - пустая строка
//   ПодпискаНаОчередь - СправочникСсылка.ПодпискиНаОчередиСообщений - ссылка на подписку на очередь
//		(необязательно) Значение по умолчанию - Неопределено
//
Процедура СлушатьВызовыАсинхронногоСервиса(Знач ИмяОчереди, Знач ИнтервалОжидания = 0, Знач КлючСоединения = "", Знач ПодпискаНаОчередь = Неопределено, Знач ЧастотаПульса = Неопределено) Экспорт
	
	гкс_ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания("ОбработкаВызововАсинхронныхСервисов");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработчикиСообщений = ПолучитьОбработчикиСообщений(ИмяОчереди);
	Если ОбработчикиСообщений.Количество() = 0 Тогда
		ЗаписьЖурналаРегистрации("ПолучениеСообщений.Ошибка", УровеньЖурналаРегистрации.Предупреждение,,,
				НСтр("ru = 'В системе не зарегистрировано обработчиков сообщений'"));
		Возврат;
	КонецЕсли;
	
	Получатель = ОчередьСообщений.НовыйАсинхронныйСервис(ИмяОчереди, КлючСоединения);
	
	ВерсияПротокола = Неопределено;
	Для каждого Элемент из ОбработчикиСообщений Цикл
		Получатель.ДобавитьМетод(Элемент.ИмяМетода, Элемент.МетодОбработчик);
		ВерсияПротокола = Элемент.ВерсияПротокола;
	КонецЦикла;
	
	ОчередьСообщений.ОпределитьПульс(ЧастотаПульса, ИнтервалОжидания);
	
	Получатель.ВерсияПротоколаRPC = ВерсияПротокола;
	Получатель.СлушатьВызовы(ИнтервалОжидания * 1000, ЧастотаПульса);
	
	ЗаписьЖурналаРегистрации("ПолучениеСообщений.Завершение", УровеньЖурналаРегистрации.Информация,,,
				СтрШаблон(НСтр("ru = 'Получены все сообщения из очереди %1'"), ИмяОчереди));
	
КонецПроцедуры

// Создает таблицу обработчиков событий очередей
//
Функция НоваяКоллекцияРегистрацииОбработчиков() Экспорт
	
	КоллекцияРегистрацииОбработчиков = Новый ТаблицаЗначений;
	КоллекцияРегистрацииОбработчиков.Колонки.Добавить("ИмяСервиса", Новый ОписаниеТипов("Строка"));
	КоллекцияРегистрацииОбработчиков.Колонки.Добавить("ИмяМетода", Новый ОписаниеТипов("Строка"));
	КоллекцияРегистрацииОбработчиков.Колонки.Добавить("МетодОбработчик", Новый ОписаниеТипов("Строка"));
	КоллекцияРегистрацииОбработчиков.Колонки.Добавить("ВерсияПротокола", Новый ОписаниеТипов("Число"));
	
	Возврат КоллекцияРегистрацииОбработчиков;
	
КонецФункции

#КонецОбласти