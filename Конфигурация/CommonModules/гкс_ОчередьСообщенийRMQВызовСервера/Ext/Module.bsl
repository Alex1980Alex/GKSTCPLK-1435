#Область ПрограммныйИнтерфейс

// См. описание Справочники.гкс_ПолучателиДанныхRMQ.ЕстьПолучатели(ТипМетаданных) 
Функция ЕстьПолучатели(Знач ТипМетаданных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	Возврат Справочники.гкс_ПолучателиДанныхRMQ.ЕстьПолучатели(ТипМетаданных);
	
КонецФункции

Функция ЕстьПолучателиСОтложеннымФормированием(Знач ТипМетаданных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	Возврат Справочники.гкс_ПолучателиДанныхRMQ.ЕстьПолучателиСОтложеннымФормированием(ТипМетаданных);
	
КонецФункции

Функция ПолучателиRabbitMQПоТипуМетаданных(Знач ТипМетаданных, Знач ДопПараметры) Экспорт
	
	Если ТипМетаданных = Неопределено Тогда 
		ВызватьИсключение НСтр("ru='Не задан ""Тип выгружаемого объекта"". Список получателей определить невозможно'");		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);		
	Получатели = Справочники.гкс_ПолучателиДанныхRMQ.ПолучателиRabbitMQПоТипуМетаданных(ТипМетаданных, ДопПараметры);	
		
	Возврат Получатели;
		
КонецФункции

// Возвращает описание текущего приложения
// 
// Возвращаемое значение:
//  СправочникСсылка.гкс_УчастникиОбменаRMQ - ссылка на описание текущего приложения
//
Функция ТекущееПриложение() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат гкс_ОчередьСообщенийRMQПовтИсп.ТекущееПриложение();
	
КонецФункции

Функция ВключенОбменСRMQ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	Возврат гкс_ОчередьСообщенийRMQПовтИсп.ВключенОбменСRMQ();
	
КонецФункции

Функция ПриложениеПоКоду(Знач КодПриложения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Справочники.гкс_УчастникиОбменаRMQ.ПолучитьПриложениеПоКоду(КодПриложения);
	
КонецФункции

#Область ПроизвольныеНастройкиИнтеграций

// Возвращает свойства произвольной настройки 
//
// Параметры:
//  Настройка - СправочникСсылка.гкс_ПроизвольныеНастройкиИнтеграций - ссылка на настройку
//  ТипСвойств - Строка - описывает нужный тип свойств "Свойства", "ДопСвойства", "Все".
// 
// Возвращаемое значение:
// 	Структура - Структура, может содержать следующие ключи
//		*Свойства - Соотвествие - контейнер пар Ключ-Значение, где ключ всегда строка 
//		*ДопСвойства - Произвольный - Значение, содержащееся в хранилище ДопСвойств настройки
//
Функция ПолучитьСвойстваПроизвольнойНастройки(Настройка, ТипСвойств = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	Возврат Справочники.гкс_ПроизвольныеНастройкиИнтеграций.ПолучитьСвойства(Настройка, ТипСвойств);
	
КонецФункции

// Записывает свойства произвольной настройки 
//
// Параметры:
//  Настройка - СправочникСсылка.гкс_ПроизвольныеНастройкиИнтеграций - ссылка на настройку
// 	Структура - Структура, Неопределено - структура может содержать следующие ключи
//		*Свойства - Соотвествие - контейнер пар Ключ-Значение, где ключ всегда строка 
//		*ДопСвойства - Произвольный - Значение, содержащееся в хранилище ДопСвойств настройки
//
Процедура ЗаписатьСвойстваПроизвольнойНастройки(Настройка, Свойства = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	Справочники.гкс_ПроизвольныеНастройкиИнтеграций.ЗаписатьСвойства(Настройка, Свойства);
	
КонецПроцедуры

#КонецОбласти

// Запускает процесс обработки полученных ранее сообщений из очереди. Обрабатывает либо очередную 
// порцию необработанных сообщений, либо явно переданные в параметре "ПакетСообщений"
//
// Параметры:
//  ПакетСообщений - Неопределено, Массив из СправочникСсылка.гкс_ВходящиеСообщенияRMQ - порция обработки
//  ПотокСобытий - Неопределено, СправочникСсылка.гкс_ПотокиСобытий - поток событий для обработки
//
Процедура ЗапуститьОбработкуСообщенийОчереди(Знач ПакетСообщений = Неопределено, 
                                             Знач ПотокСобытий = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ПакетСообщений", ПакетСообщений);
	ПараметрыОбработки.Вставить("ПотокСобытий", ПотокСобытий);
	
	гкс_ОбработкаОчередиВходящихСообщенийRMQ.ОбработатьОчередь(ПараметрыОбработки);
		
КонецПроцедуры

// См. описание РегистрыСведений.гкс_ОтложеннаяОбработкаОбъектов.ОбъектВОчередиОтложеннойОбработки
Функция ОбъектВОчередиОтложеннойОбработки(Объект) Экспорт
    
    УстановитьПривилегированныйРежим(Истина);

    МенеджерОчереди = РегистрыСведений.гкс_ОтложеннаяОбработкаОбъектов;    
    Возврат МенеджерОчереди.ОбъектВОчередиОтложеннойОбработки(Объект);
    
КонецФункции

// Исключаемые получатели по подписке.
// 
// Параметры:
//  Подписка - СправочникСсылка.ПодпискиНаОчередиСообщений - 
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.гкс_ПолучателиДанныхRMQ - Исключаемые получатели по подписке
//
Функция ИсключаемыеПолучателиПоПодписке(Подписка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РегистрыСведений
	             .гкс_ИсключаемыеПолучателиПодписокНаОчередиСообщений
	             .ПоПодписке(Подписка);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиФорматовОбмена

Функция ПолучитьНастройкиФорматаED(Знач Формат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);		
	Возврат РегистрыСведений.гкс_НастройкиФорматовОбменаED.ПолучитьНастройки(Формат);

КонецФункции

#КонецОбласти

#Область НастройкиИнтеграционногоАдаптера

Функция ПолучитьОбщиеНастройкиФормата(Знач Формат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);		
	Возврат РегистрыСведений.гкс_НастройкиФорматовОбменаОбщие.ПолучитьНастройкиФормата(Формат);

КонецФункции

Функция НастройкаИнтеграционногоАдаптера(ИмяНастройки) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат РегистрыСведений.гкс_НастройкиИнтеграционногоАдаптера.ЗначениеНастройки(ИмяНастройки);
	
КонецФункции

Функция НастройкиИнтеграционногоАдаптера() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РегистрыСведений.гкс_НастройкиИнтеграционногоАдаптера.ПолучитьНастройки();
		
КонецФункции

Функция ПолучитьНастройкиИнтеграционногоАдаптераВСтруктуре() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РегистрыСведений.гкс_НастройкиИнтеграционногоАдаптера.ПолучитьНастройкиВСтруктуре();
		
КонецФункции

#КонецОбласти

#Область ОчередьОтложенногоФормирования

Процедура ЗафиксироватьВОчередиОтложенногоФормирования(Знач ОписаниеЭлемента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Справочники.гкс_ОчередьОтложенногоФормированияИсходящихСообщений.ЗафиксироватьВОчереди(ОписаниеЭлемента);
	
КонецПроцедуры

Процедура ПропуститьОбработкуЭлементаОчереди(ЭлементОчереди) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Справочники.гкс_ОчередьОтложенногоФормированияИсходящихСообщений.ПропуститьОбработкуЭлемента(ЭлементОчереди);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССообщениями

Процедура ЗафиксироватьСообщениеВОчереди(Сообщение, 
                                         КлючОбъекта = Неопределено, 
                                         Порядок = Неопределено,
                                         ПотокСобытий = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.гкс_ОчередьОбработкиВходящихСообщенийRMQ.ЗафиксироватьСообщениеВОчереди(Сообщение, 
	                                                                                         КлючОбъекта, 
																							 Порядок,
																							 ПотокСобытий);	
КонецПроцедуры

Процедура ОтметитьОбработкуСообщенияВОчереди(Сообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.гкс_ОчередьОбработкиВходящихСообщенийRMQ.ОтметитьОбработкуСообщенияВОчереди(Сообщение);  
	
КонецПроцедуры

Процедура УстановитьСостояниеВходящегоСообщения(Сообщение, Состояние, ДатаИзмененияСостояния = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.гкс_СостоянияВходящихСообщений.УстановитьСостояниеСообщения(Сообщение, 
	                                                                             Состояние, 
																				 ДатаИзмененияСостояния);  
	
КонецПроцедуры

Процедура УстановитьСостояниеИсходящегоСообщения(Сообщение, 
	                                             УчастникОбмена, 
												 Состояние, 
	                                             УниверсальнаяДатаСобытияВМиллисекундах, 
												 Текст = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.гкс_СостоянияИсходящихСообщений.УстановитьСостояниеСообщения(Сообщение,
	УчастникОбмена, Состояние, УниверсальнаяДатаСобытияВМиллисекундах, Текст);  

КонецПроцедуры

Процедура ЗафиксироватьПроблемуОбработкиОбъекта(Знач СтруктураПроблемы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.гкс_ПроблемыОбменаДанными.ЗафиксироватьПроблемуОбработкиОбъекта(СтруктураПроблемы);  
	
КонецПроцедуры

Процедура ОчиститьПроблемыОбъекта(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.гкс_ПроблемыОбменаДанными.ОчиститьПроблемыОбъекта(Объект);  
	
КонецПроцедуры

Функция ЕстьПроблемыПоОбъекту(Сообщение) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	Возврат РегистрыСведений.гкс_ПроблемыОбменаДанными.ЕстьПроблемыПоОбъекту(Сообщение); 
	
КонецФункции

Функция ОбъектПодходитПоУсловию(СсылкаНаОбъект, Условие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат гкс_ОчередьСообщенийRMQСлужебный.ОбъектПодходитПоУсловию(СсылкаНаОбъект, Условие);
	
КонецФункции

#КонецОбласти

#Область ОбработкаСообщенийОчередиRMQ

// Устарела. См. гкс_ОбработкаОчередиВходящихСообщенийRMQ.ОбработатьСообщенияОчереди
Процедура ОбработатьСообщенияОчереди(Знач ПакетСообщений = Неопределено, Знач ПотокСобытий = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	гкс_ОбработкаОчередиВходящихСообщенийRMQ.ОбработатьСообщенияОчереди(ПакетСообщений, ПотокСобытий);
		
КонецПроцедуры

Функция ОбработатьСообщениеИзОчереди(Знач СсылкаНаСообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Обработчик = Обработки.гкс_ОбработчикСообщенийRMQ.Создать();
	Обработчик.Инициализировать();
	
	ПакетСообщений = Новый Массив;
	ПакетСообщений.Добавить(СсылкаНаСообщение);
	
	Обработчик.ОбработкаПакетаСообщенийRMQ(ПакетСообщений);
	
	Возврат Обработчик;
	
КонецФункции

Процедура ЗапуститьОтложенноеФормированиеИсходящихСообщений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	ЭтоФайловаяБаза = гкс_ОбщегоНазначенияКлиентСервер.ИнформационнаяБазаФайловая();
	
	Если ЭтоФайловаяБаза Тогда	
		ОбработатьОчередьОтложенногоФормирования();		
	Иначе
		
		ПараметрыЗадания = Обработки.гкс_ОбработчикОчередиОтложенныхСообщений.ПараметыМетодаОбработки();
			
		Отбор = Новый Структура;
		Отбор.Вставить("Ключ", ПараметрыЗадания.Ключ);
		Отбор.Вставить("ИмяМетода", ПараметрыЗадания.ИмяМетода);
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
						
		АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		Если АктивныеЗадания.Количество() = 0 Тогда
			
			ПараметрыМетода = Новый Массив;
			
			ФоновыеЗадания.Выполнить(ПараметрыЗадания.ИмяМетода, 
			ПараметрыМетода, 
			ПараметрыЗадания.Ключ,
			ПараметрыЗадания.Наименование);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОчередьОтложенногоФормирования() Экспорт
	
	Обработчик = Обработки.гкс_ОбработчикОчередиОтложенныхСообщений.Создать();
	Обработчик.ОбработатьОчередь();
	
	Обработчик = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаОбъектовПоСсылке

Процедура ДобавитьОбъектВСписокВыгруженныхПоСсылке(Знач Ссылка, Знач Получатель) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.гкс_ДанныеОбъектовДляРегистрацииВОбменах.ДобавитьОбъектВФильтрРазрешенныхОбъектов(Ссылка, 
	                                                                                                   Получатель);	
КонецПроцедуры

Функция ОбъектУжеВыгруженПоСсылке(Знач Ссылка, Знач Получатель) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РегистрыСведений.гкс_ДанныеОбъектовДляРегистрацииВОбменах.ОбъектЕстьВРегистре(Ссылка, Получатель);
	
КонецФункции

#КонецОбласти

#КонецОбласти