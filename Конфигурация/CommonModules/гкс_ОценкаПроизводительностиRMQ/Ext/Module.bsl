#Область ПрограммныйИнтерфейс

// Начинает замер времени ключевой операции. Закончить замер нужно явно вызовом
// процедуры ЗакончитьЗамерВремени или ЗакончитьЗамерВремениТехнологический. 
// Требует наличия подсистемвы БСП  "Оценка производительности".
//
// Возвращаемое значение:
//	Число(14,0) - время UTC начала с точностью до миллисекунд.
//
Функция НачатьЗамерВремени() Экспорт
	
	ВремяНачала = 0;
	
	Если гкс_ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		Менеджер = гкс_ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности");
		
		ВремяНачала = Менеджер.НачатьЗамерВремени();
		
	КонецЕсли;
	
	Возврат ВремяНачала;
	
КонецФункции

// Завершает замер времени ключевой операции
// и записывает результат в регистр сведений ЗамерыВремени.
// Требует наличия подсистемвы БСП  "Оценка производительности.
//
// Параметры:
// 	КлючеваяОперация	- СправочникСсылка.КлючевыеОперации, Строка	- ключевая операция.
//	ВремяНачала			- Число										- универсальная дата в миллисекундах,
//								  				  					  возвращаемая при начале замера функцией ОценкаПроизводительности.НачатьЗамерВремени.
//	ВесЗамера			- Число										- количественный показатель замера, например количество строк в документе.
//	Комментарий			- Строка, Соответствие						- произвольная информация замера.
//  ВыполненСОшибкой	- Булево									- признак того, что замер не был выполнен до конца,
//
Процедура ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала, ВесЗамера = 1, Комментарий = Неопределено, 
	ВыполненСОшибкой = Ложь) Экспорт
	
	Если гкс_ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		Менеджер = гкс_ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности");
		
		Менеджер.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала, ВесЗамера, Комментарий);
		
	КонецЕсли;

КонецПроцедуры

// Завершает замер времени ключевой операции
// и записывает результат в регистр сведений ЗамерыВремениТехнологические.
// Требует наличия подсистемвы БСП  "Оценка производительности.
//
// Параметры:
// 	КлючеваяОперация	- СправочникСсылка.КлючевыеОперации, Строка - ключевая операция.
//	ВремяНачала			- Число										- универсальная дата в миллисекундах,
//								  				  					  возвращаемая при начале замера функцией ОценкаПроизводительности.НачатьЗамерВремени.
//	ВесЗамера			- Число										- количественный показатель замера, например количество строк в документе.
//	Комментарий			- Строка, Соответствие						- произвольная информация замера.
//
Процедура ЗакончитьЗамерВремениТехнологический(КлючеваяОперация, ВремяНачала, ВесЗамера = 1, 
	Комментарий = Неопределено) Экспорт
	
	Если гкс_ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		Менеджер = гкс_ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности");
		
		Менеджер.ЗакончитьЗамерВремениТехнологический(КлючеваяОперация, ВремяНачала, ВесЗамера, Комментарий);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗакончитьЗамерВремениФормированияСообщений(ВремяНачала, Событие, ТипКонтракта,
	КоличествоСообщений = Неопределено) Экспорт
	
	КлючеваяОперация = КлючеваяОперацияRMQ("ИнтеграцияRMQ.ФормированиеСообщений", Событие, ТипКонтракта);
	
	гкс_ОценкаПроизводительностиRMQ.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала, КоличествоСообщений);

КонецПроцедуры

Процедура ЗакончитьЗамерВремениЗагрузкиСообщений(ВремяНачала, Событие, ТипКонтракта) Экспорт
	
	КлючеваяОперация = КлючеваяОперацияRMQ("ИнтеграцияRMQ.ЗагрузкаСообщений", Событие, ТипКонтракта);
	
	гкс_ОценкаПроизводительностиRMQ.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлючеваяОперацияRMQ(ЗаголовокОперации = "ИнтеграцияRMQ", ИмяСобытия = Неопределено, Тема = Неопределено)
			
	ЧастиИмени = Новый Массив;
	РазделительЧастей = "."; 

	ЧастиИмени.Добавить(ЗаголовокОперации);
	
	Если ЗначениеЗаполнено(ИмяСобытия) Тогда
		
		ЧастиИмени.Добавить(ИмяСобытия);
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тема) Тогда
		
		ЧастиИмени.Добавить(Тема);
	
	КонецЕсли;

	ИмяКлючевойОперации = СтрСоединить(ЧастиИмени, РазделительЧастей);
	
	Возврат ИмяКлючевойОперации;
	
КонецФункции

#КонецОбласти