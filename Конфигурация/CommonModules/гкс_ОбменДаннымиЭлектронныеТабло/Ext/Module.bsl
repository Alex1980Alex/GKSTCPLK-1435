///////////////////////////////////////////////////////////////////////////////////////////////////////
// Модуль содержит серверные процедуры и функции для формирования сообщений электронной очереди 
// с помощью "Интеграцинного адаптера "Содружество" и отправки их в брокер RMQ 
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция СформироватьСообщение(Объект, Параметры) Экспорт
	
	Сообщение = "";
	Если Не ТипЗнч(Объект) = Тип("СправочникОбъект.гкс_ЭлектронныеТабло") Тогда
		Возврат Сообщение;
	КонецЕсли;
	
	ОбъектЭлектронноеТабло = СоздатьОбъект("Scoreboards");
	Если ЭтоТестововаяОтправка(Объект) Тогда	
		ДанныеЗаполненияЭлектронноеТабло = ПолучитьДанныеТестовойОтправки(Объект, Параметры);
	Иначе
		ДанныеЗаполненияЭлектронноеТабло = ПолучитьДанныеДляЗаполненияЭлектронногоТабло(Объект, Параметры);
	КонецЕсли;
	
	ЗаполнитьОбъектXDTOЭлектронноеТабло(ОбъектЭлектронноеТабло, ДанныеЗаполненияЭлектронноеТабло);
	
	ОбъектСообщение = СоздатьОбъект("Message");
	ОбъектСообщение.Scoreboards = ОбъектЭлектронноеТабло; 
	
	Сообщение = ОбщегоНазначения.ОбъектXDTOВСтрокуXML(ОбъектСообщение);
	
	Возврат Сообщение;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанныхДляЗаполненияТабло

Функция ПолучитьДанныеДляЗаполненияЭлектронногоТабло(ОбъектТабло, Параметры)
	
	ДанныеЗаполнения = Новый Структура;
	ЗаполнитьОсновныеСвойстваДанныхЗаполненияЭлектронногоТабло(ДанныеЗаполнения, ОбъектТабло);
	
	НастройкиТабло = НастройкиТабло(ОбъектТабло.Ссылка);
	Если Не ЗаполнятьСтрокиТаблоПоНастройкам(ОбъектТабло, НастройкиТабло) Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	ТаблицаСтрокТабло = ПустаяТаблицаСтрокТабло(ОбъектТабло);
	ЗаполнитьТаблицуСтрокТабло(ТаблицаСтрокТабло, ОбъектТабло, НастройкиТабло);
	
	ДанныеЗаполнения.Вставить("DataTable", ТаблицаСтрокТабло);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Процедура ЗаполнитьОбъектXDTOЭлектронноеТабло(ОбъектXDTO, ДанныеЗаполнения)
	
	ОбъектXDTO.Ip = ДанныеЗаполнения.Ip;
	ОбъектXDTO.Count = ДанныеЗаполнения.Count;
	ОбъектXDTO.AutoLine = ДанныеЗаполнения.AutoLine;
	ОбъектXDTO.Model = ДанныеЗаполнения.Model;
	
	Если Не ДанныеЗаполнения.Свойство("DataTable") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТабло = ДанныеЗаполнения.DataTable;
	ЭтоТаблицаСРучнымРаспределениемСтрок = ЕстьКолонкаТаблицыЗначений(ТаблицаТабло, "CoordY")
	                                   ИЛИ ЕстьКолонкаТаблицыЗначений(ТаблицаТабло, "Height");
	
	ОбъектXDTOТаблицаТабло = СоздатьОбъект("Scoreboards.DataTable");
	
	Для Каждого СтрокаТабло Из ТаблицаТабло Цикл
		
		ОбъектXDTOСтрокаТаблицыТабло = СоздатьОбъект("Scoreboards.DataTable.Line");
		//ЗаполнитьЗначенияСвойств(ОбъектXDTOСтрокаТаблицыТабло, СтрокаТабло);
		// при использовании метода ЗаполнитьЗначенияСвойств можно было получить
		// случай когда в существущем объекте xdto менялся порядок свойств и он 
		// дальнейшем не проходил валидацию с помощью метода ОбъектXDTO.Проверить();
		// актуально для ОбъектовXDTO с признаком упорядоченный. Платформа 8.3.18.1483
		ЗаполнитьСвойствоОбъектаXDTO(ОбъектXDTOСтрокаТаблицыТабло, "StringValue", СтрокаТабло.StringValue);
		ЗаполнитьСвойствоОбъектаXDTO(ОбъектXDTOСтрокаТаблицыТабло, "Font", СтрокаТабло.Font);
		ЗаполнитьСвойствоОбъектаXDTO(ОбъектXDTOСтрокаТаблицыТабло, "CoordX", СтрокаТабло.CoordX);
		ЗаполнитьСвойствоОбъектаXDTO(ОбъектXDTOСтрокаТаблицыТабло, "Size", СтрокаТабло.Size);
		ЗаполнитьСвойствоОбъектаXDTO(ОбъектXDTOСтрокаТаблицыТабло, "Alignment", СтрокаТабло.Alignment);
		ЗаполнитьСвойствоОбъектаXDTO(ОбъектXDTOСтрокаТаблицыТабло, "Width", СтрокаТабло.Width);
		ЗаполнитьСвойствоОбъектаXDTO(ОбъектXDTOСтрокаТаблицыТабло, "Color", СтрокаТабло.Color);
		
		Если ЭтоТаблицаСРучнымРаспределениемСтрок Тогда	
			ЗаполнитьСвойствоОбъектаXDTO(ОбъектXDTOСтрокаТаблицыТабло, "CoordY", СтрокаТабло.CoordY);
			ЗаполнитьСвойствоОбъектаXDTO(ОбъектXDTOСтрокаТаблицыТабло, "Height", СтрокаТабло.Height);		
		КонецЕсли;
		
		ОбъектXDTOТаблицаТабло["Line"].Добавить(ОбъектXDTOСтрокаТаблицыТабло);
	
	КонецЦикла;
	
	ОбъектXDTO["DataTable"] = ОбъектXDTOТаблицаТабло;
		
КонецПроцедуры

Процедура ЗаполнитьСвойствоОбъектаXDTO(ОбъектXDTO, ИмяСвойства, Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXDTO[ИмяСвойства] = Значение;
	
КонецПроцедуры

Функция ЕстьКолонкаТаблицыЗначений(Таблица, ИмяКолонки)
	
	Возврат Не Таблица.Колонки.Найти(ИмяКолонки) = Неопределено;
	
КонецФункции

Процедура ЗаполнитьОсновныеСвойстваДанныхЗаполненияЭлектронногоТабло(ДанныеЗаполнения, ОбъектТабло)
	
	ДанныеЗаполнения.Вставить("Ip", СтрЗаменить(ОбъектТабло.IPТабло, " ", ""));
	ДанныеЗаполнения.Вставить("Count", 		ПолучитьКоличествоСтрокТабло(ОбъектТабло));
	ДанныеЗаполнения.Вставить("AutoLine", 	ОбъектТабло.АвтоРаспределениеСтрок);
	ДанныеЗаполнения.Вставить("Model", 		ОбъектТабло.Модель);
	
КонецПроцедуры

Функция ПустаяТаблицаСтрокТабло(ОбъектТабло)
	
	ТаблицаТабло = Новый ТаблицаЗначений;
	
	КолонкиТаблицы = ТаблицаТабло.Колонки;
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	
	КолонкиТаблицы.Добавить("StringValue", ОписаниеТиповСтрока);
	КолонкиТаблицы.Добавить("Font", ОписаниеТиповСтрока);
	КолонкиТаблицы.Добавить("Size", ОписаниеТиповЧисло);
	КолонкиТаблицы.Добавить("Alignment", ОписаниеТиповСтрока);
	КолонкиТаблицы.Добавить("CoordX", ОписаниеТиповЧисло);
	КолонкиТаблицы.Добавить("Width", ОписаниеТиповЧисло);
	КолонкиТаблицы.Добавить("Color", ОписаниеТиповСтрока);
	
	Если Не ЕстьАвтоРаспределениеСтрокТабло(ОбъектТабло) Тогда
		КолонкиТаблицы.Добавить("CoordY", ОписаниеТиповЧисло);
		КолонкиТаблицы.Добавить("Height", ОписаниеТиповЧисло);
	КонецЕсли;
	
	Возврат ТаблицаТабло;

КонецФункции

Функция ЕстьАвтоРаспределениеСтрокТабло(ОбъектТабло)
	
	Возврат ОбъектТабло.АвтоРаспределениеСтрок;
	
КонецФункции

Функция ЗаполнятьСтрокиТаблоПоНастройкам(ОбъектТабло, НастройкиТабло)
	
	Возврат ОбъектТабло.КоличествоСтрокТабло > 0 И НЕ НастройкиТабло = Неопределено; 
	
КонецФункции

Функция НастройкиТабло(СсылкаНаТабло)
	
	Возврат гкс_ЭлектронныеТаблоВызовСервера.НастройкиЭлектронногоТабло(СсылкаНаТабло);
	
КонецФункции

Функция ПолучитьКоличествоСтрокТабло(ОбъектТабло)
	
	КоличествоСтрок = ОбъектТабло.КоличествоСтрокТабло;
	Если ОбъектТабло.ЕстьЗаголовок Тогда
		КоличествоСтрок = КоличествоСтрок + 1;
	КонецЕсли;
	
	Возврат КоличествоСтрок;
	
КонецФункции

Процедура ЗаполнитьТаблицуСтрокТабло(ТаблицаСтрокТабло, ОбъектТабло, НастройкиТабло)
	
	Запрос = Новый Запрос;
	
	ПодготовитьЗапросПолученияДанныхДляЗаполненияТаблицыСтрок(Запрос, ОбъектТабло, НастройкиТабло);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Иначе	
		ДанныеВТаблице = РезультатЗапроса.Выгрузить();		
	КонецЕсли;
	
	Если ОбъектТабло.ЕстьЗаголовок Тогда
		НомерСтроки = 0;       
		ДанныеСтроки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДанныеВТаблице[НомерСтроки]);
		
		ДополнительныеПараметры = Новый Структура;
		Если ДанныеСтроки.Свойство("ВидЗерна") Тогда
           ДополнительныеПараметры.Вставить("ВидЗерна", ДанныеСтроки.ВидЗерна);
		КонецЕсли;

		УстановитьЗаголовокВТаблицеОтображенияТабло(ТаблицаСтрокТабло, ОбъектТабло, ДополнительныеПараметры);
	КонецЕсли;
	
	КоличествоСтрокТабло = ОбъектТабло.КоличествоСтрокТабло;
	НастройкиСтрок = НастройкиЗаполненияСтрокЭлектронногоТабло(ОбъектТабло);
	
	КоличествоСтрокВНастройках = ?(ЗначениеЗаполнено(НастройкиСтрок), НастройкиСтрок.Количество(), 0);
	
	Для Каждого СтрокаТаблицыДанныхТабло Из ДанныеВТаблице Цикл
		
		Если ТаблицаСтрокТабло.Количество() >= КоличествоСтрокТабло Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаТабло = ТаблицаСтрокТабло.Добавить();
		СтрокаТабло["StringValue"] = ТекстСтрокиТаблоПоВиду(СтрокаТаблицыДанныхТабло, НастройкиТабло.ВидТабло);
		Если НЕ ЗначениеЗаполнено(СтрокаТабло["StringValue"]) Тогда
			Продолжить;
		КонецЕсли;
		
		ИзменитьЦветСтрокиПоСостояниюРегистрации(СтрокаТабло, СтрокаТаблицыДанныхТабло.Состояние);
		
		НомерСтроки = ДанныеВТаблице.Индекс(СтрокаТаблицыДанныхТабло) + 1; 
		Если КоличествоСтрокВНастройках >= НомерСтроки Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТабло, НастройкиСтрок[НомерСтроки - 1]);
		ИначеЕсли КоличествоСтрокВНастройках > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТабло, НастройкиСтрок[0]);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьЦветСтрокиПоСостояниюРегистрации(СтрокаТабло, Состояние)
	
	СостоянияРегистрации = Перечисления.гкс_СостоянияРегистрации;

	ЦветаШрифтаСостояний = Новый Соответствие;
	ЦветаШрифтаСостояний.Вставить(СостоянияРегистрации.ВыгрузкаРазрешена, ЦветШрифта("желтый"));
	ЦветаШрифтаСостояний.Вставить(СостоянияРегистрации.КачествоНеПринято, ЦветШрифта("белый"));
	ЦветаШрифтаСостояний.Вставить(СостоянияРегистрации.РезультатыПробПолучены, ЦветШрифта("красный"));
	
	ЦветаШрифта = ЦветаШрифтаСостояний.Получить(Состояние);
	
	СтрокаТабло.Color = ЦветаШрифта;
	
КонецПроцедуры

Функция ЦветШрифта(НазваниеЦвета)
	
	НомераЦветов = Новый Соответствие;
	НомераЦветов.Вставить("зеленый", 	"#3CB371");
	НомераЦветов.Вставить("желтый", 	"#ffff00");
	НомераЦветов.Вставить("красный", 	"#B22222");
	НомераЦветов.Вставить("белый", 		"#E0FFFF");

	НомерЦвета = НомераЦветов.Получить(НазваниеЦвета);

	Возврат ?(НомерЦвета = Неопределено, "", НомерЦвета);

КонецФункции

Функция ТекстСтрокиТаблоПоВиду(ДанныеТабло, ВидТабло) 
	
	ВидыТабло = Перечисления.гкс_ВидыЭлектронныхТабло;
	НомерАвто = Строка(ДанныеТабло.Авто);

	Если ВидТабло = ВидыТабло.НазначениеНаВесы ИЛИ ВидТабло = ВидыТабло.НеПрошедшиеРегистрацию Тогда	

		ТекстСтроки = СтрШаблон("%1 %2", НомерАвто, Формат(ДанныеТабло.ЗаписьВОчередь, "ДФ=HH:mm"));

	ИначеЕсли ВидТабло = ВидыТабло.НазначениеНаВыгрузку Тогда

		ТекстСтроки = НомерАвто;

	ИначеЕсли ВидТабло = ВидыТабло.ОжиданияПроб Тогда

		Если ЗначениеЗаполнено(ДанныеТабло.ЯмаРазгрузки)  Тогда

			ПунктРазгрузкиСтрокой = СокрЛП(ДанныеТабло.ЯмаРазгрузки);
			
			Если СтрНачинаетсяС(ПунктРазгрузкиСтрокой, "Яма") Тогда
				НомерЯмы = Прав(ПунктРазгрузкиСтрокой, 
					СтрДлина(ПунктРазгрузкиСтрокой) - СтрНайти(ПунктРазгрузкиСтрокой, ".", НаправлениеПоиска.СКонца));
					
				ТекстЯмаРазгрузки = СтрШаблон("Яма %1", НомерЯмы);
			Иначе	
				ТекстЯмаРазгрузки = ПунктРазгрузкиСтрокой;
			КонецЕсли;
			
		Иначе
			ТекстЯмаРазгрузки = НСтр("ru='Отклонено'");
		КонецЕсли;
	
		ТекстСтроки = СтрШаблон("%1 %2", НомерАвто, ТекстЯмаРазгрузки);
		
	Иначе	
		ТекстСтроки = "";
	КонецЕсли;	

	Возврат ТекстСтроки;
	
КонецФункции

Процедура УстановитьЗаголовокВТаблицеОтображенияТабло(ТаблицаСтрокТабло, ОбъектТабло, ДополнительныеПараметры = Неопределено)
		
	СтрокаТаблоЗаголовок = ТаблицаСтрокТабло.Добавить();
	СтрокаТаблоЗаголовок["StringValue"] = ОбъектТабло.ПолучитьЗаголовокТабло(Ложь, ДополнительныеПараметры);
	
	НастройкиЗаголовка = НастройкиЗаголовкаЭлектронногоТабло(ОбъектТабло);
	Если ЗначениеЗаполнено(НастройкиЗаголовка) Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблоЗаголовок, НастройкиЗаголовка); 
	КонецЕсли;
		
КонецПроцедуры

Функция НастройкиЗаполненияСтрокЭлектронногоТабло(ОбъектТабло)
	
	Возврат ОбъектТабло.НастройкиЗаполненияСтрок();
	
КонецФункции

Функция НастройкиЗаголовкаЭлектронногоТабло(ОбъектТабло)
	
	Возврат ОбъектТабло.НастройкиЗаголовка();
	
КонецФункции

Процедура ПодготовитьЗапросПолученияДанныхДляЗаполненияТаблицыСтрок(Запрос, ОбъектТабло, НастройкиТабло)
	
	Запрос = Новый Запрос;
		
	Запрос.УстановитьПараметр("Весы", 			НастройкиТабло.Весы);
	Запрос.УстановитьПараметр("ВидТабло", 		НастройкиТабло.ВидТабло);
	Запрос.УстановитьПараметр("Номенклатура", 	НастройкиТабло.Номенклатура);
	Запрос.УстановитьПараметр("ЯмаРазгрузки", 	НастройкиТабло.ЯмаРазгрузки);
	Запрос.УстановитьПараметр("ТочкаМаршрута", 	НастройкиТабло.ТочкаМаршрута);
	Запрос.УстановитьПараметр("ДатаСреза", 		ТекущаяДатаСеанса());
		 
	Запрос.Текст = РегистрыСведений.гкс_ЭлектронныеТабло.
		ТекстЗапросаПоВидуТаблоДляОтображения(Запрос.Параметры.ВидТабло);
	
	Если ЗначениеЗаполнено(ОбъектТабло.КоличествоСтрокТабло) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 4", 
			СтрШаблон("ПЕРВЫЕ %1", Формат(ОбъектТабло.КоличествоСтрокТабло, "ЧГ=0"))); 
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСТестовойОтправкой

Функция ЗаполнятьСтрокиТестовогоТаблоПоНастройкам(ОбъектТабло, НастройкиТабло)
	
	Возврат ОбъектТабло.ТестТабло.Количество() > 0 И НЕ НастройкиТабло = Неопределено; 
	
КонецФункции

Функция ПолучитьДанныеТестовойОтправки(ОбъектТабло, Параметры)
	
	ДанныеЗаполнения = Новый Структура;
	ЗаполнитьОсновныеСвойстваДанныхЗаполненияЭлектронногоТабло(ДанныеЗаполнения, ОбъектТабло);
	
	НастройкиТабло = НастройкиТабло(ОбъектТабло.Ссылка);
	Если НЕ ЗаполнятьСтрокиТестовогоТаблоПоНастройкам(ОбъектТабло, НастройкиТабло) Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	ТаблицаСтрокТабло = ПустаяТаблицаСтрокТабло(ОбъектТабло);	
	ЗаполнитьТаблицуСтрокТаблоТестоваяОтправка(ТаблицаСтрокТабло, ОбъектТабло, НастройкиТабло);
	
	ДанныеЗаполнения.Вставить("DataTable", ТаблицаСтрокТабло);
	
	Возврат ДанныеЗаполнения;

КонецФункции

Процедура ЗаполнитьТаблицуСтрокТаблоТестоваяОтправка(ТаблицаСтрокТабло, ОбъектТабло, НастройкиТабло)
		
	Если ОбъектТабло.ЕстьЗаголовок Тогда
		УстановитьЗаголовокВТаблицеОтображенияТабло(ТаблицаСтрокТабло, ОбъектТабло);	
	КонецЕсли;
	
	КоличествоСтрокТабло = ОбъектТабло.КоличествоСтрокТабло;
	НастройкиСтрок = НастройкиЗаполненияСтрокЭлектронногоТабло(ОбъектТабло);
	
	КоличествоСтрокВНастройках = ?(ЗначениеЗаполнено(НастройкиСтрок), 
	                               НастройкиСтрок.Количество(), 
								   0);
	
	Для Каждого СтрокаТаблицыДанныхТабло Из ОбъектТабло.ТестТабло Цикл
		
		Если ТаблицаСтрокТабло.Количество() >= КоличествоСтрокТабло Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаТабло = ТаблицаСтрокТабло.Добавить();
		СтрокаТабло["StringValue"] = СтрокаТаблицыДанныхТабло.СтрокаТабло;
		Если НЕ ЗначениеЗаполнено(СтрокаТабло["StringValue"]) Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = ОбъектТабло.ТестТабло.Индекс(СтрокаТаблицыДанныхТабло) + 1; 
		Если КоличествоСтрокВНастройках >= НомерСтроки Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТабло, НастройкиСтрок[НомерСтроки - 1]);
		ИначеЕсли КоличествоСтрокВНастройках > 0 Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаТабло, НастройкиСтрок[0]);
			
			Если РассчитыватьКоординатуYДляСтрокиТабло(ОбъектТабло, СтрокаТабло) Тогда
				СтрокаТабло.CoordY = СтрокаТабло.CoordY + СтрокаТабло.Height * (НомерСтроки - 1);
			КонецЕсли;	
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитыватьКоординатуYДляСтрокиТабло(ОбъектТабло, СтрокаТабло)
	
	Возврат НЕ ЕстьАвтоРаспределениеСтрокТабло(ОбъектТабло) 
			И НЕ СтрокаТабло.CoordY = 0 
			И НЕ СтрокаТабло.Height = 0;
				
КонецФункции

Функция ЭтоТестововаяОтправка(Объект)
	
	Возврат Объект.ДополнительныеСвойства.Свойство("ЭтоТест") 
	        И Объект.ДополнительныеСвойства["ЭтоТест"] = Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбщегоНазначения

Функция СоздатьОбъект(ТипОбъектаСтрокой, Знач ПространствоИмен = Неопределено)
	
	Если ПространствоИмен = Неопределено Тогда
		ПространствоИмен = ОсновноеПространствоИменЭлектроннаяОчередь();
	КонецЕсли;

	Возврат гкс_ОбщегоНазначения.СоздатьОбъект(ТипОбъектаСтрокой, ПространствоИмен);
	
КонецФункции

Функция СоздатьЗначение(ТипОбъектаСтрокой, ПространствоИмен, Значение)
	
	Возврат гкс_ОбщегоНазначения.СоздатьЗначение(ТипОбъектаСтрокой, ПространствоИмен, Значение);
	
КонецФункции

Функция ОсновноеПространствоИменЭлектроннаяОчередь()
	
	Возврат "http://sodrugestvo.com/onec-adapter/online-car-queue-acceptance";
	
КонецФункции

#КонецОбласти

#КонецОбласти
