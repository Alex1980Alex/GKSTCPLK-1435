#Область ПрограммныйИнтерфейс

Процедура ОбработатьСообщение(Текст, СвойстваСообщения, Подписка, Отказ, ВернутьВОчередь) Экспорт
	
	Попытка
		Сообщение = Справочники
		              .гкс_ВходящиеСообщенияRMQ
		              .СоздатьНовоеСообщениеПоПодписке(Текст, СвойстваСообщения, Подписка);	
		ДобавитьЛогическийПотокСообщенияВКонтекст(Сообщение);
		
		СинхронныйОтвет = (СвойстваСообщения["Заголовки"].Получить("SyncCallback") = Истина);
		Если СинхронныйОтвет Тогда		
			ЗапуститьСихроннуюОбработкуСообщенияОчереди(Сообщение);				
		КонецЕсли;	
	Исключение	
		ВызватьИсключение ОписаниеОшибки();			
	КонецПопытки;
		
КонецПроцедуры

Функция СоздатьСообщенияПоСобытиюОбъекта(Событие, ОбъектСобытия) Экспорт
	
	Если НЕ гкс_ОчередьСообщенийRMQВызовСервера.ВключенОбменСRMQ() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ФормировательСообщений = Обработки.гкс_ФормировательСообщенийRMQ.Создать();
	ФормировательСообщений.Инициализировать(ОбъектСобытия);
	ФормировательСообщений.УстановитьСобытие(Событие);
	ФормировательСообщений.СформироватьСообщенияПоСобытиюОбъекта();
	ФормировательСообщений.ЗаписатьСообщенияВИсходящие();
	
	Сообщения = ФормировательСообщений.ПолучитьИсходящиеСообщения();
	ФормировательСообщений = Неопределено;
	
	Возврат Сообщения;

КонецФункции

// Возвращает, можно ли пользователю редактировать "вручную" редактировать сообщения или элементы очереди
// без дополнительных контролей на консистентность
//
// Возвращаемое значение:
//  Булево - Истина, если разрешено.
//
Функция РазрешеноРучноеРедактированиеСообщений() Экспорт
	
	РазрешающаяРоль = Метаданные.Роли.гкс_РучноеРедактированиеСообщений;
	Возврат ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(РазрешающаяРоль);
	
КонецФункции

// Возвращает, можно ли пользователю "вручную" запускать получение сообщений из очереди
//
// Возвращаемое значение:
//  Булево - Истина, если разрешено.
//
Функция РазрешеноРучноеПолучениеСообщенийИзОчереди() Экспорт
	
	РазрешающаяРоль = Метаданные.Роли.ПолныеПрава;
	Возврат ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(РазрешающаяРоль);
	
КонецФункции

#Область ОбработчикиСобытийСообщений

// Общий алгоритм "ПередЗаписью" для всех сообщений (как входящих, так и исходящих)
// Параметры:
// 	СообщениеОбъект - СправочникОбъект.гкс_ВходящиеСообщенияRMQ, СправочникОбъект.ИсходящиеСообщения -
//  Отказ - Булево - признак отказа от записи сообщения
//
Процедура ПередЗаписьюСообщений(СообщениеОбъект, Отказ) Экспорт
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	ЗаполнитьИдентифкаторСообщения(СообщениеОбъект);	
	ЗаполнитьКорневойИдентифкаторСообщения(СообщениеОбъект);
	
КонецПроцедуры

// Общий алгоритм "ПередЗаписью" для всех состояний сообщений (как входящих, так и исходящих)
// Параметры:
// 	НаборЗаписей - РегистрСведенийНаборЗаписей.гкс_СостоянияВходящихСообщений, 
//                 РегистрСведенийНаборЗаписей.гкс_СостоянияИсходящихСообщений - 
//  Отказ - Булево - признак отказа от записи насбора состояния сообщения
//
Процедура ПередЗаписьюСостоянияСообщения(НаборЗаписей, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоСостояниеИсходящегоСообщения = 
	(ТипЗнч(НаборЗаписей) = Тип("РегистрСведенийНаборЗаписей.гкс_СостоянияИсходящихСообщений"));
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись["УниверсальнаяДатаСобытияВМиллисекундах"]) Тогда
			Запись["УниверсальнаяДатаСобытияВМиллисекундах"] = 
			ОчередьСообщенийВызовСервера.ТекущаяУниверсальнаяДатаВМиллисекундахНаСервере();			
		КонецЕсли;
		
		Если ЭтоСостояниеИсходящегоСообщения И НЕ ЗначениеЗаполнено(Запись["МестноеВремя"]) Тогда
			Запись["МестноеВремя"] = 
			гкс_ОчередьСообщенийRMQ.МестноеВремяИБ(Запись["УниверсальнаяДатаСобытияВМиллисекундах"]);					
		КонецЕсли;
					
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиПоНазначениям

Функция ПолучитьОбработчикСообщенийДляПереводаВСостояниеЗакрыто() Экспорт
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ОбрабатыватьВходящиеСообщения", Истина);
	ПараметрыОбработки.Вставить("ОбрабатыватьИсходящиеСообщения", Истина);
	
	Возврат Обработки
			.гкс_ОбработчикСообщенийДляПереводаВСостояниеЗакрыто
			.ПолучитьЭкземпляр(ПараметрыОбработки);
	
КонецФункции

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеСообщений

Процедура ДобавитьЛогическийПотокСообщенияВКонтекст(Сообщение)
	
	ПотокСобытий = РегистрыСведений.гкс_ОчередьОбработкиВходящихСообщенийRMQ.ПотокСобытийСообщения(Сообщение);
	гкс_КонтекстСервер.ДобавитьПотокВКонтекстПолученныхПотоков(ПотокСобытий);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодписокНаСобытия

Процедура ПередЗаписьюСправочниковСинхронизацииRMQ(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СобытиеПередЗаписьюОбъекта(Источник, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписьюДокументовСинхронизацииRMQ(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СобытиеПередЗаписьюОбъекта(Источник, Отказ);
	
КонецПроцедуры

Процедура ПриЗаписиСправочниковСинхронизацииRMQ(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СобытиеПриЗаписиОбъекта(Источник, Отказ);
	
КонецПроцедуры

Процедура ПриЗаписиДокументовСинхронизацииRMQ(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СобытиеПриЗаписиОбъекта(Источник, Отказ);
	
КонецПроцедуры

Процедура ПриЗаписиРегистровСинхронизацииRMQ(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СобытиеПриЗаписиРегистра(Источник, Отказ, Замещение);
	
КонецПроцедуры

Процедура ПередУдалениемСправочниковОбъектовСинхронизацииRMQ(Источник) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	СобытиеПередУдалениемОбъекта(Источник);
	
КонецПроцедуры

Процедура ПередУдалениемДокументовОбъектовСинхронизацииRMQ(Источник) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СобытиеПередУдалениемОбъекта(Источник);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияОбъектовИнтеграции

Процедура СобытиеПередУдалениемОбъекта(Объект)
	
	Если НЕ гкс_ОчередьСообщенийRMQВызовСервера.ВключенОбменСRMQ() 
 		ИЛИ Объект.ДополнительныеСвойства.Свойство("ПропуститьОтправкуВRMQ") Тогда		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнициализироватьДополнительныеСвойстваОбъекта(Объект);
	СоздатьСообщенияПоСобытиюОбъекта("УдалениеОбъекта", Объект);

КонецПроцедуры

Процедура СобытиеПриЗаписиРегистра(НаборЗаписей, Отказ, Замещение)
	
	Если Отказ ИЛИ НЕ РеагироватьНаСобытиеОбъекта(НаборЗаписей, "ЗаписьОбъекта") Тогда
		НаборЗаписей.ДополнительныеСвойства.Удалить("ДанныеСинхронизацииRMQ");
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнициализироватьДополнительныеСвойстваОбъекта(НаборЗаписей);	
	гкс_ОчередьСообщенийRMQПереопределяемый.ПриЗаписиРегистровСинхронизацииRMQ(НаборЗаписей);	
	
	// TODO: Доработать возможность отложенного формирования движений 
	//ОтложенноеФормированиеИсходящихСообщений(НаборЗаписей, "ЗаписьОбъекта");
	
	СоздатьСообщенияПоСобытиюОбъекта("ЗаписьОбъекта", НаборЗаписей);
	
КонецПроцедуры 

Процедура СобытиеПриЗаписиОбъекта(Объект, Отказ= Ложь)
	
	Если Отказ ИЛИ НЕ РеагироватьНаСобытиеОбъекта(Объект, "ЗаписьОбъекта") Тогда
		Объект.ДополнительныеСвойства.Удалить("ДанныеСинхронизацииRMQ");
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнициализироватьДополнительныеСвойстваОбъекта(Объект);	
	гкс_ОчередьСообщенийRMQПереопределяемый.ПриЗаписиОбъектовСинхронизацииRMQ(Объект, Отказ);		
	
	ОтложенноеФормированиеИсходящихСообщений(Объект, "ЗаписьОбъекта");
	
	СоздатьСообщенияПоСобытиюОбъекта("ЗаписьОбъекта", Объект);
	
КонецПроцедуры

Процедура СобытиеПередЗаписьюОбъекта(Объект, Отказ = Ложь)
	
	Если Отказ ИЛИ НЕ гкс_ОчередьСообщенийRMQВызовСервера.ВключенОбменСRMQ() 
		ИЛИ Объект.ДополнительныеСвойства.Свойство("ПропуститьОтправкуВRMQ") Тогда		
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
		
	ПодготовитьДополнительныеСвойстваОбъекта(Объект);
	ИнициализироватьДополнительныеСвойстваОбъекта(Объект);	
	гкс_ОчередьСообщенийRMQПереопределяемый.ПередЗаписьюОбъектовСинхронизацииRMQ(Объект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОтложенноеФормированиеСообщений

Процедура ОтложенноеФормированиеИсходящихСообщений(Объект, Событие)
	
	Если НЕ НеобходимоОтложенноеФормированиеИсходящихСообщений(Объект) Тогда
		Возврат;		
	КонецЕсли;
	
	ОписаниеЭлемента = Новый Структура;
	ОписаниеЭлемента.Вставить("Событие", Событие);
	ОписаниеЭлемента.Вставить("СсылкаНаОбъект", Объект.Ссылка);
	ОписаниеЭлемента.Вставить("ДанныеОбъекта", 
	                          гкс_ОбщегоНазначения.СериализованныеДанныеОбъектаВХранилищеЗначения2(Объект));
	
	гкс_ОчередьСообщенийRMQВызовСервера.ЗафиксироватьВОчередиОтложенногоФормирования(ОписаниеЭлемента);
	 	
КонецПроцедуры

Функция НеобходимоОтложенноеФормированиеИсходящихСообщений(Объект)
	
	ДанныеСинхронизацииRMQ = Объект.ДополнительныеСвойства.ДанныеСинхронизацииRMQ;
	Если ДанныеСинхронизацииRMQ.Свойство("ОтложенноеФормированиеИсходящихСообщений") Тогда 
		Возврат Истина;
	КонецЕсли;

	Если ДанныеСинхронизацииRMQ.Свойство("Получатели") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипМетаданных = Объект.Метаданные().ПолноеИмя();
	
	Если гкс_ОчередьСообщенийRMQПовтИсп.ЕстьПолучателиСОтложеннымФормированием(ТипМетаданных) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция РеагироватьНаСобытиеОбъекта(Объект, Событие)
	
	РеагироватьНаСобытиеОбъекта = гкс_ОчередьСообщенийRMQВызовСервера.ВключенОбменСRMQ()
	И НЕ Объект.ДополнительныеСвойства.Свойство("ПропуститьОтправкуВRMQ")
	И НЕ ОтсутствуютПолучатели(Объект);
	
	Возврат РеагироватьНаСобытиеОбъекта;
	
КонецФункции

#КонецОбласти

#Область ДопОбработкаСобытийСообщений

Процедура ЗаполнитьИдентифкаторСообщения(СообщениеОбъект)
	
	Если ЗначениеЗаполнено(СообщениеОбъект.ИдентификаторСообщения) Тогда
		Возврат;
	КонецЕсли;

	Если СообщениеОбъект.ЭтоНовый() Тогда
		
		МенеджерОбъекта = гкс_Общегоназначения.МенеджерОбъектаПоПолномуИмени(
		СообщениеОбъект.Метаданные().ПолноеИмя());
		
		СсылкаНаСообщение = МенеджерОбъекта.ПолучитьСсылку();
		СообщениеОбъект.УстановитьСсылкуНового(СсылкаНаСообщение);
		
	КонецЕсли;
	
	СообщениеОбъект.ИдентификаторСообщения = XMLСтрока(СсылкаНаСообщение); 
	
КонецПроцедуры

Процедура ЗаполнитьКорневойИдентифкаторСообщения(СообщениеОбъект)

	Если ЗначениеЗаполнено(СообщениеОбъект.КорневойИдентификаторСообщения) Тогда
		Возврат;	
	КонецЕсли;

	СообщениеОбъект.КорневойИдентификаторСообщения = СообщениеОбъект.ИдентификаторСообщения;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ЗапуститьСихроннуюОбработкуСообщенияОчереди(Сообщение) 
		
	ПакетСообщений = Новый Массив;
	ПакетСообщений.Добавить(Сообщение);

	Если гкс_ОбщегоНазначенияКлиентСервер.ИнформационнаяБазаФайловая() Тогда		
		гкс_ОбработкаОчередиВходящихСообщенийRMQ.ОбработатьСообщенияОчереди(ПакетСообщений);	
	Иначе
		
		ПараметрыМетода = Новый Массив;		
		ПараметрыМетода.Добавить(ПакетСообщений);
		
		ФоновыеЗадания.Выполнить("гкс_ОчередьСообщенийRMQВызовСервера.ОбработатьСообщенияОчереди",
		ПараметрыМетода, 
		XMLСтрока(Новый УникальныйИдентификатор), 
		гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Синхронная обработка сообщения %1",
		Строка(Сообщение)));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОтсутствуютПолучатели(Источник) 
	
	Перем ДанныеСинхронизацииRMQ;
	
	Источник.ДополнительныеСвойства.Свойство("ДанныеСинхронизацииRMQ", ДанныеСинхронизацииRMQ);
	ТипМетаданных = Источник.Метаданные().ПолноеИмя();
	
	ОтсуствуютПолучатели = (ТипЗнч(ДанныеСинхронизацииRMQ) = Тип("Структура") 
	И НЕ ДанныеСинхронизацииRMQ.Свойство("Получатели")) И НЕ гкс_ОчередьСообщенийRMQПовтИсп.ЕстьПолучатели(ТипМетаданных);
	
	Возврат ОтсуствуютПолучатели;
	
КонецФункции

Процедура ПодготовитьДополнительныеСвойстваОбъекта(Объект)
	
	Объект.ДополнительныеСвойства.Вставить("ОтложеннаяВыгрузка", Ложь);
	
КонецПроцедуры

Процедура ИнициализироватьДополнительныеСвойстваОбъекта(Источник) Экспорт
	Обработки.гкс_ФормировательСообщенийRMQ.ИнициализироватьСвойстваОбъекта(Источник, 
	                                                                        Источник.ДополнительныеСвойства);
КонецПроцедуры

#Область ФормированиеКлючейОбъекта

Функция КлючОбъекта(Объект) Экспорт
	
	Если гкс_ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(Объект.Метаданные()) Тогда
		ПараметрыКлючаОбъекта = ПараметрыКлючаОбъектаСсылочногоТипа(Объект);
	Иначе
		ТипXML = XMLТипЗнч(Объект);
		Если СтрНайти(НРег(ТипXML.ИмяТипа), "recordset") > 0 Тогда
			ПараметрыКлючаОбъекта = ПараметрыКлючаОбъектаТипаНаборЗаписей(Объект);
		Иначе
			ПараметрыКлючаОбъекта = ПараметрыКлючаОбъектаПоУмолчанию();    
			ПараметрыКлючаОбъекта.Добавить(XMLСтрока((Новый УникальныйИдентификатор())));	
		КонецЕсли;
	КонецЕсли;

	Возврат гкс_ОчередьСообщенийRMQСлужебный.КлючПоПараметрам(ПараметрыКлючаОбъекта, ХешФункция.MD5);

КонецФункции

Функция ПараметрыКлючаОбъектаПоУмолчанию()
	
	МассивПараметров = Новый Массив;  
	МассивПараметров.Добавить(XMLСтрока((Новый УникальныйИдентификатор())));
	
	Возврат МассивПараметров;
	
КонецФункции

Функция ПараметрыКлючаОбъектаТипаНаборЗаписей(Объект)
	
	МетаданныеОбъекта = Объект.Метаданные();	        
	
	МассивПараметров = Новый Массив;
	
	Если гкс_ОбщегоНазначения.ЭтоРегистрБухгалтерии(МетаданныеОбъекта)
		ИЛИ гкс_ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеОбъекта)
		ИЛИ гкс_ОбщегоНазначения.ЭтоРегистрРасчета(МетаданныеОбъекта)
		ИЛИ (гкс_ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеОбъекта) И 
		МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору) Тогда
		
		ОтборПоРегистратору = Объект.Отбор.Найти("Регистратор"); 
		Если НЕ ОтборПоРегистратору = Неопределено Тогда
			МассивПараметров = ПараметрыКлючаОбъектаСсылочногоТипа(ОтборПоРегистратору.Значение);
        	Возврат МассивПараметров;
		КонецЕсли;
		
	Иначе
		
		Для Каждого ЭлементОтбора Из Объект.Отбор Цикл
			МассивПараметров.Добавить(XMLСтрока(ЭлементОтбора.Значение));
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивПараметров.Количество() = 0 Тогда 
		МассивПараметров.Добавить(Строка(Объект.Ссылка.УникальныйИдентификатор()));
	КонецЕсли;
	МассивПараметров.Добавить(Объект.Метаданные().ПолноеИмя());
	
	Возврат МассивПараметров;

КонецФункции

Функция ПараметрыКлючаОбъектаСсылочногоТипа(Объект)
	
	МассивПараметров = Новый Массив;  
	МассивПараметров.Добавить(Строка(Объект.Ссылка.УникальныйИдентификатор()));
	МассивПараметров.Добавить(Объект.Метаданные().ПолноеИмя());
	
	Возврат МассивПараметров;
	
КонецФункции

#КонецОбласти

Процедура УстановитьЗначениеИзСтруктурыПоКлючу(Переменная, СтруктураЗначения, Ключ) Экспорт

	Перем ЗначениеПоКлючу;
	
	Если СтруктураЗначения.Свойство(Ключ, ЗначениеПоКлючу) И ЗначениеЗаполнено(ЗначениеПоКлючу) Тогда	
		Переменная = ЗначениеПоКлючу;		
	КонецЕсли;

КонецПроцедуры

Функция МестноеВремяИБ(УниверсальноеВремяВМиллисекундах) Экспорт
	
	ЧасовойПоясИБ = ПолучитьЧасовойПоясИнформационнойБазы();
	ТысячаСекунд = 1000;
	ПустаяДата = Дата(1, 1, 1);
	УниверсальнаяДатаСобытия_Дата = ПустаяДата + Цел(УниверсальноеВремяВМиллисекундах / ТысячаСекунд);	
	
	Возврат МестноеВремя(УниверсальнаяДатаСобытия_Дата, ЧасовойПоясИБ);
	
КонецФункции

#КонецОбласти

#Область ФиксацияСобытийВЖР

Процедура ЗаписьИнформацииВЖурналРегистрации(Информация, 
	                                         Раздел, 
											 ОбъектМетаданных = Неопределено, 
											 Данные = Неопределено) Экспорт
	
	ИмяСобытия = СтрЗаменить(НСтр("ru='ИнтеграционныйАдаптер.%1'"), "%1", Раздел);
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, 
	                         УровеньЖурналаРегистрации.Информация, 
							 ОбъектМетаданных,
							 Данные,
							 Информация);
	
КонецПроцедуры

Процедура ЗаписьОшибкиВЖурналРегистрации(Информация, 
	                                         Раздел, 
											 ОбъектМетаданных = Неопределено, 
											 Данные = Неопределено) Экспорт
	
	ИмяСобытия = СтрЗаменить(НСтр("ru='ИнтеграционныйАдаптер.%1'"), "%1", Раздел);
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, 
	                         УровеньЖурналаРегистрации.Ошибка, 
							 ОбъектМетаданных,
							 Данные,
							 Информация);
	
КонецПроцедуры

// Формирует запись в журнал регистрации.
// 
// Параметры:
//  Информация - Строка - текст комментария в ЖР
//  Раздел - Строка - раздел подсистемы, служит для уточнения выполняемого действия 
//  Уровень - УровеньЖурналаРегистрации - уровень важности события
//  ОбъектМетаданных - Неопределено, ОбъектМетаданных - Объект метаданных
//  Данные - Неопределено, Произвольный - Данные для записи в ЖР
Процедура ЗаписьВЖурналРегистрации(Информация, 
								   Раздел,
								   Уровень, 
								   ОбъектМетаданных = Неопределено, 
								   Данные = Неопределено) Экспорт
	
	ИмяСобытия = СтрЗаменить(НСтр("ru='ИнтеграционныйАдаптер.%1'"), "%1", Раздел);
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, 
	                         Уровень, 
							 ОбъектМетаданных,
							 Данные,
							 Информация);
	
КонецПроцедуры

#КонецОбласти

#Область УдалитьВСледующейВерсии

// Удалить в следующей версии
Процедура ПередУдалениемОбъектовСинхронизацииRMQОбработчик(Источник) Экспорт
	
	СобытиеПередУдалениемОбъекта(Источник);
	
КонецПроцедуры

// Удалить в следующей версии
Процедура ПередЗаписьюОбъектовСинхронизацииRMQОбработчик(Источник, Отказ = Ложь) Экспорт
	
	СобытиеПередЗаписьюОбъекта(Источник, Отказ);	
	
КонецПроцедуры

// Удалить в следующей версии
Процедура ПриЗаписиОбъектовСинхронизацииRMQОбработчик(Источник, Отказ = Ложь) Экспорт
	
	СобытиеПриЗаписиОбъекта(Источник, Отказ);	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

