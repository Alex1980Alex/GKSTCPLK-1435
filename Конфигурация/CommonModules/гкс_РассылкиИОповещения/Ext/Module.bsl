////////////////////////////////////////////////////////////////////////////////
// Подсистема "Рассылки и оповещения".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//  Содержит общие серверные процедуры и предназначенные для настройки, а также 
//  формирования сообщений по рассылкам и оповещениям.
//

#Область СлужебныйПрограммныйИнтерфейс

#Область РегламентныеЗадания

// Формирует сообщения по данным РС "ОчередьСобытийДляОповещений".
//
Процедура ФормированиеСообщенийПоОповещениям() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ФормированиеСообщенийПоОповещениям);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗаписи = НСтр("ru = 'Начало формирования сообщений по очереди оповещений'",
	                   ОбщегоНазначения.КодОсновногоЯзыка());
	
	ВыполнитьЗаписьЖурналаРегистрации(ТекстЗаписи, УровеньЖурналаРегистрации.Информация);
	
	ДатаОбработки = ТекущаяДатаСеанса(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОчередьСобытийДляОповещений.Подписка КАК Подписка,
	               |	ОчередьСобытийДляОповещений.ИсточникОповещения КАК ИсточникОповещения
	               |ИЗ
	               |	РегистрСведений.гкс_ОчередьСобытийДляОповещений КАК ОчередьСобытийДляОповещений
	               |ГДЕ
	               |	ОчередьСобытийДляОповещений.Период < &ДатаОбработки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОчередьСобытийДляОповещений.Подписка,
	               |	ОчередьСобытийДляОповещений.ИсточникОповещения
	               |ИТОГИ ПО
	               |	Подписка";
	
	Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПодписки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодписки.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ОбработатьОчередьСообщенийПоПодписке(ВыборкаПодписки);
			РегистрыСведений.гкс_ОчередьСобытийДляОповещений.
				УдалитьЗаписиПоВидуОповещенияИзОчереди(ВыборкаПодписки.Подписка, ДатаОбработки);
				
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстЗаписи = НСтр("ru = 'Ошибка при формировании сообщений по оповещениям'",
				ОбщегоНазначения.КодОсновногоЯзыка()) + " : ";
			ТекстЗаписи = ТекстЗаписи + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ВыполнитьЗаписьЖурналаРегистрации(ТекстЗаписи, УровеньЖурналаРегистрации.Ошибка);
			Продолжить;
		
		КонецПопытки;
			
	КонецЦикла;
	
	ТекстЗаписи = НСтр("ru = 'Окончание формирования сообщений по очереди оповещений'",
	                   ОбщегоНазначения.КодОсновногоЯзыка());
					   
	ВыполнитьЗаписьЖурналаРегистрации(ТекстЗаписи, УровеньЖурналаРегистрации.Информация);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаИзмененияДанныхДляОповещений

// Обработчик подписки на событие "Перед записью" документов для формирования очереди
// оповещений клиентов. Выступает маршрутизатором для различных типов источников.
//
// Параметры:
//  Источник        - ДокументСсылка - документ, данные которого анализируются до записи.
//  Отказ           - Булево - возможность отказаться от записи документа.
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - режим проведения документа.
//
Процедура ИсточникОповещенияПередЗаписьюДокументы(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Не (ПолучитьФункциональнуюОпцию("ИспользоватьШаблоныСообщений")
		И ПолучитьФункциональнуюОпцию("ИспользоватьЭлектроннуюПочтуВШаблонахСообщений")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.гкс_Взвешивание") Тогда
		
		ОбработатьВзвешиваниеПередЗаписью(Источник, РежимЗаписи);		
		
	КонецЕсли;	
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" документов для формирования очереди оповещений.
// Выступает маршрутизатором для различных типов источников.
//
// Параметры:
//  Источник  - ДокументОбъект - документ, данные которого анализируются при записи.
//  Отказ     - Булево - возможность отказаться от записи документа.
//
Процедура ИсточникОповещенияПриЗаписиДокументы(Источник, Отказ) Экспорт
	
	Если Не (ПолучитьФункциональнуюОпцию("ИспользоватьШаблоныСообщений")
		И ПолучитьФункциональнуюОпцию("ИспользоватьЭлектроннуюПочтуВШаблонахСообщений")) Тогда
		Возврат;
	КонецЕсли;	
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.гкс_Взвешивание") Тогда
		
		ОбработатьВзвешиваниеПриЗаписи(Источник);
				
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

// Заполняет список получателей почты при отправке сообщения сформированного по подписке.
//
// Параметры:
//   Подписка - СправочникСсылка.гкс_ПодпискиНаРассылкиИОповещения - ссылка на подписку 
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма:
//     * ВариантОтправки - Строка - вариант отправки для получателя письма: Кому, Копия, СкрытаяКопия, ОбратныйАдрес;
//     * Адрес           - Строка - адрес электронной почты получателя;
//     * Представление   - Строка - представление получателя письма;
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты. 
//
Процедура ЗаполнитьПолучателейСообщенияПодписки(Подписка, ПолучателиПисьма) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПолучателиПодпискиНаОповещения.Подписчик КАК Подписчик
	|ИЗ
	|	Справочник.гкс_ПодпискиНаРассылкиИОповещения.Получатели КАК ПолучателиПодпискиНаОповещения
	|ГДЕ
	|	ПолучателиПодпискиНаОповещения.Ссылка = &Ссылка
	|	И НЕ ПолучателиПодпискиНаОповещения.Исключен";
	
	Запрос.УстановитьПараметр("Ссылка", Подписка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ТипЗнч(ВыборкаДетальныеЗаписи.Подписчик) = Тип("Строка") Тогда
			ЭлектроннаяПочтаСтрокой = ВыборкаДетальныеЗаписи.Подписчик;	
		Иначе // справочник.пользователи
			ЭлектроннаяПочтаСтрокой = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				ВыборкаДетальныеЗаписи.Подписчик, Справочники.ВидыКонтактнойИнформации.EmailПользователя);	
		КонецЕсли;	
		
		ДобавитьАдресВПолучателиПисьма(ПолучателиПисьма, ЭлектроннаяПочтаСтрокой);
					
	КонецЦикла;
		
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьАдресВПолучателиПисьма(ПолучателиПисьма, ЭлектроннаяПочтаСтрокой)
	
	СписокПолучателей = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(ЭлектроннаяПочтаСтрокой);
	
	Для каждого Получатель Из СписокПолучателей Цикл
		Если ПустаяСтрока(Получатель.ОписаниеОшибки) Тогда
			НовыйПолучатель               = ПолучателиПисьма.Добавить();
			НовыйПолучатель.Адрес         = Получатель.Адрес;
			НовыйПолучатель.Представление = Получатель.Псевдоним;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

#Область Взвешивание

Процедура ОбработатьВзвешиваниеПередЗаписью(Источник, РежимЗаписи)
			
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ДанныеДоЗаписи = Новый Структура;
		
		Если ИспользуетсяРассылкаНесоответствиеВесаГруза() Тогда
			
			ДанныеНесоответствияВесаГруза = ДанныеНесоответствияВесаГруза(Источник.ДокументРегистрации);
				
			Если ЗначениеЗаполнено(ДанныеНесоответствияВесаГруза) Тогда
				ДанныеДоЗаписи.Вставить("НесоответствиеВесаГруза", 
					ДанныеНесоответствияВесаГруза);	
			КонецЕсли;			
		КонецЕсли;
		
		Если ИспользуетсяРассылкаПревышениеРазрешеннойМаксивальнойМассы() Тогда
			
			ДанныеПревышенияРазрешеннойМаксивальнойМассы = ДанныеПревышенияРазрешеннойМаксивальнойМассы(Источник);
					
			Если ЗначениеЗаполнено(ДанныеПревышенияРазрешеннойМаксивальнойМассы) Тогда
				ДанныеДоЗаписи.Вставить("ПревышениеРазрешеннойМаксимальнойМассы", 
					ДанныеПревышенияРазрешеннойМаксивальнойМассы); 
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДоЗаписи) Тогда
			Источник.ДополнительныеСвойства.Вставить("ДанныеДоЗаписи", ДанныеДоЗаписи); 
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВзвешиваниеПриЗаписи(Источник)
			
	ДанныеДоЗаписи = Неопределено;
	Если Не Источник.ДополнительныеСвойства.Свойство("ДанныеДоЗаписи", ДанныеДоЗаписи) Тогда
		Возврат;
	КонецЕсли;
		
	Если ИспользуетсяРассылкаНесоответствиеВесаГруза() 
		И ДанныеДоЗаписи.Свойство("НесоответствиеВесаГруза") Тогда
		
		// отправляем только при первой записи
		Если ЗначениеЗаполнено(ДанныеДоЗаписи.НесоответствиеВесаГруза) Тогда
			Возврат;
		КонецЕсли;
	
		ДанныеПриЗаписи = ДанныеНесоответствияВесаГруза(Источник.ДокументРегистрации);
		
		Если ЗначениеЗаполнено(ДанныеПриЗаписи) Тогда
			ИнтервалАктуальностиОповещения = 30; // минут
			ЗаписьВОчередьОповещений(Справочники.гкс_ПодпискиНаРассылкиИОповещения.НесоответствиеВесаГруза, 
				Источник.Ссылка,
				гкс_ОбщегоНазначенияКлиентСервер.ПустаяДата(), ТекущаяДатаСеанса() 
				+ гкс_ОбщегоНазначенияКлиентСервер.ПересчитатьВСекунды(ИнтервалАктуальностиОповещения, "МИНУТА"));
		КонецЕсли;
	
	КонецЕсли;
	
	Если ИспользуетсяРассылкаПревышениеРазрешеннойМаксивальнойМассы() 
		И ДанныеДоЗаписи.Свойство("ПревышениеРазрешеннойМаксимальнойМассы") Тогда
		
		// отправляем только при первой записи
		//Если ЗначениеЗаполнено(ДанныеДоЗаписи.ПревышениеРазрешеннойМаксимальнойМассы) Тогда
		//	Возврат;
		//КонецЕсли;
	
		ДанныеПриЗаписи = ДанныеПревышенияРазрешеннойМаксивальнойМассы(Источник);
		
		Если ЗначениеЗаполнено(ДанныеПриЗаписи) Тогда
			ИнтервалАктуальностиОповещения = 30; // минут
			ЗаписьВОчередьОповещений(
				Справочники.гкс_ПодпискиНаРассылкиИОповещения.ПревышениеРазрешеннойМаксивальнойМассы, 
				Источник.Ссылка,
				гкс_ОбщегоНазначенияКлиентСервер.ПустаяДата(), ТекущаяДатаСеанса() 
				+ гкс_ОбщегоНазначенияКлиентСервер.ПересчитатьВСекунды(ИнтервалАктуальностиОповещения, "МИНУТА"));
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользуетсяРассылкаНесоответствиеВесаГруза()

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.гкс_ПодпискиНаРассылкиИОповещения
		.НесоответствиеВесаГруза, "ПодпискаДействует");
	
КонецФункции
	
Функция ИспользуетсяРассылкаПревышениеРазрешеннойМаксивальнойМассы()

	Возврат ПолучитьФункциональнуюОпцию("гкс_ИспользоватьКонтрольПревышенияВесаАвтомобиля")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.гкс_ПодпискиНаРассылкиИОповещения
		.ПревышениеРазрешеннойМаксивальнойМассы, "ПодпискаДействует");
	
КонецФункции	

Функция ДанныеНесоответствияВесаГруза(ДокументРегистрации)
	
	Результат = Неопределено;
		
	РеквизитыРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументРегистрации, "УсловиеПроезда, ВидПеревозки");
	
	Если Не (РеквизитыРегистрации.УсловиеПроезда = Справочники.гкс_УсловияПроезда.FCA
		И РеквизитыРегистрации.ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль) Тогда
		
		Возврат Результат;
	КонецЕсли;	
		
	ДанныеВзвешивания = гкс_ПриемкаТранспорта.ИнформацияОВесахПриемкиПоДокументуРегистрации(ДокументРегистрации);
	
	Если ЗначениеЗаполнено(ДанныеВзвешивания)
		И УстановленоПредельноеОтклонениеВесаГруза(ДанныеВзвешивания)
		И ДанныеВзвешивания.НеттоОтклонениеAbs > ДанныеВзвешивания.НеттоОтклонениеРазрешенное Тогда
		
		Результат = ДанныеВзвешивания;
	КонецЕсли;
		
	Возврат Результат;	
	
КонецФункции

Функция УстановленоПредельноеОтклонениеВесаГруза(ДанныеВзвешивания)
	
	Результат = Ложь;
	ПредельноеОтклонениеВесаГруза = 0;
	
	Если ДанныеВзвешивания.Свойство("ПредельноеОтклонениеВесаГруза", ПредельноеОтклонениеВесаГруза) 
		И ПредельноеОтклонениеВесаГруза > 0 Тогда
		Результат = Истина;
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции	

Функция ДанныеПревышенияРазрешеннойМаксивальнойМассы(ДокументВзвешивание)
	
	Результат = Неопределено;
	
	Если ПолучитьФункциональнуюОпцию("гкс_ИспользоватьКонтрольПревышенияВесаАвтомобиля")
		И гкс_ПриемкаТранспорта.ПревышениеДопустимогоВесаАвтомобиля(ДокументВзвешивание) Тогда
		
		Результат = Новый Структура("ПревышениеДопустимогоВесаАвтомобиля", Истина);	
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

#КонецОбласти

#Область СозданиеВзаимодействийПоОчередиОповещений

Процедура ОбработатьОчередьСообщенийПоПодписке(ОчередьПодписки)
	
	Подписка = ОчередьПодписки.Подписка;
	ШаблонСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подписка, "ШаблонЭлектронногоПисьма");
	
	ДополнительныеПараметры = ШаблоныСообщений.ПараметрыОтправкиПисьмаПоШаблону();
	ДополнительныеПараметры.ОтправитьСразу = Истина;
	
	УчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина, Ложь);
	Если УчетныеЗаписи.Количество() > 0 Тогда
		ДополнительныеПараметры.УчетнаяЗапись = УчетныеЗаписи[0].Ссылка;
	КонецЕсли;
	
	ВыборкаОчередиПодписки = ОчередьПодписки.Выбрать();	
	Пока ВыборкаОчередиПодписки.Следующий() Цикл 
		
		ПредметОповещения = ВыборкаОчередиПодписки.ИсточникОповещения;
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		
		Результат = ШаблоныСообщений.СформироватьСообщениеИОтправить(
			ШаблонСообщения, ПредметОповещения, УникальныйИдентификатор, ДополнительныеПараметры);
			
		Если Не Результат.Отправлено Тогда
			СобытиеЖурналаРегистрации = НСтр("ru = 'Неудачная отправка оповещения'", 
				ОбщегоНазначения.КодОсновногоЯзыка());
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение, ,
				ВыборкаОчередиПодписки.ИсточникОповещения, Результат.ОписаниеОшибки);
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ЗаписьВОчередьОповещений(Подписка, ИсточникОповещения, ДатаОтправки, ДатаАктуальности)
				
	РегистрыСведений.гкс_ОчередьСобытийДляОповещений.ВыполнитьЗаписьВРегистр(
		Подписка, ИсточникОповещения, ДатаОтправки, ДатаАктуальности);
		
КонецПроцедуры

Процедура ВыполнитьЗаписьЖурналаРегистрации(ТекстЗаписи ,УровеньВажности)

	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Рассылки и оповещения'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		УровеньВажности, , ,
		ТекстЗаписи);

КонецПроцедуры

#КонецОбласти

#КонецОбласти