#Область СлужебныеПроцедурыиФукнции

#Область РегламентныеЗадания

Процедура ОбработатьОчередьВходящихСообщений(Знач ПотокСобытий = Неопределено) Экспорт

	гкс_ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания("гкс_ОбработкаОчередиВходящихСообщений");

	ПакетСообщений = Неопределено; // Обрабатываем все сообщения в порядке очереди
	гкс_ОчередьСообщенийRMQВызовСервера.ЗапуститьОбработкуСообщенийОчереди(ПакетСообщений, ПотокСобытий);

КонецПроцедуры

Процедура ПереводВСостояниеЗакрытоСообщенийСОшибкамиОбработки() Экспорт

	гкс_ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		"гкс_ПереводВСостояниеЗакрытоСообщенийСОшибкамиОбработки");

	Обработчик = гкс_ОчередьСообщенийRMQ.ПолучитьОбработчикСообщенийДляПереводаВСостояниеЗакрыто();
	Обработчик.Обработать();

КонецПроцедуры

Процедура ОтложеннаяОбработкаОбъектовОбмена() Экспорт

	гкс_ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания("гкс_ОтложеннаяОбработкаОбъектов");

	гкс_ОтложеннаяОбработкаОбъектов.ОтложеннаяОбработкаОбъектов();

КонецПроцедуры

Процедура ОчисткаУстаревшихДанных() Экспорт

	гкс_ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания("гкс_ОчисткаУстаревшихДанных");

	ОчиститьУстаревшиеСообщения("Входящие");
	ОчиститьУстаревшиеСообщения("Исходящие");
	ОчиститьУстаревшиеЛогиЗапросовАсинхронныхСервисов();
	ОчиститьОчередьОтложенногоФормирования();

КонецПроцедуры

Процедура ОтложенноеФормированиеИсходящихСообщений() Экспорт

	гкс_ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания("гкс_ОтложенноеФормированиеИсходящихСообщений");

	гкс_ОчередьСообщенийRMQВызовСервера.ЗапуститьОтложенноеФормированиеИсходящихСообщений();

КонецПроцедуры

#КонецОбласти

#Область ОбработкаСообщенийОчередиRMQ

Процедура ОбработкаПакетаСообщенийRMQ(Знач ПакетСообщений) Экспорт

	Обработчик = Обработки.гкс_ОбработчикСообщенийRMQ.Создать();
	Обработчик.ОбработкаПакетаСообщенийRMQ(ПакетСообщений);
	Обработчик = Неопределено;

КонецПроцедуры

Функция ПараметрыОбработкиСообщенияШаблон() Экспорт

	ПараметрыОбработкиСообщения = Новый Структура;
	ПараметрыОбработкиСообщения.Вставить("Формат");
	ПараметрыОбработкиСообщения.Вставить("ТипФормата");
	ПараметрыОбработкиСообщения.Вставить("ВерсияФормата");
	ПараметрыОбработкиСообщения.Вставить("МенеджерФормирования");
	ПараметрыОбработкиСообщения.Вставить("МенеджерОбработки");
	ПараметрыОбработкиСообщения.Вставить("Приложение");

	Возврат ПараметрыОбработкиСообщения;

КонецФункции

#КонецОбласти

#Область ОчередьОтложенногоФормирования

Процедура ОбработкаЭлементаОчередиОтложенногоФормирования(ЭлементОчереди) Экспорт

	Если ТипЗнч(ЭлементОчереди) = Тип("Массив") Тогда
		Для Каждого СабЭлемент Из ЭлементОчереди Цикл
			Обработки.гкс_ОбработчикОчередиОтложенныхСообщений.ОбработатьЭлементОчереди(СабЭлемент);
		КонецЦикла;
	Иначе
		Обработки.гкс_ОбработчикОчередиОтложенныхСообщений.ОбработатьЭлементОчереди(ЭлементОчереди);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОчисткаУстаревшихДанных

Процедура ОчиститьУстаревшиеСообщения(ВидСообщений) Экспорт

	ТекстЗапроса = "";
	Если ВидСообщений = "Входящие" Тогда
		ТекстЗапроса = Справочники.гкс_ВходящиеСообщенияRMQ.ТекстЗапросаОчисткиУстаревшихСообщений();
	ИначеЕсли ВидСообщений = "Исходящие" Тогда
		ТекстЗапроса = Справочники.ИсходящиеСообщения.ТекстЗапросаОчисткиУстаревшихСообщений();
	Иначе
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДатаСеанса()));

	РезультатЗапроса = Запрос.Выполнить();
	Пока Не РезультатЗапроса.Пустой() Цикл

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		НачатьТранзакцию();
		Попытка
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

				Сообщение = ВыборкаДетальныеЗаписи.Сообщение;
				СообщениеОбъект = Сообщение.ПолучитьОбъект();
				Если Не СообщениеОбъект = Неопределено Тогда
					СообщениеОбъект.Удалить();
				КонецЕсли;

			КонецЦикла;

			ЗафиксироватьТранзакцию();

		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение ОписаниеОшибки();

		КонецПопытки;

		РезультатЗапроса = Запрос.Выполнить();

	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьУстаревшиеЛогиЗапросовАсинхронныхСервисов()

	РегистрыСведений.гкс_ЛогЗапросовАсинхронныхСервисов.СократитьЗаписиЛога();

КонецПроцедуры

Процедура ОчиститьОчередьОтложенногоФормирования()

	Справочники.гкс_ОчередьОтложенногоФормированияИсходящихСообщений.СократитьОчередь();

КонецПроцедуры

#КонецОбласти

#Область РаботаСоСхемамиОтбораСКД

// Формирует базовую схему компоновки объекта
//
// Параметры:
//  ИмяОбъектаМетаданных - Строка - Имя объекта метаданных. Полученное методом ПолноеИмя()
//
// Возвращаемое значение:
//  СхемаКомпоновкиДанных - Базовая схема компоновки объекта.
//
Функция СформироватьСхемуКомпоновкиПоТипуОбъекта(ИмяОбъектаМетаданных) Экспорт

	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;

	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных1";
	Источник.СтрокаСоединения = "";
	Источник.ТипИсточникаДанных = "Local";

	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;

	ТекстЗапроса = ("ВЫБРАТЬ
					|	*
					|ИЗ
					|	%ИмяОбъекта% КАК Объект");

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяОбъекта%", ИмяОбъектаМетаданных);

	НаборДанных.Запрос = ТекстЗапроса;

	ТипПолеНабора = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных");
	ТипГруппировка = Тип("ГруппировкаКомпоновкиДанных");
	ТипАвтовыбранноеПоле = Тип("АвтоВыбранноеПолеКомпоновкиДанных");

	ПолеСсылка = СхемаКомпоновки.НаборыДанных.НаборДанных1.Поля.Добавить(ТипПолеНабора);
	ПолеСсылка.Поле = "Ссылка";
	ПолеСсылка.ПутьКДанным = "Ссылка";
	ПолеСсылка.Заголовок = "Ссылка";

	ВыбранноеПолеСсылка = СхемаКомпоновки.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип(
		"ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеСсылка.Поле = Новый ПолеКомпоновкиДанных("Ссылка");

	ОсновнаяГруппровка = СхемаКомпоновки.НастройкиПоУмолчанию.Структура.Добавить(ТипГруппировка);
	ОсновнаяГруппровка.Выбор.Элементы.Добавить(ТипАвтовыбранноеПоле);
	ОсновнаяГруппровка.Использование = Истина;

	Возврат СхемаКомпоновки;

КонецФункции

// Проверяет переданную ссылку по условиям, описанным в настройках компоновки
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка, ДокументСсылка - Ссылка на объект информационной базы
//  НастройкиКомпоновки - НастройкиКомпоновкиДанных - Настройки, которые содержат в себе условие
//  по которому нужно проверить переданную ссылку
//
// Возвращаемое значение:
//  Булево - Подходит или нет объект под условия.
//
Функция ОбъектПодходитПоУсловию(СсылкаНаОбъект, ХранилищеУсловияКомпоновкиДанных) Экспорт

	НастройкиКомпоновки = ХранилищеУсловияКомпоновкиДанных.Получить();

	СхемаКомпоновки = СформироватьСхемуКомпоновкиПоТипуОбъекта(СсылкаНаОбъект.Метаданные().ПолноеИмя());
	Настройки = СхемаКомпоновки.НастройкиПоУмолчанию;

	Если Не НастройкиКомпоновки = Неопределено Тогда

		Настройки = НастройкиКомпоновки;

	КонецЕсли;

	ДобавитьОтборВНастройкиПоПолю(Настройки.Отбор.Элементы, "Ссылка", СсылкаНаОбъект);

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, Настройки);

	Запрос = Новый Запрос(МакетКомпоновки.НаборыДанных.НаборДанных1.Запрос);
	ВсеПараметрыЗапроса = Запрос.НайтиПараметры();

	Для Каждого ПараметрЗапроса Из ВсеПараметрыЗапроса Цикл

		ИмяПараметра = ПараметрЗапроса.Имя;

		Если ИмяПараметра = "Ссылка" Тогда

			Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);

		Иначе

			Запрос.УстановитьПараметр(ИмяПараметра, МакетКомпоновки.ЗначенияПараметров[ИмяПараметра].Значение);

		КонецЕсли;

	КонецЦикла;

	РезультатЗапроса = Запрос.Выполнить();

	Возврат Не РезультатЗапроса.Пустой();

КонецФункции

Процедура ДобавитьОтборВНастройкиПоПолю(КоллекцияЭлементов, ИмяПоля, ЗначениеПоля)

	ПолеНайдено = Ложь;
	ТипОтбора = Тип("ЭлементОтбораКомпоновкиДанных");

	Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл

		Если ТипЗнч(ЭлементКоллекции) = ТипОтбора И ЭлементКоллекции.ЛевоеЗначение
			= Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда

			ПолеНайдено = Истина;
			ЭлементКоллекции.ПравоеЗначение = ЗначениеПоля;
			ЭлементКоллекции.Использование = Истина;
			ЭлементКоллекции.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Если Не ПолеНайдено Тогда

		ЭлементОтбора = КоллекцияЭлементов.Добавить(ТипОтбора);
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ЗначениеПоля;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочее

// Возвращает признак использования подсистемы событийного обмена в ИБ
//
//
// Возвращаемое значение:
//  Булево - Признак использования.
//
Функция ЭтоБазаУчастникОбменаСRMQ() Экспорт

	ТекущаяСтрока = СтрокаСоединенияИнформационнойБазы();
	СтрокаКеш = гкс_ОчередьСообщенийRMQПовтИсп.НастройкаИнтеграционногоАдаптера("СтрокаСоединенияУчастникаОбмена");

	СтрокаСоединенияБазыОписана = Не (СтрНайти(НРег(СтрокаКеш), НРег(ТекущаяСтрока)) = 0);
	Если Не СтрокаСоединенияБазыОписана Тогда
		гкс_ОчередьСообщенийRMQ.ЗаписьВЖурналРегистрации(
			НСтр("ru = 'Строка соединения базы не прописана в настройках.'"),
			НСтр("ru = 'ФормированиеИОтправкаВRMQ'"),
			УровеньЖурналаРегистрации.Предупреждение);
	КонецЕсли;
	
	Возврат СтрокаСоединенияБазыОписана;

КонецФункции

Функция ЭтоОбработчикСоСтандартнымИменемМетода(МетодОбработчикМассив, СтандартноеИмяМетода) Экспорт

	КоличествоСлов = МетодОбработчикМассив.Количество();
	Если КоличествоСлов < 2 Или КоличествоСлов > 3 Тогда
		Возврат Ложь;
	КонецЕсли;

	ИмяМетода = "";

	Если КоличествоСлов = 2 Тогда
		ИмяМетода = НРег(СокрЛП(МетодОбработчикМассив[1]));
	ИначеЕсли КоличествоСлов = 3 Тогда
		ИмяМетода = НРег(СокрЛП(МетодОбработчикМассив[2]));
	КонецЕсли;

	Возврат (НРег(СтандартноеИмяМетода) = ИмяМетода);

КонецФункции

Функция ПривестиЗначениеКБулево(Значение) Экспорт

	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	Возврат ОписаниеТиповБулево.ПривестиЗначение(Значение);

КонецФункции

Функция ПараметрыОбработкиСообщенияИзСтруктурыСвойств(Свойства) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат гкс_ОчередьСообщенийRMQПовтИсп.ПараметрыОбработкиСообщения(Свойства);

КонецФункции

Функция ПараметрыПриложения(ДанныеПриложения)

	ПараметрыПриложения = Новый Структура;

	Попытка

		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ДанныеПриложения);
		Содержимое = ПрочитатьJSON(ЧтениеJSON, Истина);

		ПараметрыПриложения.Вставить("Код", Содержимое.Получить("Код"));
		ПараметрыПриложения.Вставить("Наименование", Содержимое.Получить("Наименование"));

	Исключение

		ПараметрыПриложения.Вставить("Код", ДанныеПриложения);
		ПараметрыПриложения.Вставить("Наименование", ДанныеПриложения);

	КонецПопытки;

	Возврат ПараметрыПриложения;

КонецФункции

Функция ПриложениеПоПараметрам(ДанныеПриложения) Экспорт

	Если Не ЗначениеЗаполнено(ДанныеПриложения) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыПриложения = ПараметрыПриложения(ДанныеПриложения);
	Приложение = Справочники.гкс_УчастникиОбменаRMQ.СоздатьПолучитьПриложениеПоПараметрам(ПараметрыПриложения);

	Возврат Приложение;

КонецФункции

Функция ИмяФорматаПоСодержимому(ТипСодержимого) Экспорт

	Попытка

		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТипСодержимого);
		Содержимое = ПрочитатьJSON(ЧтениеJSON, Истина);

		ИмяФормата = Содержимое.Получить("Формат");

	Исключение

		ВызватьИсключение "У сообщения не указан формат";

	КонецПопытки;

	Возврат ИмяФормата;

КонецФункции

Функция КлючПоПараметрам(МассивПараметров, Алгоритм) Экспорт

	ФормироваторКлюча = Новый ХешированиеДанных(Алгоритм);

	Для Каждого Параметр Из МассивПараметров Цикл
		ФормироваторКлюча.Добавить(Параметр);
	КонецЦикла;

	Ключ = Строка(ФормироваторКлюча.ХешСумма);

	Возврат Ключ;

КонецФункции

#КонецОбласти

#КонецОбласти