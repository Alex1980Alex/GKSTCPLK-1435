#Область ПрограммныйИнтерфейс

// Входная точка для формирования сообщения для Кверион
//
// Параметры:
//  ПараметрыВыгрузки - Структура - параметры для выгрузки
//  
Процедура ВыгрузитьСообщениеВКверион(ПараметрыВыгрузки, Отказ) Экспорт
	
	Перем ДокументРегистрации, НовоеСостояние;
	
	ИспользоватьИнтеграциюСКверион = ПолучитьФункциональнуюОпцию("гкс_ИспользоватьИнтеграциюСКверион");	
	Если НЕ ИспользоватьИнтеграциюСКверион Тогда
		Возврат;	
	КонецЕсли;
	
	Если НЕ (ТипЗнч(ПараметрыВыгрузки) = Тип("Структура")
	И ПараметрыВыгрузки.Свойство("ДокументРегистрации", ДокументРегистрации)
	И ПараметрыВыгрузки.Свойство("СостояниеРегистрации", НовоеСостояние)) Тогда
		
		ВызватьИсключение НСтр("ru='Ошибка параметров при обмене с Кверион'");
	КонецЕсли;
	
	СостоянияРегистрации = Перечисления.гкс_СостоянияРегистрации;
	
	Если НовоеСостояние <> СостоянияРегистрации.Регистрация Тогда	
		ВидПеревозки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРегистрации, "ВидПеревозки");
		Если НЕ ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;											
	
	Если НовоеСостояние = СостоянияРегистрации.Регистрация Тогда
		ДанныеXDTO = ОбъектыXDTOДляСостоянияРегистрация(ПараметрыВыгрузки);
	
	ИначеЕсли НовоеСостояние = СостоянияРегистрации.Прибыл Тогда
		ДанныеXDTO = ОбъектыXDTOДляСостоянияПрибыл(ПараметрыВыгрузки);
		
	ИначеЕсли НовоеСостояние = СостоянияРегистрации.ПринятыПробы
	ИЛИ НовоеСостояние = СостоянияРегистрации.НеПринято Тогда
			
		ДанныеXDTO = ОбъектыXDTOДляСостоянияПринятыПробы(ПараметрыВыгрузки);	
		
	ИначеЕсли НовоеСостояние = СостоянияРегистрации.ВыгрузкаРазрешена Тогда
		ДанныеXDTO = ОбъектыXDTOДляСостоянияВыгрузкаРазрешена(ПараметрыВыгрузки);
		
	ИначеЕсли НовоеСостояние = СостоянияРегистрации.Выгружен Тогда
		ДанныеXDTO = ОбъектыXDTOДляСостоянияВыгружен(ПараметрыВыгрузки);
		
	ИначеЕсли НовоеСостояние = СостоянияРегистрации.ВзвешенТара Тогда	
		ДанныеXDTO = ОбъектыXDTOДляСостоянияВзвешенТара(ПараметрыВыгрузки);
		
	ИначеЕсли НовоеСостояние = СостоянияРегистрации.ВзвешенБрутто Тогда	
		ДанныеXDTO = ОбъектыXDTOДляСостоянияВзвешенБрутто(ПараметрыВыгрузки);
		
	ИначеЕсли НовоеСостояние = СостоянияРегистрации.Погружен Тогда
		ДанныеXDTO = ОбъектыXDTOДляСостоянияПогружен(ПараметрыВыгрузки);		
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
		      НСтр("ru='Для состояния %1 неопределена обработка'"), XMLСтрока(НовоеСостояние));
	КонецЕсли;	
	
	ДокументРегистрацииОбъект = ДокументРегистрации.ПолучитьОбъект();
	Для Каждого ОбъектXDTO Из ДанныеXDTO Цикл
		
		ДопСвойстваРегистрации = ДокументРегистрацииОбъект.ДополнительныеСвойства;
		ДопСвойстваРегистрации.Очистить();
		
		ДопСвойстваРегистрации.Вставить("ОтправкаВАСУТП", Истина);
		ДопСвойстваРегистрации.Вставить("ДанныеXDTO", ОбъектXDTO);
		
		гкс_ОчередьСообщенийRMQ.ПриЗаписиДокументовСинхронизацииRMQ(ДокументРегистрацииОбъект, Отказ);	

	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьВходящееСообщение(СообщениеОбъект, ЗагруженныеОбъекты, Ошибка) Экспорт
	
	ИспользоватьИнтеграциюСКверион = ПолучитьФункциональнуюОпцию("гкс_ИспользоватьИнтеграциюСКверион");	
	Если НЕ ИспользоватьИнтеграциюСКверион Тогда
		Возврат;	
	КонецЕсли;
	
	Если СообщениеОбъект.Тип().Имя = "TransportRegistrationMessage" Тогда
		ОбработатьСообщение_TransportRegistrationMessage(СообщениеОбъект, ЗагруженныеОбъекты, Ошибка);
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаTransportRegistrationMessage

Процедура ОбработатьСообщение_TransportRegistrationMessage(СообщениеОбъект, ЗагруженныеОбъекты, Ошибка)
	
	Весы = Справочники.гкс_ОборудованиеПЛК.ВесыАтоматическогоВзвешивания(СообщениеОбъект.Entry);
	
	Если НЕ ЗначениеЗаполнено(Весы) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Не найдены весы по номеру проезда %1';"), СообщениеОбъект.Entry);
	КонецЕсли;
		
	УИД = Новый УникальныйИдентификатор(СообщениеОбъект.ID); 
	РегистрацияНаПЛК = Документы.гкс_РегистрацияНаПЛК.ПолучитьСсылку(УИД);
	
	Если НЕ ОбщегоНазначения.СсылкаСуществует(РегистрацияНаПЛК) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Документ по идентификатору %1 не найден';"), УИД);
	КонецЕсли;
	
	ДокументВзвешивание = Неопределено;
	гкс_АвтоматическоеВзвешивание.ПровестиВзвешивание(РегистрацияНаПЛК, Весы, ДокументВзвешивание);
		
	Если ЗначениеЗаполнено(ДокументВзвешивание) Тогда
		ЗагруженныеОбъекты.Добавить(ДокументВзвешивание);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСостояниеРегистрация

Функция ОбъектыXDTOДляСостоянияРегистрация(ПараметрыВыгрузки)
	
	МассивОбъектов = Новый Массив;
	
	// для сообщения шлагбауму на въезде
	ДанныеДляНачальнойРегистрации= ДанныеКВыгрузкеДляПредварительнойРегистрации(ПараметрыВыгрузки.ДокументРегистрации,
																				ПараметрыВыгрузки.Отмена);
	
	Если ЗначениеЗаполнено(ДанныеДляНачальнойРегистрации) Тогда

		ОбъектXDTO = СтруктуруВОбъектXDTO(ДанныеДляНачальнойРегистрации, "TransportEntryRequestMessage");
		Если ОбъектXDTO <> Неопределено Тогда
			МассивОбъектов.Добавить(ОбъектXDTO);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивОбъектов;
	
КонецФункции

Функция ДанныеКВыгрузкеДляПредварительнойРегистрации(ЗаписьНаКПП, Отмена)
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	"""" КАК RFID,
	|	ЗаписьНаКПП.Номенклатура.Наименование КАК CargoName,
	|	0 КАК Brutto,
	|	0 КАК Netto,
	|	0 КАК TareWeight,
	|	ЗаписьНаКПП.НомерТранспортногоСредства КАК CarNum,
	|	"""" КАК Driver,
	|	&Отмена КАК Cancel,
	|	РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1970, 01, 01, 00, 00, 00), ЗаписьНаКПП.НачалоПериода, СЕКУНДА) КАК
	|		AllowedDate,
	|	ЕСТЬNULL(ТочкиПроезда.НомерПроезда, 0) КАК Entry
	|ИЗ
	|	&ДокументЗаписьВОчередь КАК ЗаписьНаКПП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_СтруктураПЛК КАК ТочкиПроезда
	|		ПО ТочкиПроезда.Ссылка = ЗНАЧЕНИЕ(Справочник.гкс_СтруктураПЛК.ВъездНаПЛК)
	|ГДЕ
	|	ЗаписьНаКПП.Ссылка = &ЗаписьНаКПП";
	
	
	ТипДокументаСобытия = ТипЗнч(ЗаписьНаКПП);
	
	Если ТипДокументаСобытия = Тип("ДокументСсылка.гкс_ВъездНаКПП") Тогда
		
		ИмяИсточника = "Документ.гкс_ВъездНаКПП";	
		
	ИначеЕсли ТипДокументаСобытия = Тип("ДокументСсылка.гкс_ЗаписьВОчередьОтгрузкиПЛК") Тогда
		
		ИмяИсточника = "Документ.гкс_ЗаписьВОчередьОтгрузкиПЛК";
		
	Иначе	
		Возврат Неопределено;	
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументЗаписьВОчередь", ИмяИсточника);
	
	Запрос.УстановитьПараметр("ЗаписьНаКПП", ЗаписьНаКПП);
	Запрос.УстановитьПараметр("Отмена", Отмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
			
		ДанныеЗапроса = РезультатЗапроса.Выгрузить();	
		СтрокаТаблицыДанныеЗапроса = ДанныеЗапроса.Получить(0);
		ДанныеКВыгрузке = гкс_ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыДанныеЗапроса);

		ДанныеКВыгрузке.Вставить("ID", ПолучитьУИДПоСсылке(ЗаписьНаКПП));
		
	Иначе
		
		ДанныеКВыгрузке = Неопределено;	 
	КонецЕсли;		 
	
	Возврат ДанныеКВыгрузке;
		
КонецФункции

#КонецОбласти

#Область ОбработкаСостояниеПрибыл

Функция ОбъектыXDTOДляСостоянияПрибыл(ПараметрыВыгрузки)
	
	МассивОбъектов = Новый Массив;
	
	// для сообщения шлагбауму на пункте регистрации
	ДанныеДляНачальнойРегистрации= ДанныеКВыгрузкеДляНачальнойРегистрации(ПараметрыВыгрузки.ДокументРегистрации);
	
	Если ЗначениеЗаполнено(ДанныеДляНачальнойРегистрации) Тогда

		ОбъектXDTO = СтруктуруВОбъектXDTO(ДанныеДляНачальнойРегистрации, "TransportEntryRequestMessage");
		Если ОбъектXDTO <> Неопределено Тогда
			МассивОбъектов.Добавить(ОбъектXDTO);
		КонецЕсли;
		
	КонецЕсли;
	
	// для сообщения шлагбауму на въезд весовой
	ДанныеДляСостоянияПрибыл = ДанныеКВыгрузкеДляСостоянияПрибыл(ПараметрыВыгрузки.ДокументРегистрации);
	
	Если ЗначениеЗаполнено(ДанныеДляСостоянияПрибыл) Тогда

		ОбъектXDTO = СтруктуруВОбъектXDTO(ДанныеДляСостоянияПрибыл, "TransportEntryRequestMessage");
		Если ОбъектXDTO <> Неопределено Тогда
			МассивОбъектов.Добавить(ОбъектXDTO);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивОбъектов;
	
КонецФункции

Функция ДанныеКВыгрузкеДляНачальнойРегистрации(РегистрацияНаПЛК)
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	гкс_РегистрацияНаПЛК.RFIDEPC КАК RFID,
	|	гкс_РегистрацияНаПЛК.Номенклатура.Наименование КАК CargoName,
	|	гкс_РегистрацияНаПЛК.ВесБрутто КАК Brutto,
	|	гкс_РегистрацияНаПЛК.ВесНетто КАК Netto,
	|	гкс_РегистрацияНаПЛК.ВесТары КАК TareWeight,
	|	ЕСТЬNULL(ТранспортныеСредства.НомерТранспортногоСредства, """") КАК CarNum,
	|	гкс_РегистрацияНаПЛК.Водитель КАК Driver,
	|	&Отмена КАК Cancel,
	|	ЕСТЬNULL(ТочкиПроезда.НомерПроезда, 0) КАК Entry
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК гкс_РегистрацияНаПЛК
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|		ПО гкс_РегистрацияНаПЛК.ТранспортноеСредство = ТранспортныеСредства.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_СтруктураПЛК КАК ТочкиПроезда
	|		ПО гкс_РегистрацияНаПЛК.ТипРегистрации = ТочкиПроезда.ТипПроцесса
	|		И ТочкиПроезда.ВидОперации = ЗНАЧЕНИЕ(Перечисление.гкс_ВидыОперацийПЛК.Регистрация)
	|ГДЕ
	|	гкс_РегистрацияНаПЛК.Ссылка = &Регистрация";
	
	Запрос.УстановитьПараметр("Регистрация", РегистрацияНаПЛК);
	Запрос.УстановитьПараметр("Отмена", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
			
		ДанныеЗапроса = РезультатЗапроса.Выгрузить();	
		СтрокаТаблицыДанныеЗапроса = ДанныеЗапроса.Получить(0);
		ДанныеКВыгрузке = гкс_ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыДанныеЗапроса);

		ДанныеКВыгрузке.Вставить("ID", ПолучитьУИДПоСсылке(РегистрацияНаПЛК));
		
	Иначе
		
		ДанныеКВыгрузке = Неопределено;	 
	КонецЕсли;		 
	
	Возврат ДанныеКВыгрузке;
		
КонецФункции

Функция ДанныеКВыгрузкеДляСостоянияПрибыл(РегистрацияНаПЛК)
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	гкс_РегистрацияНаПЛК.RFIDEPC КАК RFID,
	|	гкс_РегистрацияНаПЛК.Номенклатура.Наименование КАК CargoName,
	|	гкс_РегистрацияНаПЛК.ВесБрутто КАК Brutto,
	|	гкс_РегистрацияНаПЛК.ВесНетто КАК Netto,
	|	гкс_РегистрацияНаПЛК.ВесТары КАК TareWeight,
	|	ЕСТЬNULL(ТранспортныеСредства.НомерТранспортногоСредства, """") КАК CarNum,
	|	гкс_РегистрацияНаПЛК.Водитель КАК Driver,
	|	&Отмена КАК Cancel,
	|	ЕСТЬNULL(ТочкиПроезда.НомерПроезда, 0) КАК Entry
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК гкс_РегистрацияНаПЛК
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|		ПО гкс_РегистрацияНаПЛК.ТранспортноеСредство = ТранспортныеСредства.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_СтруктураПЛК КАК ТочкиПроезда
	|		ПО гкс_РегистрацияНаПЛК.ВесоваяВъезда = ТочкиПроезда.Ссылка
	|ГДЕ
	|	гкс_РегистрацияНаПЛК.Ссылка = &Регистрация";
	
	Запрос.УстановитьПараметр("Регистрация", РегистрацияНаПЛК);
	Запрос.УстановитьПараметр("Отмена", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
			
		ДанныеЗапроса = РезультатЗапроса.Выгрузить();	
		СтрокаТаблицыДанныеЗапроса = ДанныеЗапроса.Получить(0);
		ДанныеКВыгрузке = гкс_ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыДанныеЗапроса);

		ДанныеКВыгрузке.Вставить("ID", ПолучитьУИДПоСсылке(РегистрацияНаПЛК));
		
	Иначе
		
		ДанныеКВыгрузке = Неопределено;	 
	КонецЕсли;		 
	
	Возврат ДанныеКВыгрузке;
		
КонецФункции

#КонецОбласти

#Область ОбработкаСостояниеПринятыПробы

Функция ОбъектыXDTOДляСостоянияПринятыПробы(ПараметрыВыгрузки)
	
	МассивОбъектов = Новый Массив;

	ДанныеКВыгрузке = ДанныеКВыгрузкеДляСостоянияПринятыПробы(ПараметрыВыгрузки.ДокументРегистрации);
	
	Если ЗначениеЗаполнено(ДанныеКВыгрузке) Тогда
		
		ОбъектXDTO = СтруктуруВОбъектXDTO(ДанныеКВыгрузке, "WeighResultsMessage");
		Если ОбъектXDTO <> Неопределено Тогда
			МассивОбъектов.Добавить(ОбъектXDTO);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат МассивОбъектов;
	
КонецФункции

Функция ДанныеКВыгрузкеДляСостоянияПринятыПробы(РегистрацияНаПЛК)
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	гкс_РегистрацияНаПЛК.RFIDEPC КАК RFID,
	|	ЕСТЬNULL(ТочкиПроезда.НомерПроезда, 0) КАК Entry,
	|	гкс_Взвешивание.Вес КАК Weight,
	|	гкс_Взвешивание.Дата КАК DateEnd
	|ИЗ
	|	Документ.гкс_Взвешивание КАК гкс_Взвешивание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_РегистрацияНаПЛК КАК гкс_РегистрацияНаПЛК
	|		ПО гкс_Взвешивание.ДокументРегистрации = гкс_РегистрацияНаПЛК.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_СтруктураПЛК КАК ТочкиПроезда
	|		ПО гкс_РегистрацияНаПЛК.ВесоваяВъезда = ТочкиПроезда.Ссылка
	|ГДЕ
	|	гкс_Взвешивание.Проведен
	|	И гкс_Взвешивание.ДокументРегистрации = &Регистрация
	|	И гкс_Взвешивание.ТипВзвешивания = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Въезд)";
	
	Запрос.УстановитьПараметр("Регистрация", РегистрацияНаПЛК);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
			
		ДанныеЗапроса = РезультатЗапроса.Выгрузить();	
		СтрокаТаблицыДанныеЗапроса = ДанныеЗапроса.Получить(0);
		ДанныеКВыгрузке = гкс_ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыДанныеЗапроса);

		ДанныеКВыгрузке.Вставить("ID", ПолучитьУИДПоСсылке(РегистрацияНаПЛК));
		
	Иначе
		
		ДанныеКВыгрузке = Неопределено;	 
	КонецЕсли;	
	
	Возврат ДанныеКВыгрузке;
		
КонецФункции	

#КонецОбласти

#Область ОбработкаСостояниеВыгрузкаРазрешена

Функция ОбъектыXDTOДляСостоянияВыгрузкаРазрешена(ПараметрыВыгрузки)
	
	МассивОбъектов = Новый Массив;
	
	ДанныеКВыгрузке = ДанныеКВыгрузкеДляСостоянияВыгрузкаРазрешена(ПараметрыВыгрузки.ДокументРегистрации);

	Если ЗначениеЗаполнено(ДанныеКВыгрузке) Тогда
		
		ОбъектXDTO = СтруктуруВОбъектXDTO(ДанныеКВыгрузке, "TransportEntryRequestMessage");
		Если ОбъектXDTO <> Неопределено Тогда
			МассивОбъектов.Добавить(ОбъектXDTO);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат МассивОбъектов;
	
КонецФункции

Функция ДанныеКВыгрузкеДляСостоянияВыгрузкаРазрешена(РегистрацияНаПЛК)
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	гкс_РегистрацияНаПЛК.RFIDEPC КАК RFID,
	|	гкс_РегистрацияНаПЛК.Номенклатура.Наименование КАК CargoName,
	|	гкс_РегистрацияНаПЛК.ВесБрутто КАК Brutto,
	|	гкс_РегистрацияНаПЛК.ВесНетто КАК Netto,
	|	гкс_РегистрацияНаПЛК.ВесТары КАК TareWeight,
	|	ЕСТЬNULL(ТранспортныеСредства.НомерТранспортногоСредства, """") КАК CarNum,
	|	гкс_РегистрацияНаПЛК.Водитель КАК Driver,
	|	&Отмена КАК Cancel,
	|	ВЫБОР
	|		КОГДА гкс_РегистрацияНаПЛК.ВыгрузкаСОдногоБорта
	|			ТОГДА ЕСТЬNULL(ТочкиПроезда.НомерОбратногоПроезда, 0)
	|		ИНАЧЕ ЕСТЬNULL(ТочкиПроезда.НомерПроезда, 0)
	|	КОНЕЦ КАК Entry
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК гкс_РегистрацияНаПЛК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_НаправлениеНаРазгрузку КАК гкс_НаправлениеНаРазгрузку
	|		ПО гкс_НаправлениеНаРазгрузку.ДокументРегистрации = гкс_РегистрацияНаПЛК.Ссылка
	|		И гкс_НаправлениеНаРазгрузку.Проведен
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|		ПО гкс_РегистрацияНаПЛК.ТранспортноеСредство = ТранспортныеСредства.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_СтруктураПЛК КАК ТочкиПроезда
	|		ПО гкс_НаправлениеНаРазгрузку.ЯмаРазгрузки = ТочкиПроезда.ТочкаМаршрута
	|		И ТочкиПроезда.ВидОперации = ЗНАЧЕНИЕ(Перечисление.гкс_ВидыОперацийПЛК.Разгрузка)
	|		И ТочкиПроезда.ТипТранспортныхСредств = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТранспортныхСредствДоставки.Автомобиль)
	|		И ТочкиПроезда.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка)
	|ГДЕ
	|	гкс_РегистрацияНаПЛК.Ссылка = &Регистрация";

	Запрос.УстановитьПараметр("Регистрация", РегистрацияНаПЛК);
	Запрос.УстановитьПараметр("Отмена", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
			
		ДанныеЗапроса = РезультатЗапроса.Выгрузить();	
		СтрокаТаблицыДанныеЗапроса = ДанныеЗапроса.Получить(0);
		ДанныеКВыгрузке = гкс_ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыДанныеЗапроса);

		ДанныеКВыгрузке.Вставить("ID", ПолучитьУИДПоСсылке(РегистрацияНаПЛК));
		
	Иначе
		
		ДанныеКВыгрузке = Неопределено;	 
	КонецЕсли;		 
	
	Возврат ДанныеКВыгрузке;
		
КонецФункции

#КонецОбласти

#Область ОбработкаСостояниеВыгружен

Функция ОбъектыXDTOДляСостоянияВыгружен(ПараметрыВыгрузки)

	МассивОбъектов = Новый Массив;
	
	ДанныеКВыгрузке = ДанныеКВыгрузкеПодтверждениеВыгрузки(ПараметрыВыгрузки.ДокументРегистрации);
	
	Если ЗначениеЗаполнено(ДанныеКВыгрузке) Тогда
		
		ОбъектXDTO = СтруктуруВОбъектXDTO(ДанныеКВыгрузке, "LaboratorySamplingMessage");
		Если ОбъектXDTO <> Неопределено Тогда
			МассивОбъектов.Добавить(ОбъектXDTO);
		КонецЕсли;
			
	КонецЕсли;
	
	ДанныеКВыгрузке = ДанныеКВыгрузкеЗапросНаВыезд(ПараметрыВыгрузки.ДокументРегистрации);
	
	Если ЗначениеЗаполнено(ДанныеКВыгрузке) Тогда
		
		ОбъектXDTO = СтруктуруВОбъектXDTO(ДанныеКВыгрузке, "TransportEntryRequestMessage");
		Если ОбъектXDTO <> Неопределено Тогда
			МассивОбъектов.Добавить(ОбъектXDTO);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат МассивОбъектов;	
	
КонецФункции

Функция ДанныеКВыгрузкеПодтверждениеВыгрузки(РегистрацияНаПЛК)
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	РегистрацияНаПЛК.RFIDEPC КАК RFID,
	|	ЕСТЬNULL(ТочкиПроезда.НомерПроезда, 0) КАК Entry
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_НаправлениеНаРазгрузку КАК НаправлениеНаРазгрузку
	|		ПО НаправлениеНаРазгрузку.ДокументРегистрации = РегистрацияНаПЛК.Ссылка
	|		И НаправлениеНаРазгрузку.Проведен
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_СтруктураПЛК КАК ТочкиПроезда
	|		ПО НаправлениеНаРазгрузку.ЯмаРазгрузки = ТочкиПроезда.ТочкаМаршрута
	|		И ТочкиПроезда.ВидОперации = ЗНАЧЕНИЕ(Перечисление.гкс_ВидыОперацийПЛК.Разгрузка)
	|		И ТочкиПроезда.ТипТранспортныхСредств = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТранспортныхСредствДоставки.Автомобиль)
	|		И ТочкиПроезда.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка)
	|ГДЕ
	|	РегистрацияНаПЛК.Ссылка = &Регистрация";
	
	Запрос.УстановитьПараметр("Регистрация", РегистрацияНаПЛК.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
			
		ДанныеЗапроса = РезультатЗапроса.Выгрузить();	
		СтрокаТаблицыДанныеЗапроса = ДанныеЗапроса.Получить(0);
		ДанныеКВыгрузке = гкс_ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыДанныеЗапроса);

		ДанныеКВыгрузке.Вставить("ID", ПолучитьУИДПоСсылке(РегистрацияНаПЛК));
		
	Иначе
		
		ДанныеКВыгрузке = Неопределено;	 
	КонецЕсли;	
	
	Возврат ДанныеКВыгрузке;
		
КонецФункции

Функция ДанныеКВыгрузкеЗапросНаВыезд(РегистрацияНаПЛК)
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	гкс_РегистрацияНаПЛК.RFIDEPC КАК RFID,
	|	гкс_РегистрацияНаПЛК.Номенклатура.Наименование КАК CargoName,
	|	гкс_РегистрацияНаПЛК.ВесБрутто КАК Brutto,
	|	гкс_РегистрацияНаПЛК.ВесНетто КАК Netto,
	|	гкс_РегистрацияНаПЛК.ВесТары КАК TareWeight,
	|	ЕСТЬNULL(ТранспортныеСредства.НомерТранспортногоСредства, """") КАК CarNum,
	|	гкс_РегистрацияНаПЛК.Водитель КАК Driver,
	|	ЕСТЬNULL(ТочкиПроезда.НомерПроезда, 0) КАК Entry,
	|	&Отмена КАК Cancel
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК гкс_РегистрацияНаПЛК
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|		ПО гкс_РегистрацияНаПЛК.ТранспортноеСредство = ТранспортныеСредства.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_СтруктураПЛК КАК ТочкиПроезда
	|		ПО ТочкиПроезда.ТипТранспортныхСредств = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТранспортныхСредствДоставки.Автомобиль)
	|		И ТочкиПроезда.ТипПроцесса = гкс_РегистрацияНаПЛК.ТипРегистрации
	|		И ТочкиПроезда.ВидОперации В (ВЫБОР
	|			КОГДА гкс_РегистрацияНаПЛК.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.гкс_ВидыОперацийПЛК.ВзвешиваниеНетто)
	|			КОГДА гкс_РегистрацияНаПЛК.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Отгрузка)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.гкс_ВидыОперацийПЛК.ВзвешиваниеБрутто)
	|		КОНЕЦ)
	|ГДЕ
	|	гкс_РегистрацияНаПЛК.Ссылка = &Регистрация";
	
	Запрос.УстановитьПараметр("Регистрация", РегистрацияНаПЛК);
	Запрос.УстановитьПараметр("Отмена", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
			
		ДанныеЗапроса = РезультатЗапроса.Выгрузить();	
		СтрокаТаблицыДанныеЗапроса = ДанныеЗапроса.Получить(0);
		ДанныеКВыгрузке = гкс_ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыДанныеЗапроса);

		ДанныеКВыгрузке.Вставить("ID", ПолучитьУИДПоСсылке(РегистрацияНаПЛК));
		
	Иначе
		
		ДанныеКВыгрузке = Неопределено;	 
	КонецЕсли;		 
	
	Возврат ДанныеКВыгрузке;
		
КонецФункции

#КонецОбласти

#Область ОбработкаСостояниеПогружен

Функция ОбъектыXDTOДляСостоянияПогружен(ПараметрыВыгрузки)

	МассивОбъектов = Новый Массив;
	
	ДанныеКВыгрузке = ДанныеКВыгрузкеПодтверждениеПогрузки(ПараметрыВыгрузки.ДокументРегистрации);
	
	Если ЗначениеЗаполнено(ДанныеКВыгрузке) Тогда
		
		ОбъектXDTO = СтруктуруВОбъектXDTO(ДанныеКВыгрузке, "LaboratorySamplingMessage");
		Если ОбъектXDTO <> Неопределено Тогда
			МассивОбъектов.Добавить(ОбъектXDTO);
		КонецЕсли;
			
	КонецЕсли;
	
	ДанныеКВыгрузке = ДанныеКВыгрузкеЗапросНаВыезд(ПараметрыВыгрузки.ДокументРегистрации);
	
	Если ЗначениеЗаполнено(ДанныеКВыгрузке) Тогда
		
		ОбъектXDTO = СтруктуруВОбъектXDTO(ДанныеКВыгрузке, "TransportEntryRequestMessage");
		Если ОбъектXDTO <> Неопределено Тогда
			МассивОбъектов.Добавить(ОбъектXDTO);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат МассивОбъектов;	
	
КонецФункции

Функция ДанныеКВыгрузкеПодтверждениеПогрузки(РегистрацияНаПЛК)
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	РегистрацияНаПЛК.RFIDEPC КАК RFID,
	|	ЕСТЬNULL(ТочкиПроезда.НомерПроезда, 0) КАК Entry
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_СтруктураПЛК КАК ТочкиПроезда
	|		ПО РегистрацияНаПЛК.МестоПогрузки = ТочкиПроезда.Ссылка
	|		И ТочкиПроезда.ВидОперации = ЗНАЧЕНИЕ(Перечисление.гкс_ВидыОперацийПЛК.Погрузка)
	|		И ТочкиПроезда.ТипТранспортныхСредств = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТранспортныхСредствДоставки.Автомобиль)
	|		И ТочкиПроезда.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Отгрузка)
	|ГДЕ
	|	РегистрацияНаПЛК.Ссылка = &Регистрация";
	
	Запрос.УстановитьПараметр("Регистрация", РегистрацияНаПЛК.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
			
		ДанныеЗапроса = РезультатЗапроса.Выгрузить();	
		СтрокаТаблицыДанныеЗапроса = ДанныеЗапроса.Получить(0);
		ДанныеКВыгрузке = гкс_ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыДанныеЗапроса);

		ДанныеКВыгрузке.Вставить("ID", ПолучитьУИДПоСсылке(РегистрацияНаПЛК));
		
	Иначе
		
		ДанныеКВыгрузке = Неопределено;	 
	КонецЕсли;	
	
	Возврат ДанныеКВыгрузке;
		
КонецФункции

#КонецОбласти

#Область ОбработкаСостояниеВзвешенТара

Функция ОбъектыXDTOДляСостоянияВзвешенТара(ПараметрыВыгрузки)
	
	МассивОбъектов = Новый Массив;

	ДанныеКВыгрузке = ДанныеКВыгрузкеДляСостоянияВзвешенТара(ПараметрыВыгрузки.ДокументРегистрации);
																		
	Если ЗначениеЗаполнено(ДанныеКВыгрузке) Тогда	
		ОбъектXDTO = СтруктуруВОбъектXDTO(ДанныеКВыгрузке, "WeighResultsMessage");
		Если ОбъектXDTO <> Неопределено Тогда
			МассивОбъектов.Добавить(ОбъектXDTO);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ТипРегистрации = ПредопределенноеЗначение("Перечисление.гкс_ТипРегистрации.Отгрузка") Тогда
				
		ДанныеКВыгрузке = ДанныеКВыгрузкеДляСостоянияВзвешенТараОтгрузка(ПараметрыВыгрузки.ДокументРегистрации);
	
		Если ЗначениеЗаполнено(ДанныеКВыгрузке) Тогда
		
			ОбъектXDTO = СтруктуруВОбъектXDTO(ДанныеКВыгрузке, "TransportEntryRequestMessage");
			Если ОбъектXDTO <> Неопределено Тогда
				МассивОбъектов.Добавить(ОбъектXDTO);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат МассивОбъектов;
	
КонецФункции

Функция ДанныеКВыгрузкеДляСостоянияВзвешенТара(РегистрацияНаПЛК)
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	РегистрацияНаПЛК.RFIDEPC КАК RFID,
	|	Взвешивание.Вес КАК Weight,
	|	Взвешивание.Дата КАК DateEnd,
	|	ЕСТЬNULL(ТочкиПроезда.НомерПроезда, 0) КАК Entry
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_Взвешивание КАК Взвешивание
	|		ПО (Взвешивание.ДокументРегистрации = РегистрацияНаПЛК.Ссылка)
	|		И (Взвешивание.Проведен)
	|		И (Взвешивание.ТипВзвешивания В (ВЫБОР
	|			КОГДА РегистрацияНаПЛК.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Выезд)
	|			КОГДА РегистрацияНаПЛК.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Отгрузка)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Въезд)
	|		КОНЕЦ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_СтруктураПЛК КАК ТочкиПроезда
	|		ПО (ТочкиПроезда.ВидОперации = ЗНАЧЕНИЕ(Перечисление.гкс_ВидыОперацийПЛК.ВзвешиваниеНетто))
	|		И (ТочкиПроезда.ТипТранспортныхСредств = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТранспортныхСредствДоставки.Автомобиль))
	|		И (ТочкиПроезда.ТипПроцесса = РегистрацияНаПЛК.ТипРегистрации)
	|ГДЕ
	|	РегистрацияНаПЛК.Ссылка = &Регистрация";
	
	Запрос.УстановитьПараметр("Регистрация", РегистрацияНаПЛК.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
			
		ДанныеЗапроса = РезультатЗапроса.Выгрузить();	
		СтрокаТаблицыДанныеЗапроса = ДанныеЗапроса.Получить(0);
		ДанныеКВыгрузке = гкс_ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыДанныеЗапроса);

		ДанныеКВыгрузке.Вставить("ID", ПолучитьУИДПоСсылке(РегистрацияНаПЛК));
		
	Иначе
		
		ДанныеКВыгрузке = Неопределено;	 
	КонецЕсли;	
	
	Возврат ДанныеКВыгрузке;
		
КонецФункции

Функция ДанныеКВыгрузкеДляСостоянияВзвешенТараОтгрузка(РегистрацияНаПЛК)
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	гкс_РегистрацияНаПЛК.RFIDEPC КАК RFID,
	|	гкс_РегистрацияНаПЛК.Номенклатура.Наименование КАК CargoName,
	|	гкс_РегистрацияНаПЛК.ВесБрутто КАК Brutto,
	|	гкс_РегистрацияНаПЛК.ВесНетто КАК Netto,
	|	гкс_РегистрацияНаПЛК.ВесТары КАК TareWeight,
	|	ЕСТЬNULL(ТранспортныеСредства.НомерТранспортногоСредства, """") КАК CarNum,
	|	гкс_РегистрацияНаПЛК.Водитель КАК Driver,
	|	&Отмена КАК Cancel,
	|	ЕСТЬNULL(ТочкиПроезда.НомерПроезда, 0) КАК Entry
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК гкс_РегистрацияНаПЛК
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|		ПО гкс_РегистрацияНаПЛК.ТранспортноеСредство = ТранспортныеСредства.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_СтруктураПЛК КАК ТочкиПроезда
	|		ПО гкс_РегистрацияНаПЛК.МестоПогрузки = ТочкиПроезда.Ссылка
	|		И ТочкиПроезда.ВидОперации = ЗНАЧЕНИЕ(Перечисление.гкс_ВидыОперацийПЛК.Погрузка)
	|		И ТочкиПроезда.ТипТранспортныхСредств = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТранспортныхСредствДоставки.Автомобиль)
	|		И ТочкиПроезда.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Отгрузка)
	|ГДЕ
	|	гкс_РегистрацияНаПЛК.Ссылка = &Регистрация";

	Запрос.УстановитьПараметр("Регистрация", РегистрацияНаПЛК);
	Запрос.УстановитьПараметр("Отмена", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
			
		ДанныеЗапроса = РезультатЗапроса.Выгрузить();	
		СтрокаТаблицыДанныеЗапроса = ДанныеЗапроса.Получить(0);
		ДанныеКВыгрузке = гкс_ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыДанныеЗапроса);

		ДанныеКВыгрузке.Вставить("ID", ПолучитьУИДПоСсылке(РегистрацияНаПЛК));
		
	Иначе
		
		ДанныеКВыгрузке = Неопределено;	 
	КонецЕсли;	
	
	Возврат ДанныеКВыгрузке;
		
КонецФункции

#КонецОбласти

#Область ОбработкаСостояниеВзвешенБрутто

Функция ОбъектыXDTOДляСостоянияВзвешенБрутто(ПараметрыВыгрузки)
	
	МассивОбъектов = Новый Массив;

	ДанныеКВыгрузке = ДанныеКВыгрузкеДляСостоянияВзвешенБрутто(ПараметрыВыгрузки.ДокументРегистрации);
																		
	Если ЗначениеЗаполнено(ДанныеКВыгрузке) Тогда	
		ОбъектXDTO = СтруктуруВОбъектXDTO(ДанныеКВыгрузке, "WeighResultsMessage");
		Если ОбъектXDTO <> Неопределено Тогда
			МассивОбъектов.Добавить(ОбъектXDTO);
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивОбъектов;
	
КонецФункции

Функция ДанныеКВыгрузкеДляСостоянияВзвешенБрутто(РегистрацияНаПЛК)
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	РегистрацияНаПЛК.RFIDEPC КАК RFID,
	|	Взвешивание.Вес КАК Weight,
	|	Взвешивание.Дата КАК DateEnd,
	|	ЕСТЬNULL(ТочкиПроезда.НомерПроезда, 0) КАК Entry
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_Взвешивание КАК Взвешивание
	|		ПО Взвешивание.ДокументРегистрации = РегистрацияНаПЛК.Ссылка
	|		И Взвешивание.Проведен
	|		И Взвешивание.ТипВзвешивания = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Выезд)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_СтруктураПЛК КАК ТочкиПроезда
	|		ПО ТочкиПроезда.ВидОперации = ЗНАЧЕНИЕ(Перечисление.гкс_ВидыОперацийПЛК.ВзвешиваниеБрутто)
	|		И ТочкиПроезда.ТипТранспортныхСредств = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТранспортныхСредствДоставки.Автомобиль)
	|		И ТочкиПроезда.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Отгрузка)
	|ГДЕ
	|	РегистрацияНаПЛК.Ссылка = &Регистрация
	|	И РегистрацияНаПЛК.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Отгрузка)";
	
	Запрос.УстановитьПараметр("Регистрация", РегистрацияНаПЛК.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
			
		ДанныеЗапроса = РезультатЗапроса.Выгрузить();	
		СтрокаТаблицыДанныеЗапроса = ДанныеЗапроса.Получить(0);
		ДанныеКВыгрузке = гкс_ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыДанныеЗапроса);

		ДанныеКВыгрузке.Вставить("ID", ПолучитьУИДПоСсылке(РегистрацияНаПЛК));
		
	Иначе
		
		ДанныеКВыгрузке = Неопределено;	 
	КонецЕсли;	
	
	Возврат ДанныеКВыгрузке;
		
КонецФункции

#КонецОбласти

#Область ПодготовкаСообщенийКОтправке

Функция СтруктуруВОбъектXDTO(ДанныеВСтруктуре, ТипXDTOОбъекта)
	
	Если ТипXDTOОбъекта = "TransportEntryRequestMessage" Тогда
		ОбъектСообщение = ПолучитьОбъектXDTO_TransportEntryRequestMessage();
		
	ИначеЕсли ТипXDTOОбъекта = "WeighResultsMessage" Тогда
		ОбъектСообщение = ПолучитьОбъектXDTO_WeighResultsMessage();
		
	ИначеЕсли ТипXDTOОбъекта = "LaboratorySamplingMessage" Тогда
		ОбъектСообщение = ПолучитьОбъектXDTO_LaboratorySamplingMessage(); 		
	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураДанных = ОбъектXDTOВСтруктуру(ОбъектСообщение);	
	ЗаполнитьОбъектXDTO(ОбъектСообщение, ДанныеВСтруктуре, СтруктураДанных);
		
	Возврат ОбъектСообщение;	
		
КонецФункции

Функция ПолучитьОбъектXDTO_TransportEntryRequestMessage()
	
	ОбъектXDTO = СоздатьОбъект("TransportEntryRequestMessage");
	ОбъектXDTO.Cargo = СоздатьОбъект("CargoProperties"); 
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ПолучитьОбъектXDTO_LaboratorySamplingMessage()
	
	ОбъектXDTO = СоздатьОбъект("LaboratorySamplingMessage");
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ПолучитьОбъектXDTO_WeighResultsMessage()
	
	ОбъектXDTO = СоздатьОбъект("WeighResultsMessage");
	ОбъектXDTO.WeighResults = СоздатьОбъект("WeighResultsProperties"); 
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция СоздатьОбъект(ТипОбъектаСтрокой, Знач ПространствоИмен = Неопределено)
	
	Если ПространствоИмен = Неопределено Тогда
		ПространствоИмен = ОсновноеПространствоИменАСУТП();
	КонецЕсли;

	Возврат гкс_ОбщегоНазначения.СоздатьОбъект(ТипОбъектаСтрокой, ПространствоИмен);
	
КонецФункции

Процедура ЗаполнитьОбъектXDTO(ОбъектXDTO, ДанныеКВыгрузке, СтруктураДанных)
	
	ТипОбъектXDTO = Тип("ОбъектXDTO");
	
	Для каждого КлючИЗначение Из СтруктураДанных Цикл
		
		Если ТипЗнч(ОбъектXDTO[КлючИЗначение.Ключ]) = ТипОбъектXDTO Тогда
			ЗаполнитьОбъектXDTO(ОбъектXDTO[КлючИЗначение.Ключ], 
			 					ДанныеКВыгрузке, 
								СтруктураДанных[КлючИЗначение.Ключ]);	
			Продолжить;								
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение)
		И ДанныеКВыгрузке.Свойство(КлючИЗначение.Ключ)
		И ЗначениеЗаполнено(ДанныеКВыгрузке[КлючИЗначение.Ключ]) Тогда
			
			ОбъектXDTO[КлючИЗначение.Ключ] = ДанныеКВыгрузке[КлючИЗначение.Ключ];
			
		ИначеЕсли ЗначениеЗаполнено(КлючИЗначение.Значение)
		И ДанныеКВыгрузке.Свойство(КлючИЗначение.Значение)
		И ЗначениеЗаполнено(ДанныеКВыгрузке[КлючИЗначение.Значение]) Тогда
			
			ОбъектXDTO[КлючИЗначение.Ключ] = ДанныеКВыгрузке[КлючИЗначение.Значение];			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Преобразует объект XDTO в структуру
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO.
// 
// Возвращаемое значение:
//  Структура - Структура объекта.
//
Функция ОбъектXDTOВСтруктуру(ОбъектXDTO, ПараметрыПреобразования = Неопределено) Экспорт
	
	Структура = Новый Структура;
	ТипОбъектаXDTO = ОбъектXDTO.Тип();
	
	Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
		
		ИмяСвойства = Свойство.Имя;
		ЗначениеСвойства = ОбъектXDTO[ИмяСвойства];
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, ОбъектXDTOВСтруктуру(ЗначениеСвойства, ПараметрыПреобразования));
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, Новый Массив);
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				
				ЭлементСписка = ЗначениеСвойства.Получить(Индекс);
				Если ТипЗнч(ЭлементСписка) = Тип("ОбъектXDTO") Тогда
					Структура[ИмяСвойства].Добавить(ОбъектXDTOВСтруктуру(ЭлементСписка, ПараметрыПреобразования));
				Иначе
					Структура[ИмяСвойства].Добавить(ЭлементСписка);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Структура.Вставить(ИмяСвойства, ЗначениеСвойства);
			
			Если ПараметрыПреобразования <> Неопределено
				И ПараметрыПреобразования.НайтиИдентификаторы
				И Свойство.Тип = ПараметрыПреобразования.ТипUUID Тогда
				
				РезультатПоиска = ПараметрыПреобразования.ТипыИдентификаторов[ТипОбъектаXDTO];
				Если РезультатПоиска <> Неопределено
					И РезультатПоиска.ИмяПоля = ИмяСвойства Тогда
					ПараметрыПреобразования.Идентификаторы[РезультатПоиска.ИмяТаблицы].Вставить(ЗначениеСвойства, РезультатПоиска.ПустоеЗначение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьУИДПоСсылке(Ссылка)
	
	Если Ссылка.Пустая() Тогда 
		Возврат "";
	КонецЕсли;	
	
	Если ОбщегоНазначения.ЭтоПеречисление(Ссылка.Метаданные()) Тогда
		Возврат ОбщегоНазначения.ИмяЗначенияПеречисления(Ссылка);
	Иначе	
		Возврат Строка(Ссылка.УникальныйИдентификатор());
	КонецЕсли;		
	
КонецФункции
           
#КонецОбласти

Функция ОсновноеПространствоИменАСУТП()
	
	Возврат "https://sodrugestvo.com/TransportManagement/WeighingShipment/1.13";
	
КонецФункции

#КонецОбласти