#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.РегламентныеЗадания

// Определяет зависимости регламентных заданий и их дополнительные свойства.
//
// Параметры:
//  Настройки - ТаблицаЗначений:
//    * РегламентноеЗадание - ОбъектМетаданныхРегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданныхФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ - Булево - если регламентное задание зависит более чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево
//                                              - Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - Неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево
//                                  - Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - Неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево
//                                      - Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - Неопределено.
//    * ДоступноВМоделиСервиса - Булево
//                             - Неопределено - Ложь, если необходимо блокировать выполнение регламентного
//        задания (в т.ч. задания очереди) в информационной базе с включенным использованием разделителя.
//        Значение Неопределено трактуется как Истина.
//        По умолчанию - Неопределено.
//    * РаботаетСВнешнимиРесурсами - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.). Не следует устанавливать
//        значение Истина для регламентных заданий, не модифицирующих данные во внешних источниках.
//        Например, регламентное задание ЗагрузкаКурсовВалют. Регламентные задания, работающие с внешними ресурсами,
//        автоматически отключаются в копии информационной базы. По умолчанию - Ложь.
//    * Параметризуется - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.гкс_ОбновитьДанныеЖивойОчередиПриемки;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.гкс_ИспользоватьЭлектроннуюОчередь;
	Настройка.ДоступноВМоделиСервиса = Ложь;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.гкс_ОбновлениеСтатусовЭлектроннойОчередиПЛК;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.гкс_ИспользоватьЭлектроннуюОчередь;
	Настройка.ДоступноВМоделиСервиса = Ложь;
	
	// ОбновлениеТаблоЭлектроннойОчереди
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.гкс_ОбновлениеТаблоЭлектроннойОчереди;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.гкс_ИспользоватьЭлектронноеТабло;
	Настройка.ЗависимостьПоИ = Истина;
	Настройка.ДоступноВМоделиСервиса = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.гкс_ОбновлениеТаблоЭлектроннойОчереди;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.гкс_ИспользоватьЭлектроннуюОчередь;
	Настройка.ЗависимостьПоИ = Истина;
	Настройка.ДоступноВМоделиСервиса = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	// Конец гкс_ОбновлениеТаблоЭлектроннойОчереди
		
КонецПроцедуры

// Конец СтандартныеПодсистемы.РегламентныеЗадания

#КонецОбласти

// Читает документ .docx и возвращает содержимое в виде структуры
//
// Параметры:
//  ДанныеДокумента  - ДвоичныеДанные - Файл документа Word
//
// Возвращаемое значение:
//   Строка   - Адрес хранилища со структурой документа
//
Функция ПолучитьДанныеЭлектроннойЗаявкиWord(ДанныеДокумента) Экспорт
	
	ИмяФайлаСПутемZIP = ПолучитьИмяВременногоФайла(".zip");
	ДанныеДокумента.Записать(ИмяФайлаСПутемZIP);
	
	ВременнаяПапкаДляРазархивирования = ПолучитьИмяВременногоФайла("");
	
	Архив = Новый ЧтениеZipФайла();
	Архив.Открыть(ИмяФайлаСПутемZIP);
	Архив.ИзвлечьВсе(ВременнаяПапкаДляРазархивирования, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Архив.Закрыть();
	
	СтруктураДокумента = РазобратьДокументWord(ВременнаяПапкаДляРазархивирования);
	
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования);	
	УдалитьФайлы(ИмяФайлаСПутемZIP);
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ВыполнитьДлительнуюОперацию(ИдентификаторФормы, АдресДокументаВХранилище) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получить данные электронной заявки Word'");
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		"гкс_ЭлектроннаяОчередьСервер.ПолучитьДанныеЭлектроннойЗаявкиWord", 
		ПолучитьИзВременногоХранилища(АдресДокументаВХранилище));
	
КонецФункции 

// Запускает рег. задание для заполнения регистра сведений 
// "гкс_РегистрацииПоЭлектроннойОчереди" за предыдущую производственную дату
//
Процедура ВыполнитьОбновлениеДанныхЖивойОчередиПриемкиРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.гкс_ОбновитьДанныеЖивойОчередиПриемки);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
		
	ДатаНачалаПроизводственныхСуток = гкс_ПриемкаТранспорта.ДатаНачалаПроизводственныхСуток(ТекущаяДатаСеанса());
	ПредыдущаяСмена = ДатаНачалаПроизводственныхСуток - гкс_ОбщегоНазначенияКлиентСервер.СекундВДне();
	
	ОбновитьДанныеЖивойОчередиПриемки(ПредыдущаяСмена);

КонецПроцедуры

// Заполняет регистр сведений "гкс_РегистрацииПоЭлектроннойОчереди" за производственную дату
//
Процедура ОбновитьДанныеЖивойОчередиПриемки(ПроизводственнаяДата) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьЭлектроннуюОчередь = ПолучитьФункциональнуюОпцию("гкс_ИспользоватьЭлектроннуюОчередь");	
	Если НЕ ИспользоватьЭлектроннуюОчередь Тогда
		Возврат;	
	КонецЕсли;
	
	Период = Новый Структура; 
	Период.Вставить("ДатаНачала", гкс_ПриемкаТранспорта.НачалоПроизводственныхСуток(ПроизводственнаяДата));
	Период.Вставить("ДатаОкончания", гкс_ПриемкаТранспорта.ОкончаниеПроизводственныхСуток(ПроизводственнаяДата));
	
	НачатьТранзакцию();
	
	Попытка
		
		ОчиститьСвязиЗаявокЗаПериод(Период);
		
		ТаблицаРегистраций = ТаблицаРегистрацийПроизводственныхСуток(Период); 
		ТаблицаЗаявок = ТаблицаЗаявокПроизводственныхСуток(Период);
		
		Для Каждого ЭлектроннаяОчередь Из ТаблицаЗаявок Цикл
			
			Если Не ЗначениеЗаполнено(ЭлектроннаяОчередь.УсловиеПроезда) Тогда
				Продолжить;	
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("НомерТС", ЭлектроннаяОчередь.НомерТС);
			ПараметрыОтбора.Вставить("Номенклатура", ЭлектроннаяОчередь.Номенклатура);
			
			Если ЭлектроннаяОчередь.УсловиеПроезда = Справочники.гкс_УсловияПроезда.FCA Тогда
				ПолеПоискаКонтрагента = "Контрагент";	
			Иначе			
				ПолеПоискаКонтрагента = "ОтправительПолучатель";
			КонецЕсли;
			
			ПараметрыОтбора.Вставить(ПолеПоискаКонтрагента, ЭлектроннаяОчередь.Контрагент);     
			
			ОпределитьДокументРегистрацииДляЗаписиВОчередь(ЭлектроннаяОчередь, ТаблицаРегистраций, ПараметрыОтбора);
			
		КонецЦикла;
		
		ОбновитьДанныеРегистрацийПоЭлектроннойОчереди(ТаблицаРегистраций);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию(); 
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронная очередь. Обновление данных живой очереди'"),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'Не удалось обновить данные живой очереди за %1'"), ПроизводственнаяДата);	
		ВызватьИсключение ТекстИсключения;
	
	КонецПопытки;
	
КонецПроцедуры

// Определяет количество минут отклонения времени регистрации на ПЛК от времени записи
//
// Параметры:
//  ЗаписьВОчередь  - ДокументСсылка.гкс_ЗаписьВОчередьПриемкиПЛК - документ записи в электронную очередь
//
//  ДатаРегистрации  - Дата - дата регистрации на ПЛК
//
// Возвращаемое значение:
//   Число   - количество минут между временем записи в очередь и приездом на ПЛК 
//
Функция ОтклонениеОтЗаписиВОчередь(ЗаписьВОчередь, ДатаРегистрации) Экспорт
	
	НачалоПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьВОчередь, "НачалоПериода");
	ОтклонениеВМинутах = (НачалоПериода - ДатаРегистрации)/гкс_ОбщегоНазначенияКлиентСервер.СекундВМинуте();
	ОтклонениеВМинутах = Макс(-ОтклонениеВМинутах, ОтклонениеВМинутах); // интересует абсолютное значение
	
	Возврат ОтклонениеВМинутах;
	
КонецФункции	

// Получает записи по электронной очереди приемки по параметрам
// 
// Параметры:
//  - ТипРегистрации - Перечисление.гкс_ТипРегистрации - тип регистрации авто на ПЛК
//  - ДатаРегистрации - Дата - дата приезда на ПЛК
//	- Контрагент - Справочник.Контрагенты - контрагент по записи
//  - Номенклатура - Справочник.Номенклатура - номенклатура по записи
//  - НомерТранспорта - Строка - номер для поиска 
//  - УсловиеПроезда - Справочник.гкс_УсловияПроезда - фильтр по условию проезда для приемки
//
// Возвращаемое значение:
//  Структура -
//			"ЗаписьВОчередь" - документ типа "гкс_ЗаписьВОчередьПриемкиПЛК" или "гкс_ЗаписьВОчередьОтгрузкиПЛК"
//			"ОтклонениеВМинутах" - отклонение регистрации от предварительной записи
//
Функция ЗаписиВОчередьВПроизводственныхСутках(
	ТипРегистрации, ДатаРегистрации, Контрагент, Номенклатура, НомерТранспорта, 
	УсловиеПроезда = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаписиВОчередьВПроизводственныхСутках(ТипРегистрации);
	
	Если ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда
		
		Если НЕ УсловиеПроезда = Справочники.гкс_УсловияПроезда.FCA Тогда	
			Запрос.УстановитьПараметр("Контрагент", Контрагент);	
		Иначе		
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЭлектроннаяОчередь.Контрагент = &Контрагент", "");	
		КонецЕсли;
		
	ИначеЕсли ТипРегистрации = Перечисления.гкс_ТипРегистрации.Отгрузка Тогда 
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
	Иначе	
		ВызватьИсключение ТекстОшибки(НСтр("ru = 'Неверное значение параметра ""Тип регистрации"".'"));
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ДатаРегистрации", ДатаРегистрации); 
	
	ПериодСмены = гкс_ПриемкаТранспорта.ПериодПроизводственнойСмены(ДатаРегистрации);
	Запрос.УстановитьПараметр("ДатаНачалаПроизводственныхСуток", ПериодСмены.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияПроизводственныхСуток", ПериодСмены.ОкончаниеПериода);
	
	КоличествоСимволовСравнения = гкс_ПриемкаТранспорта.КоличествоСимволовДляПоискаПоНомеру();
	Запрос.УстановитьПараметр("ПолеПоискаГосНомер", 
		гкс_ПриемкаТранспорта.ПолеПоискаГосНомер(НомерТранспорта, КоличествоСимволовСравнения));

	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураЗаписи = Новый Структура;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		СтруктураЗаписи.Вставить("ЗаписьВОчередь", Выборка.ЗаписьВОчередь);
		СтруктураЗаписи.Вставить("ОтклонениеВМинутах", 
			?(Выборка.ОпозданиеВМинутах >= 0, Выборка.ОпозданиеВМинутах, -1 * Выборка.ОпозданиеВМинутах));
				
	КонецЕсли;	
	
	Возврат СтруктураЗаписи;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РазборДокументаWord

Функция РазобратьДокументWord(ВременнаяПапкаДляРазархивирования)
	
	СтруктураДокумента = ИнинциализироватьСтруктуруДокумента();
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/document.xml");
	
	ПрочитатьШапкуДокумента(ЧтениеXML, СтруктураДокумента["Шапка"]);
	
	ПрочитатьТаблицуДокумента(ЧтениеXML, СтруктураДокумента["Таблица"]);

	ЧтениеXML.Закрыть();	
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ИнинциализироватьСтруктуруДокумента()
	
	СтруктураДокумента = 					Новый Структура;
	СтруктураДокумента.Вставить("Шапка", 	Новый Массив);
	СтруктураДокумента.Вставить("Таблица", 	Новый Структура);
	
	ТаблицаДокумента = 						СтруктураДокумента["Таблица"];
	ТаблицаДокумента.Вставить("Колонки", 	Новый Массив);
	ТаблицаДокумента.Вставить("Строки", 	Новый Массив);
	
	Возврат СтруктураДокумента;
	
КонецФункции

Процедура ПрочитатьШапкуДокумента(ЧтениеXML, ШапкаДокумента)
	
	// Ожидаем следующую структуру
	// текст, таблица, текст
	// прекратим чтение как дойдем до таблицы
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Имя = "w:p" Тогда
				
				ТекстУзла = "";		
				ПрочитатьТекстУзла(ЧтениеXML, ТекстУзла, "w:p");
				Если Не ПустаяСтрока(ТекстУзла) Тогда
					ШапкаДокумента.Добавить(ТекстУзла);
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.Имя = "w:tbl" Тогда
				// дошли до таблицы. возвращаемся
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьТаблицуДокумента(ЧтениеXML, ТаблицаДокумента)
	
	// ожидаем позиционирование уже выполнено
	
	Если ЧтениеXML.Имя <> "w:tbl" Тогда
		Возврат;
	КонецЕсли;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Имя = "w:tblGrid" Тогда
				
				ПрочитатьКолонкиТаблицы(ЧтениеXML, ТаблицаДокумента["Колонки"]);
				
			ИначеЕсли ЧтениеXML.Имя = "w:tr" Тогда
				// ряд таблицы
				
				СтрокаТаблицы = Новый Массив;
				
				ПрочитатьСтрокуТаблицы(ЧтениеXML, СтрокаТаблицы);
				
				ТаблицаДокумента.Строки.Добавить(СтрокаТаблицы);
				
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеXML.Имя = "w:tbl" Тогда
				Прервать;
			КонецЕсли;   			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьКолонкиТаблицы(ЧтениеXML, ТаблицаДокументаКолонки)
	
	// ожидаем позиционирование уже выполнено
	
	Если ЧтениеXML.Имя <> "w:tblGrid" Тогда
		Возврат;
	КонецЕсли;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
					И ЧтениеXML.Имя = "w:gridCol" Тогда
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "w:w" Тогда 
						ТаблицаДокументаКолонки.Добавить(ЧтениеXML.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
					И ЧтениеXML.Имя = "w:tblGrid" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьСтрокуТаблицы(ЧтениеXML, СтрокаТаблицы)
	
	// ожидаем позиционирование уже выполнено
	
	Если ЧтениеXML.Имя <> "w:tr" Тогда
		Возврат;
	КонецЕсли;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
					И ЧтениеXML.Имя = "w:tc" Тогда
					
			ТекстУзла = "";		
			ПрочитатьТекстУзла(ЧтениеXML, ТекстУзла, "w:tc");
			СтрокаТаблицы.Добавить(ТекстУзла);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
					И ЧтениеXML.Имя = "w:tr" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьТекстУзла(ЧтениеXML, ТекстУзла, ИмяУзла)
	
	Если ЧтениеXML.Имя <> ИмяУзла Тогда
		Возврат;
	КонецЕсли;
	
	ТекстУзла = "";
	
	ЕстьПробел = Ложь; 
	// пробел учитываем только если он с предыдущего узла
	ПробелТекущегоУзла = Ложь;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			И ЧтениеXML.Имя = "w:t" Тогда
			
			ПробелТекущегоУзла = Ложь;
			
			Если Не ЕстьПробел
				И ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "xml:space" Тогда
						ЕстьПробел = Истина;
						ПробелТекущегоУзла = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			ТекстУзла = ТекстУзла 
						+ ?(ЕстьПробел И НЕ ПробелТекущегоУзла, " ", "")
						+ ЧтениеXML.Значение;
			ЕстьПробел = Ложь;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
					И ЧтениеXML.Имя = ИмяУзла Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Определяет количество минут отклонения времени регистрации на ПЛК от времени записи
//
// Параметры:
//  ЭлектроннаяОчередь  - ДокументСсылка.гкс_ЗаписьВОчередьПриемкиПЛК - документ записи  в электронную очередь
// 
//  ТаблицаРегистраций  - ТаблицаЗначений - таблица регистраций
//
//  ПараметрыОтбора  - Структура - фильтр отбора записе в  таблице регистраций
//

Процедура ОпределитьДокументРегистрацииДляЗаписиВОчередь(ЭлектроннаяОчередь, ТаблицаРегистраций, ПараметрыОтбора) 
	
	ПараметрыОтбора.Вставить("ЗаписьВОчередь", Документы.гкс_ЗаписьВОчередьПриемкиПЛК.ПустаяСсылка()); 
	
	НайденныеСтроки = ТаблицаРегистраций.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда 
		
		НайденаяСтрока = НайденныеСтроки[0];
			
		ОтклонениеВМинутах = ОтклонениеОтЗаписиВОчередь(
			ЭлектроннаяОчередь.ЗаписьВОчередь, НайденаяСтрока.ДатаРегистрации);
		
		НайденаяСтрока.ЗаписьВОчередь = ЭлектроннаяОчередь.ЗаписьВОчередь;
		НайденаяСтрока.ОтклонениеВМинутах = ОтклонениеВМинутах;		
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаЗаявокПроизводственныхСуток(Период)
	
	ТаблицаЗаявок = ИнициализацияТаблицыЗаявок();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьПриемкиПЛК.НачалоПериода КАК НачалоПериода,
	|	ОчередьПриемкиПЛК.ОкончаниеПериода КАК ОкончаниеПериода,
	|	ОчередьПриемкиПЛК.Номенклатура КАК Номенклатура,
	|	ЗаписьВОчередьПриемкиПЛК.Контрагент КАК Контрагент,
	|	ОчередьПриемкиПЛК.НомерТранспортногоСредства КАК НомерТС,
	|	ОчередьПриемкиПЛК.Регистратор КАК ЗаписьВОчередь,
	|	ЗаписьВОчередьПриемкиПЛК.УсловиеПроезда КАК УсловиеПроезда
	|ИЗ
	|	РегистрСведений.гкс_ОчередьПриемкиПЛК КАК ОчередьПриемкиПЛК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ЗаписьВОчередьПриемкиПЛК КАК ЗаписьВОчередьПриемкиПЛК
	|		ПО ОчередьПриемкиПЛК.Регистратор = ЗаписьВОчередьПриемкиПЛК.Ссылка
	|ГДЕ
	|	ОчередьПриемкиПЛК.НачалоПериода >= &НачалоПериода
	|	И ОчередьПриемкиПЛК.ОкончаниеПериода <= &ОкончаниеПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода";
	
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Период.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаЗаявок.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗаявок;
	
КонецФункции

Функция ИнициализацияТаблицыЗаявок()
	
	ОписаниеТипаКонтрагент 		= Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ОписаниеТипаНоменклатура 	= Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ОписаниеТипаЗаписьВОчередь 	= Новый ОписаниеТипов("ДокументСсылка.гкс_ЗаписьВОчередьПриемкиПЛК");
	
	ОписаниеТипаНомерТС = Новый ОписаниеТипов("Строка", , 
		Новый КвалификаторыСтроки(гкс_ПриемкаТранспорта.КоличествоСимволовДляПоискаПоНомеру()));
	
	ТаблицаЗаявок = Новый ТаблицаЗначений;
	Колонки = ТаблицаЗаявок.Колонки;
	Колонки.Добавить("НачалоПериода");
	Колонки.Добавить("ОкончаниеПериода");
	Колонки.Добавить("Номенклатура", ОписаниеТипаНоменклатура);
	Колонки.Добавить("Контрагент", ОписаниеТипаКонтрагент);
	Колонки.Добавить("НомерТС", ОписаниеТипаНомерТС);
	Колонки.Добавить("УсловиеПроезда");
	Колонки.Добавить("ЗаписьВОчередь", ОписаниеТипаЗаписьВОчередь);
	
	Возврат ТаблицаЗаявок;
	
КонецФункции	

Функция ТаблицаРегистрацийПроизводственныхСуток(Период)
	
	ТаблицаРегистраций = ИнициализацияТаблицыРегистраций();
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументРегистрацияНаПЛК.Ссылка КАК Регистрация,
	|	ДокументРегистрацияНаПЛК.Номенклатура КАК Номенклатура,
	|	ДокументРегистрацияНаПЛК.Контрагент КАК Контрагент,
	|	ДокументРегистрацияНаПЛК.ОтправительПолучатель КАК ОтправительПолучатель,
	|	ТранспортныеСредства.НомерТранспортногоСредства КАК НомерТС,
	|	ДокументРегистрацияНаПЛК.Дата КАК ДатаРегистрации
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК ДокументРегистрацияНаПЛК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|		ПО ДокументРегистрацияНаПЛК.ТранспортноеСредство = ТранспортныеСредства.Ссылка
	|ГДЕ
	|	ДокументРегистрацияНаПЛК.ВидПеревозки = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТранспортныхСредствДоставки.Автомобиль)
	|	И ДокументРегистрацияНаПЛК.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка)
	|	И ДокументРегистрацияНаПЛК.Проведен
	|	И ДокументРегистрацияНаПЛК.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументРегистрацияНаПЛК.Дата";
	
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);	
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока= ТаблицаРегистраций.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаРегистраций;
	
КонецФункции

Функция ИнициализацияТаблицыРегистраций()
	
	ОписаниеТипаКонтрагент 		= Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ОписаниеТипаНоменклатура 	= Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ОписаниеТипаРегистрация 	= Новый ОписаниеТипов("ДокументСсылка.гкс_РегистрацияНаПЛК");
	ОписаниеТипаЗаписьВОчередь 	= Новый ОписаниеТипов("ДокументСсылка.гкс_ЗаписьВОчередьПриемкиПЛК");
	ОписаниеТипаЧисло		 	= Новый ОписаниеТипов("Число");
	
	ОписаниеТипаНомерТС = Новый ОписаниеТипов("Строка", , 
		Новый КвалификаторыСтроки(гкс_ПриемкаТранспорта.КоличествоСимволовДляПоискаПоНомеру()));
	
	ТаблицаРегистраций = Новый ТаблицаЗначений;
	Колонки = ТаблицаРегистраций.Колонки;
	Колонки.Добавить("Номенклатура", ОписаниеТипаНоменклатура);
	Колонки.Добавить("Контрагент", ОписаниеТипаКонтрагент);
	Колонки.Добавить("ОтправительПолучатель", ОписаниеТипаКонтрагент);
	Колонки.Добавить("НомерТС", ОписаниеТипаНомерТС);
	Колонки.Добавить("Регистрация", ОписаниеТипаРегистрация);
	Колонки.Добавить("ДатаРегистрации");
	Колонки.Добавить("ЗаписьВОчередь", ОписаниеТипаЗаписьВОчередь);
	Колонки.Добавить("ОтклонениеВМинутах", ОписаниеТипаЧисло);
	
	Возврат ТаблицаРегистраций;
	
КонецФункции

Процедура ОчиститьСвязиЗаявокЗаПериод(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписьВОчередьПриемкиПЛК.Ссылка КАК ЗаписьВОчередь
	|ИЗ
	|	Документ.гкс_ЗаписьВОчередьПриемкиПЛК КАК ЗаписьВОчередьПриемкиПЛК
	|ГДЕ
	|	ЗаписьВОчередьПриемкиПЛК.НачалоПериода >= &НачалоПериода
	|	И ЗаписьВОчередьПриемкиПЛК.ОкончаниеПериода <= &ОкончаниеПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаписьВОчередьПриемкиПЛК.НачалоПериода";
	
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Период.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		ОчиститьСвязьЗаявки(ВыборкаДетальныеЗаписи.ЗаписьВОчередь);		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОчиститьСвязьЗаявки(Заявка)
	
	гкс_РегистрацииПоЭлектроннойОчереди = РегистрыСведений.гкс_РегистрацииПоЭлектроннойОчереди;
	 			
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ЗаписьВОчередь", Заявка);
	
	гкс_РегистрацииПоЭлектроннойОчереди.УдалитьЗапись(СтруктураЗаписи, Истина);
	
КонецПроцедуры   

Процедура ОбновитьДанныеРегистрацийПоЭлектроннойОчереди(ТаблицаРегистраций)
	
	гкс_РегистрацииПоЭлектроннойОчереди = РегистрыСведений.гкс_РегистрацииПоЭлектроннойОчереди;
	
	СтруктураЗаписи = Новый Структура;
	
	Для Каждого СтрокаЗаписей Из ТаблицаРегистраций Цикл 
		
		Если Не (ЗначениеЗаполнено(СтрокаЗаписей.ЗаписьВОчередь) И ЗначениеЗаполнено(СтрокаЗаписей.Регистрация)) Тогда			
			Продолжить;
		КонецЕсли;	
		
		СтруктураЗаписи.Вставить("ЗаписьВОчередь", СтрокаЗаписей.ЗаписьВОчередь);
		СтруктураЗаписи.Вставить("РегистрацияНаПЛК", СтрокаЗаписей.Регистрация);
		СтруктураЗаписи.Вставить("ОтклонениеВМинутах", СтрокаЗаписей.ОтклонениеВМинутах);
		
		гкс_РегистрацииПоЭлектроннойОчереди.ДобавитьЗапись(СтруктураЗаписи, Истина);
		
	КонецЦикла;                  
	
КонецПроцедуры

Функция ТекстОшибки(ТекстОшибки)
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат СтрШаблон("%1 %2 %3", ТекстОшибки, Символы.ПС, 
			НСтр("ru = 'Подробности см. в журнале регистрации.'"));
	КонецЕсли;
	
	Возврат СтрШаблон("%1 %2 %3", ТекстОшибки, Символы.ПС,
		НСтр("ru = 'Обратитесь к администратору.'"));
	
КонецФункции

Функция ТекстЗапросаЗаписиВОчередьВПроизводственныхСутках(ТипРегистрации)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектроннаяОчередь.Регистратор КАК ЗаписьВОчередь,
	|	ВЫБОР
	|		КОГДА ЭлектроннаяОчередь.НачалоПериода <= &ДатаРегистрации
	|		И ЭлектроннаяОчередь.ОкончаниеПериода >= &ДатаРегистрации
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПоЗаписи,
	|	ЭлектроннаяОчередь.НачалоПериода КАК НачалоПериода,
	|	ЭлектроннаяОчередь.ОкончаниеПериода КАК ОкончаниеПериода,
	|	РАЗНОСТЬДАТ(ЭлектроннаяОчередь.НачалоПериода, &ДатаРегистрации, МИНУТА) КАК ОпозданиеВМинутах,
	|	POW(РАЗНОСТЬДАТ(ЭлектроннаяОчередь.НачалоПериода, &ДатаРегистрации, МИНУТА), 2) КАК Отклонение
	|ИЗ
	|	&РегистрСведенийЭлектроннаяОчередь КАК ЭлектроннаяОчередь
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_РегистрацииПоЭлектроннойОчереди КАК РегистрацииПоЭлектроннойОчереди
	|		ПО ЭлектроннаяОчередь.Регистратор = РегистрацииПоЭлектроннойОчереди.ЗаписьВОчередь	
	|ГДЕ
	|	ЭлектроннаяОчередь.Номенклатура = &Номенклатура
	|	И ЭлектроннаяОчередь.НачалоПериода >= &ДатаНачалаПроизводственныхСуток
	|	И ЭлектроннаяОчередь.ОкончаниеПериода <= &ДатаОкончанияПроизводственныхСуток
	|	И РегистрацииПоЭлектроннойОчереди.РегистрацияНаПЛК ЕСТЬ NULL
	|	И ЭлектроннаяОчередь.НомерТранспортногоСредства ПОДОБНО &ПолеПоискаГосНомер
	|	И ЭлектроннаяОчередь.Контрагент = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Отклонение";
	
	Если ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда	
		ИмяИсточика = "РегистрСведений.гкс_ОчередьПриемкиПЛК";
		
	ИначеЕсли ТипРегистрации = Перечисления.гкс_ТипРегистрации.Отгрузка Тогда
		ИмяИсточика = "РегистрСведений.гкс_ОчередьОтгрузкиПЛК";
				
	Иначе
		ВызватьИсключение "Некорректные параметры функции 'ТекстЗапросаЗаписиВОчередьПриемкиВПроизводственныхСутках'";		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РегистрСведенийЭлектроннаяОчередь", ИмяИсточика);

	Возврат ТекстЗапроса;	
	
КонецФункции

#КонецОбласти