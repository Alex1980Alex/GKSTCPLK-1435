
#Область ПрограммныйИнтерфейс

// Возвращает массив значений результатов взвешивания
//
// Параметры:
//  УникальныйИдентификатор  - УникальныйИдентификатор - идентификатор формы 
//                             в которую необходимо передать вес
//  Весы  - СправочникСсылка.гкс_ОборудованиеПЛК - весы для взвешивания
//  КоличествоИзмерений  - число - количество итераций измерений
//
// Возвращаемое значение:
//   Массив.Число   - массив с результатами взвешивания
//
Функция РезультатыВзвешивания(УникальныйИдентификатор, Весы, 
							  КоличествоИзмерений = 1, АвтоматическоеВзвешивание = Ложь) Экспорт
	
	МассивПоказаний = Новый Массив();
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Id", УникальныйИдентификатор);
	ДанныеЗаполнения.Вставить("Весы", Весы);
	
	ДанныеКВыгрузке = ПолучитьДанныеДляВыгрузки(ДанныеЗаполнения);
	
	ПараметрыПодключения = ПараметрыТочкиПодключения(Весы);
	
	ИмяСервера = ПараметрыПодключения.ИмяСервера; 
	ИмяТочкиОбмена = ПараметрыПодключения.ИмяТочкиОбмена;
	КлючМаршрутизации = ПараметрыПодключения.КлючМаршрутизации;
	
	ИмяОчередиОтвета = ИмяОчередиОтвета(ДанныеКВыгрузке.Entry, АвтоматическоеВзвешивание);
	
	КлиентОчередиПолучения = ИнициализацияОчередиОтвета(ИмяСервера, ИмяТочкиОбмена, 
												  ИмяОчередиОтвета, ПараметрыПодключения.Автоудаление);
												  
	КлиентОчередиОтправки = ПодключениеКСерверуОчередей(ИмяСервера);	
	
	СвойстваСообщения = СвойстваСообщения(ИмяОчередиОтвета);
	КлиентОчередиОтправки.УстановитьСвойстваСообщения(СвойстваСообщения);					
	
	Сообщение = ЗначениеВJSON(ДанныеКВыгрузке);	
	
	ВремяОжиданияОтветаВесов = ВремяОжиданияОтвета(Весы);
	
	// отправка сообщений в очередь
	СчетчикВзвешиваний = 0;
	Пока СчетчикВзвешиваний < КоличествоИзмерений Цикл
		
		КлиентОчередиОтправки.ОтправитьСообщение(ИмяТочкиОбмена, Сообщение, КлючМаршрутизации);		
		ОтветСервиса = ОжидатьОтвет(КлиентОчередиПолучения, ИмяОчередиОтвета, ВремяОжиданияОтветаВесов);
		
		ИД = "";		
		Если ТипЗнч(ОтветСервиса) = Тип("Структура") 
			И ОтветСервиса.Свойство("Id", ИД)
			И Строка(УникальныйИдентификатор) = ИД Тогда
			
			ОписаниеОшибкиСервиса = "";
			Если (ОтветСервиса.Свойство("ErrorMessage", ОписаниеОшибкиСервиса) 
				И ЗначениеЗаполнено(ОписаниеОшибкиСервиса)) Тогда
				
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Ошибка сервиса весов (WD): %1'"), ОписаниеОшибкиСервиса);		
			КонецЕсли;
			
			МассивПоказаний.Добавить(ОтветСервиса.Weight);
			
		КонецЕсли;
		
		СчетчикВзвешиваний = СчетчикВзвешиваний + 1;
	КонецЦикла;
		
	Возврат МассивПоказаний;			
	
КонецФункции

// Удаляет очередь ответа от сервиса взвешивания для указанных весов
//
// Параметры:
//  Весы  - СправочникСсылка.гкс_ОборудованиеПЛК - весы у которых будет удаляться очередь
//
Процедура УдалитьОчередьСообщений(Весы) Экспорт
	
	ПараметрыПодключения = ПараметрыТочкиПодключения(Весы);
    ИмяОчереди = ИмяОчередиОтвета(ПараметрыПодключения.НомерПроезда, 
								  ПараметрыПодключения.АвтоматическоеВзвешивание);
		
	Если ПараметрыПодключения.Автоудаление Тогда 
		Возврат;	
	КонецЕсли;	
		
	КлиентОчередиСообщений = ОчередьСообщений.СоздатьЭкземплярКомпоненты();
	КлиентОчередиСообщений.УстановитьСоединение(ПараметрыПодключения.АдресСервера,
		ПараметрыПодключения.Логин, ПараметрыПодключения.Пароль,
		ПараметрыПодключения.Порт, ПараметрыПодключения.ВиртуальныйХост);
		
	КлиентОчередиСообщений.УдалитьОчередь(ИмяОчереди);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначениеВJSON(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#Область ПодготовкаСообщенийКОтправке

Функция СвойстваСообщения(ИмяОчередиОтвета)
	
	Свойства = Новый Структура;
	Свойства.Вставить("ТипСодержимого", "application/json");
	Свойства.Вставить("Тип", "WeightRequestMessage");
	Свойства.Вставить("ОбратныйАдрес", ИмяОчередиОтвета);

	Возврат Свойства;

КонецФункции

Функция ПолучитьДанныеДляВыгрузки(ДанныеЗаполнения)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Id", Строка(ДанныеЗаполнения.Id));
	
	НомерПроезда = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Весы, "гкс_НомерПроезда");
	
	Если ЗначениеЗаполнено(НомерПроезда) Тогда	
		ЗначенияЗаполнения.Вставить("Entry", НомерПроезда);
	Иначе
		ТекстОшибки = НСтр("ru = 'У весов %1 не указан ""Номер проезда"".'");	
		ВызватьИсключение СтрШаблон(ТекстОшибки, ДанныеЗаполнения.Весы);
	КонецЕсли;

	Возврат ЗначенияЗаполнения;
		
КонецФункции

#КонецОбласти

#Область ВзаимодействиеСОчередями

Функция ИмяОчередиОтвета(НомерПроезда, АвтоматическоеВзвешивание)
	
	Суффикс = ?(АвтоматическоеВзвешивание, "_auto", "");
	
	Возврат СтрШаблон("wd_ut_%1%2", НомерПроезда, Суффикс);
	
КонецФункции

Функция ИмяПотребителя(ИмяОчереди)

	Возврат СтрШаблон("%1.cons", ИмяОчереди);

КонецФункции 

Функция ПараметрыТочкиПодключения(Весы)
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ИмяСервера");
	ПараметрыПодключения.Вставить("АдресСервера");
	ПараметрыПодключения.Вставить("Логин");
	ПараметрыПодключения.Вставить("Пароль");
	ПараметрыПодключения.Вставить("Порт");
	ПараметрыПодключения.Вставить("ВиртуальныйХост");
	ПараметрыПодключения.Вставить("ИмяТочкиОбмена");
	ПараметрыПодключения.Вставить("КлючМаршрутизации");
	ПараметрыПодключения.Вставить("Автоудаление");
	ПараметрыПодключения.Вставить("НомерПроезда");
	ПараметрыПодключения.Вставить("АвтоматическоеВзвешивание");
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТочкиОбменаRMQ.Наименование КАК ИмяТочкиОбмена,
	|	ОборудованиеПЛК.КлючМаршрутизации КАК КлючМаршрутизации,
	|	ОборудованиеПЛК.АвтоудалениеОчередиОтвета КАК Автоудаление,
	|	ОборудованиеПЛК.гкс_НомерПроезда КАК НомерПроезда,
	|	ОборудованиеПЛК.ИспользоватьАвтоматическоеВзвешивание КАК АвтоматическоеВзвешивание,
	|	СерверыОчередейRMQ.Код КАК ИмяСервера,
	|	СерверыОчередейRMQ.АдресСервера КАК АдресСервера,
	|	СерверыОчередейRMQ.ВиртуальныйХост КАК ВиртуальныйХост,
	|	СерверыОчередейRMQ.Порт КАК Порт,
	|	СерверыОчередейRMQ.Логин КАК Логин,
	|	СерверыОчередейRMQ.Пароль КАК Пароль
	|ИЗ
	|	Справочник.гкс_ОборудованиеПЛК КАК ОборудованиеПЛК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гкс_ТочкиОбменаRMQ КАК ТочкиОбменаRMQ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерверыОчередейRMQ КАК СерверыОчередейRMQ
	|			ПО ТочкиОбменаRMQ.Владелец = СерверыОчередейRMQ.Ссылка
	|		ПО ОборудованиеПЛК.ТочкаОбмена = ТочкиОбменаRMQ.Ссылка
	|ГДЕ
	|	ОборудованиеПЛК.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Весы);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ЗаполнитьЗначенияСвойств(ПараметрыПодключения, ВыборкаДетальныеЗаписи); 
		
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(ПараметрыПодключения.ИмяСервера) 
		И ЗначениеЗаполнено(ПараметрыПодключения.ИмяТочкиОбмена) 
		И ЗначениеЗаполнено(ПараметрыПодключения.КлючМаршрутизации)) Тогда
		
		ТекстОшибки = НСтр("ru = 'У весов %1 не указаны необходимые параметры точки подключения к RabbbitMQ.'");
		
		ВызватьИсключение СтрШаблон(ТекстОшибки, Весы);
	КонецЕсли;
	
	Возврат ПараметрыПодключения;
	
КонецФункции

Функция ВремяОжиданияОтвета(Весы)
	
	Результат = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	гкс_ОборудованиеПЛК.ВремяОжиданияОтвета
	|ИЗ
	|	Справочник.гкс_ОборудованиеПЛК КАК гкс_ОборудованиеПЛК
	|ГДЕ
	|	гкс_ОборудованиеПЛК.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Весы);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.ВремяОжиданияОтвета;
	КонецЕсли;
	
	Возврат ?(Результат = 0, 5000, Результат); 
	
КонецФункции	

Функция ПодключениеКСерверуОчередей(ИмяСервера)
	
	СерверОчередей = ОчередьСообщений.ПолучитьЭкземплярКомпоненты(ИмяСервера);
	
	Возврат СерверОчередей;
	
КонецФункции

Функция ИнициализацияОчередиОтвета(ИмяСервера, ИмяТочкиОбмена, ИмяОчереди, Автоудаляемая = Ложь)
	
	КлиентСервераОчередей = ПодключениеКСерверуОчередей(ИмяСервера); 
		
	Очередь = КлиентСервераОчередей.ОбъявитьОчередь(ИмяОчереди, Ложь, , , Автоудаляемая);
	Если Очередь <> Неопределено Тогда
		КлючМаршрутизации = ИмяОчереди;
		КлиентСервераОчередей.УстановитьСвязьОчереди(ИмяОчереди, ИмяТочкиОбмена, КлючМаршрутизации);
	КонецЕсли;	
	
	КлиентСервераОчередей.НачатьЧтение(ИмяОчереди, ИмяПотребителя(ИмяОчереди), Истина); 
	
	Возврат КлиентСервераОчередей;

КонецФункции

// Синхронно ждет ответа нужное количество времени.
// Возвращает данные ответа в виде структуры, или Неопределено, если истек таймаут.
// Таймаут задается в миллисекундах.
//
Функция ОжидатьОтвет(КлиентСервераОчередей, ИмяОчереди, Таймаут = -1) Экспорт

	Результат = Неопределено;
	Данные = Неопределено;
	
	Попытка
		СообщениеПолучено = КлиентСервераОчередей.ПолучитьСообщение(ИмяПотребителя(ИмяОчереди), Данные, Таймаут);	
	Исключение
		ВызватьИсключение "Ошибка получения ответа от сервиса весов (WD)";
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Данные) Тогда
		Результат = СериализоватьОтвет(Данные);
	КонецЕсли;	
	
	Возврат Результат;

КонецФункции

Функция СериализоватьОтвет(Данные)
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Данные);
	
	Попытка
		Результат = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ВызватьИсключение "Ошибка разбора ответа от сервиса весов (WD)";
	КонецПопытки;
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции	

#КонецОбласти

#КонецОбласти
