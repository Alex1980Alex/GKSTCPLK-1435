
//////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


// Выполняет низкоуровневое соединение с сервером RMQ
//
Процедура УстановитьСоединение(Знач Клиент, Знач КлючСоединения = "", Знач ЧастотаПульса = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(КлючСоединения) Тогда
		КлючСоединения = Справочники.СерверыОчередейRMQ.КлючСоединенияОсновной();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСервера = ПолучитьНастройкиСервера(КлючСоединения);
	
	ОбработатьУмолчание(ПараметрыСервера.Порт,            5672);
	ОбработатьУмолчание(ПараметрыСервера.Логин,           "guest");
	ОбработатьУмолчание(ПараметрыСервера.Пароль,          "guest");
	ОбработатьУмолчание(ПараметрыСервера.ВиртуальныйХост, "/");
	
	ОпределитьПульс(ЧастотаПульса, 0);
	
	Если ПараметрыСервера.БезопасноеСоединение Тогда      
		Клиент.УстановитьБезопасноеСоединение(
            ПараметрыСервера.ПутьКФайлуСертификатаУдостоверяющегоЦентра,
            ПараметрыСервера.ПутьКФайлуЗакрытогоКлюча,
            ПараметрыСервера.ПутьКФайлуСертификатаКлиента,
            ПараметрыСервера.АдресСервера,
            ПараметрыСервера.Логин,
            ПараметрыСервера.Пароль,
            ПараметрыСервера.Порт,
            ПараметрыСервера.ВиртуальныйХост,
            ЧастотаПульса,
            ПараметрыСервера.ПроверкаСоответствияИмениСервера);	
	Иначе
		Клиент.УстановитьСоединение(
			ПараметрыСервера.АдресСервера,
			ПараметрыСервера.Логин,
			ПараметрыСервера.Пароль,
			ПараметрыСервера.Порт,
			ПараметрыСервера.ВиртуальныйХост,
			ЧастотаПульса);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУмолчание(Значение, Знач Умолчание)

	Если Значение = Неопределено Тогда
		Значение = Умолчание;
	КонецЕсли;

КонецПроцедуры

// Инициализирует объект внешней компоненты
//
Функция СоздатьЭкземплярКомпоненты() Экспорт

	КлиентСервераОчередей = Обработки.КлиентОчередиСообщений.Создать();
	Возврат КлиентСервераОчередей;

КонецФункции

// Создает экземпляр компоненты и устанавливает соединение с сервером.
//
Функция ПолучитьЭкземплярКомпоненты(Знач КлючСоединения = "", Знач ЧастотаПульса = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(КлючСоединения) Тогда
		КлючСоединения = Справочники.СерверыОчередейRMQ.КлючСоединенияОсновной();
	КонецЕсли;
	
	Компонента = СоздатьЭкземплярКомпоненты();
	УстановитьСоединение(Компонента, КлючСоединения, ЧастотаПульса);
	
	Возврат Компонента;

КонецФункции

// Функция - Возможные свойства сообщения
// 
// Возвращаемое значение:
//   - 
//
Функция ВозможныеСвойстваСообщения(Знач АнглийскиеИмена = Ложь) Экспорт
	
	Возврат ОчередьСообщенийПовтИсп.ВозможныеСвойстваСообщения(АнглийскиеИмена);

КонецФункции

// Метод предназначен для определения пульса по умолчанию.
//
// Параметры:
//   ЧастотаПульса - текущая частота/возвращаемая частота
//                   параметру будет присвоено значение, если он еще не задан.
//   ТаймаутВСекундах - интервал таймаута ожидания, под который настраивается пульс
//                   рекомендуется устанавливать пульс равный половине таймаута.
//
Процедура ОпределитьПульс(ЧастотаПульса, Знач ТаймаутВСекундах) Экспорт

	Если ЧастотаПульса <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаймаутВСекундах > 0 Тогда
		ЧастотаПульса = Цел(ТаймаутВСекундах / 2);
	Иначе
		ЧастотаПульса = 15; // число секунд по умолчанию
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получает настраиваемые параметры сервера очередей
//
// Параметры:
//  КлючСоединения - Строка - Псевдоним сервера
// 
// Возвращаемое значение:
//   - Структура. Поля структуры совпадают с реквизитами справочника СерверыОчередейRMQ
//   	ключи: АдресСервера, ВиртуальныйХост, Порт, Логин, Пароль 
//
Функция ПолучитьНастройкиСервера(Знач КлючСоединения) Экспорт
	
	Возврат Справочники.СерверыОчередейRMQ.ПолучитьПараметрыСервера(КлючСоединения);
	
КонецФункции

// Заполнить список возможных ключей соединения
//
Процедура ЗаполнитьСписокВозможныхКлючейСоединения(Знач СписокЗначений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерверыОчередей.Код КАК Псевдоним
	|ИЗ
	|	Справочник.СерверыОчередейRMQ КАК СерверыОчередей";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокЗначений.Очистить();
	Пока Выборка.Следующий() Цикл
		СписокЗначений.Добавить(Выборка.Псевдоним);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает экземпляр класса, публикующего широковещательные сообщения в exchange
//
// Параметры:
//  ИмяПубликации - идентификатор потока событий
//                - exchange_name в терминах RMQ
//
//  КлючСоединения - произвольное имя, по которому конфигурация-потребитель
//                   сможет выбрать нужный сервер очередей
//
// Возвращаемое значение:
//   Класс ИздательСобытий
//
Функция НовыйИздатель(Знач ИмяПубликации, Знач КлючСоединения = "") Экспорт

	Возврат Обработки.ИздательСобытий.СоздатьПоТипуОбмена(ИмяПубликации, "fanout", КлючСоединения);

КонецФункции

// Возвращает экземпляр класса, публикующего сообщения.
// каждому сообщению назначается адрес доставки.
//
// Параметры:
//  ИмяПубликации - идентификатор потока событий
//                - exchange_name в терминах RMQ
//
//  КлючСоединения - произвольное имя, по которому конфигурация-потребитель
//                   сможет выбрать нужный сервер очередей
//
// Возвращаемое значение:
//   Класс ИздательСобытий
//
Функция НовыйАдресныйИздатель(Знач ИмяПубликации, Знач КлючСоединения = "") Экспорт

	Возврат Обработки.ИздательСобытий.СоздатьПоТипуОбмена(ИмяПубликации, "direct", КлючСоединения);

КонецФункции

// Возвращает экземпляр класса, публикующего категоризируемые сообщения в exchange
//
// Параметры:
//  ИмяПубликации - идентификатор потока событий
//                - exchange_name в терминах RMQ
//
//  КлючСоединения - произвольное имя, по которому конфигурация-потребитель
//                   сможет выбрать нужный сервер очередей
//
// Возвращаемое значение:
//   Класс ИздательСобытий
//
Функция НовыйТематическийИздатель(Знач ИмяПубликации, Знач КлючСоединения = "") Экспорт

	Возврат Обработки.ИздательСобытий.СоздатьПоТипуОбмена(ИмяПубликации, "topic", КлючСоединения);

КонецФункции

// Создает объект, читающий события из заданной очереди
//
// Параметры:
//  ИмяОчереди	   - Строка. Имя очереди
//
//  КлючСоединения - произвольное имя, по которому конфигурация-потребитель
//                   сможет выбрать нужный сервер очередей
// 
//  ЧастотаПульса  - Число. Частота отправки пакетов heartbeat
//
// Возвращаемое значение:
//   Класс ПолучательСобытий
//
Функция НовыйПодписчик(Знач ИмяОчереди, Знач КлючСоединения = "", Знач ЧастотаПульса = Неопределено) Экспорт

	Потребитель = Обработки.ПолучательСобытий.Создать();
	Потребитель.ПодписатьсяНаОчередь(ИмяОчереди, КлючСоединения, ЧастотаПульса);
	Возврат Потребитель;

КонецФункции

// Создает серверную часть асинхронного сервиса
//
//  ИмяСервиса     - имя публикуемого сервиса
//
//  КлючСоединения - произвольное имя, по которому конфигурация-потребитель
//                   сможет выбрать нужный сервер очередей
//
Функция НовыйАсинхронныйСервис(Знач ИмяСервиса, Знач КлючСоединения = "") Экспорт

	Обработка = Обработки.АсинхронныйСервис.Создать();
	Обработка.КлючСоединения = КлючСоединения;
	Обработка.УстановитьИмяСервиса(ИмяСервиса);
	
	Возврат Обработка;

КонецФункции

// Создает клиентскую часть асинхронного сервиса
//
//  ИмяСервиса     - Имя сервиса, который нужно вызвать
//
//  КлючСоединения - произвольное имя, по которому конфигурация-потребитель
//                   сможет выбрать нужный сервер очередей
//
Функция НовыйКлиентАсинхронногоСервиса(Знач ИмяСервиса, Знач КлючСоединения = "") Экспорт

	Обработка = Обработки.КлиентАсинхронногоСервиса.Создать();
	Обработка.КлючСоединения = КлючСоединения;
	Обработка.УстановитьИмяСервиса(ИмяСервиса);
	
	Возврат Обработка;

КонецФункции
