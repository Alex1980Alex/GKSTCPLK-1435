///////////////////////////////////////////////////////////////////////////////////////////////////////
// ИНТЕГРАЦИЯ С БИБЛИОТЕКОЙ СТАНДАРТНЫХ ПОДСИСТЕМ
//
// Если в конечной конфигурации-потребителе используется библиотека БСП, то вносить дополнительные изменения
// В процесс обновления ИАС не требуется.
//
// В противном случае, нужно будет обеспечить вызов обработчиков обновления со стороны конфигурации-потребителя
// при обновлении подсистемы ИАС.
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "ИнтеграционныйАдаптерСодружество";
	Описание.Версия = ВерсияПодсистемы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.4.0.0";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыИАС.ОбновитьОбработчикиСобытийВПодпискахНаОчередиСообщений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.4.0.0";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыИАС.МиграцияНаСправочникСерверыОчередей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.4.0.0";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыИАС.ЗаполнитьТекущуюУниверсальнуюДатуУНеотправленныхИсходящихСообщений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.5.0.0";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыИАС.ЗаменитьРегзаданиеОтправкиНаСправочник";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.8.0.0";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыИАС.ПроставитьТипКаналаСвязиПоУмолчанию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.10.6";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыИАС.УстановитьАктивностьСуществующихФорматов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.2.0.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыИАС.ЗаполнитьСвойстваПредопределенныхФорматовИУстановитьНастройки";
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
// @Skip-warning
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// @Skip-warning
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
// @Skip-warning
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
// @Skip-warning
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
// @Skip-warning
//
// Параметры:
//  Обработчики - ТаблицаЗначений:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
// @Skip-warning
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура:
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьСвойстваПредопределенныхФорматовИУстановитьНастройки() Экспорт
		
	// Стандратная сериализация XML
	СтандартнаяСериализацияXMLОбъект = Справочники.гкс_ФорматыОбменаИАС.СтандартнаяСериализацияXML.ПолучитьОбъект();
	СтандартнаяСериализацияXMLОбъект.Тип = Перечисления.гкс_ТипыФорматовОбменаRMQ.Прочий;
	СтандартнаяСериализацияXMLОбъект.Активен = Истина;
	СтандартнаяСериализацияXMLОбъект.Записать();
	
	Настройка = Новый Структура;
	Настройка.Вставить("Тип", Перечисления.гкс_ТипыФорматовОбменаRMQ.Прочий);
	Настройка.Вставить("Формат", СтандартнаяСериализацияXMLОбъект.Ссылка);
	Настройка.Вставить("МенеджерФормирования", гкс_СтандартнаяСериализацияОбмен.ИмяМенеджераФормированияПоУмолчанию());
	Настройка.Вставить("МенеджерОбработки", гкс_СтандартнаяСериализацияОбмен.ИмяМенеджераОбработкиПоУмолчанию());
	
	РегистрыСведений.гкс_НастройкиФорматовОбменаОбщие.УстановитьНастройку(Настройка);
	
	// Стандратная сериализация XDTO XML
	СтандартнаяСериализацияXDTOXMLОбъект = Справочники.гкс_ФорматыОбменаИАС.СтандартнаяСериализацияXDTOXML.ПолучитьОбъект();
	СтандартнаяСериализацияXDTOXMLОбъект.Тип = Перечисления.гкс_ТипыФорматовОбменаRMQ.XDTO;
	СтандартнаяСериализацияXDTOXMLОбъект.Активен = Истина;
	СтандартнаяСериализацияXDTOXMLОбъект.Записать();
	
	Настройка = Новый Структура;
	Настройка.Вставить("Тип", Перечисления.гкс_ТипыФорматовОбменаRMQ.XDTO);
	Настройка.Вставить("Формат", СтандартнаяСериализацияXDTOXMLОбъект.Ссылка);
	Настройка.Вставить("МенеджерФормирования", гкс_СтандартнаяСериализацияОбмен.ИмяМенеджераФормированияПоУмолчанию());
	Настройка.Вставить("МенеджерОбработки", гкс_СтандартнаяСериализацияОбмен.ИмяМенеджераОбработкиПоУмолчанию());
	
	РегистрыСведений.гкс_НастройкиФорматовОбменаОбщие.УстановитьНастройку(Настройка);
	
	// Стандратная сериализация XDTO XML
	СтандартнаяСериализацияXDTOJSONXMLОбъект = Справочники.гкс_ФорматыОбменаИАС.СтандартнаяСериализацияXDTOJSON.ПолучитьОбъект();
	СтандартнаяСериализацияXDTOJSONXMLОбъект.Тип = Перечисления.гкс_ТипыФорматовОбменаRMQ.XDTO;
	СтандартнаяСериализацияXDTOJSONXMLОбъект.Активен = Истина;
	СтандартнаяСериализацияXDTOJSONXMLОбъект.Записать();
	
	Настройка = Новый Структура;
	Настройка.Вставить("Тип", Перечисления.гкс_ТипыФорматовОбменаRMQ.XDTO);
	Настройка.Вставить("Формат", СтандартнаяСериализацияXDTOJSONXMLОбъект.Ссылка);
	Настройка.Вставить("МенеджерФормирования", гкс_СтандартнаяСериализацияОбмен.ИмяМенеджераФормированияПоУмолчанию());
	Настройка.Вставить("МенеджерОбработки", гкс_СтандартнаяСериализацияОбмен.ИмяМенеджераОбработкиПоУмолчанию());
	
	РегистрыСведений.гкс_НастройкиФорматовОбменаОбщие.УстановитьНастройку(Настройка);
	
КонецПроцедуры

Процедура ОбновитьОбработчикиСобытийВПодпискахНаОчередиСообщений() Экспорт
	
	Обработчики = ПолучениеСообщенийСлужебный.НоваяКоллекцияРегистрацииОбработчиков();
	ПолучениеСообщенийПереопределяемый.ПриРегистрацииОбработчиковСообщений(Обработчики);
	
	Если Обработчики.Колонки.Найти("ИмяОчереди") = Неопределено Тогда
		// переопределяемый модуль не вызывал старый метод регистрации
		// информация по привязке процедур к очередям отсутствует.
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОчередиСообщенийRMQ.ОбновлениеИБ'"),
			УровеньЖурналаРегистрации.Предупреждение,,, 
			НСтр("ru = 'Не выполнена автоматическая миграция справочника ПодпискиНаОчередиСообщений сообщений. Заполните поле Обработчик в элементах справочника вручную.'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодпискиНаОчередиСообщений.Ссылка,
		|	ПодпискиНаОчередиСообщений.ИмяОчереди КАК ИмяОчереди
		|ИЗ
		|	Справочник.ПодпискиНаОчередиСообщений КАК ПодпискиНаОчередиСообщений
		|ГДЕ
		|	ПодпискиНаОчередиСообщений.Обработчик = &ПустойОбработчик
		|	И ПодпискиНаОчередиСообщений.Асинхронно = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("ПустойОбработчик", Справочники.ОбработчикиСобытийRMQ.ПустаяСсылка());

	ОчередиСПодписками = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОчередиСПодписками[Выборка.ИмяОчереди] = Выборка.Ссылка;
	КонецЦикла;
	
	Для Каждого Обработчик Из Обработчики Цикл
		
		ИмяОчереди = Обработчик.ИмяОчереди;
		ПодпискаНаОчередьСсылка = ОчередиСПодписками[ИмяОчереди];
		Если ПодпискаНаОчередьСсылка <> Неопределено Тогда
			
			НачатьТранзакцию();

			Попытка
					
				ЭлементОбработчик = Справочники.ОбработчикиСобытийRMQ.СоздатьЭлемент();
				ЭлементОбработчик.Наименование = Обработчик.МетодОбработчик;
				ЭлементОбработчик.МетодОбработчик = Обработчик.МетодОбработчик;
				ЭлементОбработчик.ВерсияПротокола = Обработчик.ВерсияПротокола;
				
				ЭлементОбработчик.ОбменДанными.Загрузка = Истина;
				ЭлементОбработчик.Записать();

				Подписка = ПодпискаНаОчередьСсылка.ПолучитьОбъект();
				Подписка.Обработчик = ЭлементОбработчик.Ссылка;
				
				Подписка.ОбменДанными.Загрузка = Истина;
				Подписка.Записать();
				
				ЗафиксироватьТранзакцию();

			Исключение
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ОчередиСообщенийRMQ.ОбновлениеИБ'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьОбработчикиВПодпискахАсинхронныхСервисов() Экспорт

	ВызватьИсключение "Не реализовано";

КонецПроцедуры

Процедура МиграцияНаСправочникСерверыОчередей() Экспорт
	
	МиграцияРегистраСведенийНаСправочникСерверыОчередей();
	МиграцияСправочникаПодпискиНаСерверыОчередей();
	МиграцияСправочникаИсходящиеСообщенияНаСправочникСерверыОчередей();
	
КонецПроцедуры

Процедура МиграцияРегистраСведенийНаСправочникСерверыОчередей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СерверыОчередей.Псевдоним КАК Код,
		|	СерверыОчередей.АдресСервера,
		|	СерверыОчередей.ВиртуальныйХост,
		|	СерверыОчередей.Порт,
		|	СерверыОчередей.Логин,
		|	СерверыОчередей.Пароль,
		|	ВЫБОР
		|		КОГДА СерверыОчередей.Псевдоним = """"
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоОсновной
		|ИЗ
		|	РегистрСведений.УдалитьСервераОчередей КАК СерверыОчередей";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоОсновной Тогда
			НовыйЭлемент = Справочники.СерверыОчередейRMQ.Основной.ПолучитьОбъект();
			НовыйЭлемент.Код = Справочники.СерверыОчередейRMQ.КлючСоединенияОсновной();
		Иначе
			НовыйЭлемент = Справочники.СерверыОчередейRMQ.СоздатьЭлемент();
			НовыйЭлемент.Код = Выборка.Код;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Выборка, "АдресСервера,ВиртуальныйХост,Порт,Логин,Пароль");
		
		НовыйЭлемент.ОбменДанными.Загрузка = Истина;
		НовыйЭлемент.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура МиграцияСправочникаПодпискиНаСерверыОчередей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодпискиНаОчередиСообщений.Ссылка,
		|	ПодпискиНаОчередиСообщений.УдалитьКлючСоединения КАК КлючСоединения
		|ИЗ
		|	Справочник.ПодпискиНаОчередиСообщений КАК ПодпискиНаОчередиСообщений";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Элемент = Выборка.Ссылка.ПолучитьОбъект();
		
		ПараметрыСервера = Справочники.СерверыОчередейRMQ.ПолучитьПараметрыСервера(Выборка.КлючСоединения);
		Если ЗначениеЗаполнено(ПараметрыСервера) Тогда
			
			Элемент.СерверОчередей = ПараметрыСервера.Ссылка;

			Элемент.ОбменДанными.Загрузка = Истина;
			Элемент.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура МиграцияСправочникаИсходящиеСообщенияНаСправочникСерверыОчередей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходящиеСообщения.Ссылка,
		|	ИсходящиеСообщения.УдалитьКлючСоединения КАК КлючСоединения
		|ИЗ
		|	Справочник.ИсходящиеСообщения КАК ИсходящиеСообщения
		|ГДЕ
		|	ИсходящиеСообщения.СерверОчередей = ЗНАЧЕНИЕ(Справочник.СерверыОчередейRMQ.ПустаяСсылка)
		|ИТОГИ ПО
		|	КлючСоединения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоКлючамСоединения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоКлючамСоединения.Следующий() Цикл
		
		ПараметрыСервера = Справочники.СерверыОчередейRMQ.ПолучитьПараметрыСервера(ВыборкаПоКлючамСоединения.КлючСоединения);
		
		Выборка = ВыборкаПоКлючамСоединения.Выбрать();
		Пока Выборка.Следующий() Цикл
			Элемент = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ПараметрыСервера) Тогда
				
				Элемент.СерверОчередей = ПараметрыСервера.Ссылка;

				Элемент.ОбменДанными.Загрузка = Истина;
				Элемент.Записать();
			КонецЕсли;			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьТекущуюУниверсальнуюДатуУНеотправленныхИсходящихСообщений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсходящиеСообщения.Ссылка,
	|	ИсходящиеСообщения.ДатаВремяСобытия
	|ИЗ
	|	Справочник.ИсходящиеСообщения КАК ИсходящиеСообщения
	|ГДЕ
	|	ИсходящиеСообщения.ДатаВремяОтправки = ДАТАВРЕМЯ(1, 1, 1)";	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	
	Пока Выборка.Следующий() Цикл
		ИсходящееСообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		УниверсальноеДатаСобытия = УниверсальноеВремя(Выборка.ДатаВремяСобытия);
		ЧислоСекунд = УниверсальноеДатаСобытия-'00010101';
		ИсходящееСообщениеОбъект.УниверсальнаяДатаСобытияВМиллисекундах = ЧислоСекунд * 1000;
		
		ИсходящееСообщениеОбъект.ОбменДанными.Загрузка = Истина;
		ИсходящееСообщениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьРегзаданиеОтправкиНаСправочник() Экспорт

	МетаданныеЗадания = Метаданные.РегламентныеЗадания.ОтправкаИсходящихСообщений;
	Отбор = Новый Структура("Метаданные", МетаданныеЗадания);
	Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	
	Для Каждого Задание Из Задания Цикл
		
		Справочник = Справочники.ЗаданияОтправкиИсходящихСообщений.СоздатьЭлемент();
		Справочник.Наименование = Задание.Наименование;
		Если Задание.Использование Тогда
			Справочник.ЧислоПотоковОбработки = 1;
		КонецЕсли;
		Справочник.РасписаниеЗадания = Новый ХранилищеЗначения(Задание.Расписание);
		
		НачатьТранзакцию();
		Попытка
			Задание.Удалить();
			Справочник.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПроставитьТипКаналаСвязиПоУмолчанию() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодпискиНаОчередиСообщений.Ссылка
	|ИЗ
	|	Справочник.ПодпискиНаОчередиСообщений КАК ПодпискиНаОчередиСообщений
	|ГДЕ
	|	ПодпискиНаОчередиСообщений.ТипДанныхВОчереди = ЗНАЧЕНИЕ(Перечисление.ТипКаналаСвязиRMQ.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Элемент = Блокировка.Добавить("Справочник.ПодпискиНаОчередиСообщений");
		Элемент.ИсточникДанных = РезультатЗапроса;
		Элемент.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Подписка = Выборка.Ссылка.ПолучитьОбъект();
			Подписка.ТипДанныхВОчереди = Перечисления.ТипКаналаСвязиRMQ.Строка;
			Подписка.ОбменДанными.Загрузка = Истина;
			Подписка.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	 
КонецПроцедуры

Процедура УстановитьАктивностьСуществующихФорматов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ВсеФорматы.Ссылка КАК Формат
	|ИЗ
	|	Справочник.гкс_ФорматыОбменаИАС КАК ВсеФорматы
	|ГДЕ
	|	НЕ ВсеФорматы.Активен";
	
	РезультатЗапроса = Запрос.Выполнить();
	Пока НЕ РезультатЗапроса.Пустой() Цикл
		
		НачатьТранзакцию();
		Попытка
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ОбъектФормат = Выборка.Формат.ПолучитьОбъект();
				ОбъектФормат.Активен = Истина;
				
				ОбъектФормат.ОбменДанными.Загрузка = Истина;
				ОбъектФормат.ДополнительныеСвойства.Вставить("ПропуститьОтправкуВRMQ", Истина);
				
				ОбъектФормат.Записать();
				
			КонецЦикла;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();	
			
			ЗаписьЖурналаРегистрации("ИнтеграционныйАдаптер.ПереходНаНовуюВерсию", 
			                         УровеньЖурналаРегистрации.Ошибка,
									 Метаданные.Справочники.гкс_ФорматыОбменаИАС,
									 Выборка.Формат,
									 ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
		РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВерсияПодсистемы() Экспорт
	
	Возврат "2024.7.1.0";
	
КонецФункции

#КонецОбласти
