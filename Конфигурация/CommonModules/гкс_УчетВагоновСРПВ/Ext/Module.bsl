// @strict-types

#Область ПрограммныйИнтерфейс

// Возвращает значение ФО - Используется интеграция СРПВ.
// 
// Возвращаемое значение:
//  Булево - Используется интеграция СРПВ
//
Функция ИспользуетсяИнтеграцияСРПВ() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("гкс_ИспользоватьИнтеграциюСРПВ");
	
КонецФункции

// Возвращает признак регистрации вагона в контуре документов ПЛК.
// 
// Параметры:
//  КлючАналитикиСРПВ	- СправочникСсылка.гкс_КлючиАналитикиСРПВ - ссылка на ключ аналитики СРПВ.
// 
// Возвращаемое значение:
//  Булево - если Истина, документ "Регистрация на ПЛК" уже создан.
//
Функция ВагонЗарегистрирован(КлючАналитикиСРПВ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТранспортныеДокументыЖДПолученные.КлючАналитикиСРПВ КАК КлючАналитикиСРПВ
	|ИЗ
	|	РегистрСведений.гкс_СРПВТранспортныеДокументыЖДПолученные КАК ТранспортныеДокументыЖДПолученные
	|ГДЕ
	|	ТранспортныеДокументыЖДПолученные.КлючАналитикиСРПВ = &КлючАналитикиСРПВ
	|	И ТранспортныеДокументыЖДПолученные.Зарегистрирован";
	
	Запрос.УстановитьПараметр("КлючАналитикиСРПВ", КлючАналитикиСРПВ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Проверяет условие готовности создания документа "Регистрация на ПЛК" для прибывшего вагона.
// 
// Параметры:
//  Прибытие	- ДокументСсылка.гкс_СРПВПрибытиеНаПуть - ссылка на документ прибытия на путь.
// 
// Возвращаемое значение:
//  Булево - Истина, если условие проверки выполняется.
//
Функция ВагонГотовКРегистрации(Прибытие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТранспортныеДокументыЖДПолученные.КлючАналитикиСРПВ КАК КлючАналитикиСРПВ
	|ИЗ
	|	РегистрСведений.гкс_СРПВТранспортныеДокументыЖДПолученные КАК ТранспортныеДокументыЖДПолученные
	|ГДЕ
	|	ТранспортныеДокументыЖДПолученные.Прибытие = &Прибытие
	|	И ТранспортныеДокументыЖДПолученные.Подобран = ИСТИНА
	|	И ТранспортныеДокументыЖДПолученные.Зарегистрирован = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Прибытие", Прибытие);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает признак оформления документа в контуре документов ПЛК.
// 
// Параметры:
//  КлючАналитикиСРПВ	- СправочникСсылка.гкс_КлючиАналитикиСРПВ - ссылка на ключ аналитики СРПВ.
//  Основание	- ОпределяемыйТип.гкс_ДокументыСРПВ - ссылка на документ по данным из СРПВ.
// 
// Возвращаемое значение:
//  Булево - Истина, если документ оформлен.
//
Функция НаВагонОформленДокументОперации(КлючАналитикиСРПВ, Основание) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыОформленияВагонов.КлючАналитикиСРПВ КАК КлючАналитикиСРПВ
	|ИЗ
	|	РегистрСведений.гкс_СРПВСтатусыОформленияВагонов КАК СтатусыОформленияВагонов
	|ГДЕ
	|	СтатусыОформленияВагонов.КлючАналитикиСРПВ = &КлючАналитикиСРПВ
	|	И СтатусыОформленияВагонов.Основание = &Основание
	|	И СтатусыОформленияВагонов.Оформлен";
	
	Запрос.УстановитьПараметр("КлючАналитикиСРПВ", КлючАналитикиСРПВ);
	Запрос.УстановитьПараметр("Основание", Основание);

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает признак оформления документа в контуре документов ПЛК.
// 
// Параметры:
//  КлючАналитикиСРПВ	- СправочникСсылка.гкс_КлючиАналитикиСРПВ - ссылка на ключ аналитики СРПВ.
//  СтатусВагона	- ПеречислениеСсылка.гкс_СРПВСтатусыВагонов - статус вагона СРПВ.
// 
// Возвращаемое значение:
//  Булево - Истина, если документ оформлен.
//
Функция НаСтатусОформленДокументОперации(КлючАналитикиСРПВ, СтатусВагона) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыОформленияВагонов.КлючАналитикиСРПВ КАК КлючАналитикиСРПВ
	|ИЗ
	|	РегистрСведений.гкс_СРПВСтатусыОформленияВагонов КАК СтатусыОформленияВагонов
	|ГДЕ
	|	СтатусыОформленияВагонов.КлючАналитикиСРПВ = &КлючАналитикиСРПВ
	|	И СтатусыОформленияВагонов.Статус = &Статус
	|	И СтатусыОформленияВагонов.Оформлен";
	
	Запрос.УстановитьПараметр("КлючАналитикиСРПВ", КлючАналитикиСРПВ);
	Запрос.УстановитьПараметр("Статус", СтатусВагона);

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает запись об оформлении по статусу вагона и ключу аналитики СРПВ.
// 
// Параметры:
//  КлючАналитикиСРПВ	- СправочникСсылка.гкс_КлючиАналитикиСРПВ - ссылка на ключ аналитики СРПВ.
//  СтатусВагона	- ПеречислениеСсылка.гкс_СРПВСтатусыВагонов - статус вагона СРПВ.
// 
// Возвращаемое значение:
//  Структура - со свойствами:
//     * Документ 	- ДокументСсылка.гкс_Взвешивание -
//					- ДокументСсылка.гкс_РегистрацияНаПЛК - докумен в контуре документов ПЛК
//     * МестнаяДата - Дата - время регистрации события СРПВ
//     * ДатаОперации - Дата - время операции по данным СРПВ
//     * Основание - ОпределяемыйТип.гкс_ДокументыСРПВ - документ регистрации собятия из СРПВ
//
Функция ДанныеОформленногоДокументаОперацииПоСтатусу(КлючАналитикиСРПВ, СтатусВагона) Экспорт
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыОформленияВагонов.Документ КАК Документ,
	|	СтатусыОформленияВагонов.МестнаяДата КАК МестнаяДата,
	|	СтатусыОформленияВагонов.ДатаОперации КАК ДатаОперации,
	|	СтатусыОформленияВагонов.Основание КАК Основание
	|ИЗ
	|	РегистрСведений.гкс_СРПВСтатусыОформленияВагонов КАК СтатусыОформленияВагонов
	|ГДЕ
	|	СтатусыОформленияВагонов.КлючАналитикиСРПВ = &КлючАналитикиСРПВ
	|	И СтатусыОформленияВагонов.Статус = &Статус
	|	И СтатусыОформленияВагонов.Оформлен";
	
	Запрос.УстановитьПараметр("КлючАналитикиСРПВ", КлючАналитикиСРПВ);
	Запрос.УстановитьПараметр("Статус", СтатусВагона);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру данных для заполнения документа гкс_ОснованиеДляДвиженияЗапасов.
// 
// Параметры:
//  ДокументРегистрации	- ДокументСсылка.гкс_РегистрацияНаПЛК - ссылка на документ регистрации на ПЛК.
// 
// Возвращаемое значение:
//  ДанныеЗаполнения - Структура - 
//
Функция ДанныеЗаполненияОснованияДляДвиженияЗапасов(ДокументРегистрации) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрацияНаПЛК.Номер КАК Номер,
		|	РегистрацияНаПЛК.Дата КАК Дата,
		|	РегистрацияНаПЛК.ТочкаМаршрута КАК ТочкаМаршрута,
		|	РегистрацияНаПЛК.ТранспортноеСредство КАК ТранспортноеСредство,
		|	РегистрацияНаПЛК.Организация КАК Организация,
		|	РегистрацияНаПЛК.Номенклатура КАК Номенклатура,
		|	РегистрацияНаПЛК.Спецификация КАК Спецификация,
		|	РегистрацияНаПЛК.Собственник КАК Собственник,
		|	НаправлениеНаРазгрузку.Склад КАК ПунктРазгрузки,
		|	СРПВПрибытиеНаПуть.ИдентификаторОтправки КАК ИдентификаторОтправки,
		|	СРПВПеревеска.ДатаТары КАК ДатаРазгрузки
		|ИЗ
		|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_НаправлениеНаРазгрузку КАК НаправлениеНаРазгрузку
		|		ПО РегистрацияНаПЛК.Ссылка = НаправлениеНаРазгрузку.ДокументРегистрации
		|			И (НаправлениеНаРазгрузку.Проведен)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_СРПВПрибытиеНаПуть КАК СРПВПрибытиеНаПуть
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_СРПВПеревеска КАК СРПВПеревеска
		|			ПО СРПВПрибытиеНаПуть.ИдентификаторОтправки = СРПВПеревеска.ИдентификаторОтправки
		|		ПО РегистрацияНаПЛК.ДокументОснование = СРПВПрибытиеНаПуть.Ссылка
		|ГДЕ
		|	РегистрацияНаПЛК.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументРегистрации); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеПоРегистрации = РезультатЗапроса.Выбрать();
	
	Если ДанныеПоРегистрации.Следующий() Тогда
		
		ДанныеЗаполнения.Вставить("ТипРегистрации", Перечисления.гкс_ТипРегистрации.Приемка);
		ДанныеЗаполнения.Вставить("ЭтоПриемка", Истина);
		ДанныеЗаполнения.Вставить("УсловиеПоставки", Справочники.гкс_УсловияПоставки.Приемка);
		ДанныеЗаполнения.Вставить("ВидПеревозки", Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт);
		ДанныеЗаполнения.Вставить("Регистрация", ДокументРегистрации);
		
		ДанныеЗаполнения.Вставить("Дата", ДанныеПоРегистрации.Дата);
		ДанныеЗаполнения.Вставить("ТочкаМаршрута", ДанныеПоРегистрации.ТочкаМаршрута);
		ДанныеЗаполнения.Вставить("Организация", ДанныеПоРегистрации.Организация);
		ДанныеЗаполнения.Вставить("Номенклатура", ДанныеПоРегистрации.Номенклатура);
		ДанныеЗаполнения.Вставить("Спецификация", ДанныеПоРегистрации.Спецификация);
		
		ДанныеЗаполнения.Вставить("ПунктРазгрузки", ДанныеПоРегистрации.ПунктРазгрузки);
		ДанныеЗаполнения.Вставить("ДатаРазгрузки", ДанныеПоРегистрации.ДатаРазгрузки);
		
		ДанныеЗаполнения.Вставить("ТранспортноеСредство",	ДанныеПоРегистрации.ТранспортноеСредство);
		
		СвязьСТранспортнымДокументом = РегистрыСведений.гкс_СвязьРегистрацииИТранспортногоДокумента
		.ПолучитьСвязьСТранспортнымДокументом(ДокументРегистрации);
		
		ДанныеЗаполнения.Вставить("ТранспортныйДокумент",	СвязьСТранспортнымДокументом.ТранспортныйДокумент);
		
		Если ЗначениеЗаполнено(СвязьСТранспортнымДокументом.ТранспортныйДокумент) Тогда 
			ДатыТранспортного = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
								СвязьСТранспортнымДокументом.ТранспортныйДокумент, "ДатаПогрузки");
								
			ДанныеЗаполнения.Вставить("ДатаПогрузки", ДатыТранспортного.ДатаПогрузки);
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("ЛабораторныйАнализ", ОпределитьЛабораторныйАнализ(ДокументРегистрации));
		
		Если ТипЗнч(ДанныеПоРегистрации.Собственник) = Тип("СправочникСсылка.Организации")	Тогда
			
			ДанныеЗаполнения.Вставить("Собственник", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ДанныеПоРегистрации.Собственник, "КонтрагентОрганизации"));
		Иначе									                          
			ДанныеЗаполнения.Вставить("Собственник", ДанныеПоРегистрации.Собственник);
		КонецЕсли;
			
		ДанныеПоВесу = гкс_ПриемкаНаПЛКСервер.ПоказанияВесовПоРегистрации(ДокументРегистрации);
	
		ДанныеЗаполнения.Вставить("ВесБрутто", ДанныеПоВесу.БруттоДок);
		ДанныеЗаполнения.Вставить("ВесБруттоФакт", ДанныеПоВесу.БруттоФакт);
		ДанныеЗаполнения.Вставить("ВесНетто", ДанныеПоВесу.НеттоДок);
		ДанныеЗаполнения.Вставить("ВесНеттоФакт", ДанныеПоВесу.НеттоФакт);
		ДанныеЗаполнения.Вставить("ВесТары", ДанныеПоВесу.ТараДок);
		ДанныеЗаполнения.Вставить("ВесТарыФакт", ДанныеПоВесу.ТараФакт);  
			
	КонецЕсли;

	Возврат ДанныеЗаполнения;
	
КонецФункции

// Определяет дату начала видимости поступивших вагонов
// 
// Параметры:
//  - ДатаОтсчета - Дата - дата от которой отсчитывать
// 
// Возвращаемое значение:
//    - Дата 	- дата начала видимости поступивших вагонов	
//
Функция ДатаНачалаВидимостиПрибывшихВагонов(ДатаОтсчета = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ДатаОтсчета) Тогда
		ДатаОтсчета = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	КоличествоДнейВидимости = Константы.гкс_КоличествоДнейВидимостиПрибывшихВагонов.Получить();
	ПриращениеСекунд = КоличествоДнейВидимости * гкс_ОбщегоНазначенияКлиентСервер.СекундВДне();
	ДатаНачалаВидимости = ДатаОтсчета - ПриращениеСекунд;
			
	Возврат гкс_ПриемкаТранспорта.ДатаНачалаПроизводственныхСуток(ДатаНачалаВидимости);
	
КонецФункции

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - ФиксированнаяСтруктура - свойства документа (См. гкс_ПроведениеДокументов.СвойстваДокумента).
//
// Возвращаемое значение:
//  Структура - со свойствами:
//     * НезависимыеРегистры - Массив Из ОбъектМетаданныхРегистрСведений -
//     * ПодчиненныеРегистры - Массив Из ОбъектМетаданныхРегистрСведений -
//                           - Массив Из ОбъектМетаданныхРегистрНакопления -
//                           - Массив Из ОбъектМетаданныхРегистрБухгалтерии -
//                           - Массив Из ОбъектМетаданныхРегистрРасчета  - список подчиненных регистратору регистров, который записываются учетным механизмом.
//     * КонтрольныеРегистрыИзменений - Массив Из ОбъектМетаданныхРегистрСведений -
//                                    - Массив Из ОбъектМетаданныхРегистрНакопления -
//                                    - Массив Из ОбъектМетаданныхРегистрБухгалтерии -
//                                    - Массив Из ОбъектМетаданныхРегистрРасчета - список подчиненных регистратору регистров,
//                                                                                 по которым необходимо контролировать изменения.
//     * КонтрольныеРегистрыЗаданий - Массив Из ОбъектМетаданныхРегистрСведений -
//                                  - Массив Из ОбъектМетаданныхРегистрНакопления -
//                                  - Массив Из ОбъектМетаданныхРегистрБухгалтерии -
//                                  - Массив Из ОбъектМетаданныхРегистрРасчета - список подчиненных регистратору регистров,
//                                                                               по изменению которых необходимо формировать задания.
//     * КонтрольныеРегистрыДатаЗапрета - Массив Из ОбъектМетаданныхРегистрСведений -
//                                  - Массив Из ОбъектМетаданныхРегистрНакопления -
//                                  - Массив Из ОбъектМетаданныхРегистрБухгалтерии -
//                                  - Массив Из ОбъектМетаданныхРегистрРасчета - список регистров, по которым необходимо проверить дату
//                                                                              запрета изменений с помощью таблицы изменений.
//     * ЕстьПроизводныеДвижения - Булево - формируются вторичные движения используя данные уже записанных регистров,
//                                          сделанных в том числе другими механизмами.
//
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = гкс_ПроведениеДокументов.ПараметрыУчетногоМеханизма();  
	
	Параметры.НезависимыеРегистры.Добавить(Метаданные.РегистрыСведений.гкс_СРПВСтатусыОформленияВагонов);
	Параметры.НезависимыеРегистры.Добавить(Метаданные.РегистрыСведений.гкс_СРПВТранспортныеДокументыЖДПолученные);
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Возникает перед выполнением записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//								используемый для хранения таблиц контроля изменений регистров.
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПередЗаписьюДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Возникает после выполнения записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//								используемый для хранения таблиц контроля изменений регистров.
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПослеЗаписиДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОтменаПроведенияДокумента = Документ.ДополнительныеСвойства.ПроведениеДокументов
				   .СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;	 
	 
КонецПроцедуры

// Процедура формирования движений по независимым регистрам.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Документ - ДокументСсылка - ссылка на документ
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ЗаписатьДанные(ТаблицыДляДвижений, Документ, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
		
	Если ТаблицыДляДвижений.Свойство("Таблицагкс_СРПВТранспортныеДокументыЖДПолученные") Тогда
		
		Набор = РегистрыСведений.гкс_СРПВТранспортныеДокументыЖДПолученные.СоздатьНаборЗаписей();
		
		Если ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.гкс_РегистрацияНаПЛК") Тогда
			Набор.Отбор.Прибытие.Установить(Документ.ДокументОснование);
		Иначе
			КлючАналитикиСРПВ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ИдентификаторОтправки");
			Набор.Отбор.КлючАналитикиСРПВ.Установить(КлючАналитикиСРПВ);
		КонецЕсли;	
			
		Набор.Загрузить(ТаблицыДляДвижений["Таблицагкс_СРПВТранспортныеДокументыЖДПолученные"]);
		Набор.Записать();
		
	КонецЕсли;
		
	Если ТаблицыДляДвижений.Свойство("Таблицагкс_СРПВСтатусыОформленияВагонов") Тогда  
		
		КлючАналитикиСРПВ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ИдентификаторОтправки");
			
		Набор = РегистрыСведений.гкс_СРПВСтатусыОформленияВагонов.СоздатьНаборЗаписей();
		Набор.Отбор.КлючАналитикиСРПВ.Установить(КлючАналитикиСРПВ);
		Набор.Отбор.Основание.Установить(Документ.Ссылка);
		Набор.Загрузить(ТаблицыДляДвижений["Таблицагкс_СРПВСтатусыОформленияВагонов"]);
		Набор.Записать();
		
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРегламетныхЗаданий

// Метод вызывается из регламентного задания "СРПВ: Обработка вагонов без регистрации".
Процедура ОтложенноеСозданиеДокументовПЛК() Экспорт
	
	РегламентноеЗадание = Метаданные.РегламентныеЗадания.гкс_СРПВСозданиеДоументов;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(РегламентноеЗадание);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'СРПВ: Создание документов по сообщениям СРПВ'",
		ОбщегоНазначения.КодОсновногоЯзыка()),
    	УровеньЖурналаРегистрации.Информация, , ,
    	НСтр("ru = 'Начато регламентное задание создания документов по сообщениям СРПВ.'"));
		
	СоздатьДокументыПоСтатусу(Перечисления.гкс_СРПВСтатусыВагонов.Прибыл);
	СоздатьДокументыПоСтатусу(Перечисления.гкс_СРПВСтатусыВагонов.ВзвешенБрутто);
	СоздатьДокументыПоСтатусу(Перечисления.гкс_СРПВСтатусыВагонов.Выгружен);
	СоздатьДокументыПоСтатусу(Перечисления.гкс_СРПВСтатусыВагонов.ВзвешенТара);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'СРПВ: Создание документов по сообщениям СРПВ'", 
		ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация, , ,
	    НСтр("ru = 'Закончено регламентное задание создания документов по сообщениям СРПВ.'"));	
				
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьДокументыПоСтатусу(Статус)
	
	НачатьТранзакцию();
	Попытка
		
		Выборка = ВыбратьНеоформленныеДокументыПоСтатусу(Статус);
		Пока Выборка.Следующий() Цикл
						
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если Статус = Перечисления.гкс_СРПВСтатусыВагонов.Прибыл Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе	
				ДокументОбъект.СформироватьДокументПЛКПриНеобходимости(Статус);
			КонецЕсли;	
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'СРПВ: Создание документов по сообщениям СРПВ'", 
			ОбщегоНазначения.КодОсновногоЯзыка()),
		    УровеньЖурналаРегистрации.Ошибка, , ,
		    НСтр("ru = 'Во время регламентного создания документов по сообщениям СРПВ произошла ошибка.'")
		    + Символы.ПС + ПодробноеПредставлениеОшибки);
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ВыбратьНеоформленныеДокументыПоСтатусу(Статус)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыОформленияВагонов.Основание КАК Ссылка,
	|	СтатусыОформленияВагонов.КлючАналитикиСРПВ КАК КлючАналитикиСРПВ
	|ИЗ
	|	РегистрСведений.гкс_СРПВСтатусыОформленияВагонов КАК СтатусыОформленияВагонов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СРПВТранспортныеДокументыЖДПолученные КАК ТранспортныеДокументыЖДПолученные
	|		ПО СтатусыОформленияВагонов.КлючАналитикиСРПВ = ТранспортныеДокументыЖДПолученные.КлючАналитикиСРПВ
	|			И ТранспортныеДокументыЖДПолученные.ДатаПрибытия >= &ОграничениеНаДатуПрибытия
	|ГДЕ
	|	СтатусыОформленияВагонов.Оформлен = ЛОЖЬ
	|	И СтатусыОформленияВагонов.Статус = &Статус";
	
	Запрос.УстановитьПараметр("Статус", Статус);
	Запрос.УстановитьПараметр("ОграничениеНаДатуПрибытия", гкс_УчетВагоновСРПВ.ДатаНачалаВидимостиПрибывшихВагонов());
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выбрать();
	
КонецФункции

Функция ОпределитьЛабораторныйАнализ(ДокументРегистрации)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЛабАнализ();
	Запрос.УстановитьПараметр("ДокументРегистрацииНаПЛК", ДокументРегистрации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат = ВыборкаДетальныеЗаписи.АнализСсылка;
	КонецЦикла;
	
	Возврат Результат;
			
КонецФункции

Функция ТекстЗапросаЛабАнализ()
	
	ПередаватьКачествоВходногоКонтроля = ПолучитьФункциональнуюОпцию("гкс_ПередаватьКачествоВходногоКонтроля");
	
	Если ПередаватьКачествоВходногоКонтроля Тогда
		ТекстЗапроса = ТекстаЗапросаЛабАнализПоВходномуКонтролю();
	Иначе
		ТекстЗапроса = ТекстаЗапросаЛабАнализПоКомпозиту();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстаЗапросаЛабАнализПоКомпозиту()
	Возврат
	"ВЫБРАТЬ
	|	ЛабораторныйАнализ.Ссылка КАК АнализСсылка
	|ПОМЕСТИТЬ ВТ_ПоФормированиюПроб
	|ИЗ
	|	Документ.гкс_ФормированиеНомераПробы.СписокРегистраций КАК ФормированиеНомераПробыСписокРегистраций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ЛабораторныйАнализ КАК ЛабораторныйАнализ
	|		ПО ФормированиеНомераПробыСписокРегистраций.Ссылка = ЛабораторныйАнализ.гкс_ДокументРегистрации
	|			И (ЛабораторныйАнализ.Проведен)
	|			И (ЛабораторныйАнализ.гкс_НазначениеИспользованияКачества = ЗНАЧЕНИЕ(Перечисление.гкс_НазначенияИспользованияКачества.ПриемкаКомпозит))
	|			И (ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации = &ДокументРегистрацииНаПЛК)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛабораторныйАнализ.Ссылка КАК АнализСсылка
	|ПОМЕСТИТЬ ВТ_ПоРегистрации
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ КАК ЛабораторныйАнализ
	|ГДЕ
	|	ЛабораторныйАнализ.Проведен
	|	И ЛабораторныйАнализ.гкс_НазначениеИспользованияКачества = ЗНАЧЕНИЕ(Перечисление.гкс_НазначенияИспользованияКачества.ПриемкаКомпозит)
	|	И ЛабораторныйАнализ.гкс_ДокументРегистрации = &ДокументРегистрацииНаПЛК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоРегистрации.АнализСсылка КАК АнализСсылка
	|ИЗ
	|	ВТ_ПоРегистрации КАК ВТ_ПоРегистрации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПоФормированиюПроб.АнализСсылка
	|ИЗ
	|	ВТ_ПоФормированиюПроб КАК ВТ_ПоФормированиюПроб";
КонецФункции

Функция ТекстаЗапросаЛабАнализПоВходномуКонтролю()
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЛабораторныйАнализ.Ссылка КАК АнализСсылка
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ КАК ЛабораторныйАнализ
	|ГДЕ
	|	ЛабораторныйАнализ.Проведен
	|	И ЛабораторныйАнализ.гкс_НазначениеИспользованияКачества = ЗНАЧЕНИЕ(Перечисление.гкс_НазначенияИспользованияКачества.Приемка)
	|	И ЛабораторныйАнализ.гкс_ДокументРегистрации = &ДокументРегистрацииНаПЛК";
КонецФункции

#КонецОбласти

