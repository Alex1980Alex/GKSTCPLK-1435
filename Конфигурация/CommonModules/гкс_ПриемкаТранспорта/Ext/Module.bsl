// @strict-types

#Область ПрограммныйИнтерфейс

// Возвращает текущее состояние для документа регистрации.
//
// Параметры:
//  ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК - 
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.гкс_СостоянияРегистрации - текущее состояние регистрации на ПЛК.
//
Функция ТекущееСостояниеРегистрации(ДокументРегистрации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущееСостояние =  РегистрыСведений.гкс_СостоянияРегистрации.ТекущееСостояниеПоРегистрации(ДокументРегистрации);
	Если ТекущееСостояние = Неопределено Тогда
		ТекущееСостояние = Перечисления.гкс_СостоянияРегистрации.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ТекущееСостояние;
	
КонецФункции

// Делает запись в регистр сведений о новом состоянии регистрации
//
// Параметры:
//  СтруктураЗаписи  - Структура - данные для записи в регистр сведений гкс_СостоянияРегистрации
//                 
Процедура ЗарегистрироватьНовоеСостояние(ДокументРегистрации, Состояние, Комментарий = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущееСостояниеПоРегистрации = РегистрыСведений.гкс_СостоянияРегистрации
		.ТекущееСостояниеПоРегистрации(ДокументРегистрации);
		
	Если ТекущееСостояниеПоРегистрации = Состояние Тогда
		Возврат;	
	КонецЕсли;	
	
	ОписаниеСостояния = РегистрыСведений.гкс_СостоянияРегистрации.СтруктураЗаписи();
		
	РеквизитыРегистрации = "ТочкаМаршрута, ТипРегистрации, ВидПеревозки, ТранспортноеСредство";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРегистрации, РеквизитыРегистрации);
	
	ЗаполнитьЗначенияСвойств(ОписаниеСостояния, ЗначенияРеквизитов);
	
    ОписаниеСостояния.ДокументРегистрации = ДокументРегистрации;
	ОписаниеСостояния.Состояние 	= Состояние;	
	ОписаниеСостояния.Пользователь	= Пользователи.ТекущийПользователь();
	ОписаниеСостояния.Комментарий	= Комментарий;
	
	ЧасовойПоясТочкиМаршрута = ЧасовойПоясПЛК(ОписаниеСостояния.ТочкаМаршрута);
		
	ОписаниеСостояния.Период = ТекущаяДатаСеанса();
	ОписаниеСостояния.МестнаяДата = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПоясТочкиМаршрута);

	РегистрыСведений.гкс_СостоянияРегистрации.УстановитьСостояниеРегистрации(ОписаниеСостояния);
	
КонецПроцедуры

// Возвращает строковый идентифкатор часовой пояс точки маршрута, представляющей ПЛК 
//
// Параметры:
//  ТочкаМаршрута - СправочникСсылка.гкс_ТочкиМаршрута - Точка маршрута
// 
// Возвращаемое значение:
//  Строка - идентификатор часового пояса.
//
Функция ЧасовойПоясПЛК(ТочкаМаршрута) Экспорт
	
	Если Не ЗначениеЗаполнено(ТочкаМаршрута) Тогда
		Возврат "";	
	КонецЕсли;
	
	ЧасовойПояс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТочкаМаршрута, "гкс_ЧасовойПоясТочкиМаршрута");
	
	Возврат ЧасовойПояс;
	
КонецФункции

// Типы документов регистрации.
// 
// Возвращаемое значение:
//  Массив - Типы документов регистрации
Функция ТипыДокументовПриемкиПЛК() Экспорт

	ТипДокументовПриемки = Новый Массив;
	ТипДокументовПриемки.Добавить(Тип("ДокументСсылка.гкс_Взвешивание"));
	ТипДокументовПриемки.Добавить(Тип("ДокументСсылка.гкс_НаправлениеНаРазгрузку"));
	ТипДокументовПриемки.Добавить(Тип("ДокументСсылка.гкс_ЛабораторныйАнализ"));
	ТипДокументовПриемки.Добавить(Тип("ДокументСсылка.гкс_ФормированиеНомераПробы"));
	ТипДокументовПриемки.Добавить(Тип("ДокументСсылка.гкс_РегистрацияНаПЛК"));
	
	Возврат ТипДокументовПриемки;
	
КонецФункции

// Проверяет возможность измения документа из цепочки Приемки
//
// Параметры:
//   Документ - ДокументСсылка - ссылка на документ.
//
// Возвращаемое значение:
//  Булево - Истина, если на документ регистрации оформлен реестр накладных
//
Функция ЗапретИзмененияДокументаПоРеестру(Документ) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.гкс_РеестрНакладныхЗПП3") Тогда	
		Возврат Документ.Проведен;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.гкс_ОснованиеДляДвиженияЗапасов") Тогда	
		
		Если гкс_ДокументальноеОформление.ОформленРеестрНаДвижениеЗапасов(Документ) Тогда		
			Результат = Истина;
		КонецЕсли;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		ДокументРегистрации = РегистрыСведений.гкс_СостоянияРегистрации.ДокументРегистрации(Документ);
		
		Если Не ЗначениеЗаполнено(ДокументРегистрации) Тогда
			Возврат Результат;
		КонецЕсли;
		
		ТипДокумента = ТипЗнч(ДокументРегистрации);
		Если ТипДокумента = Тип("ДокументСсылка.гкс_ФормированиеНомераПробы") Тогда
			Возврат ЗапретИзмененияДокументаПоРеестру(ДокументРегистрации);
			
		ИначеЕсли ТипДокумента <> Тип("ДокументСсылка.гкс_РегистрацияНаПЛК") Тогда
			Возврат Результат;	
		КонецЕсли;	
		
		Если гкс_ДокументальноеОформление.ОформленРеестрНаРегистрацию(ДокументРегистрации) Тогда
			
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции

// Проверяет функциональную опцию автоматического формирования лаб. анализа
// типа Композит.
// 
// Возвращаемое значение:
//  Булево - Истина, если опция включена
//
Функция ФормироватьКомпозитныйЛабораторныйАнализ() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("гкс_ФормироватьКомпозитныйЛабораторныйАнализАвто") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции	

// Возвращает текущую яму и сислос разгрузки номенклатуры по качеству
//
// Параметры:
//  ТочкаМаршрута  - СправочникСсылка.гкс_ТочкиМаршрута - ПЛК
//  ВидПеревозки  - ПеречислениеСсылка.гкс_ТипыТранспортныхСредствДоставки - Авто,ЖД и пр
//  Номенклатура  - СправочникСсылка.Номенклатура - номенклатура для разгрузки
//  СлужебнаяНоменклатура  - СправочникСсылка.Номенклатура - служебная номенклатура (сегмент качества)
//
// Возвращаемое значение:
//   Структура   - 
//		* ЯмаРазгрузки - СправочникСсылка.гкс_ТочкиМаршрута
//		* Силос - СправочникСсылка.гкс_ТочкиМаршрута
//
Функция ЯмаСилосРазгрузки(ТочкаМаршрута, ВидПеревозки, Номенклатура, СлужебнаяНоменклатура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегистрыСведений.гкс_НастройкиНазначенияРазгрузки
			.ЯмаСилосРазгрузки(ТочкаМаршрута, ВидПеревозки, Номенклатура, СлужебнаяНоменклатура);
	
КонецФункции

#Область Автоприемка

#Область ИспользоватьКонтрольПревышенияВесаАвтомобиля

// Проверяет превышение веса автомобиля по осям при приемке
//
// Параметры:
//  ДокументВзвешивание  - ДокументОбъект.гкс_Взвешивание - документ в котором производится контроль веса
// 
// Возвращаемое значение:
//  Булево - Истина, если допустимый вес превышен
//
Функция ПревышениеДопустимогоВесаАвтомобиля(ДокументВзвешивание) Экспорт

	ДанныеРегистрации = гкс_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументВзвешивание.ДокументРегистрации, 
		"ТранспортноеСредство, ЕдиницаИзмеренияВеса, ТипРегистрации");
	
	ПараметрыТС = гкс_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДанныеРегистрации.ТранспортноеСредство, "ВидПеревозки, КоличествоОсей");

	Если Не (ДокументВзвешивание.ТипВзвешивания = Перечисления.гкс_ТипыВзвешивания.Въезд
		И ПараметрыТС.ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль
		И ЗначениеЗаполнено(ПараметрыТС.КоличествоОсей)
		И ДанныеРегистрации.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка) Тогда	
		Возврат Ложь;
	КонецЕсли;
		
	ДопустимыйВес = МаксимальныйДопустимыйВес(ПараметрыТС.ВидПеревозки, ПараметрыТС.КоличествоОсей);
										
	Если Не ЗначениеЗаполнено(ДопустимыйВес) Тогда
		Возврат Ложь;
	КонецЕсли;											
									
	ЕдиницаИзмеренияВесаПриемки = ПолучитьЕдиницуИзмеренияВесаПриемки();
	Коэффициент = гкс_ПриемкаТранспортаПовтИсп.ПолучитьКоэффициентПересчетаЕдиниц(
		ЕдиницаИзмеренияВесаПриемки, ДанныеРегистрации.ЕдиницаИзмеренияВеса);
	
	ДопустимыйВес = ДопустимыйВес * Коэффициент; 									
														
	Возврат ДопустимыйВес < ДокументВзвешивание.Вес;	

КонецФункции 

// Определяет максимально допустимый вес в зависисмости от вида транспорта и количества осей
//
// Параметры:
//  ВидПеревозки - ПеречислениеСсылка.гкс_ТипыТранспортныхСредствДоставки -
//  КоличествоОсей  - ПеречислениеСсылка.гкс_КоличествоОсейТранспортногоСредства -
// 
// Возвращаемое значение:
//  ДопустимыйВес - Число -  значение допустимого веса
//
Функция МаксимальныйДопустимыйВес(ВидПеревозки, КоличествоОсей) Экспорт
	
	Возврат РегистрыСведений.гкс_ДопустимыеМассыТранспортныхСредств
		.МаксимальныйДопустимыйВес(ВидПеревозки, КоличествоОсей);
		
КонецФункции

// Проверяет заполнения данных для проведения контроля превышения максимального разрешенного веса автомобиля
// 
// Возвращаемое значение:
//  Булево - Истина, если проверка прошла успешно
//
Функция ПроверкаЗаполненияДляКонтроляПревышенияВесаАвтомобиля(Автомобиль, ОписаниеОшибок) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("гкс_ИспользоватьКонтрольПревышенияВесаАвтомобиля") Тогда
		Возврат Истина;
	КонецЕсли;	
		
	ДанныеТС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Автомобиль, "ВидПеревозки, КоличествоОсей");	
	Если ДанныеТС.ВидПеревозки <> Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль Тогда
		Возврат Истина;
	КонецЕсли;        
	
	Результат = Истина;
	
	Если ЗначениеЗаполнено(ДанныеТС.КоличествоОсей) Тогда
		
		МаксимальныйДопустимыйВес = МаксимальныйДопустимыйВес(ДанныеТС.ВидПеревозки, ДанныеТС.КоличествоОсей); 
		
		Если МаксимальныйДопустимыйВес = Неопределено Тогда
			
			ШаблонВСообщения = НСтр("ru = 'Не указана допустимая масса транспортного средства для %1 количества осей.
			|Превышение допустимого веса проверяться не будет!'");
			
			ОписаниеОшибок = СтрШаблон(ШаблонВСообщения, ДанныеТС.КоличествоОсей);		
			Результат = Ложь;
		КонецЕсли;	
	
	Иначе
		
		ШаблонВСообщения = НСтр("ru = 'У транспортного средства %1 не указано количество осей.
		|Превышение допустимого веса проверяться не будет!'");
		
		ОписаниеОшибок = СтрШаблон(ШаблонВСообщения, Автомобиль);		
		Результат = Ложь;
		
	КонецЕсли;	
	
	Возврат Результат; 
	
КонецФункции

#КонецОбласти

// Возвращает конец Дату БУ производственных суток
// ДатаНачалаПроизводственныхСуток - Дата
// КоличествоМинутДоКонцаДня - Число
// Возвращаемое значение:
// - Дата
Функция ОпределениеДатыБУВПроизводственныхСутках(
		ДатаНачалаПроизводственныхСуток, КоличествоМинутДоКонцаДня) Экспорт
	
	Приращение = гкс_ОбщегоНазначенияКлиентСервер.СекундВМинуте() * КоличествоМинутДоКонцаДня;
	Возврат КонецДня(ДатаНачалаПроизводственныхСуток) - Приращение;

КонецФункции

// Функция определяет дату БУ для транспорта
// Параметры:
// ДатаРазгрузки - Дата
// ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК
// ОснованиеДвиженияЗапасов - ДокументСсылка.ОснованиеДляДвиженияЗапасов
// ВозвращаемоеЗначение:
// Дата
Функция ДатаБУПриемкиТранспорта(ДатаРазгрузки, ДокументРегистрации, ОснованиеДвиженияЗапасов) Экспорт
	
	ДатаНачалаПроизводственныхСуток =
		ДатаНачалаПроизводственныхСуток(ДатаРазгрузки);
	Если День(ДатаНачалаПроизводственныхСуток) = День(ДатаРазгрузки) Тогда
		ДатаБУ = ДатаРазгрузки;
	Иначе
		ДатаРеестра = ДатаРеестраНакладныхЗПП_3(
			ДокументРегистрации, ОснованиеДвиженияЗапасов);
		Если ЗначениеЗаполнено(ДатаРеестра) Тогда
			ДатаБУ = ДатаРеестра;
		Иначе
			КоличествоМинутДоКонцаДня  = 9;
			ДатаБУ = ОпределениеДатыБУВПроизводственныхСутках(
				ДатаНачалаПроизводственныхСуток, КоличествоМинутДоКонцаДня);
		КонецЕсли;
	КонецЕсли;
		
	Возврат ДатаБУ;
	
КонецФункции

// Функция определяет дату реестра
// Параметры:
// ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК
// ОснованиеДвиженияЗапасов - ДокументСсылка.ОснованиеДляДвиженияЗапасов
// ВозвращаемоеЗначение:
// Дата
Функция ДатаРеестраНакладныхЗПП_3(ДокументРегистрации, ОснованиеДвиженияЗапасов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
		|	ОформленныеПартии.ДатаРеестра КАК ДатаРеестра
		|ИЗ
		|	РегистрСведений.гкс_ОформленныеПартии КАК ОформленныеПартии
		|ГДЕ
		|	ОформленныеПартии.ДокументРегистрации = &ДокументРегистрации
		|	И ОформленныеПартии.ОснованиеДвиженияЗапасов = &ОснованиеДвиженияЗапасов";
		
	Запрос.УстановитьПараметр("ДокументРегистрации", ДокументРегистрации);
	Запрос.УстановитьПараметр("ОснованиеДвиженияЗапасов", ОснованиеДвиженияЗапасов);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.ДатаРеестра;
		Иначе
			Результат = Неопределено;
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

// Возвращает число символов для поиска.
// 
// Возвращаемое значение:
//  Число - количество символов для поиска транспортного средства в справочнике
//
Функция КоличествоСимволовДляПоискаПоНомеру() Экспорт
	
	Возврат 6;
	
КонецФункции

// Возвращает строку для подстановки в запрос поиска транспорта по ччасти номера
//
// Параметры:
//  НомерТранспорта - Строка - номер транспорта
//
//  ЧислоСимволов - Число - количество символов для сравнения
// 
// Возвращаемое значение:
//  Строка - строка для подстановки в текст запроса 
//
Функция ПолеПоискаГосНомер(НомерТранспорта, ЧислоСимволов) Экспорт
	
	СоставСтроки = Новый Массив;
	СоставСтроки.Добавить(Лев(НомерТранспорта, ЧислоСимволов));
	СоставСтроки.Добавить("%");
	
	Возврат СтрСоединить(СоставСтроки);
	
КонецФункции

// Направление на разгрузку по регистрации.
// 
// Параметры:
//  Регистрация - ДокументСсылка.гкс_РегистрацияНаПЛК - 
// 
// Возвращаемое значение:
//  ДокументСсылка.гкс_НаправлениеНаРазгрузку - Направление на разгрузку по регистрации
//
Функция НаправлениеНаРазгрузкуПоРегистрации(Знач Регистрация) Экспорт
	
	Возврат Документы.гкс_НаправлениеНаРазгрузку.ПолучитьПоРегистрации(Регистрация);
	
КонецФункции

// Определяет время начала производственный суток для даты
// 
// Параметры:
//  - ДатаРегистрации - Дата - дата приезда на ПЛК
// 
// Возвращаемое значение:
// НачалоПериода   - ДатаВремя 	- дата, время начала произв. суток		
//
Функция ДатаНачалаПроизводственныхСуток(ДатаРегистрации) Экспорт
		
	ДатаНачала = НачалоПроизводственныхСуток(ДатаРегистрации);
	
	Если ДатаНачала > ДатаРегистрации Тогда
		ПредыдущиеСутки = ДатаРегистрации - гкс_ОбщегоНазначенияКлиентСервер.СекундВДне();
		Результат = НачалоПроизводственныхСуток(ПредыдущиеСутки);
	Иначе
		Результат = ДатаНачала;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Определяет время начала и окончания производственный суток для даты
// 
// Параметры:
//  - ДатаРегистрации - Дата - дата приезда на ПЛК
// 
// Возвращаемое значение:
//  Структура 	
//			- НачалоПериода    	- дата, время начала произв. суток
//			- ОкончаниеПериода	- дата, время конца произв. суток		
//
Функция ПериодПроизводственнойСмены(ДатаРегистрации) Экспорт
	
	Результат = Новый Структура("НачалоПериода, ОкончаниеПериода");
	
	ДатаНачала = НачалоПроизводственныхСуток(ДатаРегистрации);
	
	Если ДатаНачала > ДатаРегистрации Тогда
		ПредыдущиеСутки = ДатаРегистрации - гкс_ОбщегоНазначенияКлиентСервер.СекундВДне();
		Результат.НачалоПериода = НачалоПроизводственныхСуток(ПредыдущиеСутки);
		Результат.ОкончаниеПериода = ОкончаниеПроизводственныхСуток(ПредыдущиеСутки);
	Иначе
		Результат.НачалоПериода = ДатаНачала;
		Результат.ОкончаниеПериода = ОкончаниеПроизводственныхСуток(ДатаРегистрации);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Определяет время начала производственный суток для даты
// 
// Параметры:
//  - ДатаРегистрации - Дата - 
// 
// Возвращаемое значение:
//  Дата - дата, время начала произв. суток		
//
Функция НачалоПроизводственныхСуток(ДатаСмены) Экспорт
	
    УстановитьПривилегированныйРежим(Истина);

	Приращение = Константы.гкс_СмещениеПроизводственныхСуток.Получить();
	Результат = НачалоДня(ДатаСмены) + Приращение * гкс_ОбщегоНазначенияКлиентСервер.СекундВЧасе(); 
	
	Возврат НачалоЧаса(Результат);
	
КонецФункции

// Определяет время окончания производственный суток для даты
// 
// Параметры:
//  - ДатаРегистрации - Дата - 
// 
// Возвращаемое значение:
//  Дата - дата, время окончания произв. суток		
//
Функция ОкончаниеПроизводственныхСуток(ДатаСмены) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Приращение = Константы.гкс_СмещениеПроизводственныхСуток.Получить();
	Результат = КонецДня(ДатаСмены) + Приращение * гкс_ОбщегоНазначенияКлиентСервер.СекундВЧасе(); 
	
	Возврат КонецЧаса(Результат);
	
КонецФункции
	
// Получить единицу измерения веса по-умолчанию в приемке.
// 
// Возвращаемое значение:
//  Произвольный, СправочникСсылка.УпаковкиЕдиницыИзмерения - установленно значение константы
Функция ПолучитьЕдиницуИзмеренияВесаПриемки() Экспорт
	
	Возврат гкс_ПриемкаТранспортаПовтИсп.ПолучитьЕдиницуИзмеренияВесаПриемки();
	
КонецФункции

// Получить коэффициент пересчета из ЕдиницаДо в ЕдиницаПосле
// см. гкс_ПриемкаТранспортаПовтИсп.ПолучитьКоэффициентПересчетаЕдиниц  
Функция ПолучитьКоэффициентПересчетаЕдиниц(ЕдиницаДо, ЕдиницаПосле) Экспорт
	
	Возврат гкс_ПриемкаТранспортаПовтИсп.ПолучитьКоэффициентПересчетаЕдиниц(ЕдиницаДо, ЕдиницаПосле);
	
КонецФункции

// Пересчитывает весовые показатели в переданной структуре в единицу документа.
// 
// Параметры:
//  ДанныеПоВесу - Структура:
//  	* ЕдиницаИзмеренияВеса - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица веса в структуре
//  	* ВесНетто - Число
//  	* ВесБрутто - Число
//  	* ВесТары - Число
//  ЕдиницаИзмеренияДокумента - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица веса документа
Процедура ПересчитатьВесВЕдиницахДокумента(ДанныеПоВесу, ЕдиницаИзмеренияДокумента) Экспорт
	
	КоэффициентПересчета = гкс_ПриемкаТранспорта.ПолучитьКоэффициентПересчетаЕдиниц(
								ДанныеПоВесу.ЕдиницаИзмеренияВеса, ЕдиницаИзмеренияДокумента);
								
	ДанныеПоВесу.ВесНетто	= ДанныеПоВесу.ВесНетто * КоэффициентПересчета; 
	ДанныеПоВесу.ВесБрутто	= ДанныеПоВесу.ВесБрутто * КоэффициентПересчета; 
	ДанныеПоВесу.ВесТары	= ДанныеПоВесу.ВесТары * КоэффициентПересчета;
	 
КонецПроцедуры

// Получает данные по результатам взвешивания для регистрации процесса приемки
// 
// Параметры:
// 	ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК - регистрация транспорта на ПЛК
//																для которой необходимо получить данные о значениях взвешивания
// 
// Возвращаемое значение:
//  Структура - данные о значениях взвешивания
//
Функция ИнформацияОВесахПриемкиПоДокументуРегистрации(ДокументРегистрации) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацияНаПЛК.Ссылка КАК Регистрация,
	|	РегистрацияНаПЛК.ВесБрутто КАК БруттоДок,
	|	РегистрацияНаПЛК.ВесНетто КАК НеттоДок,
	|	РегистрацияНаПЛК.ВесТары КАК ТараДок,
	|	ЕСТЬNULL(ВзвешиваниеНаВъезде.Вес, 0) КАК БруттоФакт,
	|	ЕСТЬNULL(ВзвешиваниеНаВыезде.Вес, 0) КАК ТараФакт,
	|	ВЫБОР
	|		КОГДА ВзвешиваниеНаВыезде.Ссылка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ВзвешиваниеНаВъезде.Вес, 0) - ЕСТЬNULL(ВзвешиваниеНаВыезде.Вес, 0)
	|	КОНЕЦ КАК НеттоФакт,
	|	ВЫБОР
	|		КОГДА ВзвешиваниеНаВыезде.Ссылка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ВзвешиваниеНаВъезде.Вес, 0) - ЕСТЬNULL(ВзвешиваниеНаВыезде.Вес, 0) - РегистрацияНаПЛК.ВесНетто
	|	КОНЕЦ КАК НеттоОтклонение,
	|	ВЫБОР
	|		КОГДА ВзвешиваниеНаВъезде.Ссылка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ВзвешиваниеНаВъезде.Вес, 0) - РегистрацияНаПЛК.ВесБрутто
	|	КОНЕЦ КАК БруттоОтклонение,
	|	ВЫБОР
	|		КОГДА ВзвешиваниеНаВыезде.Ссылка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ВзвешиваниеНаВыезде.Вес, 0) - РегистрацияНаПЛК.ВесТары
	|	КОНЕЦ КАК ТараОтклонение,
	|	ЕСТЬNULL(ПредельноеОтклонениеВесаГруза.Значение, 0) * РегистрацияНаПЛК.ВесБрутто КАК БруттоОтклонениеРазрешенное,
	|	ЕСТЬNULL(ПредельноеОтклонениеВесаГруза.Значение, 0) * РегистрацияНаПЛК.ВесНетто КАК НеттоОтклонениеРазрешенное
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_Взвешивание КАК ВзвешиваниеНаВъезде
	|		ПО (ВзвешиваниеНаВъезде.ДокументРегистрации = РегистрацияНаПЛК.Ссылка)
	|			И (ВзвешиваниеНаВъезде.ТипВзвешивания = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Въезд))
	|			И (ВзвешиваниеНаВъезде.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гкс_Взвешивание КАК ВзвешиваниеНаВыезде
	|		ПО (ВзвешиваниеНаВыезде.ДокументРегистрации = РегистрацияНаПЛК.Ссылка)
	|			И (ВзвешиваниеНаВыезде.ТипВзвешивания = ЗНАЧЕНИЕ(Перечисление.гкс_ТипыВзвешивания.Выезд))
	|			И (ВзвешиваниеНаВыезде.Проведен),
	|	Константа.гкс_ПредельноеОтклонениеВесаГруза КАК ПредельноеОтклонениеВесаГруза
	|ГДЕ
	|	РегистрацияНаПЛК.Ссылка = &ДокументРегистрации
	|	И РегистрацияНаПЛК.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.гкс_ТипРегистрации.Приемка)";
	
	Запрос.УстановитьПараметр("ДокументРегистрации", ДокументРегистрации);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Результат = Неопределено;
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ИндексПервойСтроки = 0;
		ДанныеЗапроса = Запрос.Выполнить().Выгрузить();	
		СтрокаТаблицы = ДанныеЗапроса[ИндексПервойСтроки];
			
		Результат = гкс_ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);	
		
		Результат.Вставить("БруттоОтклонениеAbs", Макс(-Результат.БруттоОтклонение, Результат.БруттоОтклонение));
		Результат.Вставить("НеттоОтклонениеAbs", Макс(-Результат.НеттоОтклонение, Результат.НеттоОтклонение));
		Результат.Вставить("ТараОтклонениеAbs", Макс(-Результат.ТараОтклонение, Результат.ТараОтклонение));
		Результат.Вставить("ПредельноеОтклонениеВесаГруза", Константы.гкс_ПредельноеОтклонениеВесаГруза.Получить());
		
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

// Определяет является ли перевозка внутригрупповой
// 
// Параметры:
// 	Отправитель - СправочникСсылка.Контрагенты - контрагент отправитель груза
//																 
// Возвращаемое значение:
//  Булево - Истина - когда перевозка внутригрупповая
//
Функция ЭтоВнутригрупповаяПеревозка(Получатель) Экспорт

	ОрганизацияПолучатель = Справочники.Организации.ОрганизацияКонтрагента(Получатель);
	
	Возврат ЗначениеЗаполнено(ОрганизацияПолучатель);
	
КонецФункции	

// Определяет является ли лабораторный анализ для заполнения в основание для движения запасов
// 
// Параметры:
// 	ЛабораторныйАнализ - ДокументСсылка.гкс_ЛабораторныйАнализ - лаб. анализ
//																 
// Возвращаемое значение:
//  Булево - Истина - когда документ подходиь под условия заполнения в основание движения запасов 
//
Функция ЭтоЛабораторныйАнализДляОснованияДвиженияЗапасов(ЛабораторныйАнализ) Экспорт

	ПередаватьКачествоВходногоКонтроля = ПолучитьФункциональнуюОпцию("гкс_ПередаватьКачествоВходногоКонтроля");
	
	НазначениеИспользованияКачества = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ЛабораторныйАнализ, "гкс_НазначениеИспользованияКачества");
	
	Если Не ПередаватьКачествоВходногоКонтроля
		И НазначениеИспользованияКачества = Перечисления.гкс_НазначенияИспользованияКачества.ПриемкаКомпозит Тогда
		
		Результат = Истина;
		
	ИначеЕсли ПередаватьКачествоВходногоКонтроля
		И НазначениеИспользованияКачества = Перечисления.гкс_НазначенияИспользованияКачества.Приемка Тогда
		
		Результат = Истина;
		
	Иначе
		Результат = Ложь;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

// Возвращает применение оформления ЖД вагонов без взвешивания
// Параметры: 
// ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК
// ВозвращаемоеЗначение
// - Булево
Функция РазрешитьВходнойКонтрольДоВзвешиванияПоРегистрации(ДокументРегистрации) Экспорт
	ДанныеРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументРегистрации, "ТипРегистрации, ВидПеревозки");
	Возврат  
		РазрешитьВходнойКонтрольДоВзвешивания(
			ДанныеРегистрации.ТипРегистрации, ДанныеРегистрации.ВидПеревозки);
		
КонецФункции 

// Возвращает применение оформления ЖД вагонов без взвешивания
// Параметры: 
// ТипРегистрации - Перечисления.гкс_ТипРегистрации
// ВидПеревозки - Перечисления.гкс_ТипыТранспортныхСредствДоставки
// ВозвращаемоеЗначение
// - Булево
Функция РазрешитьВходнойКонтрольДоВзвешивания(ТипРегистрации, ВидПеревозки) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Возврат
		Константы.гкс_РазрешитьВходнойКонтрольДоВзвешиванияЖД.Получить()
		И Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЭтоЖДПеревозка(ВидПеревозки) 
		И ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка; 
КонецФункции 	
	
// Возвращает признак наличия документа взвешивания на въезде
// Параметры:
// РегистрацияНаПЛК - ДокументСсылка.гкс_РегистрацияНаПЛК
// ВозвращаемоеЗначение
// - Булево
Функция ЕстьВзвешиваниеБруттоПриемка(РегистрацияНаПЛК) Экспорт         
	УстановитьПривилегированныйРежим(Истина);
	Возврат
		ЗначениеЗаполнено(
			Документы.гкс_Взвешивание.ПоРегистрацииИТипуВзвешивания(
			РегистрацияНаПЛК, Перечисления.гкс_ТипыВзвешивания.Въезд));

КонецФункции    

// Проверяется возможность создания док-та Направления на разгрузку
// Параметры:
// ДокументРегистрации - ДокументСсылка.гкс_РегистарцияПЛК
// РазрешитьВходнойКонтрольДоВзвешивания - Булево
// ВозвращаемоеЗначение:
// - Булево
Функция НаправлятьНаРазгрузкуРазрешение(ДокументРегистрации, РазрешитьВходнойКонтрольДоВзвешивания = Неопределено) Экспорт
	Если РазрешитьВходнойКонтрольДоВзвешивания = Неопределено Тогда
		РазрешитьВходнойКонтрольДоВзвешивания =
			РазрешитьВходнойКонтрольДоВзвешиванияПоРегистрации(ДокументРегистрации);
	КонецЕсли;		
	Возврат       
		Не РазрешитьВходнойКонтрольДоВзвешивания
		Или РазрешитьВходнойКонтрольДоВзвешивания
		И ЕстьВзвешиваниеБруттоПриемка(ДокументРегистрации);

КонецФункции

// Возвращает признак записи состояния документом Взвешивание
// Параметры:
// Взвешивание - ДокументСсылка.гкс_Взвешивание
// ВозвращаемоеЗначение
// - Булево
Функция УстанавливатьСостояниеПоВзвешиванию(Взвешивание) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ДокументРегистрации = Взвешивание.ДокументРегистрации;
	РазрешитьВходнойКонтрольДоВзвешивания = 
		гкс_ПриемкаТранспорта.РазрешитьВходнойКонтрольДоВзвешиванияПоРегистрации(ДокументРегистрации);
	Если РазрешитьВходнойКонтрольДоВзвешивания
		И ЭтоВъездПриемкаЖДТранспорт(Взвешивание) Тогда
		Значение = ПроверитьСтатусПрибыл(Взвешивание, ДокументРегистрации);
	Иначе     
		Значение = Истина;
	КонецЕсли;	
		
	Возврат Значение;
		
КонецФункции

Функция ЭтоВъездПриемкаЖДТранспорт(ДокументВзвешивания) Экспорт
	
	РеквизитыВзвешивание = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументВзвешивания, 
		"ТипВзвешивания, ДокументРегистрации");
	РеквизитыРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыВзвешивание.ДокументРегистрации, 
		"ВидПеревозки, ТипРегистрации");
	
	Возврат РеквизитыВзвешивание.ТипВзвешивания = Перечисления.гкс_ТипыВзвешивания.Въезд
		И РеквизитыРегистрации.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка
		И Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЭтоЖДПеревозка(РеквизитыРегистрации.ВидПеревозки);

КонецФункции


// Формирует Направление на разгрузку
// Параметры:
// ДатаДокумента - Дата
// ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК
// КачественныеПоказатели - ТаблицаЗначений
// Возвращаемое значение:
Процедура СформироватьНаправлениеНаРазгрузку(ДатаДокумента, ДокументРегистрации, ЛабораторныйАнализ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаправлениеНаРазгрузкуСсылка = 
		Документы.гкс_НаправлениеНаРазгрузку.ПолучитьПоРегистрации(ДокументРегистрации);
		
	Если ЗначениеЗаполнено(НаправлениеНаРазгрузкуСсылка) Тогда
		Возврат;
	КонецЕсли;          
	
	РеквизитыРегистрации = "ВидПеревозки, ТипРегистрации, Номенклатура, ТочкаМаршрута, Организация";
	ДанныеРегистрации = ОбщегоНазначения
	                        .ЗначенияРеквизитовОбъекта(ДокументРегистрации, РеквизитыРегистрации);
	
	СлужебнаяНоменклатура = 
		ПодходящаяСлужебнаяНоменклатураДляФормированияНаправленияНаРагрузку(
			ДатаДокумента, ДанныеРегистрации, ЛабораторныйАнализ);
	Если Не ЗначениеЗаполнено(СлужебнаяНоменклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ЯмаСилосРазгрузки = гкс_ПриемкаТранспорта.ЯмаСилосРазгрузки(
			ДанныеРегистрации.ТочкаМаршрута, ДанныеРегистрации.ВидПеревозки, 
			ДанныеРегистрации.Номенклатура, СлужебнаяНоменклатура);	

	Если Не ЗначениеЗаполнено(ЯмаСилосРазгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
	ДанныеЗаполнения.Вставить("ТочкаМаршрута", ДанныеРегистрации.ТочкаМаршрута);
	ДанныеЗаполнения.Вставить("ДокументРегистрации", ДокументРегистрации);

	ЧасовойПоясПЛК = гкс_ПриемкаТранспорта.ЧасовойПоясПЛК(ДанныеРегистрации.ТочкаМаршрута);
	МестнаяДата = ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(ЧасовойПоясПЛК) Тогда
		МестнаяДата = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПоясПЛК);
	КонецЕсли;
	ДанныеЗаполнения.Вставить("МестнаяДата", МестнаяДата);

	ДанныеЗаполнения.Вставить("Склад", ЯмаСилосРазгрузки.Силос);
	ДанныеЗаполнения.Вставить("ЯмаРазгрузки", ЯмаСилосРазгрузки.ЯмаРазгрузки);
	ДанныеЗаполнения.Вставить("СлужебнаяНоменклатура", СлужебнаяНоменклатура);
	ДанныеЗаполнения.Вставить("ПервичныйСтатус", Перечисления.гкс_СостоянияРегистрации.КачествоПринято);
	ДанныеЗаполнения.Вставить("ПринятьКачество", Истина);

	НаправлениеНаРазгрузку = Документы.гкс_НаправлениеНаРазгрузку.СоздатьДокументНаОсновании(ДанныеЗаполнения);	

КонецПроцедуры	   

// Возвращает служебную номенклатуру
// Параметры:
// ДатаДокумента - Дата
// ДанныеРегистрации - Структура
// ЛабораторныйАнализ - ДокументСсылка.ЛабораторныйАнализ
// Возвращаемое значение:
// - СправочникСсылка.Номенклатура 
Функция ПодходящаяСлужебнаяНоменклатураДляФормированияНаправленияНаРагрузку(
		ДатаДокумента, ДанныеРегистрации, ЛабораторныйАнализ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСлужебнаяНоменклатураДляФормированияНаправленияНаРагрузку();       
	
	Запрос.УстановитьПараметр("ДатаПроверки", КонецДня(ДатаДокумента));
	Запрос.УстановитьПараметр("Номенклатура", ДанныеРегистрации.Номенклатура);
	Запрос.УстановитьПараметр("Организация",  ДанныеРегистрации.Организация);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ДанныеРегистрации.ТочкаМаршрута);
	
	Запрос.УстановитьПараметр("КачественныеПоказатели", ЛабораторныйАнализ.КачественныеПоказатели.Выгрузить());
	
	Запрос.УстановитьПараметр("ВидПеревозки", ДанныеРегистрации.ВидПеревозки);
	Запрос.УстановитьПараметр("НазначениеИспользованияКачества", 
	       Перечисления.гкс_НазначенияИспользованияКачества.ПолучитьПоТипуРегистрации(ДанныеРегистрации.ТипРегистрации));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СлужебнаяНоменклатура;
	КонецЕсли;
	
	Возврат Справочники.Номенклатура.ПустаяСсылка();

КонецФункции 

// Возвращает лаб. анализ входного контроля по регистрации
// Параметры:
// ДокументРегистрации - Структура
// Возвращаемое значение:
//  - ДокументСсылка.гкс_ЛабораторныйАнализ
Функция ЛабораторныйАнализВходногоКонтроляПоРегистрации(ДокументРегистрации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЛабораторныйАнализ.Ссылка КАК АнализДокументРегистрации
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ КАК ЛабораторныйАнализ
	|ГДЕ
	|	ЛабораторныйАнализ.гкс_ДокументРегистрации = &ДокументРегистрации
	|	И ЛабораторныйАнализ.Статус = ЗНАЧЕНИЕ(Перечисление.гкс_СтатусыЛабораторногоАнализа.Выполнен)
	|	И ЛабораторныйАнализ.гкс_НазначениеИспользованияКачества = ЗНАЧЕНИЕ(Перечисление.гкс_НазначенияИспользованияКачества.Приемка)";
	
	Запрос.УстановитьПараметр("ДокументРегистрации", ДокументРегистрации);
	ЛабАнализ = Документы.гкс_ЛабораторныйАнализ.ПустаяСсылка();
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЛабАнализ = Выборка.АнализДокументРегистрации;
	 КонецЕсли;	
	 
	 Возврат ЛабАнализ;
КонецФункции	 
	
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Автоприемка

// Прояверяет, есть ли назначения по качеству для точки маршрута
// 
// Параметры:
//  СлужебнаяНоменклатура - СправочникСсылка.Номенклатура - 
//  ТочкаМаршрута - СправочникСсылка.гкс_ТочкиМаршрута - 
// 
// Возвращаемое значение:
//  Булево - Номенклатура назначена на яму для точки маршрута
//
Функция НоменклатураНазначенаНаЯмуДляТочкиМаршрута(СлужебнаяНоменклатура, ТочкаМаршрута) Экспорт
				  
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиНазначенияРазгрузки.ЯмаРазгрузки КАК ЯмаРазгрузки
	|ИЗ
	|	РегистрСведений.гкс_НастройкиНазначенияРазгрузки.СрезПоследних(
	|			,
	|			ТочкаМаршрута = &ТочкаМаршрута
	|				И СлужебнаяНоменклатура = &СлужебнаяНоменклатура) КАК НастройкиНазначенияРазгрузки";
	
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	Запрос.УстановитьПараметр("СлужебнаяНоменклатура", СлужебнаяНоменклатура);
	
	Возврат Не Запрос.Выполнить().Пустой();		  
	
КонецФункции

// Точки маршрута пользователя.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - 
// 
// Возвращаемое значение:
//  Массив - массив из СправочникСсылка.гкс_ТочкиМаршрута - 
//
 Функция ТочкиМаршрутаПользователя(Знач Пользователь = Неопределено) Экспорт
	
	Возврат РегистрыСведений
	             .гкс_НастройкиПользователейПриемкаНаПЛК
	             .НастроенныеТочкиМаршрутаПользователя(Пользователь);
	
КонецФункции

// Получает транспортный документ и транспорт по регистрации.
// 
// Параметры:
//  ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК - 
// 
// Возвращаемое значение:
//  Структура:
// 		* ТранспортныйДокумент - ДокументСсылка.гкс_ТранспортныйДокумент -
// 		* ТраснпортноеСредство - СправочникСсылка.ТранспортныеСредства  
//
Функция ИнформацияОТранспортеПоРегистрации(ДокументРегистрации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегистрыСведений.гкс_СвязьРегистрацииИТранспортногоДокумента.ПолучитьСвязьСТранспортнымДокументом(ДокументРегистрации);
	
КонецФункции

// Установить документы регистрации.
// 
// Параметры:
//  СтруктураЗаписи - Структура:
//   * ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК
//   * ТранспортныйДокумент - ДокументСсылка.гкс_ТранспортныйДокумент
//   * ТранспортноеСредство - СправочникСсылка.ТранспортныеСредства 
//
Процедура УстановитьСвязьРегистрацииИТранспортногоДокумента(СтруктураЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.гкс_СвязьРегистрацииИТранспортногоДокумента.ДобавитьЗапись(СтруктураЗаписи);
		
КонецПроцедуры

// Установить документы регистрации.
// 
// Параметры:
//  СтруктураЗаписи - Структура:
//   * ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК
//   * ЗаписьВОчередь - ДокументСсылка.гкс_ЗаписьВОчередьПриемкиПЛК
//
Процедура УстановитьСвязьРегистрацииИЗаписиВОчередь(СтруктураЗаписи) Экспорт
	
	РегистрыСведений.гкс_РегистрацииПоЭлектроннойОчереди.ДобавитьЗапись(СтруктураЗаписи);
		
КонецПроцедуры

// Удалить документы регистрации.
// 
// Параметры:
//  СтруктураЗаписи - Структура:
//   * ДокументРегистрации - ДокументСсылка.гкс_РегистрацияНаПЛК
//   * ТранспортныйДокумент - ДокументСсылка.гкс_ТранспортныйДокумент
//   * ТранспортноеСредство - СправочникСсылка.ТранспортныеСредства 
//
Процедура УдалитьСвязьРегистрацииИТранспортногоДокумента(СтруктураЗаписи) Экспорт
	
	РегистрыСведений.гкс_СвязьРегистрацииИТранспортногоДокумента.УдалитьЗапись(СтруктураЗаписи);
		
КонецПроцедуры

// Это пользователь с ролью администратор ПЛК.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи, Неопределено - 
//  Параметры - Структура - 
// 
// Возвращаемое значение:
//  Булево - Это пользователь с ролью администратор ПЛК или нет
//
Функция ЭтоПользовательСРольюАдминистраторПЛК(Пользователь, Параметры) Экспорт
	
	Возврат РегистрыСведений
	              .гкс_НастройкиПользователейПриемкаНаПЛК
	              .ЭтоПользовательСРольюАдминистраторПЛК(Пользователь, Параметры);
КонецФункции

#КонецОбласти     

Функция ПроверитьСтатусПрибыл(ДокументВзвешивания, ДокументРегистрации)
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.Прибыл);
	
	ТекущееСостояние = РегистрыСведений.гкс_СостоянияРегистрации.ТекущиеДанныеСостоянияПоРегистрации(
		ДокументРегистрации, ДокументВзвешивания.Дата - 1);
	
	Возврат
		МассивСостояний.Найти(ТекущееСостояние.Состояние) <> Неопределено;
	
КонецФункции    
	
Функция ТекстЗапросаСлужебнаяНоменклатураДляФормированияНаправленияНаРагрузку()

	Возврат
	"ВЫБРАТЬ
	|	КачественныеПоказатели.Значение КАК ЗначениеПоказателя,
	|	КачественныеПоказатели.Показатель КАК ПоказательАнализа,
	|	ИСТИНА КАК ЕстьПересечение
	|ПОМЕСТИТЬ ВТ_КачественныеПоказатели
	|ИЗ
	|	&КачественныеПоказатели КАК КачественныеПоказатели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СегментацияКачестваНоменклатуры.СлужебнаяНоменклатура КАК СлужебнаяНоменклатура
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	РегистрСведений.гкс_СегментацияКачестваНоменклатуры КАК СегментацияКачестваНоменклатуры
	|ГДЕ
	|	СегментацияКачестваНоменклатуры.Номенклатура = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыНормативнойСертификацииНоменклатуры.Регистратор КАК Регистратор,
	|	РезультатыНормативнойСертификацииНоменклатуры.ПоказательАнализа КАК ПоказательАнализа,
	|	РезультатыНормативнойСертификацииНоменклатуры.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|	РезультатыНормативнойСертификацииНоменклатуры.МаксимальноеЗначение КАК МаксимальноеЗначение,
	|	РезультатыНормативнойСертификацииНоменклатуры.Номенклатура КАК Номенклатура,
	|	РезультатыНормативнойСертификацииНоменклатуры.ПериодС КАК ПериодС,
	|	ВЫБОР
	|		КОГДА РезультатыНормативнойСертификацииНоменклатуры.ПериодПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(2999, 1, 1, 0, 0, 0)
	|		ИНАЧЕ РезультатыНормативнойСертификацииНоменклатуры.ПериодПо
	|	КОНЕЦ КАК ПериодПо
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	РегистрСведений.гкс_РезультатыНормативнойСертификацииНоменклатуры КАК РезультатыНормативнойСертификацииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО РезультатыНормативнойСертификацииНоменклатуры.Номенклатура = ВТ_Номенклатура.СлужебнаяНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КачественныеПоказатели КАК ВТ_КачественныеПоказатели
	|		ПО РезультатыНормативнойСертификацииНоменклатуры.ПоказательАнализа = ВТ_КачественныеПоказатели.ПоказательАнализа
	|ГДЕ
	|	РезультатыНормативнойСертификацииНоменклатуры.Организация = &Организация
	|	И РезультатыНормативнойСертификацииНоменклатуры.гкс_ВидПеревозки = &ВидПеревозки
	|	И РезультатыНормативнойСертификацииНоменклатуры.гкс_НазначениеИспользованияКачества = &НазначениеИспользованияКачества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Показатели.Номенклатура КАК Номенклатура,
	|	ВТ_Показатели.Регистратор КАК Регистратор,
	|	ВТ_Показатели.ПоказательАнализа КАК ПоказательАнализа,
	|	ЕСТЬNULL(ВТ_КачественныеПоказатели.ЕстьПересечение, ЛОЖЬ) КАК ЕстьПересечение
	|ПОМЕСТИТЬ ВТ_ПоискПересечений
	|ИЗ
	|	ВТ_Показатели КАК ВТ_Показатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КачественныеПоказатели КАК ВТ_КачественныеПоказатели
	|		ПО ВТ_Показатели.ПоказательАнализа = ВТ_КачественныеПоказатели.ПоказательАнализа
	|			И ВТ_Показатели.ЗначениеПоказателя <= ВТ_КачественныеПоказатели.ЗначениеПоказателя
	|			И ВТ_Показатели.МаксимальноеЗначение >= ВТ_КачественныеПоказатели.ЗначениеПоказателя
	|			И (ВТ_Показатели.ПериодС <= &ДатаПроверки)
	|			И (ВТ_Показатели.ПериодПо >= &ДатаПроверки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоискПересечений.Номенклатура КАК Номенклатура,
	|	ВТ_ПоискПересечений.Регистратор КАК Регистратор,
	|	ВТ_ПоискПересечений.ПоказательАнализа КАК ПоказательАнализа,
	|	МАКСИМУМ(ВТ_ПоискПересечений.ЕстьПересечение) КАК ЕстьПересечение
	|ПОМЕСТИТЬ ВТ_РезультатПоискаПересечений
	|ИЗ
	|	ВТ_ПоискПересечений КАК ВТ_ПоискПересечений
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПоискПересечений.Номенклатура,
	|	ВТ_ПоискПересечений.Регистратор,
	|	ВТ_ПоискПересечений.ПоказательАнализа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РезультатПоискаПересечений.Номенклатура КАК Номенклатура,
	|	ВТ_РезультатПоискаПересечений.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_РезультатСПересечениями
	|ИЗ
	|	ВТ_РезультатПоискаПересечений КАК ВТ_РезультатПоискаПересечений
	|ГДЕ
	|	ВТ_РезультатПоискаПересечений.ЕстьПересечение
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РезультатПоискаПересечений.Номенклатура,
	|	ВТ_РезультатПоискаПересечений.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РезультатПоискаПересечений.Номенклатура КАК Номенклатура,
	|	ВТ_РезультатПоискаПересечений.ЕстьПересечение КАК ЕстьПересечение,
	|	ВТ_РезультатПоискаПересечений.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_РезультатБезПересечения
	|ИЗ
	|	ВТ_РезультатПоискаПересечений КАК ВТ_РезультатПоискаПересечений
	|ГДЕ
	|	НЕ ВТ_РезультатПоискаПересечений.ЕстьПересечение
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РезультатПоискаПересечений.Номенклатура,
	|	ВТ_РезультатПоискаПересечений.ЕстьПересечение,
	|	ВТ_РезультатПоискаПересечений.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_РезультатСПересечениями.Номенклатура КАК СлужебнаяНоменклатура
	|ИЗ
	|	ВТ_РезультатСПересечениями КАК ВТ_РезультатСПересечениями
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РезультатБезПересечения КАК ВТ_РезультатБезПересечения
	|		ПО ВТ_РезультатСПересечениями.Регистратор = ВТ_РезультатБезПересечения.Регистратор
	|			И ВТ_РезультатСПересечениями.Номенклатура = ВТ_РезультатБезПересечения.Номенклатура
	|ГДЕ
	|	ЕСТЬNULL(ВТ_РезультатБезПересечения.ЕстьПересечение, ИСТИНА)";
	
КонецФункции

#КонецОбласти

