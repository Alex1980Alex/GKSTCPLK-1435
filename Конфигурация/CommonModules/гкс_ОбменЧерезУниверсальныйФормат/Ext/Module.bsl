#Область ПрограммныйИнтерфейс

Функция СформироватьСообщение(Объект, Параметры) Экспорт
	
	КомпонентыОбмена = ИнициализироватьКомпонентыОбменаПриОтправке(Объект, Параметры);
				
	гкс_ОбменДаннымиXDTOСервер.ИнициализироватьТаблицыПравилОбмена(КомпонентыОбмена);	
	гкс_ОбменДаннымиXDTOСервер.ОткрытьФайлВыгрузки(КомпонентыОбмена);
	
	ЗаполнитьСценарийВыгрузки(КомпонентыОбмена);	
	ПроизвестиВыгрузкуДанных(КомпонентыОбмена);
	
	Возврат ПолучитьСообщениеИВывестиДопИнформациюВПараметры(КомпонентыОбмена, Параметры);
					
КонецФункции

Процедура ПрочитатьСообщение(Сообщение, ПараметрыОбработки) Экспорт
		
	КомпонентыОбмена = ИнициализироватьКомпонентыОбменаПриПолучении(ПараметрыОбработки);
		
	ОткрытьСообщениеЗагрузки(КомпонентыОбмена, Сообщение);
	
	Отказ = Ложь;
	ПослеОткрытияСообщенияЗагрузки(КомпонентыОбмена, Отказ);
	
	Если Отказ Тогда		
		Возврат;
	КонецЕсли;
		    
    Попытка        
        гкс_ОбменДаннымиXDTOСервер.ПроизвестиЧтениеДанных(КомпонентыОбмена);
    Исключение		
		Заголовок = НСтр("ru = 'Ошибка при загрузке данных: %1'");
		ЗафиксироватьПроблемыОбработкиСообщения(ПараметрыОбработки, 
		                                        КомпонентыОбмена, 
									            Заголовок, 
									            ИнформацияОбОшибке());
		ВызватьИсключение;
        
    КонецПопытки;
	
	Попытка        
        гкс_ОбменДаннымиXDTOСервер.УдалитьВременныеОбъектыСозданныеПоСсылкам(КомпонентыОбмена);
	Исключение		
		Заголовок = НСтр("ru = 'Ошибка при удалении временных объектов, созданных по ссылкам: %1'");
		ЗафиксироватьПроблемыОбработкиСообщения(ПараметрыОбработки, 
		                               			КомпонентыОбмена, 
                                                Заголовок, 
									   			ИнформацияОбОшибке());			
		
		ВызватьИсключение;
		
	КонецПопытки;
		
	ПараметрыОбработки.Вставить("ЗагруженныеОбъекты", КомпонентыОбмена.ЗагруженныеОбъектыСеансаОбмена);	
	КомпонентыОбмена.ФайлОбмена.Закрыть();
	    
КонецПроцедуры 

Функция ТаблицаВерсииФорматаВКонфигурации() Экспорт
	
	ВерсииФормата = Новый ТаблицаЗначений;
	
	ВерсииФормата.Колонки.Добавить("Версия");
	ВерсииФормата.Колонки.Добавить("Порядок");
	ВерсииФормата.Колонки.Добавить("БазоваяВерсия");	
	ВерсииФормата.Колонки.Добавить("ПространствоИмен");

	Для Каждого ПакетXDTO Из Метаданные.ПакетыXDTO Цикл
		
		Если СтрНачинаетсяС(ПакетXDTO.ПространствоИмен, БазовоеXMLПространствоИменУниверсальныйОбмен()) 
			// Исключанием форматы с именами http://sodru.com/edi/edi_stnd/EnterpriseData/.../d.d
			И СтрНайти(ПакетXDTO.ПространствоИмен, 
			           "/",	
			           ,
					   СтрДлина(БазовоеXMLПространствоИменУниверсальныйОбмен()),   
					   2) = 0 ИЛИ гкс_ОчередьСообщенийRMQПереопределяемый.ВключатьПакетВТаблицуВерсий(ПакетXDTO) Тогда   
			
			Попытка
				ФорматОбмена = РазложитьФорматОбмена(ПакетXDTO.ПространствоИмен); 
			Исключение
				ЗаписьЖурналаРегистрации("ИнтеграционныйАдаптер.ПолучениеВерсииФормата",
				                         УровеньЖурналаРегистрации.Ошибка,
										 Метаданные.ОбщиеМодули.гкс_ОбменЧерезУниверсальныйФормат,
										 Неопределено,
										 ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
									 
			СтруктураЗаполнения = Новый Структура;
			СтруктураЗаполнения.Вставить("Версия", ФорматОбмена.Версия);
			СтруктураЗаполнения.Вставить("ПространствоИмен", ПакетXDTO.ПространствоИмен);
			СтруктураЗаполнения.Вставить("БазоваяВерсия", 
			                   Справочники.гкс_ФорматыОбменаИАС.СтаршаяЧастьВерсииФорматаED(ФорматОбмена.Версия));
			СтруктураЗаполнения.Вставить("Порядок", ПорядокСортировкиМинорныйПоВерсииФормата(ФорматОбмена.Версия));
			
			ЗаполнитьЗначенияСвойств(ВерсииФормата.Добавить(), СтруктураЗаполнения);
						
		КонецЕсли;
		
	КонецЦикла;
	
	ВерсииФормата.Сортировать("Порядок");
	
	Возврат ВерсииФормата;
	
КонецФункции

// Устарела. См. также Справочники.гкс_ФорматыОбменаИАС.ПорядокСортировкиМладшейЧастиВерсииФорматаED
Функция ПорядокСортировкиМинорныйПоВерсииФормата(Версия) Экспорт
	Возврат Справочники.гкс_ФорматыОбменаИАС.ПорядокСортировкиМладшейЧастиВерсииФорматаED(Версия)
КонецФункции

#Область ОписаниеСхемФормата

Функция XMLБазоваяСхема() Экспорт
	
	Возврат "http://www.1c.ru/SSL/Exchange/Message";
	
КонецФункции

Функция БазовоеXMLПространствоИменУниверсальныйОбмен() Экспорт
	
	Возврат "http://sodru.com/edi/edi_stnd/EnterpriseData";
	
КонецФункции

Функция БазовоеXMLПространствоИменУниверсальныйОбменСлужебный() Экспорт
	
	Возврат "http://sodru.com/edi/edi_stnd/EnterpriseData/Service";
	
КонецФункции

Функция БазовоеXMLПространствоИменУниверсальныйОбменВендор1С() Экспорт
	
	Возврат "http://v8.1c.ru/edi/edi_stnd/EnterpriseData";
	
КонецФункции

Функция БазовоеXMLПространствоИменУниверсальныйОбменТестыАдаптер() Экспорт
	
	Возврат "http://sodru.com/edi/edi_stnd/EnterpriseData/Tests";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПроцедурыИФункции

#Область ВыгрузкаДанных

Функция ИнициализироватьКомпонентыОбменаПриОтправке(Объект, Параметры)
	
	Перем Формат;
	Параметры.Свойство("Формат", Формат);
	
	НастройкиФормата = НастройкиФормата(Формат);
	Если НЕ ЗначениеЗаполнено(НастройкиФормата) Тогда
		
		ТекстИсключения = НСтр("ru='Не найдены настройки обмена для формата %1. 
		|Проверьте заполнение РС ""Настройки форматов обмена Enterprise Data (ИАС)""'");
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	КомпонентыОбмена = гкс_ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена("Отправка");
	КомпонентыОбмена.ЭтоОбменЧерезПланОбмена = Ложь;
	КомпонентыОбмена.ВерсияФорматаОбмена = НастройкиФормата.Версия;
	КомпонентыОбмена.XMLСхема = НастройкиФормата.ПространствоИмен;
	КомпонентыОбмена.ТолькоНастройкиXDTO = Ложь;
	КомпонентыОбмена.МенеджерОбмена = гкс_ОбщегоНазначения.ОбщийМодуль(НастройкиФормата.МенеджерВыгрузки);
	КомпонентыОбмена.ФабрикаXDTO = НастройкиФормата.ФабрикаXDTO;
	
	ДополнитьКомпонентыОбменаИзПараметров(КомпонентыОбмена, Параметры);
	// Настройки переопределенные в доп. свойствах объекта имеют приоритет 
	// над настройками из справочника "гкс_ПолучателиДанныхRMQ"
	ДополнитьКомпонентыОбменаИзОбъекта(КомпонентыОбмена, Объект); 
		
	Возврат КомпонентыОбмена;
	
КонецФункции

Функция ПолучитьСообщениеИВывестиДопИнформациюВПараметры(КомпонентыОбмена, Параметры)
	
	Параметры.Вставить("ВыгруженныеОбъекты");
	
	ЗаполнитьЗначенияСвойств(Параметры, КомпонентыОбмена, "ВыгруженныеОбъекты");
	
	Возврат КомпонентыОбмена.ФайлОбмена.Закрыть();

КонецФункции

Процедура ДополнитьКомпонентыОбменаИзОбъекта(КомпонентыОбмена, Объект)
	
	Перем ДанныеСинхронизацииRMQ;
	
	КомпонентыОбмена.Вставить("ОбъектВыборки", Объект);
	
	Если ТипЗнч(Объект) = Тип("УдалениеОбъекта") Тогда
        Возврат;	
    КонецЕсли; 
	
	Объект.ДополнительныеСвойства.Свойство("ДанныеСинхронизацииRMQ", ДанныеСинхронизацииRMQ);
	
	// При увеличении количества заполняемых свойств - предусмотреть заполнение через ЗаполнитьЗначенияСвойств()
	// с динамическим формированием строки заполняемых реквизитов
	Если ТипЗнч(ДанныеСинхронизацииRMQ) = Тип("Структура") И ДанныеСинхронизацииRMQ.Свойство("ИмяПОД") Тогда
		КомпонентыОбмена["ИмяПОД"] = СокрЛП(ДанныеСинхронизацииRMQ["ИмяПОД"]);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСценарийВыгрузки(КомпонентыОбмена)
	
	Перем ОбъектВыборки;
	
	КомпонентыОбмена.Свойство("ОбъектВыборки", ОбъектВыборки);
	
	СценарийВыгрузки = Новый ТаблицаЗначений;
	СценарийВыгрузки.Колонки.Добавить("ИмяПОД");
	
	Если ЗначениеЗаполнено(КомпонентыОбмена.ИмяПОД) Тогда		
		ИмяПОД = КомпонентыОбмена.ИмяПОД;
	// В случае если явно не указано никакое ПОД - находим его автоматически по типовому БСП алгоритму
	ИначеЕсли ТипЗнч(ОбъектВыборки) = Тип("УдалениеОбъекта") Тогда
		ИмяПОД = ПОДПоОбъектуМетаданных(КомпонентыОбмена, ОбъектВыборки.Ссылка.Метаданные()).Имя;
	Иначе
		ИмяПОД = ПОДПоОбъектуМетаданных(КомпонентыОбмена, ОбъектВыборки.Метаданные()).Имя;
	КонецЕсли;
	
	// Тут можно размещать специфичный код, если необходимо выгрузить по отдельному ПОД
	ЭлементСценария = СценарийВыгрузки.Добавить();
	ЭлементСценария.ИмяПОД = ИмяПОД;
	
	КомпонентыОбмена.СценарийВыгрузки = СценарийВыгрузки;
	
КонецПроцедуры

Процедура ПроизвестиВыгрузкуДанных(КомпонентыОбмена)
	
	Перем ОбъектВыборки;
	
	КомпонентыОбмена.Свойство("ОбъектВыборки", ОбъектВыборки);
	
	Если ОбъектВыборки = Неопределено Тогда		
		Возврат;
	КонецЕсли;
	
	Попытка
		КомпонентыОбмена.МенеджерОбмена.ПередКонвертацией(КомпонентыОбмена);
	Исключение
		ТекстОшибки = Символы.ПС + гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Событие: %1.
		|Обработчик: ПередКонвертацией.
		|
		|Ошибка выполнения обработчика.
		|%2.'"),
		КомпонентыОбмена.НаправлениеОбмена,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		гкс_ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СокрЛП(ТекстОшибки));
	КонецПопытки;
						
	Для Каждого Строка Из КомпонентыОбмена.СценарийВыгрузки Цикл
		
		Если ТипЗнч(ОбъектВыборки) = Тип("УдалениеОбъекта") Тогда
			гкс_ОбменДаннымиXDTOСервер.ВыгрузитьУдаление(КомпонентыОбмена, ОбъектВыборки.Ссылка);
		Иначе
			ПравилоОбработки = ПОДПоИмени(КомпонентыОбмена, Строка.ИмяПОД);	
			гкс_ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ОбъектВыборки, ПравилоОбработки);
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		КомпонентыОбмена.МенеджерОбмена.ПослеКонвертации(КомпонентыОбмена);
	Исключение
		ТекстОшибки = Символы.ПС + гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Событие: %1.
		|Обработчик: ПослеКонвертации.
		|
		|Ошибка выполнения обработчика.
		|%2.'"),
		КомпонентыОбмена.НаправлениеОбмена,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		гкс_ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СокрЛП(ТекстОшибки));
	КонецПопытки;
	
	КомпонентыОбмена.ФайлОбмена.ЗаписатьКонецЭлемента(); // Body
	КомпонентыОбмена.ФайлОбмена.ЗаписатьКонецЭлемента(); // Message
	
	// Фиксация успешного завершения обмена.
	Если КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Неопределено Тогда
		
		КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = 
		Перечисления.гкс_РезультатыВыполненияОбмена.Выполнено;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПОДПоИмени(КомпонентыОбмена, Имя)
	
	ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти(Имя, "Имя");
	
	Если ПравилоОбработки = Неопределено Тогда
		
		ШаблонОшибки = НСтр("ru = 'Не найдено ПОД с именем %1'");
		ТекстОшибки = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Имя);
		
		ВызватьИсключение ТекстОшибки;
		
	Иначе
		
		Возврат ПравилоОбработки;
		
	КонецЕсли;
	
КонецФункции

Функция ПОДПоОбъектуМетаданных(КомпонентыОбмена, ОбъектМетаданных)
	
	ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти(ОбъектМетаданных, "ОбъектВыборкиМетаданные");
	
	Если ПравилоОбработки = Неопределено Тогда
		
		ШаблонОшибки = НСтр("ru = 'Не найдено ПОД для объекта метаданных. Объект метаданных: %1.'");
		ТекстОшибки = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Строка(ОбъектМетаданных));

		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат ПравилоОбработки;

КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

Функция ИнициализироватьКомпонентыОбменаПриПолучении(ДополнительныеПараметры)
	
	Перем Формат;

	ДополнительныеПараметры.Параметры.Свойство("Формат", Формат);
	
	НастройкиФормата = НастройкиФормата(Формат);
	Если НастройкиФормата = Неопределено Тогда
		
		ТекстИсключения = НСтр("ru='Не найдены настройки обмена для формата %1. 
		|Проверьте заполнение РС ""Настройки форматов обмена Enterprise Data (ИАС)""'");
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;

	КомпонентыОбмена = гкс_ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена("Получение");
	КомпонентыОбмена.ЭтоОбменЧерезПланОбмена = Ложь;
    КомпонентыОбмена.ТолькоНастройкиXDTO = Ложь;
   	КомпонентыОбмена.СостояниеОбменаДанными.ДатаНачала = ТекущаяДатаСеанса();
	КомпонентыОбмена.УдалятьСозданныеПоКлючевымСвойствам = Истина;
	КомпонентыОбмена.ВерсияФорматаОбмена = НастройкиФормата.Версия;
	КомпонентыОбмена.XMLСхема = НастройкиФормата.ПространствоИмен;
	КомпонентыОбмена.ТолькоНастройкиXDTO = Ложь;
	КомпонентыОбмена.МенеджерОбмена = гкс_ОбщегоНазначения.ОбщийМодуль(НастройкиФормата.МенеджерЗагрузки);
	КомпонентыОбмена.ФабрикаXDTO = НастройкиФормата.ФабрикаXDTO;
	
	ДополнитьКомпонентыОбменаИзПараметров(КомпонентыОбмена, ДополнительныеПараметры); 
	
	Возврат КомпонентыОбмена;

КонецФункции

Процедура ПослеОткрытияСообщенияЗагрузки(КомпонентыОбмена, Отказ = Ложь, ИнициализироватьТаблицыПравил = Истина)
    
    Если КомпонентыОбмена.ФлагОшибки Тогда
        гкс_ОбменДаннымиXDTOСервер.ЗавершитьВедениеПротоколаОбмена(КомпонентыОбмена);
        Если КомпонентыОбмена.Свойство("ФайлОбмена") Тогда
            КомпонентыОбмена.ФайлОбмена.Закрыть();
        КонецЕсли;
        Отказ = Истина;
        Возврат;
	КонецЕсли;
    
    гкс_ОбменДаннымиXDTOСервер.ИнициализироватьТаблицыПравилОбмена(КомпонентыОбмена);
        
КонецПроцедуры

Процедура ОткрытьСообщениеЗагрузки(КомпонентыОбмена, Сообщение)
	
	Фабрика = КомпонентыОбмена.ФабрикаXDTO;
    ЧтениеXML = Новый ЧтениеXML;    
    КомпонентыОбмена.ФлагОшибки = Истина;
    
    ПрерватьЦикл = Ложь;
    Пока Не ПрерватьЦикл Цикл
        
        ПрерватьЦикл = Истина;
        
        Попытка
            
            ЧтениеXML.УстановитьСтроку(Сообщение);
            КомпонентыОбмена.Вставить("ФайлОбмена", ЧтениеXML);
            
        Исключение
            
            СтрокаСообщенияОбОшибке = НСтр("ru = 'Ошибка при загрузке данных: %1'");
            СтрокаСообщенияОбОшибке = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ОписаниеОшибки());
            гкс_ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СтрокаСообщенияОбОшибке);
            Прервать;
            
        КонецПопытки;
        
        ЧтениеXML.Прочитать(); // Message
        
        Если (ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
            Или ЧтениеXML.ЛокальноеИмя <> "Message") Тогда
            
            гкс_ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 9);
            Прервать;
            
        КонецЕсли;
        
        ЧтениеXML.Прочитать(); // Header
        
        Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
            Или ЧтениеXML.ЛокальноеИмя <> "Header" Тогда
            
            гкс_ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 9);
            Прервать;
            
        КонецЕсли;
        
        Header = Фабрика.ПрочитатьXML(ЧтениеXML, Фабрика.Тип(XMLБазоваяСхема(), "Header"));
        
        URIФормата = Header.Format;
		
        //КомпонентыОбмена.XMLСхема = URIФормата;
        
        ФорматОбмена = РазложитьФорматОбмена(КомпонентыОбмена.XMLСхема);
		
		КомпонентыОбмена.ВерсияФорматаОбмена = ФорматОбмена.Версия;
		Если КомпонентыОбмена.МенеджерОбмена = Неопределено Тогда
			КомпонентыОбмена.МенеджерОбмена = ПолучитьМенеджерЗагрузкиПоВерсии(ФорматОбмена.Версия);
		КонецЕсли;
        			
        ЧтениеXML.Прочитать(); // Body
        
        КомпонентыОбмена.ФлагОшибки = Ложь;
        
    КонецЦикла;
    
    Если КомпонентыОбмена.ФлагОшибки Тогда
        
        ЧтениеXML.Закрыть();
        
    Иначе
        
        КомпонентыОбмена.Вставить("ФайлОбмена", ЧтениеXML);
        
    КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ДополнениеКомпонентОбмена

Процедура ДополнитьКомпонентыОбменаИзПараметров(КомпонентыОбмена, Параметры)
	
	// Общие параметры для обоих направлений	
	Если Параметры.Свойство("Приложение") И ЗначениеЗаполнено(Параметры["Приложение"]) Тогда
		КомпонентыОбмена.Вставить("Приложение", Параметры["Приложение"]);
	КонецЕсли;

	Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
		ДополнитьКомпонентыОбменаИзПараметровПриОтправке(КомпонентыОбмена, Параметры);	
	ИначеЕсли КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
		ДополнитьКомпонентыОбменаИзПараметровПриПолучении(КомпонентыОбмена, Параметры);
	КонецЕсли;
		
КонецПроцедуры

Процедура ДополнитьКомпонентыОбменаИзПараметровПриОтправке(КомпонентыОбмена, Параметры)
	
	Если Параметры.Свойство("ВыгружатьСсылкиИзОбъекта") И ЗначениеЗаполнено(Параметры["ВыгружатьСсылкиИзОбъекта"]) Тогда
		КомпонентыОбмена.Вставить("ВыгружатьСсылкиИзОбъекта", Параметры["ВыгружатьСсылкиИзОбъекта"]);
	КонецЕсли;
	
	Если Параметры.Свойство("СсылкаНаПолучателя") И ЗначениеЗаполнено(Параметры["СсылкаНаПолучателя"]) Тогда
		КомпонентыОбмена.Вставить("ПолучательДанныхRMQ", Параметры["СсылкаНаПолучателя"]);
	КонецЕсли;
	
	Если Параметры.Свойство("ГлубинаВыгрузкиСсылок") И ЗначениеЗаполнено(Параметры["ГлубинаВыгрузкиСсылок"]) Тогда
		КомпонентыОбмена.ВыгрузкаОбъектовПоСсылке.Вставить("МаксимальнаяГлубинаВыгрузки", 
		Параметры["ГлубинаВыгрузкиСсылок"]);
	КонецЕсли;
	
	Если Параметры.Свойство("НастройкиВыгрузкиВФорматеED") И ЗначениеЗаполнено(Параметры["НастройкиВыгрузкиВФорматеED"])
		И Параметры["НастройкиВыгрузкиВФорматеED"].Свойство("ИмяПОД") Тогда
		КомпонентыОбмена["ИмяПОД"] = СокрЛП(Параметры["НастройкиВыгрузкиВФорматеED"]["ИмяПОД"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьКомпонентыОбменаИзПараметровПриПолучении(КомпонентыОбмена, Параметры)
	
	Перем ХопRMQ;
	Перем Приложение;	
	Перем СквознойНомерRMQ;	
	Перем ИсключаемыеПолучатели;
	
	Параметры.Свойство("Хоп", ХопRMQ);
	Параметры.Свойство("НомерСообщения", СквознойНомерRMQ);		
	Параметры.Свойство("ИсключаемыеПолучатели", ИсключаемыеПолучатели);	
	
	Параметры.Параметры.Свойство("Приложение", Приложение);
	
	КомпонентыОбмена.Вставить("ХопRMQ", ХопRMQ);
	КомпонентыОбмена.Вставить("Приложение", Приложение);  
	КомпонентыОбмена.Вставить("СквознойНомерRMQ", СквознойНомерRMQ); 
	КомпонентыОбмена.Вставить("ИсключаемыеПолучатели", ИсключаемыеПолучатели);	 

КонецПроцедуры

#КонецОбласти

#Область РаботаСНастройкамиФорматаОбмена

Функция ПолучитьНастройкиСлужебногоФорматаОбмена()
	
	ПространствоИмен = ПространствоИменСлужебногоФорматаОбмена();
	ПространствоИменМассив = СтрРазделить(ПространствоИмен, "/");
		
	Настройки = Новый Структура;
	Настройки.Вставить("ФабрикаXDTO", ФабрикаXDTO);
	Настройки.Вставить("МенеджерВыгрузки", ИмяМенеджераОбменаСлужебный());
	Настройки.Вставить("МенеджерЗагрузки", ИмяМенеджераОбменаСлужебный());
	Настройки.Вставить("Версия", ПространствоИменМассив[ПространствоИменМассив.ВГраница()]);
	Настройки.Вставить("ПространствоИмен", ПространствоИмен);
	
	Возврат Настройки;
	
КонецФункции

Функция ПространствоИменСлужебногоФорматаОбмена()
	
	ИмяНастройки = "ИспользоватьОтдельнуюСхемуДляСлужебныхСообщений";
	Если гкс_ОчередьСообщенийRMQПовтИсп.НастройкаИнтеграционногоАдаптера(ИмяНастройки) Тогда
        Возврат Метаданные.ПакетыXDTO["гкс_EnterpriseDataService"].ПространствоИмен;
    КонецЕсли;
    
    ЕстьПакетСоСтарымИменем = НЕ Метаданные.ПакетыXDTO.Найти("гкс_EnterpriseData_1_6_20") = Неопределено;
    Если ЕстьПакетСоСтарымИменем Тогда
        Возврат Метаданные.ПакетыXDTO["гкс_EnterpriseData_1_6_20"].ПространствоИмен;
    КонецЕсли;
    
    ЕстьПакетСНовымИменем = НЕ Метаданные.ПакетыXDTO.Найти("sodru_EnterpriseData16") = Неопределено;
    Если ЕстьПакетСНовымИменем Тогда
        Возврат Метаданные.ПакетыXDTO["sodru_EnterpriseData16"].ПространствоИмен;
    КонецЕсли;
 
    ВызватьИсключение НСтр("ru='Невозможно определить служебный формат'");

КонецФункции

Функция ВерсияФорматаИзКонфигурации(Формат)
	
	РеквизитыФормата = гкс_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Формат, "Версия, ПространствоИмен");
	СуществующиеВерсии = гкс_ОбменЧерезУниверсальныйФорматПовтИсп.МассивВерсийФорматаВКонфигурации();
	
	Для Каждого ВерсияФормата Из СуществующиеВерсии Цикл 
		Если (РеквизитыФормата.ПространствоИмен = ВерсияФормата.ПространствоИмен
		      И РеквизитыФормата.Версия = ВерсияФормата.Версия) Тогда
			Возврат ВерсияФормата;
		КонецЕсли;
	КонецЦикла;
		
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьНастройкиОбменаПоФормату(Формат)
		
	ФиксНастройки = гкс_ОбменЧерезУниверсальныйФорматПовтИсп.ПолучитьНастройкиФормата(Формат);
	Если НЕ ЗначениеЗаполнено(ФиксНастройки) Тогда		
		
		Версия = ВерсияФорматаИзКонфигурации(Формат);
		Если Версия = Неопределено Тогда
			Возврат Неопределено;	
		КонецЕсли;
		
		Настройки = Новый Структура;
		Настройки.Вставить("ФабрикаXDTO", ФабрикаXDTO);
		Настройки.Вставить("МенеджерВыгрузки", ИмяМенеджераПоУмолчанию());
		Настройки.Вставить("МенеджерЗагрузки", ИмяМенеджераПоУмолчанию());
		Настройки.Вставить("ПространствоИмен", Версия.ПространствоИмен);
				
	Иначе	
		Настройки = Новый Структура(ФиксНастройки);
		Настройки.Вставить("ФабрикаXDTO", 
		гкс_ОбменЧерезУниверсальныйФорматПовтИсп.ПолучитьФабрикуПоМодели(Настройки.МодельДанных));
	КонецЕсли;
	
	ДополнитьНастройкиДаннымиФормата(Настройки, Формат);	
	
	Возврат Настройки;
	
КонецФункции

Процедура ДополнитьНастройкиДаннымиФормата(Настройки, Формат)
	
	ЗаменятьКлючиНастроекДаннымиИзФормата = НЕ ЗначениеЗаполнено(Настройки["ПространствоИмен"]);
			
	гкс_ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Настройки, 
	                       Справочники.гкс_ФорматыОбменаИАС.ДанныеФормата(Формат),
						   ЗаменятьКлючиНастроекДаннымиИзФормата);
						   
КонецПроцедуры

Функция НастройкиФормата(Формат)
	
	Настройки = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Формат) Тогда
		Возврат Настройки;
	КонецЕсли;
	
	Если ЭтоСлужебныйФорматОбмена(Формат) Тогда
		Настройки = ПолучитьНастройкиСлужебногоФорматаОбмена();
	Иначе
		Настройки = ПолучитьНастройкиОбменаПоФормату(Формат);
	КонецЕсли;
	
	Возврат Настройки;
		
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Функция ЭтоСлужебныйФорматОбмена(Формат)
	
	 Возврат Справочники.гкс_ФорматыОбменаИАС.ЭтоСлужебныйФорматОбменаEnterpriseData(Формат);
	 
КонецФункции
 
Процедура ЗафиксироватьПроблемыОбработкиСообщения(РезультатыОбработки, КомпонентыОбмена, Заголовок, Информация)
	
	Перем ТипПроблемы;
	Перем ПредставлениеОбъекта;
	
	КомпонентыОбмена.ОшибкиОбработки.Свойство("ТипПроблемы", ТипПроблемы);
	КомпонентыОбмена.ОшибкиОбработки.Свойство("ПредставлениеОбъекта", ПредставлениеОбъекта);
		
	РезультатыОбработки.Вставить("ЕстьОшибки", Истина);
	
	ТекстПроблемы = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, 
	                                                                            ПодробноеПредставлениеОшибки(Информация));
																				
	РезультатыОбработки.Вставить("Текст", ТекстПроблемы);
	// Тип проблемы определяется в месте непосредственного вызова, 
	// На момент вызова процедуры он должен быть уже заполнен. Если не заполнен - значит не везде перехватили 
	// исключения и предварительно обработали. Для этого проставим значения типа по умолчанию, 
	// представление оставим пустым.	
	РезультатыОбработки.Вставить("ТипПроблемы", ТипПроблемы);
	РезультатыОбработки.Вставить("ПредставлениеОбъекта", ПредставлениеОбъекта);
				
КонецПроцедуры

Функция РазложитьФорматОбмена(Знач ФорматОбмена)
	
	Результат = Новый Структура("БазовыйФормат, Версия");
	
	ЭлементыФормата = СтрРазделить(ФорматОбмена, "/");
	
    Если ЭлементыФормата.Количество() = 0 Тогда
        
        СообщениеИнформирования = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        НСтр("ru = 'Неканоническое имя формата обмена <%1>'"), ФорматОбмена);
        
        ВызватьИсключение СообщениеИнформирования;        
        
    КонецЕсли;
	
	Результат.Версия = ЭлементыФормата[ЭлементыФормата.ВГраница()];
	
	ПроверитьВерсию(Результат.Версия);
	
	ЭлементыФормата.Удалить(ЭлементыФормата.ВГраница());
	
	Результат.БазовыйФормат = СтрСоединить(ЭлементыФормата, "/");
	
	Возврат Результат;
    
КонецФункции

Процедура ПроверитьВерсию(Знач Версия)
	
	Версии = СтрРазделить(Версия, ".");
	
    Если Версии.Количество() = 0 Тогда
       
        СообщениеИнформирования = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        НСтр("ru = 'Неканоническое представление версии формата обмена: <%1>.'"), Версия);
        
		ВызватьИсключение СообщениеИнформирования;
        
    КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ЗначенияПоУмолчанию

Функция ВерсияПоУмолчанию() Экспорт
	
	Возврат "1.6";
	
КонецФункции

Функция ПолучитьМенеджерЗагрузкиПоВерсии(Версия)
	
	ИмяМенеджера = ИмяМенеджераПоУмолчанию();
	
	МенеджерОбмена = гкс_ОбщегоНазначения.ОбщийМодуль(ИмяМенеджера);
	
	Возврат МенеджерОбмена;
	
КонецФункции

Функция ИмяМенеджераОбменаСлужебный() 

	Возврат "гкс_МенеджерОбменаЧерезУниверсальныйФорматСлужебный";
	
КонецФункции

Функция ИмяМенеджераПоУмолчанию() 

	Возврат "гкс_МенеджерОбменаЧерезУниверсальныйФормат";
	
КонецФункции

#КонецОбласти

#КонецОбласти