// @strict-types

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.


// Зарегистрировать данные к обработке для перехода на новую версию.
// 
// Параметры:
//  Параметры - Структура - 
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	// Регистрация данных не требуется.
	Возврат;
КонецПроцедуры

// Обработать первоначальное заполнение версий 1 0 1 1.
// 
// Параметры:
//  Параметры - Структура: 
//   *ОбработкаЗавершена - Булево -
//
Процедура ОбработатьПервоначальноеЗаполнениеВерсий_1_0_1_1(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВерсионируемыеОбъектыМетаданных = ВерсионируемыеОбъектыМетаданных_1_0_1_1();
	ОбработатьПервоначальноеЗаполнениеВерсий(ВерсионируемыеОбъектыМетаданных);
	
	Параметры.ОбработкаЗавершена = Истина;	
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

Процедура ОбновитьИсториюДанных() Экспорт
	
	РегЗадание = Метаданные.РегламентныеЗадания.гкс_ОбновитьИсториюДанных;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(РегЗадание);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;

	ИсторияДанных.ОбновитьИсторию();
	
КонецПроцедуры

Процедура ОчисткаУстаревшихВерсийОбъектов() Экспорт
	
	РегЗадание = Метаданные.РегламентныеЗадания.гкс_ОчисткаУстаревшихВерсийОбъектов;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(РегЗадание);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	СрокХраненияВДнях = Константы.гкс_СрокХраненияВерсийОбъектов.Получить();
	Если НЕ ЗначениеЗаполнено(СрокХраненияВДнях) Тогда
		СрокХраненияВДнях = 999;
	КонецЕсли;
	
	ДатаОтбора = НачалоДня(ТекущаяДатаСеанса()) - СрокХраненияВДнях * гкс_ОбщегоНазначенияКлиентСервер.СекундВДне();
	
	ОчиститьУстаревшиеВерсииОбъектов(ДатаОтбора);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Версионируемые объекты метаданных версии 1.0.1.1
// 
// Возвращаемое значение:
//  Массив - Версионируемые объекты метаданных
//
Функция ВерсионируемыеОбъектыМетаданных_1_0_1_1()
	
	ВерсионируемыеОбъектыМетаданных = Новый Массив;

	// Документы	
	ВерсионируемыеОбъектыМетаданных.Добавить(Метаданные.Документы.гкс_ЗаданияНаПроверкуКачества);
	ВерсионируемыеОбъектыМетаданных.Добавить(Метаданные.Документы.гкс_Взвешивание);
	ВерсионируемыеОбъектыМетаданных.Добавить(Метаданные.Документы.гкс_ЗаписьВГрафикПриемкиПЛК);
	ВерсионируемыеОбъектыМетаданных.Добавить(Метаданные.Документы.гкс_ЗаписьВОчередьПриемкиПЛК);	
	ВерсионируемыеОбъектыМетаданных.Добавить(Метаданные.Документы.гкс_ЛабораторныйАнализ);
	ВерсионируемыеОбъектыМетаданных.Добавить(Метаданные.Документы.гкс_НаправлениеНаРазгрузку);	
	ВерсионируемыеОбъектыМетаданных.Добавить(Метаданные.Документы.гкс_НормативнаяСертификацияНоменклатуры);
	ВерсионируемыеОбъектыМетаданных.Добавить(Метаданные.Документы.гкс_ОснованиеДляДвиженияЗапасов);
	ВерсионируемыеОбъектыМетаданных.Добавить(Метаданные.Документы.гкс_РегистрацияНаПЛК);
	ВерсионируемыеОбъектыМетаданных.Добавить(Метаданные.Документы.гкс_РеестрНакладныхЗПП3);
	ВерсионируемыеОбъектыМетаданных.Добавить(Метаданные.Документы.гкс_СпецификацияКДоговоруКонтрагента);
	ВерсионируемыеОбъектыМетаданных.Добавить(Метаданные.Документы.гкс_ТранспортныйДокумент);
	ВерсионируемыеОбъектыМетаданных.Добавить(Метаданные.Документы.гкс_ФормированиеНомераПробы);
	ВерсионируемыеОбъектыМетаданных.Добавить(Метаданные.Документы.гкс_ПриказНаОтпускПродукцииЭлеватораЗПП16);
	ВерсионируемыеОбъектыМетаданных.Добавить(Метаданные.Документы.гкс_УстановкаМинимальныхПоказателейПриемки);
	
	Возврат ВерсионируемыеОбъектыМетаданных;

КонецФункции

#Область РаботаСИсториейДанных

// Обработать первоначальное заполнение версий.
// 
// Параметры:
//  ВерсионируемыеОбъектыМетаданных - Массив Из ОбъектМетаданныхДокумент, ОбъектМетаданныхСправочник - Версионируемые объекты метаданных
//   
Процедура ОбработатьПервоначальноеЗаполнениеВерсий(ВерсионируемыеОбъектыМетаданных)
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	ВыполнитьПервоначальноеЗаполнениеВерсий(ВерсионируемыеОбъектыМетаданных);
	
	ЗафиксироватьРезультатВЖурналеРегистрации(ВерсионируемыеОбъектыМетаданных, НачалоЗамера);
			
КонецПроцедуры

// Выполнить первоначальное заполнение версий.
// 
// Параметры:
//  ВерсионируемыеОбъектыМетаданных -  Массив Из ОбъектМетаданныхДокумент, ОбъектМетаданныхСправочник - Версионируемые объекты метаданных
//
Процедура ВыполнитьПервоначальноеЗаполнениеВерсий(ВерсионируемыеОбъектыМетаданных);
		
	Для Каждого ОбъектМетаданных Из ВерсионируемыеОбъектыМетаданных Цикл
		
		УстановитьНастройкиИстории(ОбъектМетаданных, Истина);

		СформироватьПервоначальныеВерсииДляОбъектаМетаданных(ОбъектМетаданных);		
		
	КонецЦикла;

КонецПроцедуры

// Установить настройки истории.
// 
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданныхДокумент, ОбъектМетаданныхСправочник - Объект метаданных
//  МетодВерсионированияИсторияДанных - Булево - Метод версионирования история данных
//  МассивВыбранныхРеквизитов - Массив Из ОбъектМетаданныхРеквизит - 
//  МассивНеВыбранныхРеквизитов - Массив Из ОбъектМетаданныхРеквизит - 
//
Процедура УстановитьНастройкиИстории(ОбъектМетаданных, 
	                                 МетодВерсионированияИсторияДанных, 
									 МассивВыбранныхРеквизитов = Неопределено, 
									 МассивНеВыбранныхРеквизитов = Неопределено) Экспорт
	
	Настройки = Новый НастройкиИсторииДанных;
	
	Если (НЕ МассивВыбранныхРеквизитов = Неопределено И МассивВыбранныхРеквизитов.Количество() > 0) 
		ИЛИ (МассивНеВыбранныхРеквизитов <> Неопределено И МассивНеВыбранныхРеквизитов.Количество() > 0) Тогда
		
		Настройки.Использование = МетодВерсионированияИсторияДанных;
		
		Для Каждого Реквизит Из МассивВыбранныхРеквизитов Цикл
			Настройки.ИспользованиеПолей.Вставить(Реквизит, Истина);
		КонецЦикла;
		
		Для Каждого Реквизит Из МассивНеВыбранныхРеквизитов Цикл
			Настройки.ИспользованиеПолей.Вставить(Реквизит, Ложь);
		КонецЦикла;
		
		ИсторияДанных.УстановитьНастройки(ОбъектМетаданных, Настройки);
		
		Возврат;
		
	КонецЕсли;
	
	//Получение информации об изменениях настроек истории данных
	НастройкиПрошлые = ИсторияДанных.ПолучитьНастройки(ОбъектМетаданных);
	
	Настройки.Использование = МетодВерсионированияИсторияДанных;
	
	Если НЕ МетодВерсионированияИсторияДанных 
		И НастройкиПрошлые = Неопределено 
		И (НЕ МассивВыбранныхРеквизитов = Неопределено ИЛИ НЕ МассивНеВыбранныхРеквизитов = Неопределено) Тогда		
		// Вернем настройки версионирования по умолчанию (какие установлены в конфигураторе)
		ИсторияДанных.УстановитьНастройки(ОбъектМетаданных, Неопределено);		
	Иначе
		
		// Установим режим версионирования "полный" (к объекту и всем его реквизитам)
		ИменаРеквизитовОбъекта = ПолучитьИменаРеквизитовОбъектаДляВерсионирования(ОбъектМетаданных);
		
		Для Каждого ИмяРеквизита Из ИменаРеквизитовОбъекта Цикл
			Настройки.ИспользованиеПолей.Вставить(ИмяРеквизита, МетодВерсионированияИсторияДанных);
		КонецЦикла;
		
		ИсторияДанных.УстановитьНастройки(ОбъектМетаданных, Настройки);
		
	КонецЕсли;
	
КонецПроцедуры

// Получить имена реквизитов объекта для версионирования.
// 
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданныхДокумент, ОбъектМетаданныхСправочник, ОбъектМетаданныхРегистрСведений - Объект метаданных
// 
// Возвращаемое значение:
//  Массив - Получить имена реквизитов объекта для версионирования
//
Функция ПолучитьИменаРеквизитовОбъектаДляВерсионирования(ОбъектМетаданных)
	
	Результат = Новый Массив;
	Если ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда 
		
		Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
			Результат.Добавить(Измерение.Имя);
		КонецЦикла;
		
		Для Каждого Ресурс Из ОбъектМетаданных.Ресурсы Цикл
			Результат.Добавить(Ресурс.Имя);
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			Если Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) И СтрРеквизит.Имя = "Порядок" Тогда
				Продолжить; // Если включать данный стандартный реквизит, то возникает ошибка при записи настроек истории
			КонецЕсли;
			Результат.Добавить(СтрРеквизит.Имя);
		КонецЦикла;
		
		Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			Результат.Добавить(Реквизит.Имя);
		КонецЦикла;
		
		Для Каждого ТаблЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
			Для Каждого Реквизит Из ТаблЧасть.Реквизиты Цикл
				Результат.Добавить(ТаблЧасть.Имя + "." + Реквизит.Имя);
			КонецЦикла;
		КонецЦикла;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует первоначальные версии для всех элементов объекта метаданных
//
// Параметры:
//   ОбъектМетаданных -  ОбъектМетаданных.Справочник, ОбъектМетаданных.Документ - Требуемый объект
//
Процедура СформироватьПервоначальныеВерсииДляОбъектаМетаданных(ОбъектМетаданных) Экспорт
	
	ИсторияДанных.ОбновитьИсторию();
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	КоличествоОбъектов = СформироватьПервоначальныеВерсииДляСсылки(ОбъектМетаданных);
			
	КомментарийЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='Длительность %1 с., Версий - %2'"), 
	(ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера) / 1000,
	КоличествоОбъектов);
	
	ЗаписьЖурналаРегистрации("ПереносВерсийНаМеханизмИсторияДанных. ЗаписьПервоначальныхВерсий", 
							 УровеньЖурналаРегистрации.Информация,
							 ОбъектМетаданных,
							 Неопределено,
							 КомментарийЗаписи);
		
КонецПроцедуры

Функция СформироватьПервоначальныеВерсииДляСсылки(ОбъектМетаданных)
	
	ТаблицаОбъектов = ПолучитьДанныеИзИсторииПоОбъектуМетаданных(ОбъектМетаданных);
	ТаблицаОбъектов.Свернуть("Данные");
	МассивОбъектов = ТаблицаОбъектов.ВыгрузитьКолонку("Данные");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаОбъектов.Ссылка КАК Ссылка
	|ИЗ
	|	%ПолноеИмяМетакласса% КАК ТаблицаОбъектов
	|ГДЕ
	|	НЕ ТаблицаОбъектов.Ссылка В (&МассивИсключаемыхОбъектов)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПолноеИмяМетакласса%", ОбъектМетаданных.ПолноеИмя()); 
	
	Запрос.УстановитьПараметр("МассивИсключаемыхОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Комментарий = НСтр("ru='Первоначальное заполнение'");
	
	Пока Выборка.Следующий() Цикл
		
		ЗаписьВерсииДанных(Выборка.Ссылка.ПолучитьОбъект(), 
						   Пользователи.АвторизованныйПользователь(), 
						   ТекущаяУниверсальнаяДата(), 
						   Комментарий, 
						   ВидИзмененияДанных.Добавление);
	КонецЦикла;
	
	Возврат Выборка.Количество();
	
КонецФункции

// Получить данные из истории по объекту метаданных.
// 
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданныхДокумент, ОбъектМетаданныхСправочник - Объект метаданных
// 
// Возвращаемое значение:
//  ТаблицаЗначений - 
//
Функция ПолучитьДанныеИзИсторииПоОбъектуМетаданных(ОбъектМетаданных);
	
	ОтборДанных = Новый Структура("Метаданные,ВидИзмененияДанных", ОбъектМетаданных, ВидИзмененияДанных.Добавление);
	ДанныеИзИстории = ИсторияДанных.ВыбратьВерсии(ОтборДанных, "Данные");
	
	Возврат ДанныеИзИстории
	
КонецФункции

Процедура ЗафиксироватьРезультатВЖурналеРегистрации(ВерсионируемыеОбъектыМетаданных, НачалоЗамера)
	
	ШаблонКомментарияЗаписи = НСтр("ru='Выполнено первоначальное заполнение для %1 объектов метаданных:
	                         |%2
							 |Длительность: %3'");
	
	СписокОбъектовСтрокой = "";
	ПорядковыйНомер = 1;
	
	Для Каждого ОбъектМетаданных Из ВерсионируемыеОбъектыМетаданных Цикл
		
		Если ПорядковыйНомер > 1 Тогда
			СписокОбъектовСтрокой = СписокОбъектовСтрокой + Символы.ПС;
		КонецЕсли;
		
		СписокОбъектовСтрокой = СписокОбъектовСтрокой 
		                        + Формат(ПорядковыйНомер, "ЧГ=") 
								+ ") " 
								+ ОбъектМетаданных.ПолноеИмя();
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
		
	КонецЦикла;
	
	Длительность = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера) / 1000;
	
	КомментарийЗаписи = 
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментарияЗаписи,
	                                                        ВерсионируемыеОбъектыМетаданных.Количество(),
															СписокОбъектовСтрокой,
	                                                        Длительность);
	
	ЗаписьЖурналаРегистрации("ПереносВерсийНаМеханизмИсторияДанных. ЗаписьПервоначальныхВерсий", 
							 УровеньЖурналаРегистрации.Информация,
							 ,
							 Неопределено,
							 КомментарийЗаписи);

КонецПроцедуры

// Запись версии данных.
// 
// Параметры:
//  ОбъектЗаписи - СправочникОбъект, ДокументОбъект - 
//  Пользователь - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - Пользователь
//  ДатаЗаписиВерсии - Дата - Дата записи версии
//  Комментарий - Строка - Комментарий
//  ВидИзмененияДанныхОбъекта - Неопределено - Вид изменения данных объекта
//
Процедура ЗаписьВерсииДанных(ОбъектЗаписи, 
	                         Пользователь, 
							 ДатаЗаписиВерсии, 
							 Комментарий, 
							 Знач ВидИзмененияДанныхОбъекта = Неопределено)
	
	Если ВидИзмененияДанныхОбъекта = Неопределено Тогда
		ВидИзмененияДанныхОбъекта = ВидИзмененияДанных.Добавление;
	КонецЕсли;
	
	ИсторияДанных.ЗаписатьВерсию(ОбъектЗаписи, ДатаЗаписиВерсии, 
		Пользователь.ИдентификаторПользователяИБ, Пользователь.Наименование, 
		Пользователь.Наименование, ВидИзмененияДанныхОбъекта, 
		Комментарий);
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаУстаревшихВерсий

Функция ПолучитьВсеВерсионируемыеОбъекты()
	
	ВерсионируемыеОбъекты = Новый Массив;
	
	КлассыВерсионируемыхОбъектов = Новый Массив;
	КлассыВерсионируемыхОбъектов.Добавить(Справочники);
	КлассыВерсионируемыхОбъектов.Добавить(Документы);
	// Гкс+[ERP-3069] Коннова Н.В. 14.01.2021. Добавлено:
	КлассыВерсионируемыхОбъектов.Добавить(РегистрыСведений); // Гкс-[ERP-3069]
	
	Для Каждого КлассОбъекта Из КлассыВерсионируемыхОбъектов Цикл
		
		Для Каждого ОбъектКонфигурации Из КлассОбъекта Цикл
			
			МетодВерсионированияИсторияДанныхКонфигуратор = 
			(ОбъектКонфигурации.ИсторияДанных = Метаданные.СвойстваОбъектов.ИспользованиеИсторииДанных.Использовать);	
			
			НастройкиПрошлые = ИсторияДанных.ПолучитьНастройки(ОбъектКонфигурации);
			МетодВерсионированияИсторияДанныхПредприятие = Ложь;
			Если НастройкиПрошлые <> Неопределено Тогда
				МетодВерсионированияИсторияДанныхПредприятие = НастройкиПрошлые.Использование;
			КонецЕсли;
			
			МетодВерсионированияИсторияДанных = Макс(МетодВерсионированияИсторияДанныхКонфигуратор, 
			                                         МетодВерсионированияИсторияДанныхПредприятие);
			
			Если МетодВерсионированияИсторияДанных Тогда
				ВерсионируемыеОбъекты.Добавить(ОбъектКонфигурации);	 
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВерсионируемыеОбъекты;
	
КонецФункции

// Очистить устаревшие версии объектов.
// 
// Параметры:
//  ДатаОтбора - Число - Дата отбора
//  ВерсионируемыеОбъекты - Массив Из ОбъектМетаданных -
//   
//
Процедура ОчиститьУстаревшиеВерсииОбъектов(ДатаОтбора, ВерсионируемыеОбъекты = Неопределено)
	
	Если ВерсионируемыеОбъекты = Неопределено Тогда
		ВерсионируемыеОбъекты = ПолучитьВсеВерсионируемыеОбъекты();			
	КонецЕсли;
	
	Для Каждого ВерсионируемыйОбъект Из ВерсионируемыеОбъекты Цикл
		ИсторияДанных.УдалитьВерсии(ВерсионируемыйОбъект, ДатаОтбора);	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
