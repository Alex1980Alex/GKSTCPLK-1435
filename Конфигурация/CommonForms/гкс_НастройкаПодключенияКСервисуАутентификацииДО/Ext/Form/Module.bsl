
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеБХ	= ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
	гкс_Интеграция1СДокументооборотПовтИсп.ПолучитьИмяВладельцаНастроекПодключения(),
	"ИмяСервиса, Пользователь, Пароль, ИспользоватьАутентификациюОС, ПутьКWSDL, URIПространстваИмен");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ДанныеБХ = Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеБХ);
		Пароль	= ?(ЗначениеЗаполнено(ДанныеБХ.Пароль), ЭтотОбъект.УникальныйИдентификатор, "");
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьСервисАутентификации1СДокументооборотПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользовательАутентификациюОСПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ПарольИзменен	= Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрытьНаСервере();
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаписатьИЗакрытьНаСервере()
	
	СохранитьЗначениеКонстанты();
	
	ИмяВладельцаНастроек	= гкс_Интеграция1СДокументооборотПовтИсп.ПолучитьИмяВладельцаНастроекПодключения();
	
	Если ПарольИзменен Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИмяВладельцаНастроек,
		Пароль, "Пароль");
	КонецЕсли;
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИмяВладельцаНастроек,
	ИмяСервиса, "ИмяСервиса");
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИмяВладельцаНастроек,
	ПутьКWSDL, "ПутьКWSDL");
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИмяВладельцаНастроек,
	URIПространстваИмен, "URIПространстваИмен");
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИмяВладельцаНастроек,
	ИспользоватьАутентификациюОС, "ИспользоватьАутентификациюОС");
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИмяВладельцаНастроек,
	Пользователь, "Пользователь");
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()

	ЗначениеКонстанты = НаборКонстант.гкс_ИспользоватьСервисАутентификации1СДокументооборот;
	Элементы.ГруппаНастройки.Видимость 	= ЗначениеКонстанты;
	
	Элементы.Пользователь.Доступность 	= Не ИспользоватьАутентификациюОС;
	Элементы.Пароль.Доступность			= Не ИспользоватьАутентификациюОС;
	
КонецПроцедуры 

&НаСервере
Процедура СохранитьЗначениеКонстанты()
	
	// Сохранение значения константы.
	КонстантаМенеджер = Константы.гкс_ИспользоватьСервисАутентификации1СДокументооборот;
	КонстантаЗначение = НаборКонстант.гкс_ИспользоватьСервисАутентификации1СДокументооборот;
	
	Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
		КонстантаМенеджер.Установить(КонстантаЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти