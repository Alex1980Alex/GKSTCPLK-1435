#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда
		
#Область ПрограммныйИнтерфейс

// Определяет получателей в интеграции с RMQ для контректного типа метаданных.
//
// Параметры:
//   ТипМетаданных - Строка - имя типа метаданных, для которого нужно найти получателей
// 	 ОтборПоПолучателям - Массив - массив элементов типа СправочникСсылка.гкс_ПолучателиДанныхRMQ
//
// Возвращаемое значение:
//   Массив - массив структур, описывающих получателя. (См. Справочник.гкс_ПолучателиДанныхRMQ.ОписаниеПолучателя) 
//
Функция ПолучателиRabbitMQПоТипуМетаданных(ТипМетаданных, ДопПараметры) Экспорт
	
	Получатели = Новый Массив;
	
	Запрос = Новый Запрос;	
	Запрос.Текст = ТекстЗапросаПолучатели(ДопПараметры);
	Запрос.УстановитьПараметр("ТипМетаданных", ТипМетаданных);
		
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
		Получатель = ОписаниеПолучателя();
		
		ЗаполнитьЗначенияСвойств(Получатель, ВыборкаДетальныеЗаписи);
		
		ДозаполнитьПолучателяПоВыборке(Получатель, ВыборкаДетальныеЗаписи);
		УстановитьКлючФорматаУПолучателя(Получатель);
				
		Получатели.Добавить(Получатель);
		
	КонецЦикла;
	
	Возврат Получатели;

КонецФункции

// Определяет есть ли получатели в в обмене, для контректного типа метаданных. 
//
// Параметры:
//   ТипМетаданных - Строка - имя типа метаданных, для которого нужно найти получателей
//
// Возвращаемое значение:
//   Булево - Истина, если хотя бы одна из переданных ролей доступна текущему пользователю,
//   либо у него есть административные права. 
//
Функция ЕстьПолучатели(ТипМетаданных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЕстьПолучатели();
	Запрос.УстановитьПараметр("ТипМетаданных", ТипМетаданных);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Определяет есть ли получатели c признаком "Отложенное формирование" в в обмене, 
// для контректного типа метаданных.
//
// Параметры:
//   ТипМетаданных - Строка - имя типа метаданных, для которого нужно найти получателей
//
// Возвращаемое значение:
//   Булево - Истина, если хотя бы одна из переданных ролей доступна текущему пользователю,
//   либо у него есть административные права. 
//
Функция ЕстьПолучателиСОтложеннымФормированием(ТипМетаданных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЕстьПолучателиСОтложеннымФормированием();
	Запрос.УстановитьПараметр("ТипМетаданных", ТипМетаданных);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#Область Контрукторы

// Возвращает пустую, неинициализированнную структуру, представляющую собой описание получателя объекта.
//
// Возвращаемое значение:
//   Структура - структура, описывающая получателя данных участника интеграции с RMQ 
//
Функция ОписаниеПолучателя() Экспорт
	
	Получатель = Новый Структура;
	
	Получатель.Вставить("Условие");
	Получатель.Вставить("ТипМетаданных");
	Получатель.Вставить("гкс_НастройкаПолучателя");
	
	Получатель.Вставить("СерверRMQ");
	Получатель.Вставить("ТочкаОбмена");
	Получатель.Вставить("ТипТочкиОбмена");	
	
	Получатель.Вставить("Формат");
	Получатель.Вставить("ТипФормата");
	Получатель.Вставить("КлючФормата");
	Получатель.Вставить("ВерсияФормата");
	
	Получатель.Вставить("КлючСоответствия");
	Получатель.Вставить("КлючМаршрутизации");
	
	Получатель.Вставить("ТочкаОтвета");
	Получатель.Вставить("ОбратныйАдрес");
		
	Получатель.Вставить("ГлубинаВыгрузкиСсылок");
	Получатель.Вставить("ВыгружатьСсылкиИзОбъекта");
	
	Получатель.Вставить("СсылкаНаПолучателя");
	
	Получатель.Вставить("НастройкиВыгрузкиВФорматеED", Новый Структура);
	
	Возврат Получатель;
	
КонецФункции

#КонецОбласти

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

#Область ОпределениеПолучателейПоТипуМетаданных

Процедура ЗаполнитьНастройкиВыгрузкиВФорматеED(Получатель, СвойстваПолучателя)
	
	Если ЗначениеЗаполнено(СвойстваПолучателя.ИмяПОД) Тогда
		Получатель.НастройкиВыгрузкиВФорматеED.Вставить("ИмяПОД", СвойстваПолучателя.ИмяПОД);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУстановитьНастройкиФормата(Получатель, СвойстваПолучателя)
	
	Если СвойстваПолучателя.ВыбиратьПоследнийФормат Тогда
		
		ПоследнийФормат = Справочники.гкс_ФорматыОбменаИАС.ПоследнийФормат(Получатель); 
		
		Если ЗначениеЗаполнено(ПоследнийФормат) Тогда
			Получатель.Формат = ПоследнийФормат.Формат;
			Получатель.ВерсияФормата = ПоследнийФормат.ВерсияФормата;
		Иначе 
			// Если не удалось найти последний формат - это явная ошибка.
			// В тоже время явно перрывать выполнение встроенного языка не имеет смысла.
			// Так как возможно дозаполнение, а если формат так и будет незаполнен - в момент поиска менеджера
			// формирования сообщения будет выброшено исключение.
			Получатель.Формат = Справочники.гкс_ФорматыОбменаИАС.ПустаяСсылка();
			Получатель.ВерсияФормата = "";
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ДозаполнитьПолучателяПоВыборке(Получатель, Выборка)
	
	Если Выборка.ТипФормата = Перечисления.гкс_ТипыФорматовОбменаRMQ.ED 
		ИЛИ Справочники.гкс_ФорматыОбменаИАС.ЭтоСлужебныйФорматОбменаEnterpriseData(Выборка.Формат) Тогда
		
		ЗаполнитьНастройкиВыгрузкиВФорматеED(Получатель, Выборка);
		ЗаполнитьУстановитьНастройкиФормата(Получатель, Выборка);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКлючФорматаУПолучателя(Получатель)
	
	Получатель.КлючФормата = КлючФормата(Получатель);
	
КонецПроцедуры

#КонецОбласти

Функция КлючФормата(Получатель) Экспорт

	БазоваяЧастьКлюча = XMLСтрока(Получатель.Формат); 
	
	ПеременнаяЧастьКлюча = ПолучитьПеременнуюЧастьКлюча(Получатель);
	Если НЕ ЗначениеЗаполнено(ПеременнаяЧастьКлюча) Тогда
		Возврат БазоваяЧастьКлюча;	
	КонецЕсли;
		
	Возврат СтрШаблон("%1#%2", БазоваяЧастьКлюча, ПеременнаяЧастьКлюча); 
	
КонецФункции

Функция ПолучитьПеременнуюЧастьКлюча(Получатель)
	
	Перем ИмяПОД; 
	
	ЧастьКлюча = "";
	Если Получатель.Свойство("НастройкиВыгрузкиВФорматеED") 
		И Получатель["НастройкиВыгрузкиВФорматеED"].Свойство("ИмяПОД", ИмяПОД) 
		И ЗначениеЗаполнено(ИмяПОД) Тогда
		ЧастьКлюча = ЧастьКлюча 
					 + ?(ЗначениеЗаполнено(ЧастьКлюча), "#", "")  
					 + ИмяПОД;
	КонецЕсли;
	
	Если Получатель.ВыгружатьСсылкиИзОбъекта Тогда
		ЧастьКлюча = ЧастьКлюча 
					 + ?(ЗначениеЗаполнено(ЧастьКлюча), "#", "")  
					 + XMLСтрока(Получатель.СсылкаНаПолучателя);

	КонецЕсли;

	Возврат ЧастьКлюча;
	
КонецФункции

#Область ТекстыЗапросов

// Возвращает текст запроса получателей объекта в обмене через RMQ
//
// Параметры:
//  ОтборПоПолучателям  - Массив - Массив элементов справочника "гкс_ПолучателиДанныхRMQ", 
//                                 выполняет роль отбора получателей
//
Функция ТекстЗапросаПолучатели(ДопПараметры) 
	
	Перем ОтборПоПолучателям;
	Перем ОтложеннаяВыгрузка;
	
	ДопПараметры.Свойство("ОтборПоПолучателям", ОтборПоПолучателям);
	ДопПараметры.Свойство("ОтложеннаяВыгрузка", ОтложеннаяВыгрузка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ТипМетаданных КАК ТипМетаданных,
	|	ЕСТЬNULL(ТочкиОбмена.Наименование, """") КАК ТочкаОбмена,
	|	НастройкиПолучателей.ИмяОчередиОтвета КАК ОбратныйАдрес,
	|	ЕСТЬNULL(ТочкиОбмена.ТипТочкиОбмена, ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТочекОбменаRMQ.ПустаяСсылка)) КАК ТипТочкиОбмена,
	|	ЕСТЬNULL(ТочкиОбмена.Владелец, ЗНАЧЕНИЕ(Справочник.СерверыОчередейRMQ.ПустаяСсылка)) КАК СерверRMQ,
	|	ВсеПолучатели.КлючМаршрутизации КАК КлючМаршрутизации,
	|	ВсеПолучатели.Формат КАК Формат,
	|	ЕСТЬNULL(Форматы.Тип, ЗНАЧЕНИЕ(Перечисление.гкс_ТипыФорматовОбменаRMQ.ПустаяСсылка)) КАК ТипФормата,
	|	ЕСТЬNULL(Форматы.Версия, """") КАК ВерсияФормата,
	|	ЕСТЬNULL(Форматы.ВыбиратьПоследний, Ложь) КАК ВыбиратьПоследнийФормат,
	|	ВсеПолучатели.Условие КАК Условие,
	|   ВсеПолучатели.ВыгружатьСсылкиИзОбъекта КАК ВыгружатьСсылкиИзОбъекта,
	|   ВсеПолучатели.ГлубинаВыгрузкиСсылок КАК ГлубинаВыгрузкиСсылок,
	|   ВсеПолучатели.Ссылка КАК СсылкаНаПолучателя, 
	|	ВсеПолучатели.Ссылка КАК гкс_НастройкаПолучателя,
	|	ЕСТЬNULL(НастройкиВыгрузкиED.ИмяПОД, Неопределено) КАК ИмяПОД	
	|ИЗ
	|	Справочник.гкс_ПолучателиДанныхRMQ.ВыгружаемыеДанные КАК ВсеПолучатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гкс_ПолучателиДанныхRMQ КАК НастройкиПолучателей
	|		ПО ВсеПолучатели.Ссылка = НастройкиПолучателей.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_ТочкиОбменаRMQ КАК ТочкиОбмена
	|		ПО (НастройкиПолучателей.ТочкаОбмена = ТочкиОбмена.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гкс_ФорматыОбменаИАС КАК Форматы
	|		ПО ВсеПолучатели.Формат = Форматы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_ПолучателиДанныхRMQ.НастройкиВыгрузкиВФорматеED КАК НастройкиВыгрузкиED
	|		ПО ВсеПолучатели.Ссылка = НастройкиВыгрузкиED.Ссылка
	|		И ВсеПолучатели.ИдентифкаторСтроки = НастройкиВыгрузкиED.ИдентифкаторСтроки
	|ГДЕ
	|	НастройкиПолучателей.Активен
	|	И ВсеПолучатели.ТипМетаданных = &ТипМетаданных
	|	//%ОтборПоПолучателям% // Отбор по получателям
	|	//%ОтложеннаяВыгрузка% // Отложенная выгрузка
	|	И НЕ НастройкиПолучателей.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(ОтборПоПолучателям) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		                           "//%ОтборПоПолучателям%", 
		                           "И ВсеПолучатели.Ссылка В (&Получатели)");		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтложеннаяВыгрузка) Тогда
		ТекстУсловияОтложеннаяВыгрузка = СтрЗаменить("И %1 ВсеПолучатели.ОтложеннаяВыгрузка", 
		                                             "%1",
											         Формат(ОтложеннаяВыгрузка, "БЛ=НЕ; БИ="));
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		                           "//%ОтложеннаяВыгрузка%", 
		                           ТекстУсловияОтложеннаяВыгрузка);
	КонецЕсли;
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЕстьПолучатели()
			
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	1 КАК ЕстьПолучатели
	|ИЗ
	|	Справочник.гкс_ПолучателиДанныхRMQ.ВыгружаемыеДанные КАК ВсеПолучатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гкс_ПолучателиДанныхRMQ КАК РеквизитыПолучателей
	|		ПО ВсеПолучатели.Ссылка = РеквизитыПолучателей.Ссылка
	|ГДЕ
	|	ВсеПолучатели.ТипМетаданных = &ТипМетаданных
	|	И РеквизитыПолучателей.Активен
	|	И НЕ РеквизитыПолучателей.ПометкаУдаления";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЕстьПолучателиСОтложеннымФормированием() 
	
	ТекстЗапроса = ТекстЗапросаЕстьПолучатели() + "
	|	И ВсеПолучатели.ОтложеннаяВыгрузка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТысячаПолучателей() Экспорт 
	
	ТекстЗапроса = 
	  "ВЫБРАТЬ ПЕРВЫЕ 1000
	 |	гкс_ПолучателиДанныхRMQ.Ссылка КАК Объект
	 |ИЗ
	 |	Справочник.гкс_ПолучателиДанныхRMQ КАК гкс_ПолучателиДанныхRMQ";

	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли