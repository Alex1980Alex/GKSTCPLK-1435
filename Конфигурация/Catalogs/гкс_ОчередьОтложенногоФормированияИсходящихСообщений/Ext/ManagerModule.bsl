#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗафиксироватьВОчереди(ОписаниеЭлемента) Экспорт
		
	Если НЕ ОписаниеЭлемента.Свойство("Порядок") Тогда		
		ОписаниеЭлемента.Вставить("Порядок", ТекущаяУниверсальнаяДатаВМиллисекундах());
	КонецЕсли;
	
	Если НЕ ОписаниеЭлемента.Свойство("ДанныеОбъекта") И ОписаниеЭлемента.Свойство("Объект") Тогда
		ОписаниеЭлемента.Вставить("ДанныеОбъекта", 
		гкс_ОбщегоНазначения.СериализованныеДанныеОбъектаВХранилищеЗначения2(ОписаниеЭлемента["Объект"]));	
	КонецЕсли;
	
	Если НЕ ОписаниеЭлемента.Свойство("СсылкаНаОбъект") И ОписаниеЭлемента.Свойство("Объект") Тогда
		ОписаниеЭлемента.Вставить("СсылкаНаОбъект", ОписаниеЭлемента["Объект"].Ссылка);
	КонецЕсли;

	Элемент = СоздатьЭлемент();
	Элемент.Заполнить(ОписаниеЭлемента);
	
	Элемент.Записать();
		
КонецПроцедуры

// Отмечает элемент очереди как "обработанный" 
// 
// Параметры:
//   ЭлементОчередиСсылка - СправочникСсылка.гкс_ОчередьОтложенногоФормированияИсходящихСообщений - ссылка на 
//   элемент очереди 
//
// Возвращаемое значение:
//   Булево - признак, была ли совершена отметка об обработке элемента очереди или нет, например, если 
//   он уже был обработан.
//
Функция ОтметитьПринятиеВОбработкуЭлемента(ЭлементОчередиСсылка) Экспорт
	
	ЭлементОчереди = ЭлементОчередиСсылка.ПолучитьОбъект();
	
	Попытка
		ЭлементОчереди.Заблокировать();
	Исключение
		// Другое задание уже обрабатывает это сообщение
		Возврат Ложь;
	КонецПопытки;
	
	гкс_ОбщегоНазначения.УстановитьУпрБлокировкуПоЗначениюИПолю(ЭлементОчередиСсылка);
		
	Если ЭлементВОбработке(ЭлементОчередиСсылка) Тогда
		// кто-то успел вклиниться и обработать
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементОчереди.ДатаПринятияВОбработку = ОчередьСообщенийВызовСервера.ТекущаяДатаНаСервере();
	ЭлементОчереди.Записать();
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьИсходящееСообщенияДляЭлемента(ЭлементОчереди) Экспорт
	
	Результат = Новый Структура;
	
	ИменаРеквизитов = "ДанныеОбъекта, СсылкаНаОбъект, Событие, Порядок, ВосстанавливатьПриОшибкеДесериализации";
	Реквизиты = гкс_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементОчереди, ИменаРеквизитов);
	
	ТекстОшибки = "";
	Восстановленный = Ложь;
	
	ОбъектЭлементаОчереди = ВосстановитьОбъект(Реквизиты["ДанныеОбъекта"], ТекстОшибки);	
	Если ОбъектЭлементаОчереди = Неопределено 
		И ЗначениеЗаполнено(ТекстОшибки) 
		И Реквизиты["ВосстанавливатьПриОшибкеДесериализации"] Тогда
		ОбъектЭлементаОчереди = ВосстановитьОбъектПоОбразу(Реквизиты["ДанныеОбъекта"], 
		                                                   Реквизиты["СсылкаНаОбъект"], 
														   ТекстОшибки);
		Восстановленный = Истина;
	КонецЕсли;
	
	Если ОбъектЭлементаОчереди = Неопределено Тогда
		
		МассивТекстовОшибок = Новый Массив;
		МассивТекстовОшибок.Добавить(
		НСтр("ru='Не удалось сформировать исходящее сообщение. 
		|Возможно, объект был сериализован в предыдущей версии программы'"));
		Если НЕ ТекстОшибки = "" Тогда
			МассивТекстовОшибок.Добавить(ТекстОшибки);
		КонецЕсли;		
		ТекстОшибки = СтрСоединить(МассивТекстовОшибок, Символы.ПС);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ОбъектЭлементаОчереди.ДополнительныеСвойства.Вставить("ОтложеннаяВыгрузка", Истина);
	ОбъектЭлементаОчереди.ДополнительныеСвойства.Вставить("ПорядокСообщения", Реквизиты.Порядок);
	
	гкс_ОчередьСообщенийRMQ.ИнициализироватьДополнительныеСвойстваОбъекта(ОбъектЭлементаОчереди);
	
	Сообщения = гкс_ОчередьСообщенийRMQ.СоздатьСообщенияПоСобытиюОбъекта(Реквизиты.Событие, 
	                                                                 ОбъектЭлементаОчереди);
																	 
	Результат.Вставить("Сообщения", Сообщения);
	Результат.Вставить("Восстановленный", Восстановленный);
	
	Возврат Результат;
	
КонецФункции

Процедура ОтметитьОбработкуЭлемента(ЭлементОчередиСсылка, Результат) Экспорт
	
	ЭлементОчереди = ЭлементОчередиСсылка.ПолучитьОбъект();
	ЭлементОчереди.Восстановленный = Результат["Восстановленный"]; 
	Если ЗначениеЗаполнено(Результат["Сообщения"]) Тогда
		
		Для Каждого СообщениеСсылка Из Результат["Сообщения"] Цикл 
			
			Если ЭлементОчереди.СформированныеСообщения.Найти(СообщениеСсылка, "Сообщение") = Неопределено Тогда
				
				СообщениеСтрока = ЭлементОчереди.СформированныеСообщения.Добавить();	
				СообщениеСтрока.Сообщение = СообщениеСсылка; 
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЭлементОчереди.ДатаВремяОбработки = ОчередьСообщенийВызовСервера.ТекущаяДатаНаСервере();
	ЭлементОчереди.Записать();
	
КонецПроцедуры

Процедура ПропуститьОбработкуЭлемента(ЭлементОчередиСсылка) Экспорт
	
	ЭлементОчереди = ЭлементОчередиСсылка.ПолучитьОбъект();
	ЭлементОчереди.УстановитьПометкуУдаления(Истина);
	
	ЭлементОчереди.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтепрфейс

Функция ТекущаяОчередь() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПолучитьОчередь();
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура СократитьОчередь() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.Текст = ТекстЗапросаСокращениеОчереди();
	
	Результат = Запрос.Выполнить();
	Пока НЕ Результат.Пустой() Цикл
		
		НачатьТранзакцию();
		Попытка
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Объект = Выборка.ЭлементОчереди.ПолучитьОбъект();
				Если Объект = Неопределено Тогда
					Объект.Удалить();
				КонецЕсли;
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение ОписаниеОшибки();
			
		КонецПопытки;
		
		Результат = Запрос.Выполнить();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВосстановлениеОбъенктаИзXMLОбраза

Функция ВосстановитьОбъектПоОбразу(ДанныеОбъекта, СсылкаНаОбъект, ТекстОшибки) 
	
	ДанныеXML = гкс_ОбщегоНазначения.РазборПредставленияОбъектаXML(ДанныеОбъекта.Получить(), 
	                                                               СсылкаНаОбъект);
	Возврат гкс_ОбщегоНазначения.ВосстановитьОбъектПоДаннымXML(ДанныеXML, СсылкаНаОбъект);
		
КонецФункции

Функция ВосстановитьОбъект(ДанныеОбъекта, ТекстОшибки) 
	
	Попытка
		ОбъектЭлементаОчереди = гкс_ОбщегоНазначения.ДесериализоватьОбъектИзХранилищеЗначения2(ДанныеОбъекта);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат ОбъектЭлементаОчереди;
	
КонецФункции

#КонецОбласти
	
#Область ТекстыЗапросов

Функция ТекстЗапросаПолучитьОчередь()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	Очередь.Ссылка КАК ЭлементОчереди,
	|	Очередь.Порядок КАК Порядок,
	|	Очередь.СсылкаНаОбъект КАК СсылкаНаОбъект
	|ИЗ
	|	Справочник.гкс_ОчередьОтложенногоФормированияИсходящихСообщений КАК Очередь
	|ГДЕ
	|	Очередь.ДатаВремяОбработки = ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ Очередь.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Очередь.Порядок";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "100", Формат(РазмерПорции(), "ЧЦ=; ЧГ=0"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСокращениеОчереди()
		
	ТекстЗапроса =  
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	гкс_ОчередьОтложенногоФормированияИсходящихСообщений.Ссылка КАК ЭлементОчереди
	|ИЗ
	|	Справочник.гкс_ОчередьОтложенногоФормированияИсходящихСообщений КАК гкс_ОчередьОтложенногоФормированияИсходящихСообщений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_НастройкиИнтеграционногоАдаптера КАК НастройкиИнтеграционногоАдаптера
	|		ПО (ИСТИНА)
	|ГДЕ
	|	гкс_ОчередьОтложенногоФормированияИсходящихСообщений.ДатаВремяОбработки > ДАТАВРЕМЯ(1, 1, 1)
	|	И гкс_ОчередьОтложенногоФормированияИсходящихСообщений.ДатаВремяОбработки < ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, -ЕСТЬNULL(НастройкиИнтеграционногоАдаптера.СрокХраненияОчередиОтложенногоФормирования, 0))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОчередьОтложенногоФормированияИсходящихСообщений.Ссылка
	|ИЗ
	|	Справочник.гкс_ОчередьОтложенногоФормированияИсходящихСообщений КАК ОчередьОтложенногоФормированияИсходящихСообщений
	|ГДЕ
	|	ОчередьОтложенногоФормированияИсходящихСообщений.ПометкаУдаления";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область НастройкиОбработкиОчереди

Функция РазмерПорции()
	
	ИмяНастройки = "РазмерПорцииОбработкиОчередиОтложенногоФормирования";
	РазмерПорции = гкс_ОчередьСообщенийRMQВызовСервера.НастройкаИнтеграционногоАдаптера(ИмяНастройки);	
	Если НЕ ЗначениеЗаполнено(РазмерПорции) Тогда
		РазмерПорции = 100;	
	КонецЕсли;

	Возврат РазмерПорции;
	
КонецФункции

#КонецОбласти

Функция ЭлементВОбработке(ЭлементОчередиСсылка)
	
	ДатаПринятияВОбработку = гкс_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементОчередиСсылка, 
	                                                                       "ДатаПринятияВОбработку");
	Возврат ЗначениеЗаполнено(ДатаПринятияВОбработку);
	
КонецФункции

#КонецОбласти

#КонецЕсли
