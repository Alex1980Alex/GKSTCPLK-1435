#Если ТолстыйКлиентОбычноеПриложение ИЛИ Сервер ИЛИ ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьАктивностьПриПометкиУдаления();
	ПроверитьЗаполнениеРасписанияЗадания();
	ОбновитьСвязанноеРегламентноеЗадание();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если Тип("Структура") = Тип(ДанныеЗаполнения) Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры


Процедура ПередУдалением(Отказ)
	
	УдалитьСвязанноеЗаданиеПоНеобходимости();
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	РегламентноеЗадание = Неопределено;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполнениеРасписанияЗадания() Экспорт
	
	Если Активно И Неопределено = РасписаниеЗадания.Получить() Тогда
		ВызватьИсключение НСтр("ru='Не задано расписание регламентного задания'");
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьСвязанноеРегламентноеЗадание()
	
	Если НетНеобходимостиОбновитьСвязанноеЗадание() Тогда
		Возврат;
	КонецЕсли;
	
	Задание = ПолучитьСвязанноеЗадание();
	ПроверитьСвязанноеЗадание(Задание);
	ЗафиксироватьИДРегламентногоЗадания(Задание);
	ОбновитьДанныеРегламентногоЗадания(Задание);
	
КонецПроцедуры

Процедура ПроверитьСвязанноеЗадание(Задание)
	
	гкс_ОбщегоНазначенияКлиентСервер.Проверить(НЕ Неопределено = Задание, 
	            НСтр("ru='Связанное регламентное задание не найдено. Дальнейшая запись элемента невозможна'"),
	            НСтр("ru='Формирпование заданий обработки очереди входящих сообщений'"));
	
КонецПроцедуры

Функция НетНеобходимостиОбновитьСвязанноеЗадание()
	// Не активно и связанного РЗ нет, не требует никаких действий по обновлению
	Возврат НЕ Активно И НЕ ЗначениеЗаполнено(РегламентноеЗадание);
КонецФункции

Функция ПолучитьСвязанноеЗадание()
	
	Перем Задание;
	
	Попытка
		Задание = СвязанноеЗадание();
	Исключение
	
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставление  = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КраткоеПредставление = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ЗафиксироватьОшибку(ПодробноеПредставление);
		
		ВызватьИсключение КраткоеПредставление;
	
	КонецПопытки;
	
	Возврат Задание;
	
КонецФункции

Функция СвязанноеЗадание()
	
	Задание = Неопределено;
	Если ЗначениеЗаполнено(РегламентноеЗадание) Тогда
		Задание = РегламентныеЗадания
		                .НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(РегламентноеЗадание));
	Иначе
		МетаданныеЗадания = Метаданные.РегламентныеЗадания.гкс_ОбработкаОчередиВходящихСообщений;
		Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(МетаданныеЗадания);
	КонецЕсли;
	
	Возврат Задание;

КонецФункции

Процедура ОбновитьДанныеРегламентногоЗадания(Задание)
	
	Задание.Наименование = Наименование;
	
	Задание.Использование = Активно И НЕ ПометкаУдаления;
	Задание.Расписание = РасписаниеЗадания.Получить();
	
	Задание.Ключ = РегламентноеЗадание;
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ОтборПотокСобытий);
	Задание.Параметры = ПараметрыЗадания;
	
	Задание.Записать();
	
КонецПроцедуры

Процедура ЗафиксироватьИДРегламентногоЗадания(Задание)
	РегламентноеЗадание  = Задание.УникальныйИдентификатор;
КонецПроцедуры

Процедура УдалитьСвязанноеЗаданиеПоНеобходимости()
	
	Если НЕ ЗначениеЗаполнено(РегламентноеЗадание) Тогда
		Возврат;
	КонецЕсли;
	
	Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(РегламентноеЗадание));
	Если Неопределено = Задание Тогда
		
		ТекстПредупреждения = СтрШаблон(НСтр("ru='При удалении задания на обработку очереди входящих сообщений, 
		|связанное задание с идентифкатором %1 не найдено и не удалено'"), РегламентноеЗадание);
		
		ЗафиксироватьПредупреждение(ТекстПредупреждения)

	КонецЕсли;
	
	Попытка
		Задание.Удалить();
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставление  = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КраткоеПредставление = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ЗафиксироватьОшибку(ПодробноеПредставление);
		
		ВызватьИсключение КраткоеПредставление;
		
	КонецПопытки;
	
КонецПроцедуры

#Область ЗаписьВЖурналРегистрации

Процедура ЗафиксироватьОшибку(ПодробноеПредставление)
	
	ЗаписьЖурналаРегистрации("ИнтеграционныйАдаптер.НастройкаЗаданийОбработкиОчередиВходящихСообщений", 
	                         УровеньЖурналаРегистрации.Ошибка,
	                         Метаданные.Справочники.гкс_ЗаданияОбработкиОчередиВходящихСообщенийRMQ,
	                         Неопределено,
	                         ПодробноеПредставление);
	
КонецПроцедуры

Процедура ЗафиксироватьПредупреждение(ТекстПредупреждения)
	
	ЗаписьЖурналаРегистрации("ИнтеграционныйАдаптер.НастройкаЗаданийОбработкиОчередиВходящихСообщений", 
	                         УровеньЖурналаРегистрации.Предупреждение,
	                         Метаданные.Справочники.гкс_ЗаданияОбработкиОчередиВходящихСообщенийRMQ,
	                         Неопределено,
	                         ТекстПредупреждения);
	
КонецПроцедуры

Процедура УстановитьАктивностьПриПометкиУдаления()
	
	 Если ПометкаУдаления Тогда
	 	Активно = Ложь;
	 КонецЕсли;
	 
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Иначе	
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте'");
#КонецЕсли

