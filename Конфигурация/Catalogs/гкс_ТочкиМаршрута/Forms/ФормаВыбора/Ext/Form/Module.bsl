
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

    СоздатьЭлементыУправленияФильтром();
    НастроитьОтборПоПараметрам();
    ЗаполнитьЗначениеФильтра();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти   

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


// Создает элементы управления фильтром динамически
// если в параметрах передан отбор по КонтрагентВладелецСклада
//
&НаСервере
Процедура СоздатьЭлементыУправленияФильтром()
    
    // Создаем элемент управления только если есть отбор по КонтрагентВладелецСклада
    Если ПроверитьНаличиеОтбораПоКонтрагенту() Тогда
        МассивРеквизитов = Новый Массив;
        МассивРеквизитов.Добавить(
            Новый РеквизитФормы("Фильтр", Новый ОписаниеТипов("Булево"), , "Фильтр по контрагенту"));
        ИзменитьРеквизиты(МассивРеквизитов);
        
        // Создаем элемент управления чекбокс
        НовыйЧекБокс = Элементы.Добавить("Фильтр", Тип("ПолеФормы"));
        НовыйЧекБокс.Вид = ВидПоляФормы.ПолеФлажка;
        НовыйЧекБокс.ПутьКДанным = "Фильтр";
        НовыйЧекБокс.Заголовок = "Фильтр по контрагенту";
        НовыйЧекБокс.УстановитьДействие("ПриИзменении", "ФильтрПриИзменении");
    КонецЕсли;
    
КонецПроцедуры

// Фильтр при изменении.
// 
// Параметры:
//  Элемент Элемент
&НаКлиенте
Процедура ФильтрПриИзменении(Элемент)
    // Ищем элемент отбора по КонтрагентВладелецСклада и переключаем его состояние
    Для Каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
        Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
            И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КонтрагентВладелецСклада") Тогда
            ЭлементОтбора.Использование = ПолучитьЗначениеФильтра();
            Прервать;
        КонецЕсли;
    КонецЦикла;
    
    // Обновляем список
    Элементы.Список.Обновить();
    
КонецПроцедуры

// Настроить отбор по параметрам.
&НаСервере
Процедура НастроитьОтборПоПараметрам()
 	// Добавляем программно отбор по КонтрагентВладелецСклада если он передан в параметрах
	Если ПроверитьНаличиеОтбораПоКонтрагенту() Тогда    
            // Добавляем отбор в фиксированные настройки списка
		УстановитьОтбор(Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "КонтрагентВладелецСклада",
			Параметры.Отбор.КонтрагентВладелецСклада);
	КонецЕсли;

КонецПроцедуры

// Добавляет элемент отбора в список отборов компоновщика настроек
//
// Параметры:
//  СписокОтборов - ОтборКомпоновкиДанных - список отборов компоновщика
//  ИмяПоля - Строка - имя поля для отбора
//  Значение - Произвольный - значение для отбора
//  ТипСравнения - ВидСравненияКомпоновкиДанных - вид сравнения (по умолчанию "Равно")
//  Использование - Булево - признак использования отбора (по умолчанию Истина)
//
&НаСервере
Процедура УстановитьОтбор(СписокОтборов, ИмяПоля, Значение, ТипСравнения = Неопределено, Использование = Истина)
    
    НовыйЭлемент = СписокОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
    НовыйЭлемент.ВидСравнения = ?(ТипСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ТипСравнения);
    НовыйЭлемент.ПравоеЗначение = Значение;
    НовыйЭлемент.Использование = Использование;
    
КонецПроцедуры


// Получает значение реквизита "Фильтр" формы с проверкой его существования
//
// Возвращаемое значение:
//  Булево - значение реквизита "Фильтр" или Ложь если реквизит не найден
//
&НаСервере
Функция ПолучитьЗначениеФильтра()
    
    // Проверяем наличие реквизита "Фильтр" в форме
    МассивРеквизитов = ПолучитьРеквизиты();
    Для Каждого РеквизитФормы Из МассивРеквизитов Цикл
        Если РеквизитФормы.Имя = "Фильтр" Тогда
            // Реквизит найден, возвращаем его значение
            Возврат ЭтотОбъект.Фильтр;
        КонецЕсли;
    КонецЦикла;
    
    // Реквизит не найден, возвращаем значение по умолчанию
    Возврат Ложь;
    
КонецФункции


// Заполняет значение реквизита "Фильтр" в Истина при создании формы
//
&НаСервере
Процедура ЗаполнитьЗначениеФильтра()
    МассивРеквизитов = ПолучитьРеквизиты();
    Для Каждого РеквизитФормы Из МассивРеквизитов Цикл
        Если РеквизитФормы.Имя = "Фильтр" Тогда
            // Реквизит найден, возвращаем его значение
            ЭтотОбъект.Фильтр = Истина;
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры


// Проверяет наличие отбора по КонтрагентВладелецСклада в параметрах формы
//
// Возвращаемое значение:
//  Булево - Истина, если в параметрах есть отбор по КонтрагентВладелецСклада
//
&НаСервере
Функция ПроверитьНаличиеОтбораПоКонтрагенту() 
    
    Возврат Параметры.Свойство("Отбор")
        И ТипЗнч(Параметры.Отбор) = Тип("Структура")
        И Параметры.Отбор.Свойство("КонтрагентВладелецСклада")
        И ЗначениеЗаполнено(Параметры.Отбор.КонтрагентВладелецСклада);
КонецФункции

#КонецОбласти

