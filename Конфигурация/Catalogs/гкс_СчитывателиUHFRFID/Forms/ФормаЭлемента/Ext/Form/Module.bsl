
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьНаКлиенте();	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьПараметрыДоступа(ТекущийОбъект);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура СменитьПароль(Команда)
	
	Если Модифицированность Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Необходимо записать объект'"));		
		Возврат;
		
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru='Возникла ошибка при изменении пароля доступа к метке'");
	
	Результат = гкс_ИнтеграцияСКверионКлиент.СменитьПароль(ПараметрыЗапросаКверион("password"));
	Если Результат.КодОтвета = гкс_ОбщегоНазначенияКлиентСервер.КодОтветаЗапросВыполненУспешно() Тогда
		ТекстСообщения = НСтр("ru='Пароль доступа к метке успешно изменен'");		
	КонецЕсли;

	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеМетки(Команда)
	
	Если Модифицированность Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Необходимо записать объект'"));		
		Возврат;
		
	КонецЕсли;
	
	ТекущиеДанныеМетки = Неопределено;

	Результат = гкс_ИнтеграцияСКверионКлиент.ПрочитатьДанныеМетки(ПараметрыЗапросаКверион());
	Если Результат.КодОтвета = гкс_ОбщегоНазначенияКлиентСервер.КодОтветаЗапросВыполненУспешно() Тогда
		
		#Если ВебКлиент Тогда
		ТелоОтветаВСтруктуре = ПолучитьТелоОтветаИзСтрокиНаСервере(Результат.ТелоОтвета);
		#Иначе
		ТелоОтветаВСтруктуре = Результат.ТелоОтветаВСтруктуре;
		#КонецЕсли
		
		ТекущиеДанныеМетки = ТекущиеДанныеМеткиИзОтвета(ТелоОтветаВСтруктуре);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьМетку(Команда)
	
	Если Модифицированность Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Необходимо записать объект'"));		
		Возврат;
		
	КонецЕсли;
	
	ДанныеИнициализацииМетки = Неопределено;

	ТекстСообщения = НСтр("ru='Возникла ошибка при инициализации метки'");
	
	Результат = гкс_ИнтеграцияСКверионКлиент.ИнициализироватьМетку(ПараметрыЗапросаКверион());
	Если Результат.КодОтвета = гкс_ОбщегоНазначенияКлиентСервер.КодОтветаЗапросВыполненУспешно() Тогда
		
		ТекстСообщения = НСтр("ru='Метка успешно инициализирована'");
		
		#Если ВебКлиент Тогда
		ТелоОтветаВСтруктуре = ПолучитьТелоОтветаИзСтрокиНаСервере(Результат.ТелоОтвета);
		#Иначе
		ТелоОтветаВСтруктуре = Результат.ТелоОтветаВСтруктуре;
		#КонецЕсли
		
		ДанныеИнициализацииМетки = ТекущиеДанныеМеткиИзОтвета(ТелоОтветаВСтруктуре);
		
	КонецЕсли;

	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСоединения(Команда)
	
	Если Модифицированность Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Необходимо записать объект'"));		
		Возврат;
		
	КонецЕсли;

	ТекстСообщения = НСтр("ru='Возникла ошибка установки соединения с драйвером считывателя'");
	
	Результат = гкс_ИнтеграцияСКверионКлиент.ТестСоединения(ПараметрыЗапросаКверион());
	
	Если Результат.КодОтвета = гкс_ОбщегоНазначенияКлиентСервер.КодОтветаЗапросВыполненУспешно() Тогда		
		ТекстСообщения = НСтр("ru='Соединение успешно установлено'");		
	КонецЕсли;

	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПользовательСервисаПриИзменении(Элемент)
	
	БезопасноеХранилище.ПользовательСервиса = ПользовательСервиса;
	ПользовательСервиса = ЭтотОбъект.УникальныйИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольСервисаПриИзменении(Элемент)
		
	БезопасноеХранилище.ПарольСервиса = ПарольСервиса;
	ПарольСервиса = ЭтотОбъект.УникальныйИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольДоступаКМеткеПриИзменении(Элемент)
	
	БезопасноеХранилище.ПарольДоступаКМетке = ПарольДоступаКМетке;
	ПарольДоступаКМетке = ЭтотОбъект.УникальныйИдентификатор;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьНаКлиенте()

	ЭтотОбъект.Элементы.Пользователи.Видимость = ЭтоПолноправныйПользователь();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоПолноправныйПользователь()

	Возврат Пользователи.ЭтоПолноправныйПользователь();
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗапросаКверион(Знач ТипЗапроса=Неопределено)
	
	ПараметрыПодключенияКСчитывателю = ПараметрыСчитывателя();
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ПараметрыПодключенияКСчитывателю", ПараметрыПодключенияКСчитывателю);
	
	Если ТипЗапроса = "password" Тогда
		
		ПараметрыЗапроса.Вставить("ТекущийПароль", СтарыйПароль);
		ПараметрыЗапроса.Вставить("НовыйПароль", НовыйПароль);
		
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаКлиенте
Функция ПараметрыСчитывателя()

	ПараметрыСчитывателя = Новый Структура;
	
	ПараметрыСчитывателя.Вставить("АдресСлужбы", Объект.АдресСлужбы);
	ПараметрыСчитывателя.Вставить("НомерПортаСлужбы", Объект.НомерПортаСлужбы);
	ПараметрыСчитывателя.Вставить("ПортСчитывателя", Объект.ПортСчитывателя);
	ПараметрыСчитывателя.Вставить("ApiUrl", Объект.ApiUrl);

	ПараметрыСчитывателя.Вставить("Таймаут", Объект.ТаймаутСоединения);
	ПараметрыСчитывателя.Вставить("ИспользоватьЗащищенноеСоединение", Объект.ЗащищенноеСоединение);
	
	ПараметрыСчитывателя.Вставить("ПользовательСервиса", БезопасноеХранилище.ПользовательСервиса);
	ПараметрыСчитывателя.Вставить("ПарольСервиса", БезопасноеХранилище.ПарольСервиса);
	ПараметрыСчитывателя.Вставить("ПарольДоступаКМетке", БезопасноеХранилище.ПарольДоступаКМетке);
			
	Возврат ПараметрыСчитывателя;
	
КонецФункции

&НаСервере
Процедура ЗаписатьПараметрыДоступа(ТекущийОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, 
	                                                    БезопасноеХранилище, 
														"ПараметрыАутентифкации");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизитыФормы()
	
	БезопасноеХранилище = Новый Структура("ПарольСервиса,ПользовательСервиса,ПарольДоступаКМетке");
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		ЗаполнитьПараметрыДоступа();		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыДоступа()
		
	УстановитьПривилегированныйРежим(Истина);
	БезопасныеСтроки = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Параметры.Ключ, "ПараметрыАутентифкации");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ ЗначениеЗаполнено(БезопасныеСтроки) Тогда
		БезопасныеСтроки = Новый Структура("ПарольСервиса,ПользовательСервиса,ПарольДоступаКМетке");
	КонецЕсли;
				
	ПользовательСервиса  = ?(ЗначениеЗаполнено(БезопасныеСтроки.ПользовательСервиса), ЭтотОбъект.УникальныйИдентификатор, "");
	ПарольСервиса  = ?(ЗначениеЗаполнено(БезопасныеСтроки.ПарольСервиса),  ЭтотОбъект.УникальныйИдентификатор, "");
	ПарольДоступаКМетке = ?(ЗначениеЗаполнено(БезопасныеСтроки.ПарольДоступаКМетке), ЭтотОбъект.УникальныйИдентификатор, "");
	
	ЗаполнитьЗначенияСвойств(БезопасноеХранилище, БезопасныеСтроки);
	
КонецПроцедуры

#Область ПрочитатьДанныеМетки

&НаКлиенте
Функция ТекущиеДанныеМеткиИзОтвета(ТелоОтветаВСтруктуре)
	
	 Результат = ТелоОтветаВСтруктуре.message
	             + Символы.ПС 
				 + "EPC ID:"
				 + ТелоОтветаВСтруктуре.card.epc
				 + Символы.ПС 
				 + "TID: "
				 + ТелоОтветаВСтруктуре.card.tid; 
				 
	Возврат Результат;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьТелоОтветаИзСтрокиНаСервере(СтрокаJSON)

	Если НЕ ЗначениеЗаполнено(СтрокаJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Читатор = Новый ЧтениеJSON;
	Читатор.УстановитьСтроку(СтрокаJSON);
	Данные = ПрочитатьJSON(Читатор, Ложь);
	
	Читатор.Закрыть();
	
	Возврат Данные;

КонецФункции 

#КонецОбласти

#КонецОбласти