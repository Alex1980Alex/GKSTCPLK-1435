#Если ТолстыйКлиентОбычноеПриложение Или Сервер Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Отмечает сообщение как "отправленное" в очередь сообщений RMQ
// 
// Параметры:
//   СообщениеСсылка - СправочникСсылка.ИсходящиеСообщения - ссылка на сообщение, факт отправки которого
//   необходимо зафиксировать
//
// Возвращаемое значение:
//   Булево - признак, была ли совершена отметка об обтправке сообщения в очередь или нет, например, если 
//   сообщение уже было отправлено.
//
Функция ОтметитьОтправкуСообщенияВОчередь(СообщениеСсылка) Экспорт

	ОбъектСообщения = СообщениеСсылка.ПолучитьОбъект();

	Попытка
		ОбъектСообщения.Заблокировать();
	Исключение
		// Другое задание уже обрабатывает это сообщение
		Возврат Ложь;
	КонецПопытки;

	УстановитьБлокировкуНаСообщение(СообщениеСсылка);

	Если СообщениеОтправлено(СообщениеСсылка) Тогда
		// кто-то успел вклиниться и отправить сообщение
		Возврат Ложь;
	КонецЕсли;

	ОбъектСообщения.ДатаВремяОтправки = ОчередьСообщенийВызовСервера.ТекущаяДатаНаСервере();
	ОбъектСообщения.ДополнительныеСвойства.Вставить("Состояние",
		Перечисления.гкс_СостоянияИсходящихСообщенийRMQ.Отправлено);
	ОбъектСообщения.Записать();

	Возврат Истина;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьСостояниеСообщения(ПараметрыСообщения) Экспорт

	Перем СсылкаНаСообщение, Состояние, Текст, УчастникОбмена, УниверсальнаяДатаСобытияВМиллисекундах;

	Если ПараметрыСообщения.Свойство("Состояние", Состояние) И ЗначениеЗаполнено(Состояние) Тогда

		ПараметрыСообщения.Свойство("СсылкаНаСообщение", СсылкаНаСообщение);

		Если ТипЗнч(Состояние) = Тип("Структура") Тогда

			Состояние.Свойство("УчастникОбмена", УчастникОбмена);
			Состояние.Свойство("Текст", Текст);
			Состояние.Свойство("Состояние", Состояние);
			Состояние.Свойство("УниверсальнаяДатаСобытияВМиллисекундах", УниверсальнаяДатаСобытияВМиллисекундах);

		КонецЕсли;

		гкс_ОчередьСообщенийRMQВызовСервера.УстановитьСостояниеИсходящегоСообщения(СсылкаНаСообщение, УчастникОбмена,
			Состояние, УниверсальнаяДатаСобытияВМиллисекундах, Текст);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устарела. Следует использовать новую (см. Справочники.ИсходящиеСообщения.Отправить)
// 
// Публикация сообщения во внутренней очереди
//
Процедура Опубликовать(Знач КлючМаршрутизации, Знач Сообщение, Знач ДатаСобытия = '00010101',
	Знач ТочкаПубликации = "api.onec", Знач СерверОчередей = "") Экспорт

	Объект = СоздатьЭлемент();
	Объект.ТочкаПубликации   = ТочкаПубликации;
	Объект.КлючМаршрутизации = КлючМаршрутизации;
	Объект.ДатаВремяСобытия  = ДатаСобытия;
	Объект.Сообщение         = Сообщение;

	Если Не ЗначениеЗаполнено(СерверОчередей) Тогда
		СерверОчередей = Справочники.СерверыОчередейRMQ.Основной;
	ИначеЕсли ТипЗнч(СерверОчередей) = Тип("Строка") Тогда
		// Временное приведение типов для мягкой миграции 1.3 -> 1.4
		СерверОчередей = Справочники.СерверыОчередейRMQ.ПолучитьПараметрыСервера(СерверОчередей).Ссылка;
	КонецЕсли;

	Объект.СерверОчередей = СерверОчередей;
	
	// Вычисление универсальной даты события для переходящих с API 1.3
	УниверсальноеДатаСобытия = УниверсальноеВремя(Объект.ДатаВремяСобытия);
	ЧислоСекунд = УниверсальноеДатаСобытия - '00010101';
	Объект.УниверсальнаяДатаСобытияВМиллисекундах = ЧислоСекунд * 1000;

	Объект.Записать();

КонецПроцедуры // Опубликовать()

// Поместить сообщение в очередь отложенной отправки сообщений.
//
// Параметры:
//  Сообщение						 - Строка - Тело сообщения 
//  ТочкаПубликации					 - Строка - Точка публикации
//		(необязательно) Значение по умолчанию - ""
//  КлючМаршрутизации				 - Строка - Ключ маршрутизации
//		(необязательно) Значение по умолчанию - ""
//  СерверОчередей					 - СправочникСсылка.СерверыОчередейRMQ - Ссылка на настройки подключения к серверу очередей.
//                                     Если не заполнено, отправка осуществляется в "Основной" сервер очередей.
//		(необязательно) Значение по умолчанию - Неопределено
//  СвойстваСообщения				 - Структура - Свойства сообщения. Названия ключей соответствия доступны в методе
//                                     ОчередьСообщений.ВозможныеСвойстваСообщения
//		(необязательно) Значение по умолчанию - Неопределено
//  УниверсальнаяДатаВремяСобытия	 - Число - Универсальная дата и время события в миллисекундах. Если не заполнено,
//                                     заполняется текущей датой.
//		(необязательно) Значение по умолчанию - 0
//
Процедура Отправить(Знач Сообщение, Знач ТочкаПубликации = "", Знач КлючМаршрутизации = "",
	Знач СерверОчередей = Неопределено, Знач СвойстваСообщения = Неопределено, Знач УниверсальнаяДатаВремяСобытия = 0) Экспорт

	Объект = СоздатьЭлемент();
	Объект.ТочкаПубликации   = ТочкаПубликации;
	Объект.КлючМаршрутизации = КлючМаршрутизации;
	Объект.УниверсальнаяДатаСобытияВМиллисекундах = УниверсальнаяДатаВремяСобытия;
	Объект.Сообщение         = Сообщение;
	Объект.СерверОчередей    = СерверОчередей;

	Если СвойстваСообщения <> Неопределено Тогда
		Объект.СвойстваСообщения = ЗначениеВСтрокуВнутр(СвойстваСообщения);
	КонецЕсли;

	Объект.Записать();

КонецПроцедуры // Отправить()

Функция СформироватьИОтправитьПоПараметрам(ПараметрыСообщения) Экспорт

	СообщениеОбъект = СоздатьЭлемент();

	СообщениеОбъект.Заполнить(ПараметрыСообщения);
	СообщениеОбъект.ДополнительныеСвойства.Вставить("Состояние",
		Перечисления.гкс_СостоянияИсходящихСообщенийRMQ.Подготовлено);

	Если ПараметрыСообщения.Свойство("ВыгруженныеОбъекты") Тогда
		СообщениеОбъект.ДополнительныеСвойства.Вставить("ВыгруженныеОбъекты", ПараметрыСообщения["ВыгруженныеОбъекты"]);
	КонецЕсли;

	СообщениеОбъект.Записать();

	Возврат СообщениеОбъект.Ссылка;

КонецФункции

Процедура УстановитьБлокировкуНаСообщение(СообщениеСсылка)

	гкс_ОбщегоНазначения.УстановитьУпрБлокировкуПоЗначениюИПолю(СообщениеСсылка);

КонецПроцедуры

Функция СообщениеОтправлено(СообщениеСсылка)

	ДатаОтправкиВСУБД = гкс_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеСсылка, "ДатаВремяОтправки");
	Возврат ЗначениеЗаполнено(ДатаОтправкиВСУБД);

КонецФункции

#Область ТекстыЗапросов

// Возвращает текст запроса поиска "устаревших сообщений" для их удаления.
// См. гкс_ОчередьСообщенийRMQСлужебный.ОчисткаИсходящихСообщений
//
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаОчисткиУстаревшихСообщений() Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВсеСообщения.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ВсеСостояния.УниверсальнаяДатаСобытияВМиллисекундах, 0)) КАК Дата,
	|	ВсеСообщения.ДатаВремяОтправки КАК ДатаВремяОтправки,
	|	НЕ ЕСТЬNULL(ВсеПолучатели.ИмяОчередиОтвета, """") = """" КАК ПолучатьОповещенияОСостояниях
	|ПОМЕСТИТЬ ВТМаксимальныйДатыСостояний
	|ИЗ
	|	Справочник.ИсходящиеСообщения КАК ВсеСообщения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_СостоянияИсходящихСообщений КАК ВсеСостояния
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гкс_НастройкиИнтеграционногоАдаптера КАК Настройки
	|			ПО (ИСТИНА)
	|		ПО (ВсеСостояния.Сообщение = ВсеСообщения.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_ПолучателиДанныхRMQ КАК ВсеПолучатели
	|		ПО ВсеСообщения.гкс_НастройкаПолучателя = ВсеПолучатели.Ссылка
	|ГДЕ
	|	ВсеСообщения.ДатаВремяСобытия < ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, ВЫБОР
	|				КОГДА ЕСТЬNULL(Настройки.СрокХраненияИсходящихСообщений, 0) = 0
	|					ТОГДА -1
	|				ИНАЧЕ ЕСТЬNULL(Настройки.СрокХраненияИсходящихСообщений, 0)
	|			КОНЕЦ * -1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеСообщения.Ссылка,
	|	ВсеСообщения.ДатаВремяОтправки,
	|	НЕ ЕСТЬNULL(ВсеПолучатели.ИмяОчередиОтвета, """") = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеСостояния.Сообщение КАК Сообщение,
	|	ВсеСостояния.УчастникОбмена КАК УчастникОбмена,
	|	МАКСИМУМ(ВсеСостояния.УниверсальнаяДатаСобытияВМиллисекундах) КАК МаксимальнаяДатаСобытия
	|ПОМЕСТИТЬ ВТСрезМаксимальныхДат
	|ИЗ
	|	РегистрСведений.гкс_СостоянияИсходящихСообщений КАК ВсеСостояния
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМаксимальныйДатыСостояний КАК ВТОтборСообщений
	|		ПО ВсеСостояния.Сообщение = ВТОтборСообщений.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеСостояния.Сообщение,
	|	ВсеСостояния.УчастникОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеСостояния.Сообщение КАК Сообщение,
	|	МАКСИМУМ(УчастникиОбмена.ЭтаБаза) КАК ЭтоСтатусТекущейБазы
	|ПОМЕСТИТЬ ВТНаправленияПросмотраСостояний
	|ИЗ
	|	РегистрСведений.гкс_СостоянияИсходящихСообщений КАК ВсеСостояния
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гкс_УчастникиОбменаRMQ КАК УчастникиОбмена
	|		ПО ВсеСостояния.УчастникОбмена = УчастникиОбмена.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМаксимальныйДатыСостояний КАК ВТМаксимальныйДатыСостояний
	|		ПО ВсеСостояния.Сообщение = ВТМаксимальныйДатыСостояний.Ссылка
	|			И ВсеСостояния.УниверсальнаяДатаСобытияВМиллисекундах = ВТМаксимальныйДатыСостояний.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеСостояния.Сообщение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеСостояния.Сообщение КАК Сообщение,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ВсеСостояния.Состояние = ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияИсходящихСообщенийRMQ.Подготовлено)
	|				ТОГДА 1
	|			КОГДА ВсеСостояния.Состояние = ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияИсходящихСообщенийRMQ.Отправлено)
	|				ТОГДА 2
	|			КОГДА ВсеСостояния.Состояние = ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияИсходящихСообщенийRMQ.Пропущено)
	|				ТОГДА 3
	|			КОГДА ВсеСостояния.Состояние = ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияИсходящихСообщенийRMQ.Пропущено)
	|				ТОГДА 3
	|			КОГДА ВсеСостояния.Состояние = ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияИсходящихСообщенийRMQ.ОшибкаОбработкиПолучателем)
	|				ТОГДА 4
	|			КОГДА ВсеСостояния.Состояние = ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияИсходящихСообщенийRMQ.Доставлено)
	|				ТОГДА 5
	|			КОГДА ВсеСостояния.Состояние = ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияИсходящихСообщенийRMQ.ДоставленоИОбработано)
	|				ТОГДА 6
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК Состояние
	|ПОМЕСТИТЬ ВТСостоянияСообщений
	|ИЗ
	|	РегистрСведений.гкс_СостоянияИсходящихСообщений КАК ВсеСостояния
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСрезМаксимальныхДат КАК ВТСрезМаксимальныхДат
	|		ПО ВсеСостояния.Сообщение = ВТСрезМаксимальныхДат.Сообщение
	|			И ВсеСостояния.УчастникОбмена = ВТСрезМаксимальныхДат.УчастникОбмена
	|			И ВсеСостояния.УниверсальнаяДатаСобытияВМиллисекундах = ВТСрезМаксимальныхДат.МаксимальнаяДатаСобытия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНаправленияПросмотраСостояний КАК ВТНаправленияПросмотраСостояний
	|		ПО ВсеСостояния.Сообщение = ВТНаправленияПросмотраСостояний.Сообщение
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТНаправленияПросмотраСостояний.ЭтоСтатусТекущейБазы
	|				ТОГДА ВсеСостояния.Состояние В (ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияИсходящихСообщенийRMQ.Подготовлено), ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияИсходящихСообщенийRMQ.Отправлено), ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияИсходящихСообщенийRMQ.Пропущено))
	|			ИНАЧЕ ВсеСостояния.Состояние В (ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияИсходящихСообщенийRMQ.Пропущено), ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияИсходящихСообщенийRMQ.ОшибкаОбработкиПолучателем), ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияИсходящихСообщенийRMQ.Доставлено), ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияИсходящихСообщенийRMQ.ДоставленоИОбработано))
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеСостояния.Сообщение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ВТМаксимальныйДатыСостояний.Ссылка КАК Сообщение
	|ИЗ
	|	ВТМаксимальныйДатыСостояний КАК ВТМаксимальныйДатыСостояний
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостоянияСообщений КАК ВТСостоянияСообщений
	|		ПО ВТМаксимальныйДатыСостояний.Ссылка = ВТСостоянияСообщений.Сообщение
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТСостоянияСообщений.Состояние ЕСТЬ NULL
	|				ТОГДА ВЫБОР
	|						КОГДА ВТМаксимальныйДатыСостояний.ДатаВремяОтправки = ДАТАВРЕМЯ(1, 1, 1)
	|							ТОГДА ЛОЖЬ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВТМаксимальныйДатыСостояний.ПолучатьОповещенияОСостояниях
	|						ТОГДА ВТСостоянияСообщений.Состояние = 3
	|								ИЛИ ВТСостоянияСообщений.Состояние = 6
	|					ИНАЧЕ ВТСостоянияСообщений.Состояние = 2
	|							ИЛИ ВТСостоянияСообщений.Состояние = 3
	|				КОНЕЦ
	|		КОНЕЦ";

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаИсходящиеСообщенияКОтправке(Знач ОтборСервер, Знач ОтборТочкаПубликации,
	Знач ОтборСообщение = Неопределено) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИсходящиеСообщения.КлючМаршрутизации КАК КлючМаршрутизации,
	|	ИсходящиеСообщения.ТочкаПубликации КАК ТочкаПубликации,
	|	ЕСТЬNULL(ТочкиОбмена.ТипТочкиОбмена, ЗНАЧЕНИЕ(Перечисление.гкс_ТипыТочекОбменаRMQ.Direct)) КАК ТипТочкиОбмена,
	|	ИсходящиеСообщения.Сообщение КАК Сообщение,
	|	ИсходящиеСообщения.Ссылка КАК СообщениеСсылка,
	|	ИсходящиеСообщения.УниверсальнаяДатаСобытияВМиллисекундах КАК УниверсальнаяДатаСобытияВМиллисекундах,
	|	ЕстьNULL(ВсеСервера.Код, """") КАК КлючСоединения,
	|	ИсходящиеСообщения.ИдентификаторСообщения КАК НомерСообщения,
	|	ИсходящиеСообщения.СвойстваСообщения КАК СвойстваСообщения
	|ПОМЕСТИТЬ ВТСообщенияКОтправке
	|ИЗ
	|	Справочник.ИсходящиеСообщения КАК ИсходящиеСообщения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гкс_ТочкиОбменаRMQ КАК ТочкиОбмена
	|		ПО ИсходящиеСообщения.ТочкаПубликации = ТочкиОбмена.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерверыОчередейRMQ КАК ВсеСервера
	|		ПО ИсходящиеСообщения.СерверОчередей = ВсеСервера.Ссылка
	|ГДЕ
	|	ИсходящиеСообщения.ДатаВремяОтправки = ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ ИсходящиеСообщения.ПометкаУдаления
	|   //%ПоляОтбора%
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеСостояния.Сообщение КАК Сообщение,
	|	МАКСИМУМ(ВсеСостояния.УниверсальнаяДатаСобытияВМиллисекундах) КАК УниверсальнаяДатаСобытияВМиллисекундах
	|ПОМЕСТИТЬ ВТМаксимальныедатыСтатусов
	|ИЗ
	|	РегистрСведений.гкс_СостоянияИсходящихСообщений КАК ВсеСостояния
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСообщенияКОтправке КАК ВТСообщенияКОтправке
	|		ПО (ВТСообщенияКОтправке.СообщениеСсылка = ВсеСостояния.Сообщение)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеСостояния.Сообщение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеСостояния.Сообщение КАК Сообщение,
	|	МИНИМУМ(ВсеСостояния.Состояние) КАК Состояние
	|ПОМЕСТИТЬ ВТСрезСостояний
	|ИЗ
	|	РегистрСведений.гкс_СостоянияИсходящихСообщений КАК ВсеСостояния
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМаксимальныедатыСтатусов КАК ВТМаксимальныедатыСтатусов
	|		ПО ВсеСостояния.Сообщение = ВТМаксимальныедатыСтатусов.Сообщение
	|			И (ВТМаксимальныедатыСтатусов.УниверсальнаяДатаСобытияВМиллисекундах = ВсеСостояния.УниверсальнаяДатаСобытияВМиллисекундах)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеСостояния.Сообщение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСообщенияКОтправке.КлючМаршрутизации КАК КлючМаршрутизации,
	|	ВТСообщенияКОтправке.ТочкаПубликации КАК ТочкаПубликации,
	|	ВТСообщенияКОтправке.ТипТочкиОбмена КАК ТипТочкиОбмена,
	|	ВТСообщенияКОтправке.Сообщение КАК Сообщение,
	|	ВТСообщенияКОтправке.СообщениеСсылка КАК СообщениеСсылка,
	|	ВТСообщенияКОтправке.УниверсальнаяДатаСобытияВМиллисекундах КАК УниверсальнаяДатаСобытияВМиллисекундах,
	|	ВТСообщенияКОтправке.КлючСоединения КАК КлючСоединения,
	|	ВТСообщенияКОтправке.НомерСообщения КАК НомерСообщения,
	|	ВТСообщенияКОтправке.СвойстваСообщения КАК СвойстваСообщения
	|ИЗ
	|	ВТСообщенияКОтправке КАК ВТСообщенияКОтправке
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСрезСостояний КАК ВТСрезСостояний
	|		ПО ВТСообщенияКОтправке.СообщениеСсылка = ВТСрезСостояний.Сообщение
	|ГДЕ
	|	ЕСТЬNULL(ВТСрезСостояний.Состояние, ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияИсходящихСообщенийRMQ.Подготовлено)) = ЗНАЧЕНИЕ(Перечисление.гкс_СостоянияИсходящихСообщенийRMQ.Подготовлено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТочкаПубликации,
	|	УниверсальнаяДатаСобытияВМиллисекундах
	|ИТОГИ ПО
	|	КлючСоединения,
	|	ТочкаПубликации";

	ТекстПоляОтбора = "";
	Если ЗначениеЗаполнено(ОтборСервер) Тогда
		ТекстПоляОтбора = ТекстПоляОтбора + "
											|	И ИсходящиеСообщения.СерверОчередей = &СерверОчередей";
	КонецЕсли;

	Если ЗначениеЗаполнено(ОтборТочкаПубликации) Тогда
		ТекстПоляОтбора = ТекстПоляОтбора + "
											|	И ИсходящиеСообщения.ТочкаПубликации = &ТочкаПубликации";
	КонецЕсли;

	Если ЗначениеЗаполнено(ОтборСообщение) Тогда

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИсходящиеСообщения.ДатаВремяОтправки = ДАТАВРЕМЯ(1, 1, 1)", "ИСТИНА");

		Если ТипЗнч(ОтборСообщение) = Тип("Массив") Тогда
			ТекстПоляОтбора = ТекстПоляОтбора + "
												|	И ИсходящиеСообщения.Ссылка В (&МассивСообщений)";
		Иначе
			ТекстПоляОтбора = ТекстПоляОтбора + "
												|	И ИсходящиеСообщения.Ссылка = &МассивСообщений";
		КонецЕсли;

	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ПоляОтбора%", ТекстПоляОтбора);

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВсеСообщенияПоОбъекту() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсходящиеСообщения.Ссылка КАК Сообщение
	|ИЗ
	|	Справочник.ИсходящиеСообщения КАК ИсходящиеСообщения
	|ГДЕ
	|	ИсходящиеСообщения.гкс_ОбъектСобытия = &ОбъектСобытия";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТысячаИсходящихСообщений() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ИсходящиеСообщения.Ссылка КАК Объект
	|ИЗ
	|	Справочник.ИсходящиеСообщения КАК ИсходящиеСообщения";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли