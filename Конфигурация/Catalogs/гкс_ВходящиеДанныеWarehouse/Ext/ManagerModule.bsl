#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Создает новый элемент справочника, заполняет по переданному параметру, записывает.
//
// Параметры:
//  ДанныеЗаполнения - см. ИнициализироватьСтруктураНовогоЭлемента()
//
Функция НовыйЭлемент(ДанныеЗаполнения) Экспорт

	ВходящиеДанные = СоздатьЭлемент();
	ВходящиеДанные.Заполнить(ДанныеЗаполнения);

	Попытка			
		ВходящиеДанные.Записать();		
	Исключение
		Комментарий = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации("ИнтеграцияWarehouse.ЗаписатьВходящиеДанные",
		                         УровеньЖурналаРегистрации.Ошибка, 
		                         Метаданные.Справочники.гкс_ВходящиеДанныеWarehouse, 
		                         Неопределено, 
		                         Комментарий);
		
		ИсключениеОшибкаСозданияНовогоЭлемента(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ВходящиеДанные.Ссылка;
			
КонецФункции

// Блокирует для записи переданный элемент справочника.
//
// Параметры:
//  ВходящиеДанные - СправочникСсылка.гкс_ВходящиеДанныеWarehouse - блокируемый элемент
//
Процедура ЗаблокироватьДанныеПоСсылке(ВходящиеДанные) Экспорт
	
	гкс_ОбщегоНазначения.УстановитьУпрБлокировкуПоЗначениюИПолю(ВходящиеДанные);
	
КонецПроцедуры

// Устанавливает признак "Обработан" для переданного элемента справочника.
//
// Параметры:
//  ВходящиеДанные - СправочникСсылка.гкс_ВходящиеДанныеWarehouse - изменяемый элемент
//  Обработан - Булево - нужное значение для изменения
//
Процедура УстановитьПризнакОбработан(ВходящиеДанные, Обработан = Истина) Экспорт
	
	ОбъектДанные = ВходящиеДанные.ПолучитьОбъект();
	ОбъектДанные.Обработан = Обработан;
	ОбъектДанные.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру элемента справочника.
//
// Возвращаемое значение:
//  Структура - содержит все реквизиты справочника:
// 		* ДатаСоздания - Дата - внутренняя дата создания элемента справочника
// 		* ДатаИзменения - Дата - Дата изменения в веб-сервесе
// 		* ДатаПробы - Дата - Дата создания пробы в веб-сервесе
// 		* ДатаПогрузки - Дата - Дата погрузки в  траспорт из веб-сервесе
// 		* ИДКомпозитнойПробы - Строка - Идентификатор объединяющий пробы в веб-сервесе
// 		* ИДПробы - Строка - Идентификатор пробы в веб-сервесе
// 		* Комментарий - Строка - комментарий к пробе
// 		* МестоИнспекции - Строка - где был забор проб
// 		* НомерДокумента - Строка - внутренний номер сюрвейера
// 		* НомерЗаявки - Строка - заявка на перевозку
// 		* ТекстыСообщения - ТаблицаЗначений - разделенной по струтуре текст входящих данных, содержит:
//				* Ключ - Строка - ключ свойства из текста JSON
//				* Значение - Строка - Значение свойства по ключу из JSON
//				* ТипОбъекта - ПеречислениеСсылка.гкс_ТипыОбъектовWarehouse - тип для дальнейщего чтения текска сообщения
//
Функция ИнициализироватьСтруктураНовогоЭлемента() Экспорт
	
	ДатаСоздания 		= ТекущаяДатаСеанса();
	ПустаяДата 			= гкс_ОбщегоНазначенияКлиентСервер.ПустаяДата();
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("ДатаСоздания", 		ДатаСоздания);
	СтруктураЗаполнения.Вставить("ДатаИзменения", 		ПустаяДата);
	СтруктураЗаполнения.Вставить("ДатаПробы", 			ПустаяДата);
	СтруктураЗаполнения.Вставить("ДатаПогрузки", 		ПустаяДата);
	СтруктураЗаполнения.Вставить("ИДКомпозитнойПробы", 	"");
	СтруктураЗаполнения.Вставить("ИДПробы", 			"");
	СтруктураЗаполнения.Вставить("Комментарий", 		"");
	СтруктураЗаполнения.Вставить("МестоИнспекции", 		"");
	СтруктураЗаполнения.Вставить("НомерДокумента", 		"");
	СтруктураЗаполнения.Вставить("НомерЗаявки", 		"");	
	СтруктураЗаполнения.Вставить("ТекстыСообщения", 	ИнициализироватьТабличнуюЧасть());
	
	Возврат СтруктураЗаполнения;

КонецФункции

Функция ИнициализироватьТабличнуюЧасть()
	
	ТЗТекстыСообщения = Новый ТаблицаЗначений;
	ТЗТекстыСообщения.Колонки.Добавить("Ключ");
	ТЗТекстыСообщения.Колонки.Добавить("Значение");
	ТЗТекстыСообщения.Колонки.Добавить("ТипОбъекта");
	
	Возврат ТЗТекстыСообщения;

КонецФункции

Процедура ИсключениеОшибкаСозданияНовогоЭлемента(ПодробноеПредставлениеОшибки)
	
	ТекстОшибки = 
	    СтрШаблон(НСтр("ru = 'Ошибка создания нового элемента справочника ""Входящие данные Warehouse"".%1%2'"),
	     "|" ,
	     ПодробноеПредставлениеОшибки);
	
	ВызватьИсключение ТекстОшибки;
	
КонецПроцедуры
			
#КонецОбласти

#КонецЕсли
