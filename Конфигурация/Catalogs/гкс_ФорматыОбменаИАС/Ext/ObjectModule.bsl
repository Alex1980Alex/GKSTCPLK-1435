#Если ТолстыйКлиентОбычноеПриложение ИЛИ Сервер ИЛИ ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Справочники.гкс_ФорматыОбменаИАС.ЭтоСлужебныйФорматОбменаEnterpriseData(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоФорматТипаED() Тогда
		ПередЗаписьюДляФорматаТипаED(Отказ);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ Тип = Перечисления.гкс_ТипыФорматовОбменаRMQ.ED 
		ИЛИ Справочники.гкс_ФорматыОбменаИАС.ЭтоСлужебныйФорматОбменаEnterpriseData(Ссылка) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПространствоИмен");
		МассивНепроверяемыхРеквизитов.Добавить("Тип");
		МассивНепроверяемыхРеквизитов.Добавить("Версия");
	КонецЕсли;
	
	гкс_ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВалидацияУстановкиВерсииОбъекта

Функция НекорректныйФорматПространстваИмен()
	
	ПространствоИменПромежуточное = СтрЗаменить(СтрЗаменить(ПространствоИмен, "http://", ""), "https://", "");
	ПространствоИменМассив = СтрРазделить(ПространствоИменПромежуточное, "/");
	Если ПространствоИменМассив.Количество() < 2 Тогда
		
		Сообщение = НСтр("ru='Некорректно задано пространство имен формата ED. 
		                 |Обязательно использование символа разделителя ""/""'");
		гкс_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);

		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция УстановленаВерсияНулевойДлины()
	
	Если СтрДлина(Версия) = 0 Тогда
		
		Сообщение = НСтр("ru='Не задана версия или обнаружена версия нулевой длины'");
		гкс_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВерсияСостоитНеТолькоИзЦифр()
	
	Если  НЕ гкс_СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Версия) Тогда
		
		Сообщение = НСтр("ru='Некорректно задана версия формата ED. Допустимо использовать только цифровые символы'");
		гкс_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВерсияУстановленаНеПоМаске()
	
	ВерсияВМассиве = СтрРазделить(Версия, ".");
	Если НЕ ВерсияВМассиве.Количество() = 2  
		ИЛИ (ВерсияВМассиве.Количество() = 2 И НЕ ЗначениеЗаполнено(СокрЛП(ВерсияВМассиве[1]))) Тогда
		
		Сообщение = НСтр("ru='Некорректно задана версия формата. Версия должна задавать по маске 9.999'");
		гкс_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭлементВыбиратьПоследнийПоТипуИПространствуУжеСуществует()
	
	Если ФорматВыбиратьПоследнийУжеСуществует() Тогда
			
		Шаблон = НСтр("ru='Элементы с установленным признаком ""Выбирать последний"" уже существует
		| Тип: %1 
		| Версия формата: %2
		| Пространство имен: %3'");
		Сообщение = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
																				Тип,
																				Сред(СокрЛП(Версия), 1, 3),
																				ПространствоИмен);
		гкс_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция ФорматВыбиратьПоследнийУжеСуществует()
	
	Если НЕ Тип = Перечисления.гкс_ТипыФорматовОбменаRMQ.ED Тогда
		Возврат Ложь;
	КонецЕсли;
	
	БазовоеИмяПространства = БазовоеИмяПространства(ПространствоИмен);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДублиВыбиратьПоследнийED();
	Запрос.УстановитьПараметр("Тип", Тип);
	Запрос.УстановитьПараметр("Версия", 
	        Справочники.гкс_ФорматыОбменаИАС.СтаршаяЧастьВерсииФорматаED(Версия) 
			+ ".%");
	Запрос.УстановитьПараметр("ПространствоИмен", БазовоеИмяПространства + "%");
	Запрос.УстановитьПараметр("Ссылка", ?(Ссылка.Пустая(), Неопределено, Ссылка));
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если БазовоеИмяПространства = БазовоеИмяПространства(Выборка.ПространствоИмен)  Тогда
			Возврат Истина;			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция БазовоеИмяПространства(ПространствоИменПолное)
	
	Возврат Справочники.гкс_ФорматыОбменаИАС.БазовоеИмяПространства(ПространствоИменПолное);
	
КонецФункции

Функция ФорматСТакимПространствомУжеСуществует()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДублиЭлементовТипуИПространству();
	Запрос.УстановитьПараметр("Тип", Тип);	
	Запрос.УстановитьПараметр("ПространствоИмен", ПространствоИмен);
	Запрос.УстановитьПараметр("Ссылка", ?(Ссылка.Пустая(), Неопределено, Ссылка));
		
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЭлементСТакимПространствомУжеСуществует()
	
	Если ФорматСТакимПространствомУжеСуществует() Тогда
		
		Шаблон = НСтр("ru='Элементы с пространством имен уже существует
		| Тип: %1 
		| Версия: %2
		| Пространство имен: %3'");
		Сообщение = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
		                                                                        Тип,
		                                                                        Версия,
																	            ПространствоИмен);
		гкс_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПроверитьЗаполнениеОбъектаПриЗаписи(Отказ)
	
	Версия = СокрЛП(Версия);
	
	Отказ = Отказ ИЛИ УстановленаВерсияНулевойДлины();
		
	Если Тип = Перечисления.гкс_ТипыФорматовОбменаRMQ.ED Тогда
		
		Отказ = Отказ ИЛИ НекорректныйФорматПространстваИмен();
		Отказ = Отказ ИЛИ ЭлементСТакимПространствомУжеСуществует();
		Отказ = Отказ ИЛИ ВерсияСостоитНеТолькоИзЦифр();
		Отказ = Отказ ИЛИ ВерсияУстановленаНеПоМаске();
		Отказ = Отказ ИЛИ (ВыбиратьПоследний И ЭлементВыбиратьПоследнийПоТипуИПространствуУжеСуществует());
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

Процедура УстановитьИмяФорматаED()
	
	СоставляющаяИмени1 = Справочники.гкс_ФорматыОбменаИАС.БазовоеИмяПространства(ПространствоИмен);	
	
	Наименование = гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)", СоставляющаяИмени1, Версия);
	
КонецПроцедуры

Процедура УстановитьПорядокДляОбъекта()
	
	Если ВыбиратьПоследний Тогда
		
		Порядок = -1;
	    Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Версия) 
		ИЛИ НЕ Тип = Перечисления.гкс_ТипыФорматовОбменаRMQ.ED Тогда
		
		Порядок = 0;
		Возврат; // На текущий момент формирование порядка определено только форматов ED
		
	КонецЕсли; 
	
	// Проверка на корректность задания версии выдана выше
	Порядок = гкс_ОбменЧерезУниверсальныйФормат.ПорядокСортировкиМинорныйПоВерсииФормата(Версия);
		
КонецПроцедуры

Функция ОбработатьПомеченногоНаУдалениеОбъект()
	
	Если НЕ ПометкаУдаления Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УжеПомечен = ПометкаУдаления = гкс_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
	Если УжеПомечен Тогда
		Возврат Истина;		
	КонецЕсли;
	
	Активен = Ложь;
	
	ОчиститьНастройкиОбменаEDПоНеобходимости();
	
	Возврат Истина;
	
КонецФункции

Процедура ОчиститьНастройкиОбменаEDПоНеобходимости()
	
	Если ЭтоНовый() ИЛИ НЕ ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.гкс_НастройкиФорматовОбменаED.УдалитьЗапись(Ссылка);	
	
КонецПроцедуры

Процедура ПередЗаписьюДляФорматаТипаED(Отказ) 
	
	Если ОбработатьПомеченногоНаУдалениеОбъект() Тогда
		Возврат;		
	КонецЕсли;
		
	ПроверитьЗаполнениеОбъектаПриЗаписи(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Операция записи элемента - не частая, для большей надежности всегда устанавливаем порядок принудительно
	УстановитьПорядокДляОбъекта(); 	
	УстановитьИмяФорматаED();
	
КонецПроцедуры

Функция ЭтоФорматТипаED()
	
	Возврат Перечисления.гкс_ТипыФорматовОбменаRMQ.ЭтоТипФорматаED(Тип);
	
КонецФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаДублиВыбиратьПоследнийED()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВсеФорматы.ПространствоИмен КАК ПространствоИмен
	|ИЗ
	|	Справочник.гкс_ФорматыОбменаИАС КАК ВсеФорматы
	|ГДЕ
	|	ВсеФорматы.ВыбиратьПоследний
	|	И НЕ ВсеФорматы.Ссылка = &Ссылка
	|	И ВсеФорматы.Тип = &Тип
	|	И ВсеФорматы.Версия ПОДОБНО &Версия
	|	И ВсеФорматы.ПространствоИмен ПОДОБНО &ПространствоИмен";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДублиЭлементовТипуИПространству()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	1 КАК Существует
	|ИЗ
	|	Справочник.гкс_ФорматыОбменаИАС КАК ВсеФорматы
	|ГДЕ
	|	НЕ ВсеФорматы.Ссылка = &Ссылка
	|	И ВсеФорматы.Тип = &Тип
	|	И ВсеФорматы.ПространствоИмен = &ПространствоИмен";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте'");
#КонецЕсли
