#Область ОбработчикиСобытийФормы
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ДатаПробы = ТекущаяДатаСеанса();
	Попытка
		Объект.Показатель = Справочники.гкс_ПоказателиКачестваWarehouse.ПротеинЭкспрессЗерновыеМасличные;
	Исключение
		// Записываем в журнал регистрации для администратора
		ТекстОшибки = СтрШаблон("Не удалось установить показатель по умолчанию: %1",
				ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("Загрузка внешних проб.Инициализация показателя",
			УровеньЖурналаРегистрации.Предупреждение, , , ТекстОшибки);
		Объект.Показатель = Справочники.гкс_ПоказателиКачестваWarehouse.ПустаяСсылка();
	КонецПопытки;
	Объект.Комментарий = "Загружено из Excel";
	
	// Устанавливаем гкс_ВнешниеПробы как регистр по умолчанию
	// и делаем поле недоступным для редактирования
	Объект.ИмяВидаРегистра = "гкс_ВнешниеПробы";
	
	Инициализация();
	
	УстановитьИсточник();
	
	ОбновитьДанныеТабличногоДокументаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Показатель) Тогда
		ВывестиСообщениеПользователю(НСтр("ru = 'Показатель не заполнен'"), СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы
// Обработчики команд формы

&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	ОчиститьСообщения();
	ЗагрузитьДанныеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновить(Команда)
	ОбновитьДанныеТабличногоДокумента();
КонецПроцедуры

&НаКлиенте
Процедура КомандаКонтрольЗаполнения(Команда)
	КонтрольЗаполненияСервер();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Служебные процедуры и функции

// Возвращает структуру с константами обработки
//
// Возвращаемое значение:
//  Структура - константы модуля
//
&НаКлиентеНаСервереБезКонтекста
Функция КонстантыОбработки()
	ПЕРВАЯ_СТРОКА_ДАННЫХ = 2;
	ШИРИНА_КОЛОНКИ_ПО_УМОЛЧАНИЮ = 10;
	МАКСИМАЛЬНАЯ_ШИРИНА_КОЛОНКИ = 80;
	ШИРИНА_КОЛОНКИ_ДЛЯ_НЕОПРЕДЕЛЕННЫХ_ТИПОВ = 40;
	
	КонстантыМодуля = Новый Структура;
	
	// Константы табличного документа
	КонстантыМодуля.Вставить("ПерваяСтрокаДанных", ПЕРВАЯ_СТРОКА_ДАННЫХ);
	КонстантыМодуля.Вставить("НомерКолонки", "НомерКолонки");
	КонстантыМодуля.Вставить("ФорматЧГ", "ЧГ=");
	
	// Константы ширины колонок
	КонстантыМодуля.Вставить("ШиринаКолонкиПоУмолчанию", ШИРИНА_КОЛОНКИ_ПО_УМОЛЧАНИЮ);
	КонстантыМодуля.Вставить("МаксимальнаяШиринаКолонки", МАКСИМАЛЬНАЯ_ШИРИНА_КОЛОНКИ);
	КонстантыМодуля.Вставить("ШиринаКолонкиПоУмолчаниюДляНеопределенныхТипов", ШИРИНА_КОЛОНКИ_ДЛЯ_НЕОПРЕДЕЛЕННЫХ_ТИПОВ);
	
	// Константы статусов записи
	КонстантыМодуля.Вставить("СтатусИзменена", НСтр("ru = 'Изменена'"));
	КонстантыМодуля.Вставить("СтатусДобавлена", НСтр("ru = 'Добавлена'"));
	КонстантыМодуля.Вставить("СтатусЗагружена", НСтр("ru = 'Загружена'"));
	
	// Константы реквизитов
	КонстантыМодуля.Вставить("КлючПримитивныеТипы", "ПримитивныеТипы");
	
	// Константы сообщений
	КонстантыМодуля.Вставить("НеправильныйФорматЧисла", НСтр("ru = 'Неправильный формат числа'"));
	КонстантыМодуля.Вставить("НедопустимоеЧисловоеЗначение", НСтр("ru = 'Недопустимое числовое значение'"));
	КонстантыМодуля.Вставить("НеНайден", НСтр("ru = 'Не найден'"));
	КонстантыМодуля.Вставить("НеОднозначноеПредставление", НСтр("ru = 'Не однозначное представление. Вариантов:'"));
	
	Возврат КонстантыМодуля;
	
КонецФункции

#Область РаботаСКолонками

// Проверяет является ли реквизит обязательным для загрузки
//
// Параметры:
//  ИмяРеквизита - Строка - имя проверяемого реквизита
//
// Возвращаемое значение:
//  Булево - Истина, если реквизит обязательный
//
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОбязательныйРеквизит(ИмяРеквизита)
	
	ОбязательныеРеквизиты = Новый Массив;
	ОбязательныеРеквизиты.Добавить("ТранспортноеСредство");
	ОбязательныеРеквизиты.Добавить("ЗначениеПоказателя");
	
	Возврат ОбязательныеРеквизиты.Найти(ИмяРеквизита) <> Неопределено;
	
КонецФункции

// Создает структуру колонки с заполненными свойствами
//
// Параметры:
//  ЗагружаемыйРеквизит - СтрокаТаблицыЗначений - данные загружаемого реквизита
//  ВремКолонки - ТаблицаЗначений - шаблон колонок
//  НомерКолонки - Число - текущий номер колонки (передается по ссылке)
//
// Возвращаемое значение:
//  Структура - созданная колонка
//
&НаСервере
Функция ПостроитьКолонку(ЗагружаемыйРеквизит, ВремКолонки, НомерКолонки)
	
	КонстантыМодуля = КонстантыОбработки();
	Колонка = Новый Структура;
	
	Для Каждого КолонкаШаблон Из ВремКолонки.Колонки Цикл
		
		Если КолонкаШаблон.Имя = КонстантыМодуля.НомерКолонки Тогда
			ЗагружаемыйРеквизит.Пометка = ЭтоОбязательныйРеквизит(ЗагружаемыйРеквизит.ИмяРеквизита);
			
			Если ЗагружаемыйРеквизит.Пометка Тогда
				Колонка.Вставить(КонстантыМодуля.НомерКолонки, НомерКолонки);
				НомерКолонки = НомерКолонки + 1;
			Иначе
				Колонка.Вставить(КонстантыМодуля.НомерКолонки, 0);
			КонецЕсли;
		Иначе
			Колонка.Вставить(КолонкаШаблон.Имя, ЗагружаемыйРеквизит[КолонкаШаблон.Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Колонка;
	
КонецФункции

// Процедура формирует структуру колонок загружаемых реквизитов
// и сохраняет её в Объект.ДополнительныеСвойства.Колонки
//
&НаСервере
Процедура СформироватьСтруктуруКолонок()
	
	НомерКолонки = 1;
	Колонки = Новый Структура;
	
	ТаблицаЗначений = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");
	ВремКолонки = ТаблицаЗначений.СкопироватьКолонки();
	
	Для Каждого ЗагружаемыйРеквизит Из ТаблицаЗначений Цикл
		Колонка = ПостроитьКолонку(ЗагружаемыйРеквизит, ВремКолонки, НомерКолонки);
		Колонки.Вставить(Колонка.ИмяРеквизита, Колонка);
	КонецЦикла;
	
	Объект.ДополнительныеСвойства.Вставить("Колонки", Колонки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОшибок


// Выводит сообщение пользователю с указанной важностью
//
// Параметры:
//  Текст - Строка - текст сообщения
//  Важность - СтатусСообщения - важность сообщения (по умолчанию Обычное)
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиСообщениеПользователю(Текст, Важность = Неопределено)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	
	Если Важность <> Неопределено Тогда
		Сообщение.Важность = Важность;
	КонецЕсли;
	
	Сообщение.Сообщить();
	
КонецПроцедуры

// Очищает служебную информацию из текста сообщения об ошибке
//
// Параметры:
//  ТекстСообщения - Строка - исходный текст сообщения
//
// Возвращаемое значение:
//  Строка - очищенный текст сообщения
//
&НаКлиентеНаСервереБезКонтекста
Функция ОчиститьТекстСообщенияОбОшибке(ТекстСообщения)
	
	КонстантыМодуля = КонстантыОбработки();
	ОчищенныйТекст = ТекстСообщения;
	
	НачалоСлужебногоСообщения = СтрНайти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = СтрНайти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 И НачалоСлужебногоСообщения > 0 Тогда
		ЛеваяЧасть = Лев(ТекстСообщения, НачалоСлужебногоСообщения - 1);
		НачалоПравойЧасти = ОкончаниеСлужебногоСообщения
			+ КонстантыМодуля.ПерваяСтрокаДанных;
		ПравочнаяЧасть = Сред(ТекстСообщения, НачалоПравойЧасти);
		ОчищенныйТекст = СтрШаблон("%1%2", ЛеваяЧасть, ПравочнаяЧасть);
	КонецЕсли;
	
	Возврат ОчищенныйТекст;
	
КонецФункции

// Выводит сообщение об ошибке и выставляет параметр Отказ
//
// Параметры:
//  ТекстСообщения - Строка - текст сообщения об ошибке
//  Отказ - Булево - признак отказа (передается по ссылке)
//  Заголовок - Строка - заголовок сообщения
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиСообщениеОбОшибке(ТекстСообщения, Отказ = Ложь, Заголовок = "")
	
	ОчищенныйТекст = ОчиститьТекстСообщенияОбОшибке(ТекстСообщения);
	Отказ = Истина;
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		ВывестиСообщениеПользователю(Заголовок);
	КонецЕсли;
	
	ВывестиСообщениеПользователю(ОчищенныйТекст, СтатусСообщения.Важное);
	
КонецПроцедуры

#КонецОбласти

#Область ПриведениеТипов

// Функция приводит строковое представление числа к его значению
//
// Параметры:
//  Представление - Строка - Представление числа
//  ОписаниеТипов - ОписаниеТипов - Допустимое описание типов численного значения
//  Примечание - Строка - Текст примечания (передается по ссылке)
//
// Возвращаемое значение:
//  Число - Приведенное числовое значение
//
&НаКлиентеНаСервереБезКонтекста
Функция ПривестиКЧислу(Представление, Знач ОписаниеТипов = Неопределено, Примечание = "")
	
	КонстантыМодуля = КонстантыОбработки();
	
	Если ОписаниеТипов = Неопределено Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Число");
	КонецЕсли;
	
	// Обрабатываем числовые значения
	ОчищенноеПредставление = СтрЗаменить(СокрЛП(Представление), " ", "");
	ОчищенноеПредставление = СтрЗаменить(ОчищенноеПредставление, Символы.НПП, "");
	
	Результат = Число(ОчищенноеПредставление);
	ПриведенныйРезультат = ОписаниеТипов.ПривестиЗначение(Результат);
	
	Если НЕ ПриведенныйРезультат = Результат Тогда
		Примечание = КонстантыМодуля.НедопустимоеЧисловоеЗначение;
	КонецЕсли;
	
	Возврат ПриведенныйРезультат;
	
КонецФункции

#КонецОбласти

#Область РаботаСТабличнымДокументом

// Процедура формирует шапку табличного документа, в соответствии с таблицей загружаемых реквизитов
//
// Формирует шапку табличного документа на основе выбранных колонок
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ, у которого необходимо сформировать шапку
//
// Вычисляет оптимальную ширину колонки на основе её типа
//
// Параметры:
//  ЗагружаемыйРеквизит - Структура - описание загружаемого реквизита
//  Константы - Структура - константы модуля
//
// Возвращаемое значение:
//  Число - оптимальная ширина колонки
//
&НаКлиентеНаСервереБезКонтекста
Функция ВычислитьОптимальнуюШиринуКолонки(ЗагружаемыйРеквизит)
	
	ШиринаКолонки = 0;
	
	// Если ширина задана явно, используем ее
	Если ЗагружаемыйРеквизит.ШиринаКолонки <> 0 Тогда
		ШиринаКолонки = ЗагружаемыйРеквизит.ШиринаКолонки;
		// Если типов несколько или тип неопределен, используем ширину по умолчанию
	ИначеЕсли ЗагружаемыйРеквизит.ОписаниеТипов.Типы().Количество() <> 1 Тогда
		КонстантыМодуля = КонстантыОбработки();
		ШиринаКолонки = КонстантыМодуля.ШиринаКолонкиПоУмолчаниюДляНеопределенныхТипов;
	Иначе
		// Вычисляем ширину на основе типа данных
		ПервыйТип = ЗагружаемыйРеквизит.ОписаниеТипов.Типы()[0];
		ШиринаКолонки = ВычислитьШиринуПоТипуДанных(ПервыйТип, ЗагружаемыйРеквизит.ОписаниеТипов);
	КонецЕсли;
	
	Возврат ШиринаКолонки;
	
КонецФункции

// Вычисляет ширину колонки на основе типа данных
//
// Параметры:
//  ТипДанных - Тип - тип данных колонки
//  ОписаниеТипов - ОписаниеТипов - описание типов колонки
//
// Возвращаемое значение:
//  Число - ширина колонки
//
&НаКлиентеНаСервереБезКонтекста
Функция ВычислитьШиринуПоТипуДанных(ТипДанных, ОписаниеТипов)
	
	КонстантыМодуля = КонстантыОбработки();
	ШиринаКолонки = КонстантыМодуля.ШиринаКолонкиПоУмолчаниюДляНеопределенныхТипов;
	
	Если ТипДанных = Тип("Строка") Тогда
		ШиринаКолонки = ВычислитьШиринуДляСтроки(ОписаниеТипов.КвалификаторыСтроки, КонстантыМодуля);
	ИначеЕсли ТипДанных = Тип("Число") Тогда
		ШиринаКолонки = ВычислитьШиринуДляЧисла(ОписаниеТипов.КвалификаторыЧисла, КонстантыМодуля);
	Иначе
		// Для остальных типов данных (Булево, Дата, ссылочные типы и др.)
		// используется ширина по умолчанию для неопределенных типов
		ШиринаКолонки = КонстантыМодуля.ШиринаКолонкиПоУмолчаниюДляНеопределенныхТипов;
	КонецЕсли;
	
	Возврат ШиринаКолонки;
	
КонецФункции

// Вычисляет ширину колонки для строкового типа
//
// Параметры:
//  КвалификаторыСтроки - КвалификаторыСтроки - квалификаторы строки
//  КонстантыМодуля - Структура - константы модуля
//
// Возвращаемое значение:
//  Число - ширина колонки
//
&НаКлиентеНаСервереБезКонтекста
Функция ВычислитьШиринуДляСтроки(КвалификаторыСтроки, КонстантыМодуля)
	
	ШиринаКолонки = 0;
	
	Если КвалификаторыСтроки.Длина = 0 Тогда
		ШиринаКолонки = КонстантыМодуля.МаксимальнаяШиринаКолонки;
	Иначе
		ПороговаяШирина = КонстантыМодуля.ШиринаКолонкиПоУмолчанию;
		ВычисленнаяШирина = Макс(КвалификаторыСтроки.Длина, ПороговаяШирина);
		ШиринаКолонки = Мин(ВычисленнаяШирина, КонстантыМодуля.МаксимальнаяШиринаКолонки);
	КонецЕсли;
	
	Возврат ШиринаКолонки;
	
КонецФункции

// Вычисляет ширину колонки для числового типа
//
// Параметры:
//  КвалификаторыЧисла - КвалификаторыЧисла - квалификаторы числа
//  КонстантыМодуля - Структура - константы модуля
//
// Возвращаемое значение:
//  Число - ширина колонки
//
&НаКлиентеНаСервереБезКонтекста
Функция ВычислитьШиринуДляЧисла(КвалификаторыЧисла, КонстантыМодуля)
	
	ПороговаяШирина = КонстантыМодуля.ШиринаКолонкиПоУмолчанию;
	
	Возврат Макс(КвалификаторыЧисла.Разрядность, ПороговаяШирина);
	
КонецФункции

&НаСервере
Процедура СформироватьШапкуТабличногоДокумента(ТабличныйДокумент)
	
	СтильЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	Колонки = Объект.ДополнительныеСвойства.Колонки;
	
	Для Каждого КлючИЗначение Из Колонки Цикл
		ЗагружаемыйРеквизит = КлючИЗначение.Значение;
		НомерКолонки = ЗагружаемыйРеквизит.НомерКолонки;
		
		Если НЕ ЗагружаемыйРеквизит.Пометка ИЛИ НомерКолонки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ШиринаКолонки = ВычислитьОптимальнуюШиринуКолонки(ЗагружаемыйРеквизит);
		
		// Настройка области заголовка
		Область = ТабличныйДокумент.Область(СтрШаблон("R1C%1", НомерКолонки));
		БылТекст = НЕ ПустаяСтрока(Область.Текст);
		
		Если БылТекст Тогда
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Область.Текст);
			МассивСтрок.Добавить(ЗагружаемыйРеквизит.ПредставлениеРеквизита);
			Область.Текст = СтрСоединить(МассивСтрок, Символы.ПС);
		Иначе
			Область.Текст = ЗагружаемыйРеквизит.ПредставлениеРеквизита;
		КонецЕсли;
		
		Область.Расшифровка = ЗагружаемыйРеквизит.ИмяРеквизита;
		Область.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		Область.Обвести(СтильЛинии, СтильЛинии, СтильЛинии, СтильЛинии);
		
		// Настройка ширины колонки
		ОбластьКолонки = ТабличныйДокумент.Область(СтрШаблон("C%1", НомерКолонки));
		Если БылТекст Тогда
			ОбластьКолонки.ШиринаКолонки = Макс(ОбластьКолонки.ШиринаКолонки, ШиринаКолонки);
		Иначе
			ОбластьКолонки.ШиринаКолонки = ШиринаКолонки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает метаданные источника данных
//
// Возвращаемое значение:
//  ОбъектМетаданныхРегистрСведений, Неопределено - Метаданные источника или Неопределено, если источник не выбран
//
&НаСервере
Функция ПолучитьМетаданныеИсточника()
	
	МетаданныеИсточника = Неопределено;
	
	Если НЕ ПустаяСтрока(Объект.ИмяВидаРегистра) Тогда
		МетаданныеИсточника = Метаданные.РегистрыСведений[Объект.ИмяВидаРегистра];
	КонецЕсли;
	
	Возврат МетаданныеИсточника;
	
КонецФункции

// Функция возвращает текст вопроса для загрузки данных в источник
//
// Возвращаемое значение:
//  Структура - содержит свойства:
//   * Ошибка     - Строка - текст ошибки, если она возникла
//   * ТекстВопроса - Строка - текст вопроса для отображения пользователю
//
&НаСервере
Функция ПолучитьТекстВопросаИсточника()
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Ошибка = "";
	ТекстВопросаИсточника = СтрШаблон(" записей в регистр сведений: ""%1""", МетаданныеИсточника.Представление());
	
	
	Возврат Новый Структура("Ошибка, ТекстВопроса", Ошибка, ТекстВопросаИсточника);
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

// Выводит информационные сообщения о процессе загрузки
//
// Параметры:
//  ТекстВопросаИсточника - Строка - текст описания источника
//  КоличествоЭлементов - Число - общее количество элементов для загрузки
//
&НаСервере
Процедура ВывестиИнформациюОЗагрузке(ТекстВопросаИсточника, КоличествоЭлементов)
	
	ВывестиСообщениеПользователю(СтрШаблон("%1%2", НСтр("ru = 'Выполняется загрузка'"), ТекстВопросаИсточника));
	ВывестиСообщениеПользователю(СтрШаблон("%1%2", НСтр("ru = 'Всего:'"), КоличествоЭлементов));
	ВывестиСообщениеПользователю("---------------------------------------------");
	
КонецПроцедуры

// Создает таблицу соответствия представлений и ссылок для поиска
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками Ссылка и Представление
//
&НаСервере
Функция ПолучитьТаблицуСоответствийТранспортныхСредств()
	
	КонстантыМодуля = КонстантыОбработки();
	ЗначенияДляПоиска = Новый Массив;
	
	Для НомерСтроки = КонстантыМодуля.ПерваяСтрокаДанных По ТабличныйДокумент.ВысотаТаблицы Цикл
		ЗначениеЯчейки = СокрЛП(ТабличныйДокумент.Область(НомерСтроки, 1).Текст);
		Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			ЗначенияДляПоиска.Добавить(ЗначениеЯчейки);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСоответствий = Новый ТаблицаЗначений;
	
	Если ЗначенияДляПоиска.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТранспортныеСредства.Ссылка КАК Ссылка,
			|	ТранспортныеСредства.Наименование КАК Представление
			|ИЗ
			|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства
			|ГДЕ
			|	НЕ ТранспортныеСредства.ПометкаУдаления
			|	И ТранспортныеСредства.Наименование В(&СписокЗначений)";
		
		Запрос.УстановитьПараметр("СписокЗначений", ЗначенияДляПоиска);
		ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Возврат ТаблицаСоответствий;
	
КонецФункции

// Выводит результат обработки строки
//
// Параметры:
//  ОбъектНайден - Булево - был ли найден существующий объект
//  НомерТекущейСтроки - Число - номер обрабатываемой строки
//  УспешноЗаписан - Булево - успешно ли записан объект
//
&НаСервере
Процедура ВывестиРезультатОбработкиСтроки(ОбъектНайден, НомерТекущейСтроки, УспешноЗаписан)
	
	КонстантыМодуля = КонстантыОбработки();
	
	Если УспешноЗаписан Тогда
		ТекстСостояния = ?(ОбъектНайден, КонстантыМодуля.СтатусИзменена, КонстантыМодуля.СтатусДобавлена);
		ТекстСообщения = СтрШаблон("%1%2%3.", ТекстСостояния, НСтр("ru = ' запись №'"), НомерТекущейСтроки);
		ВывестиСообщениеПользователю(ТекстСообщения);
	Иначе
		ТекстСостояния = ?(ОбъектНайден, КонстантыМодуля.СтатусИзменена, КонстантыМодуля.СтатусЗагружена);
		ТекстСообщения = СтрШаблон("%1%2%3%4.",
				НСтр("ru = 'Запись не'"),
				ТекстСостояния,
				НСтр("ru = '. № записи:'"),
				НомерТекущейСтроки);
		ВывестиСообщениеПользователю(ТекстСообщения, СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает структуру измерений регистра для загрузки
//
// Параметры:
//  Колонки - Структура - колонки для обработки
//
// Возвращаемое значение:
//  Структура - подготовленная структура измерений регистра
//
&НаСервере
Функция ПодготовитьИзмеренияРегистра(Колонки)
	
	ИзмеренияРегистра = Новый Структура;
	Для Каждого Колонка Из Колонки Цикл
		Если Колонка.Значение.МожетБытьПолемПоиска Тогда
			ЭтоДата = Колонка.Ключ = "Период"
				ИЛИ Колонка.Ключ = "ДатаИзменения"
				ИЛИ Колонка.Ключ = "ДатаПогрузки"
				ИЛИ Колонка.Ключ = "ДатаПробы";
			
			Если ЭтоДата Тогда
				ИзмеренияРегистра.Вставить(Колонка.Ключ, Объект.ДатаПробы);
			ИначеЕсли Колонка.Ключ = "Показатель" Тогда
				ИзмеренияРегистра.Вставить(Колонка.Ключ, Объект.Показатель);
			Иначе
				ИзмеренияРегистра.Вставить(Колонка.Ключ, Колонка.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИзмеренияРегистра;
	
КонецФункции


// Подготовить загружаемый объект.
//
// Параметры:
//  МетаданныеИсточника - ОбъектМетаданных, Неопределено, ОбъектМетаданныхРегистрСведений - Метаданные источника
//  ТекущаяСтрока - Структура - Текущая строка
//  ИзмеренияРегистра - Структура - Измерения регистра
//
// Возвращаемое значение:
//  РегистрСведенийМенеджерЗаписиИмяРегистраСведений - Подготовить загружаемый объект
&НаСервере
Функция ПодготовитьЗагружаемыйОбъект(МетаданныеИсточника, ТекущаяСтрока, ИзмеренияРегистра)
	
	ЗагружаемыйОбъект = РегистрыСведений[МетаданныеИсточника.Имя].СоздатьМенеджерЗаписи();
	
	Для Каждого КлючИЗначение Из ТекущаяСтрока Цикл
		Если ИзмеренияРегистра.Свойство(КлючИЗначение.Ключ) Тогда
			ЗагружаемыйОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗагружаемыйОбъект;
	
КонецФункции


// Проверить существование объекта.
//
// Параметры:
//  ЗагружаемыйОбъект - РегистрСведенийМенеджерЗаписиИмяРегистраСведений - Загружаемый объект
//
// Возвращаемое значение:
//  Булево - Проверить существование объекта
&НаСервере
Функция ПроверитьСуществованиеОбъекта(ЗагружаемыйОбъект)
	
	ОбъектСуществует = Ложь;
	
	Если НЕ Объект.ЗамещатьСуществующиеЗаписи Тогда
		ЗагружаемыйОбъект.Прочитать();
		ОбъектСуществует = ЗагружаемыйОбъект.Выбран();
	КонецЕсли;
	
	Возврат ОбъектСуществует;
	
КонецФункции


// Заполнить загружаемый объект.
//
// Параметры:
//  ЗагружаемыйОбъект - РегистрСведенийМенеджерЗаписиИмяРегистраСведений - Загружаемый объект
//  ТекущаяСтрока - Структура - Текущая строка
//  Колонки - Структура - Колонки
//  ОбъектНайден - Булево - Объект найден
//
// Возвращаемое значение:
//  Булево - Заполнить загружаемый объект
&НаСервере
Функция ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, ТекущаяСтрока, Колонки, ОбъектНайден)
	
	УспешноЗаполнен = Истина;
	
	Для Каждого КлючИЗначение Из ТекущаяСтрока Цикл
		Если НЕ ОбъектНайден ИЛИ Колонки[КлючИЗначение.Ключ].Пометка Тогда
			Попытка
				ЗагружаемыйОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			Исключение
				ТекстОшибки = СтрШаблон("Ошибка при установке значения реквизита ""%1"": %2",
						КлючИЗначение.Ключ, ОписаниеОшибки());
				ЗаписьЖурналаРегистрации("Загрузка внешних проб.Установка значения реквизита",
					УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
				ВывестиСообщениеОбОшибке(ТекстОшибки);
				УспешноЗаполнен = Ложь;
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УспешноЗаполнен;
	
КонецФункции

// Обрабатывает одну строку данных для загрузки
//
// Параметры:
//  НомерСтроки - Число - номер строки табличного документа
//  МетаданныеИсточника - ОбъектМетаданных - метаданные источника
//  Колонки - Структура - колонки для обработки
//  ИзмеренияРегистра - Структура - измерения регистра
//  ТаблицаСсылкаПредставление - ТаблицаЗначений - таблица соответствий
//  НомерТекущейСтроки - Число - номер текущей строки (по ссылке)
//  Загружено - Число - количество загруженных записей (по ссылке)
//
&НаСервере
Процедура ОбработатьСтрокуДанных(НомерСтроки, МетаданныеИсточника, Колонки, ИзмеренияРегистра,
		ТаблицаСсылкаПредставление, НомерТекущейСтроки, Загружено)
	
	НомерТекущейСтроки = НомерТекущейСтроки + 1;
	ТекущаяСтрока = КонтрольЗаполненияСтроки(ТабличныйДокумент, НомерСтроки, ТаблицаСсылкаПредставление);
	
	// Валидация обязательных полей - если строка пустая или не содержит нужных данных, пропускаем
	Если ТекущаяСтрока.Количество() = 0 Тогда
		Возврат; // Пропускаем пустые или некорректные строки
	КонецЕсли;
	
	// Проверяем наличие обязательных полей
	Если НЕ ТекущаяСтрока.Свойство("ТранспортноеСредство")
		ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.ТранспортноеСредство) Тогда
		Возврат; // Пропускаем строки без транспортного средства
	КонецЕсли;
	
	Если НЕ ТекущаяСтрока.Свойство("ЗначениеПоказателя")
		ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗначениеПоказателя) Тогда
		Возврат; // Пропускаем строки без значения показателя
	КонецЕсли;
	
	Если НЕ ТекущаяСтрока.Свойство("Показатель") Тогда
		Возврат;
	КонецЕсли;
	
	ЗагружаемыйОбъект = ПодготовитьЗагружаемыйОбъект(МетаданныеИсточника, ТекущаяСтрока, ИзмеренияРегистра);
	ОбъектНайден = ПроверитьСуществованиеОбъекта(ЗагружаемыйОбъект);
	
	УспешноЗаполнен = ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, ТекущаяСтрока, Колонки, ОбъектНайден);
	Если НЕ УспешноЗаполнен Тогда
		Возврат;
	КонецЕсли;
	
	УспешноЗаписан = ЗаписатьОбъект(ЗагружаемыйОбъект, Объект.ПередЗаписьюОбъекта, Объект.ПриЗаписиОбъекта);
	ВывестиРезультатОбработкиСтроки(ОбъектНайден, НомерТекущейСтроки, УспешноЗаписан);
	
	Если УспешноЗаписан Тогда
		Загружено = Загружено + 1;
	КонецЕсли;
	
КонецПроцедуры


// Инициализировать параметры загрузки.
//
// Возвращаемое значение:
//  Структура - Инициализировать параметры загрузки:
// * МетаданныеИсточника - ОбъектМетаданныхРегистрСведений, Неопределено -
// * ИзмеренияРегистра - Структура -
// * КоличествоЭлементов - Число -
// * ТаблицаСсылкаПредставление - ТаблицаЗначений -
&НаСервере
Функция ИнициализироватьПараметрыЗагрузки()
	
	СформироватьСтруктуруКолонок();
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	ИзмеренияРегистра = ПодготовитьИзмеренияРегистра(Объект.ДополнительныеСвойства.Колонки);
	
	// Считаем только строки с данными, исключая пустые
	КоличествоЭлементов = 0;
	Для НомерСтроки = Объект.ПерваяСтрокаДанныхТабличногоДокумента По ТабличныйДокумент.ВысотаТаблицы Цикл
		Если ЕстьДанныеВСтроке(ТабличныйДокумент, НомерСтроки) Тогда
			КоличествоЭлементов = КоличествоЭлементов + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСсылкаПредставление = ПолучитьТаблицуСоответствийТранспортныхСредств();
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("МетаданныеИсточника", МетаданныеИсточника);
	ПараметрыЗагрузки.Вставить("Колонки", Объект.ДополнительныеСвойства.Колонки);
	ПараметрыЗагрузки.Вставить("ИзмеренияРегистра", ИзмеренияРегистра);
	ПараметрыЗагрузки.Вставить("КоличествоЭлементов", КоличествоЭлементов);
	ПараметрыЗагрузки.Вставить("ТаблицаСсылкаПредставление", ТаблицаСсылкаПредставление);
	
	Возврат ПараметрыЗагрузки;
	
КонецФункции

// Выполняет загрузку всех строк данных
//
// Параметры:
//  ПараметрыЗагрузки - Структура - параметры загрузки
//
// Возвращаемое значение:
//  Число - количество успешно загруженных записей
//
&НаСервере
Функция ВыполнитьЗагрузкуСтрок(ПараметрыЗагрузки)
	
	НомерТекущейСтроки = 0;
	Загружено = 0;
	
	Для К = Объект.ПерваяСтрокаДанныхТабличногоДокумента По ТабличныйДокумент.ВысотаТаблицы Цикл
		ОбработатьСтрокуДанных(К,
			ПараметрыЗагрузки.МетаданныеИсточника,
			ПараметрыЗагрузки.Колонки,
			ПараметрыЗагрузки.ИзмеренияРегистра,
			ПараметрыЗагрузки.ТаблицаСсылкаПредставление,
			НомерТекущейСтроки,
			Загружено);
	КонецЦикла;
	
	Возврат Загружено;
	
КонецФункции

// Процедура выполняет загрузку данных из табличного документа в регистр сведений
//
&НаСервере
Процедура ЗагрузитьДанныеСервер()
	
	ПараметрыЗагрузки = ИнициализироватьПараметрыЗагрузки();
	
	ТекстВопросаИсточника = ПолучитьТекстВопросаИсточника().ТекстВопроса;
	ВывестиИнформациюОЗагрузке(ТекстВопросаИсточника, ПараметрыЗагрузки.КоличествоЭлементов);
	
	Загружено = ВыполнитьЗагрузкуСтрок(ПараметрыЗагрузки);
	
	ВывестиСообщениеПользователю("---------------------------------------------");
	ТекстИтогов = СтрШаблон(НСтр("ru = 'Обработано %1 из %2 записей.'"),
			Загружено, ПараметрыЗагрузки.КоличествоЭлементов);
	ВывестиСообщениеПользователю(ТекстИтогов);
	
КонецПроцедуры




// Обработать сложный тип.
//
// Параметры:
//  ТипРеквизита - Тип - Тип реквизита
//  Представление - Строка - Представление
//  Колонка - Структура - Колонка
//  ТаблицаСсылкаПредставление - ТаблицаЗначений, Неопределено - Таблица ссылка представление
//  НайденныеЗначения - Массив - Найденные значения
//  Примечание - Строка - Примечание
&НаСервере
Процедура ОбработатьСложныйТип(ТипРеквизита, Представление, Колонка,
		ТаблицаСсылкаПредставление, НайденныеЗначения, Примечание)
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита);
	
	Если МетаданныеТипа = Неопределено Тогда
		Примечание = "Для структуры Колонка не определен тип значения";
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаСсылкаПредставление) = Тип("ТаблицаЗначений") Тогда
		ПараметрыПоиска = Новый Структура("Представление", Представление);
		МассивСтрок = ТаблицаСсылкаПредставление.НайтиСтроки(ПараметрыПоиска);
		
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			НайденныеЗначения.Добавить(СтрокаМассива.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


// Функция возвращает массив возможных значений для текущей колонки по представлению
//
// Параметры:
//  Колонка        - Структура - свойства, в соответствии с которыми необходимо получить возможные значения
//  Представление  - Строка - по которой необходимо вернуть массив значений
//  Примечание     - Строка - массив текстов ячеек строки
//  ТекущиеДанные  - Структура - структура загруженных значений
//  ТаблицаСсылкаПредставление - ТаблицаЗначений - таблица соответствия представлений и ссылок
//
// Возвращаемое значение:
//  Массив - возможных значений
//
&НаСервере
Функция ПолучитьВозможныеЗначения(Колонка, Представление, Примечание, ТекущиеДанные, ТаблицаСсылкаПредставление)
	
	Примечание = "";
	НайденныеЗначения = Новый Массив;
	
	Если ПустаяСтрока(Представление) Тогда
		Возврат НайденныеЗначения;
	КонецЕсли;
	
	Тип = Колонка.ОписаниеТипов;
	
	Для Каждого ТипРеквизита Из Тип.Типы() Цикл
		ОбработатьТипРеквизита(ТипРеквизита, Представление, Колонка,
			ТаблицаСсылкаПредставление, НайденныеЗначения, Примечание);
	КонецЦикла;
	
	Возврат НайденныеЗначения;
	
КонецФункции

&НаСервере
Процедура КонтрольЗаполненияСервер()
	
	СформироватьСтруктуруКолонок();
	
	// Считаем только строки с данными, исключая пустые
	КоличествоЭлементов = 0;
	КоличествоОшибок = 0;
	Для НомерСтроки = Объект.ПерваяСтрокаДанныхТабличногоДокумента По ТабличныйДокумент.ВысотаТаблицы Цикл
		Если ЕстьДанныеВСтроке(ТабличныйДокумент, НомерСтроки) Тогда
			КоличествоЭлементов = КоличествоЭлементов + 1;
			РезультатКонтроля = КонтрольЗаполненияСтрокиСОшибками(ТабличныйДокумент, НомерСтроки,
					Неопределено);
			КоличествоОшибок = КоличествоОшибок + РезультатКонтроля.КоличествоОшибок;
		КонецЕсли;
	КонецЦикла;
	
	ТекстСообщения = СтрШаблон("Контроль заполнения завершен. Проверено строк: %1",
			КоличествоЭлементов);
	ВывестиСообщениеПользователю(ТекстСообщения);
	
	Если КоличествоОшибок > 0 Тогда
		ТекстОшибок = СтрШаблон("Выявлено ячеек, содержащих ошибки/неоднозначное представление: %1",
				КоличествоОшибок);
		ВывестиСообщениеПользователю(ТекстОшибок, СтатусСообщения.Важное);
	Иначе
		ВывестиСообщениеПользователю("Ячеек, содержащих ошибки не выявлено");
	КонецЕсли;
	
КонецПроцедуры


// Заполняет настройки колонок по умолчанию или по переданным настройкам
//
// Параметры:
//  Настройки - ТабличныйДокумент, Неопределено - табличный документ с настройками
//             или неопределено
//
&НаСервере
Процедура ЗаполнитьНастройкиКолонок(Настройки)
	
	ТаблицаЗначений = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");
	
	ТаблицаЗначений.Очистить();
	
	ЗаполнитьНастройкиКолонокРегистраСведений(ТаблицаЗначений);
	
	
	НомерКолонки = 1;
	Для Каждого ЗагружаемыйРеквизит Из ТаблицаЗначений Цикл
		
		ЗагружаемыйРеквизит.Пометка = Истина;
		ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаЗначений, "ТаблицаЗагружаемыхРеквизитов");
	
КонецПроцедуры


// Заполняет настройки колонок по умолчанию для регистра сведений
//
// Параметры:
//  ТаблицаЗначений - ТаблицаЗначений - таблица для заполнения настройками колонок
//
&НаСервере
Процедура ЗаполнитьНастройкиКолонокРегистраСведений(ТаблицаЗначений)
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ МетаданныеИсточника.ПериодичностьРегистраСведений
		= Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		
		ЗагружаемыйРеквизит = ТаблицаЗначений.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита = "Период";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Период";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.ПолеПоиска = Истина;
		
		ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("Дата", , , ,
				Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		
	КонецЕсли;
	
	Для Каждого Реквизит Из МетаданныеИсточника.Измерения Цикл
		
		ЗагружаемыйРеквизит = ТаблицаЗначений.Добавить();
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.ИмяРеквизита = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ОписаниеТипов =
			МетаданныеИсточника.Измерения[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеИсточника.Ресурсы Цикл
		ЗагружаемыйРеквизит = ТаблицаЗначений.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ОписаниеТипов =
			МетаданныеИсточника.Ресурсы[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		ЗагружаемыйРеквизит = ТаблицаЗначений.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ОписаниеТипов =
			МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеТабличногоДокумента(БезВопросов = Ложь)
	
	ОбновитьДанныеТабличногоДокументаСервер();
	
КонецПроцедуры


// Процедура выполняет установку реквизитов, связанных с источником данных
//
&НаСервере
Процедура УстановитьИсточник(СписокНастроек = Неопределено)
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	Если МетаданныеИсточника = Неопределено Тогда
		ТаблицаЗагружаемыхРеквизитов.Очистить();
	Иначе
		ЗаполнитьНастройкиКолонок(Неопределено);
		
	КонецЕсли;
	
	ОбновитьДанныеТабличногоДокументаСервер();
	
КонецПроцедуры


// Процедура выполняет инициализацию служебных переменных и констант модуля
//
&НаСервере
Процедура Инициализация()
	
	КонстантыМодуля = КонстантыОбработки();
	
	Объект.ДополнительныеСвойства = Новый Структура;
	
	ПримитивныеТипы = Новый Структура;
	ИнициализироватьПримитивныеТипы(ПримитивныеТипы);
	Объект.ДополнительныеСвойства.Вставить(КонстантыМодуля.КлючПримитивныеТипы, ПримитивныеТипы);
	Объект.ДополнительныеСвойства.Вставить("Колонки", Новый Структура);
	
	Если Объект.ПерваяСтрокаДанныхТабличногоДокумента < КонстантыМодуля.ПерваяСтрокаДанных Тогда
		Объект.ПерваяСтрокаДанныхТабличногоДокумента = КонстантыМодуля.ПерваяСтрокаДанных;
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициализирует структуру примитивных типов
//
// Параметры:
//  ПримитивныеТипы - Структура - структура для заполнения примитивными типами
//
&НаСервере
Процедура ИнициализироватьПримитивныеТипы(ПримитивныеТипы)
	
	ПримитивныеТипы.Вставить("Число", Тип("Число"));
	ПримитивныеТипы.Вставить("Строка", Тип("Строка"));
	
КонецПроцедуры


// Выполняет контроль заполнения строки данных табличного документа
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ для контроля
//  НомерСтроки - Число - номер строки табличного документа
//  ТаблицаСсылкаПредставление - ТаблицаЗначений - таблица соответствия представлений и ссылок
//
// Возвращаемое значение:
//  Структура - структура с результатами контроля:
//   * ДанныеСтроки - Структура - структура с загружаемыми данными
//   * КоличествоОшибок - Число - количество обнаруженных ошибок
//
&НаСервере
Функция КонтрольЗаполненияСтрокиСОшибками(ТабличныйДокумент, НомерСтроки,
		ТаблицаСсылкаПредставление)
	
	ТекущаяСтрока = Новый Структура;
	КоличествоОшибок = 0; // Пока не реализована логика подсчета ошибок
	
	Если НЕ МожноОбрабатыватьСтроку(ТабличныйДокумент, НомерСтроки) Тогда
		Возврат Новый Структура("ДанныеСтроки, КоличествоОшибок", ТекущаяСтрока, КоличествоОшибок);
	КонецЕсли;
	
	ОбработатьКолонкиСтроки(НомерСтроки, ТабличныйДокумент, ТаблицаСсылкаПредставление, ТекущаяСтрока);
	
	Если НЕ ОбязательныеПоляЗаполнены(ТекущаяСтрока) Тогда
		ТекущаяСтрока = Новый Структура;
	КонецЕсли;
	
	Возврат Новый Структура("ДанныеСтроки, КоличествоОшибок", ТекущаяСтрока, КоличествоОшибок);
	
КонецФункции

// Обрабатывает колонки с данными для строки табличного документа
//
// Параметры:
//  НомерСтроки - Число - номер строки табличного документа
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ
//  ТаблицаСсылкаПредставление - ТаблицаЗначений - таблица соответствий
//  ТекущаяСтрока - Структура - структура для заполнения (передается по ссылке)
//
&НаСервере
Процедура ОбработатьКолонкиСтроки(НомерСтроки, ТабличныйДокумент, ТаблицаСсылкаПредставление, ТекущаяСтрока)
	
	Колонки = Объект.ДополнительныеСвойства.Колонки;
	ДатыКлючи = ПолучитьМассивКлючейДат();
	
	Для Каждого КлючИЗначение Из Колонки Цикл
		Колонка = КлючИЗначение.Значение;
		
		Если ОбработатьСпециальнуюКолонку(КлючИЗначение, Колонка, ТекущаяСтрока, ДатыКлючи) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработатьОбычнуюКолонку(НомерСтроки, ТабличныйДокумент, КлючИЗначение, Колонка,
			ТаблицаСсылкаПредставление, ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает обычную колонку с данными
//
// Параметры:
//  НомерСтроки - Число - номер строки табличного документа
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ
//  КлючИЗначение - КлючИЗначение - ключ и значение колонки
//  Колонка - Структура - данные колонки
//  ТаблицаСсылкаПредставление - ТаблицаЗначений - таблица соответствий
//  ТекущаяСтрока - Структура - структура для заполнения (передается по ссылке)
//
&НаСервере
Процедура ОбработатьОбычнуюКолонку(НомерСтроки, ТабличныйДокумент, КлючИЗначение, Колонка,
		ТаблицаСсылкаПредставление, ТекущаяСтрока)
	
	Если НЕ (Колонка.НомерКолонки > 0 И Колонка.Пометка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗаполнения = ПолучитьТекстЗаполненияИзЯчейки(ТабличныйДокумент, НомерСтроки, Колонка);
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьЗначениеКолонки(КлючИЗначение, ТекстЗаполнения, ТаблицаСсылкаПредставление, ТекущаяСтрока, Колонка);
	
КонецПроцедуры

// Выполняет контроль заполнения строки данных табличного документа
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ для контроля
//  НомерСтроки - Число - номер строки табличного документа
//  ТаблицаСсылкаПредставление - ТаблицаЗначений - таблица соответствия представлений и ссылок
//
// Возвращаемое значение:
//  Структура - структура с загружаемыми данными
//
&НаСервере
Функция КонтрольЗаполненияСтроки(ТабличныйДокумент, НомерСтроки, ТаблицаСсылкаПредставление)
	
	РезультатКонтроля = КонтрольЗаполненияСтрокиСОшибками(ТабличныйДокумент, НомерСтроки,
			ТаблицаСсылкаПредставление);
	
	Возврат РезультатКонтроля.ДанныеСтроки;
	
КонецФункции

// Обновить данные табличного документа сервер.
&НаСервере
Процедура ОбновитьДанныеТабличногоДокументаСервер()
	
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруКолонок();
	СформироватьШапкуТабличногоДокумента(ТабличныйДокумент);
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры



// Проверяет заполненность обязательных полей в структуре данных
//
// Параметры:
//  ТекущаяСтрока - Структура - структура с данными для проверки
//
// Возвращаемое значение:
//  Булево - Истина, если все обязательные поля заполнены
//
&НаСервере
Функция ОбязательныеПоляЗаполнены(ТекущаяСтрока)
	
	Возврат ТекущаяСтрока.Свойство("ТранспортноеСредство")
		И ЗначениеЗаполнено(ТекущаяСтрока.ТранспортноеСредство)
		И ТекущаяСтрока.Свойство("ЗначениеПоказателя")
		И ЗначениеЗаполнено(ТекущаяСтрока.ЗначениеПоказателя);
	
КонецФункции

// Подготавливает объект к записи, устанавливая режим обмена данными
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект, РегистрСведенийНаборЗаписей - объект для подготовки
//
&НаСервереБезКонтекста
Процедура ПодготовитьОбъектКЗаписи(Объект)
	
	ТипЗначения = ТипЗнч(Объект);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Объект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запись объекта с обработкой ошибок
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект, РегистрСведенийНаборЗаписей - объект для записи
//  Отказ - Булево - признак отказа (передается по ссылке)
//  ОписаниеОшибки - Строка - описание ошибки (передается по ссылке)
//
&НаСервереБезКонтекста
Процедура ВыполнитьЗаписьОбъекта(Объект, Отказ, ОписаниеОшибки)
	
	Если НЕ Отказ Тогда
		Попытка
			Объект.Записать();
		Исключение
			Отказ = Истина;
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Загрузка внешних проб.Ошибка записи объекта",
				УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Функция записывает объект в информационную базу данных, используя
// события определенные пользователем в форме редактирования событий
//
// Параметры:
//  Объект             - СправочникОбъект, ДокументОбъект, РегистрСведенийНаборЗаписей - записываемый объект
//  ПередЗаписьюОбъекта - Строка - текст процедуры, выполняемой перед записью объекта
//  ПриЗаписиОбъекта    - Строка - текст процедуры, выполняемой при записи объекта
//  ТекстыЯчеек        - Массив, Неопределено - массив текстов ячеек загружаемой строки
//
// Возвращаемое значение:
//  Булево - Истина, если объект записан, Ложь - иначе
//
&НаСервереБезКонтекста
Функция ЗаписатьОбъект(Объект, ПередЗаписьюОбъекта, ПриЗаписиОбъекта, ТекстыЯчеек = Неопределено)
	
	ПодготовитьОбъектКЗаписи(Объект);
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	
	НачатьТранзакцию();
	
	Попытка
		Попытка
			ВыполнитьЗаписьОбъекта(Объект, Отказ, ОписаниеОшибки);
			
			Если Отказ Тогда
				ВызватьИсключение ОписаниеОшибки;
			КонецЕсли;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Загрузка внешних проб.Ошибка транзакции",
				УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
			ВызватьИсключение;
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("Загрузка внешних проб.Критическая ошибка записи",
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		мСообщитьОбОшибке(ОписаниеОшибки);
		Отказ = Истина;
	КонецПопытки;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаСервере
Функция ОбработатьСпециальнуюКолонку(КлючИЗначение, Колонка, ТекущаяСтрока, ДатыКлючи)
	
	РезультатОбработки = Ложь;
	
	Если КлючИЗначение.Ключ = "Комментарий" Тогда
		ТекущаяСтрока.Вставить(Колонка.ИмяРеквизита, Объект.Комментарий);
		РезультатОбработки = Истина;
		
	ИначеЕсли ДатыКлючи.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
		ТекущаяСтрока.Вставить(Колонка.ИмяРеквизита, Объект.ДатаПробы);
		РезультатОбработки = Истина;
		
	ИначеЕсли КлючИЗначение.Ключ = "Показатель" Тогда
		ТекущаяСтрока.Вставить(Колонка.ИмяРеквизита, Объект.Показатель);
		РезультатОбработки = Истина;
		
	ИначеЕсли КлючИЗначение.Ключ = "Ответственный" Тогда
		ТекущаяСтрока.Вставить(Колонка.ИмяРеквизита, Пользователи.ТекущийПользователь());
		РезультатОбработки = Истина;
	Иначе
		// Колонка не является специальной
		РезультатОбработки = Ложь;
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Обрабатывает тип реквизита для поиска возможных значений
//
// Параметры:
//  ТипРеквизита - Тип - тип реквизита для обработки
//  Представление - Строка - представление для поиска
//  Колонка - Структура - данные колонки
//  ТаблицаСсылкаПредставление - ТаблицаЗначений - таблица соответствий
//  НайденныеЗначения - Массив - массив для добавления найденных значений (передается по ссылке)
//  Примечание - Строка - текст примечания (передается по ссылке)
//
&НаСервере
Процедура ОбработатьТипРеквизита(ТипРеквизита, Представление, Колонка,
		ТаблицаСсылкаПредставление, НайденныеЗначения, Примечание)
	
	КонстантыМодуля = КонстантыОбработки();
	ПримитивныеТипы = Объект.ДополнительныеСвойства[КонстантыМодуля.КлючПримитивныеТипы];
	
	Если ТипРеквизита = ПримитивныеТипы.Число Тогда
		РезультатПреобразования = ПривестиКЧислу(Представление, Колонка.ОписаниеТипов, Примечание);
		НайденныеЗначения.Добавить(РезультатПреобразования);
		
	ИначеЕсли ТипРеквизита = ПримитивныеТипы.Строка Тогда
		НайденныеЗначения.Добавить(Представление);
		
	Иначе
		ОбработатьСложныйТип(ТипРеквизита, Представление, Колонка,
			ТаблицаСсылкаПредставление, НайденныеЗначения, Примечание);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие данных в строке табличного документа
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ для проверки
//  НомерСтроки - Число - номер строки для проверки
//
// Возвращаемое значение:
//  Булево - Истина, если в строке есть данные
//
&НаСервере
Функция ЕстьДанныеВСтроке(ТабличныйДокумент, НомерСтроки)
	
	Колонки = Объект.ДополнительныеСвойства.Колонки;
	ЕстьДанные = Ложь;
	
	Для Каждого КлючИЗначение Из Колонки Цикл
		Колонка = КлючИЗначение.Значение;
		
		Если Колонка.НомерКолонки > 0 И Колонка.Пометка Тогда
			ИмяОбласти = СтрШаблон("R%1C%2", НомерСтроки, Колонка.НомерКолонки);
			ТекстЗаполнения = СокрЛП(ТабличныйДокумент.Область(ИмяОбласти).Текст);
			
			Если ЗначениеЗаполнено(ТекстЗаполнения) Тогда
				ЕстьДанные = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьДанные;
	
КонецФункции

// Обрабатывает транспортное средство из текста заполнения для контроля заполнения
//
// Параметры:
//  ТекстЗаполнения - Строка - текст из ячейки
//  ТаблицаСсылкаПредставление - ТаблицаЗначений - таблица соответствий
//  ТекущаяСтрока - Структура - строка для заполнения (передается по ссылке)
//  Колонка - Структура - данные колонки
//
&НаСервере
Процедура ОбработатьТранспортноеСредствоДляКонтроля(ТекстЗаполнения, ТаблицаСсылкаПредставление,
		ТекущаяСтрока, Колонка)
	
	Примечание = "";
	
	НайденныеЗначения = ПолучитьВозможныеЗначения(
			Колонка,
			ТекстЗаполнения,
			Примечание,
			ТекущаяСтрока,
			ТаблицаСсылкаПредставление);
	
	Если НайденныеЗначения.Количество() = 1 Тогда
		ТекущаяСтрока.Вставить(Колонка.ИмяРеквизита, НайденныеЗначения[0]);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает значение показателя из текста заполнения для контроля заполнения
//
// Параметры:
//  ТекстЗаполнения - Строка - текст из ячейки
//  ТекущаяСтрока - Структура - строка для заполнения (передается по ссылке)
//  Колонка - Структура - данные колонки
//
&НаСервере
Процедура ОбработатьЗначениеПоказателяДляКонтроля(ТекстЗаполнения, ТекущаяСтрока, Колонка)
	
	Примечание = "";
	
	ЧисловоеЗначение = ПривестиКЧислу(ТекстЗаполнения, Колонка.ОписаниеТипов, Примечание);
	
	Если ПустаяСтрока(Примечание) Тогда
		ТекущаяСтрока.Вставить(Колонка.ИмяРеквизита, ЧисловоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщение об ошибке с записью в журнал регистрации
//
// Параметры:
//  ТекстОшибки - Строка - текст ошибки
//
&НаСервереБезКонтекста
Процедура мСообщитьОбОшибке(ТекстОшибки)
	
	ЗаписьЖурналаРегистрации("Загрузка внешних проб.Ошибка",
		УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	
	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = ТекстОшибки;
	СообщениеПользователю.Важность = СтатусСообщения.Важное;
	СообщениеПользователю.Сообщить();
	
КонецПроцедуры


// Проверяет возможность обработки строки табличного документа
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ
//  НомерСтроки - Число - номер строки
//
// Возвращаемое значение:
//  Булево - Истина, если строку можно обрабатывать
//
&НаСервере
Функция МожноОбрабатыватьСтроку(ТабличныйДокумент, НомерСтроки)
	
	Возврат ЗначениеЗаполнено(Объект.Показатель)
		И ЗначениеЗаполнено(Объект.ДатаПробы)
		И ЕстьДанныеВСтроке(ТабличныйДокумент, НомерСтроки);
	
КонецФункции

// Получает текст заполнения из ячейки табличного документа
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ
//  НомерСтроки - Число - номер строки
//  Колонка - Структура - данные колонки
//
// Возвращаемое значение:
//  Строка - текст заполнения из ячейки
//
&НаСервере
Функция ПолучитьТекстЗаполненияИзЯчейки(ТабличныйДокумент, НомерСтроки, Колонка)
	
	ИмяОбласти = СтрШаблон("R%1C%2", НомерСтроки, Колонка.НомерКолонки);
	Возврат СокрЛП(ТабличныйДокумент.Область(ИмяОбласти).Текст);
	
КонецФункции

// Обрабатывает значение колонки в зависимости от её типа
//
// Параметры:
//  КлючИЗначение - КлючИЗначение - ключ и значение колонки
//  ТекстЗаполнения - Строка - текст из ячейки
//  ТаблицаСсылкаПредставление - ТаблицаЗначений - таблица соответствий
//  ТекущаяСтрока - Структура - структура для заполнения (передается по ссылке)
//  Колонка - Структура - данные колонки
//
&НаСервере
Процедура ОбработатьЗначениеКолонки(КлючИЗначение, ТекстЗаполнения, ТаблицаСсылкаПредставление, ТекущаяСтрока, Колонка)
	
	Если КлючИЗначение.Ключ = "ТранспортноеСредство" Тогда
		ОбработатьТранспортноеСредствоДляКонтроля(ТекстЗаполнения, ТаблицаСсылкаПредставление,
			ТекущаяСтрока, Колонка);
	ИначеЕсли КлючИЗначение.Ключ = "ЗначениеПоказателя" Тогда
		ОбработатьЗначениеПоказателяДляКонтроля(ТекстЗаполнения, ТекущаяСтрока, Колонка);
	Иначе
		// Для остальных типов - простое присвоение
		ТекущаяСтрока.Вставить(Колонка.ИмяРеквизита, ТекстЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

// Получает массив ключей дат для проверки
//
// Возвращаемое значение:
//  Массив - массив ключей дат
//
&НаСервере
Функция ПолучитьМассивКлючейДат()
	
	ДатыКлючи = Новый Массив;
	ДатыКлючи.Добавить("Период");
	ДатыКлючи.Добавить("ДатаИзменения");
	ДатыКлючи.Добавить("ДатаПогрузки");
	ДатыКлючи.Добавить("ДатаПробы");
	
	Возврат ДатыКлючи;
	
КонецФункции

#КонецОбласти
#КонецОбласти

