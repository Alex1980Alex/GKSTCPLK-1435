///////////////////////////////////////////////////////////////////////////////////////
//
// Сервер удаленного вызова процедур (RPC)
// Принцип работы как у обычного асинхронного API.
// Клиент вызывает метод и указывает callback-queue (очередь, в которую поместить ответ)
//
// Любые ошибки внутри сервиса отправляются клиенту в виде исключения (чтобы понимал, что вызов не состоялся)
// Вызов приведший к ошибке всегда отклоняется (BasicReject) и не ставится в очередь.
// Принять решение о необходимости повторного вызова должен клиент.
//
//////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение Тогда

#Область ОписаниеПеременных

Перем мИмяСервиса;
Перем мМетоды;

Перем Клиент;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура УстановитьИмяСервиса(Знач ИмяСервиса) Экспорт

	мИмяСервиса = ИмяСервиса;

КонецПроцедуры

Процедура ДобавитьМетод(Знач ИмяМетода, Знач ИмяОбработчика) Экспорт

	мМетоды.Вставить(ИмяМетода, ИмяОбработчика);

КонецПроцедуры

Процедура СлушатьВызовы(Знач Таймаут = -1, Знач ЧастотаПульса = Неопределено) Экспорт

	Если мМетоды.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определен ни один метод'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(мИмяСервиса) Тогда
		ВызватьИсключение НСтр("ru = 'Не определено имя сервиса'");
	КонецЕсли;

	ОчередьСообщений.ОпределитьПульс(ЧастотаПульса, Цел(Таймаут/1000));
	ПодготовитьКлиентRMQ(ЧастотаПульса);

	ЗаписьЖурналаРегистрации("АсинхронныйСервис.Старт",УровеньЖурналаРегистрации.Информация,,,
		СтрШаблон(НСтр("ru = 'Сервис %1 запущен.'"), мИмяСервиса));
		
	Попытка
		ОбрабатыватьВызовы(Таймаут);
	Исключение
		Клиент = Неопределено;
		ЗаписьЖурналаРегистрации("АсинхронныйСервис.КритичнаяОшибка",УровеньЖурналаРегистрации.Ошибка,,,
			ОписаниеОшибки());
	КонецПопытки;
	
	ЗаписьЖурналаРегистрации("АсинхронныйСервис.Стоп",УровеньЖурналаРегистрации.Информация,,,
		СтрШаблон(НСтр("ru = 'Сервис %1 остановлен.'"), мИмяСервиса));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбрабатыватьВызовы(Знач Таймаут)
	
	Данные = "";
	Пока Клиент.ПолучитьСообщение(КлючПотребителя(), Данные, Таймаут) Цикл
		
		НачалоЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Попытка
			Квитанция = СоздатьКвитанциюВызова(Данные);
		Исключение
			Клиент.ОтклонитьСообщение();
			
			ЗаписьЖурналаРегистрации("АсинхронныйСервис.НеверныйФормат", 
				УровеньЖурналаРегистрации.Ошибка,,,
				НСтр(СтрШаблон("ru = 'Не удалось прочитать текст сообщения: %1
				|%2'",Данные, ОписаниеОшибки())));
			Продолжить;
		КонецПопытки;
		
		Ответ = ВызватьМетод(Квитанция);
		
		ДобавитьЗапросВЛог(Данные, Квитанция, Ответ, НачалоЗапроса);		
				
		ОтправитьОтвет(Квитанция, Ответ);
		
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьЗапросВЛог(Данные, Квитанция, Ответ, НачалоЗапроса)
	
	ЗаписьЛога = Новый Структура;
			
	ЗаписьЛога.Вставить("Ответ", Ответ);
	ЗаписьЛога.Вставить("Запрос", Данные);
	ЗаписьЛога.Вставить("Метод", Квитанция.Метод);
	ЗаписьЛога.Вставить("ИмяСервиса", мИмяСервиса);
	ЗаписьЛога.Вставить("Длительность", (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗапроса) / 1000);
	
	гкс_АсинхронныеСервисыВызовСервера.ЗаписатьВЛог(ЗаписьЛога);
	
КонецПроцедуры

Функция СоздатьКвитанциюВызова(Знач Данные)
	
	ВходящийВызов = ДесериализоватьСообщение(Данные);
	
	Квитанция = Новый Структура;
	Квитанция.Вставить("Метод", ВходящийВызов.method);
	Квитанция.Вставить("Параметры", Неопределено);
	ВходящийВызов.Свойство("params", Квитанция.Параметры);
	
	Если ВерсияПротоколаRPC = 1 Тогда
		Квитанция.Вставить("Ключ"         , ВходящийВызов.id);
		Квитанция.Вставить("ОбратныйАдрес", ВходящийВызов.reply_to);
	Иначе
		Свойства = Клиент.ПолучитьСвойстваСообщения("ReplyTo,CorrelationId");
		Квитанция.Вставить("Ключ"         , Свойства.CorrelationId);
		Квитанция.Вставить("ОбратныйАдрес", Свойства.ReplyTo);
	КонецЕсли;
	
	Возврат Квитанция;
	
КонецФункции

Функция КлючПотребителя()

	Возврат "rpc." + мИмяСервиса;

КонецФункции // КлючПотребителя()

Функция ВызватьМетод(Знач Квитанция)
	
	Перем МетодОбработчик;
	
	МетодОбработчик = мМетоды[Квитанция.Метод];
	Если МетодОбработчик = Неопределено Тогда
		Клиент.ОтклонитьСообщение();
		ТекстОшибки = НСтр(СтрШаблон("ru = 'Неизвестное имя метода: %1'", Квитанция.Метод));
		ЗаписьЖурналаРегистрации("АсинхронныйСервис.НеверныйФормат", 
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстОшибки);
			
		Возврат СформироватьОтветИсключение(ТекстОшибки);
	КонецЕсли;
		
	Попытка
		Результат = ОбработатьЗапросКСервису(Квитанция, МетодОбработчик);
		Ответ = СформироватьОтвет(Результат);
		Клиент.ПодтвердитьСообщение();
	Исключение
		Клиент.ОтклонитьСообщение();
		ТекстОшибки = МетодОбработчик + "
				|" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
		ЗаписьЖурналаРегистрации("АсинхронныйСервис.ОшибкаВыполнения", 
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
				
		 Ответ = СформироватьОтветИсключение(ТекстОшибки);
	 КонецПопытки;
	 
	 Возврат Ответ;
	
КонецФункции
 
Функция ОбработатьЗапросКСервису(Квитанция, МетодОбработчик)
	
	МетодОбработчикМассив = гкс_СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(МетодОбработчик);
	Если гкс_ОчередьСообщенийRMQСлужебный.ЭтоОбработчикСоСтандартнымИменемМетода(МетодОбработчикМассив,
		                                                                         "ОбработатьЗапросКСервису") Тогда
		Ответ = ВызватьОбработчикСоСтандартнымИменем(Квитанция, МетодОбработчикМассив);
	Иначе		
		Ответ = ВызватьМетодБезопасно(Квитанция, МетодОбработчик);	
	КонецЕсли;
	
	Возврат Ответ;
	 
КонецФункции

Функция ВызватьОбработчикСоСтандартнымИменем(Квитанция, МетодОбработчикМассив)
	
	КоличествоСлов = МетодОбработчикМассив.Количество();

	ИмяМодуля = "";
	Если КоличествоСлов = 2 Тогда
		ИмяМодуля = МетодОбработчикМассив[0];			 
	ИначеЕсли КоличествоСлов = 3 Тогда
		ИмяМодуля = МетодОбработчикМассив[0] + "." +  МетодОбработчикМассив[1];
	КонецЕсли;
	
	// В подсистеме по умолчанию определен сценарий обработки запросов к сервису. 
	// Он должен иметь возможность выполняться в небезопасном режиме исполнения
	Модуль = гкс_ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	
	Возврат Модуль.ОбработатьЗапросКСервису(Квитанция.Параметры);
		
КонецФункции

Функция ВызватьМетодБезопасно(Квитанция, МетодОбработчик)
	
	УстановитьБезопасныйРежим(Истина);
	СтрокаВызова = МетодОбработчик + "(Квитанция.Параметры)";
	
	Возврат Вычислить(СтрокаВызова);
	
КонецФункции

Функция СформироватьОтвет(Результат)
	Возврат Новый ФиксированнаяСтруктура(Новый Структура("status, value", "ok", Результат));
КонецФункции

Функция СформироватьОтветИсключение(ТекстОшибки)
	Возврат Новый ФиксированнаяСтруктура(Новый Структура("status, value","error", ТекстОшибки));
КонецФункции

Процедура ОтправитьОтвет(Знач Квитанция, Знач Ответ)
	
	Если Не ЗначениеЗаполнено(Квитанция.ОбратныйАдрес) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("id", Квитанция.Ключ);
	СтруктураОтвета.Вставить("result", Ответ);
	
	Попытка
		ДанныеОтвета = Обработки.АсинхронныйСервис.ЗаписатьСообщениеОбмена(СтруктураОтвета);
		Клиент.ОтправитьСообщение(Квитанция.ОбратныйАдрес, ДанныеОтвета); 
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось отправить ответ по адресу %1
                                     |%2'"),
						Квитанция.ОбратныйАдрес,
						ОписаниеОшибки());
		
		ЗаписьЖурналаРегистрации("АсинхронныйСервис.ОшибкаСвязи", 
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПодготовитьКлиентRMQ(Знач ЧастотаПульса)
	
	Инициализация(ЧастотаПульса);
	
	ИмяТочкиДоступа = Обработки.АсинхронныйСервис.ИмяТочкиОбмена(мИмяСервиса);
	ИмяОчереди      = "rpc." + мИмяСервиса;
	
	Клиент.ОбъявитьТочкуОбмена(ИмяТочкиДоступа, "direct",,Истина);
	Клиент.ОбъявитьОчередь(ИмяОчереди,,,,Истина);
	Клиент.УстановитьСвязьОчереди(ИмяОчереди, ИмяТочкиДоступа);
	Клиент.НачатьЧтение(ИмяОчереди, КлючПотребителя(), Ложь);

КонецПроцедуры

Функция ДесериализоватьСообщение(Знач Данные)

	ОбъектДанных = Обработки.АсинхронныйСервис.ПрочитатьСообщениеОбмена(Данные);
	
	Если Не ОбъектДанных.Свойство("method") Тогда
		ВызватьИсключение НСтр("ru = 'Неверный формат данных запроса'");
	КонецЕсли;
	
	Возврат ОбъектДанных;

КонецФункции // ДесериализоватьСообщение()

// Замена конструктора
//
Процедура Инициализация(Знач ЧастотаПульса)

	Если Клиент = Неопределено Тогда
		Клиент = ОчередьСообщений.ПолучитьЭкземплярКомпоненты(ЭтотОбъект.КлючСоединения, ЧастотаПульса);
	КонецЕсли;

КонецПроцедуры

// Возвращает клиент очереди сообщений для тонкой настройки канала.
//
// Возвращаемое значение:
//   ОбработкаОбъект.КлиентОчередиСообщений
//
Функция ИспользуемыйКлиент() Экспорт

	Возврат Клиент;

КонецФункции // ИспользуемыйКлиент()

#КонецОбласти

#Область Инициализация

мМетоды = Новый Соответствие;
ВерсияПротоколаRPC = АсинхронныеСервисыПереопределяемый.ВерсияПротоколаRPCПоУмолчанию();

#КонецОбласти

#Иначе	
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте'");
#КонецЕсли
