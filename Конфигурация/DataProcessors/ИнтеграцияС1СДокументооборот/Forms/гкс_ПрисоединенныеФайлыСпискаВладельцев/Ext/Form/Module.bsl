#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ВладельцыФайлов") Тогда
		Для Каждого ТекСтрока Из Параметры.ВладельцыФайлов Цикл
			ЗаполнитьЗначенияСвойств(ВладельцыФайловСпецификации.Добавить(),
			ТекСтрока);
			ИнициализироватьИдентификациюФайловПоИД(ТекСтрока.Документ); 
		КонецЦикла;
	КонецЕсли;
	
	Параметры.Свойство("Источник", Источник);
	Параметры.Свойство("СохранитьИнформациюОбОтправке", СохранитьИнформациюОбОтправке);
	Параметры.Свойство("ЭтоПисьмоЗапрос", ЭтоПисьмоЗапрос);
	Элементы.ФайлыСпецификация.Видимость = Не ЭтоПисьмоЗапрос;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОжидаетсяПодключение;
	
	Заголовок	= "Список присоединенных файлов";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьПодключение();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияНастройкиАвторизацииНажатиеЗавершение", ЭтаФорма);
	ИмяФормыПараметров = "Обработка.ИнтеграцияС1СДокументооборот.Форма.АвторизацияВ1СДокументооборот";
	 
	ОткрытьФорму(ИмяФормыПараметров, , ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область ОбработкаКоманд

&НаКлиенте
Процедура ОтправитьПоEmail(Команда)
	
	МассивФайлов	= Новый Массив;
	
	Для Каждого ТекФайл Из Элементы.Файлы.ВыделенныеСтроки Цикл
		СтрокаФайла	= Файлы.НайтиПоИдентификатору(ТекФайл);
		МассивФайлов.Добавить(
		Новый Структура("Идентификатор, Имя, Расширение",
		СтрокаФайла.ID, СтрокаФайла.Наименование, СтрокаФайла.Расширение));
	КонецЦикла;
	
	Если МассивФайлов.Количество() > 0 Тогда 
		ИнтеграцияС1СДокументооборотКлиент.ПолучитьФайлыИПродолжить(МассивФайлов,
		УникальныйИдентификатор, Новый ОписаниеОповещения("ОтправитьПоEmail_ПолученыФайлы", ЭтаФорма), Истина);
	ИначеЕсли ЭтоПисьмоЗапрос Тогда
		ПараметрМассив = Новый Массив;
		ОтправитьПоEmail_ПолученыФайлы(ПараметрМассив, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНаЧтение(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьФайл(ТекущиеДанные.ID, ТекущиеДанные.Наименование,
			ТекущиеДанные.Расширение, УникальныйИдентификатор, Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.';
										|en = 'Printing of files is not supported in the web client.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
		И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.';
											|en = 'Printing files is available only in Windows.'"));
			Возврат;
	КонецЕсли;
		
	ОписанияФайлов = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Файлы.ВыделенныеСтроки Цикл
		
		СтрокаФайла = Файлы.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Идентификатор", СтрокаФайла.ID);
		ОписаниеФайла.Вставить("Имя", СтрокаФайла.Наименование);
		ОписаниеФайла.Вставить("Расширение", СтрокаФайла.Расширение);
		
		ОписанияФайлов.Добавить(ОписаниеФайла);
		
	КонецЦикла;
	
	ИнтеграцияС1СДокументооборотКлиент.НапечататьФайлы(ОписанияФайлов, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаДиск(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.НачатьСохранениеВыделенныхФайлов(Файлы,
		Элементы.Файлы.ВыделенныеСтроки,
		УникальныйИдентификатор);
		
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьПараметрыСообщения()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	АдресОтвета = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		ТекущийПользователь, 
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	ПараметрыСообщения	= Новый Структура;
	ПараметрыСообщения.Вставить("АдресОтвета", АдресОтвета);
	ПараметрыСообщения.Вставить("Тема", ?(ЭтоПисьмоЗапрос, "Запрос коммерческого предложения", "Файлы спецификаций"));
	
	Отправитель = ПолучитьУчетнуюЗаписьЭлектроннойПочты(ТекущийПользователь);
	ПараметрыСообщения.Вставить("Отправитель", Отправитель);

	ПараметрыСообщения.Вставить("Предмет", Источник);
	Получатели	= Новый СписокЗначений;
	Получатели.Добавить("", "");
	ПараметрыСообщения.Вставить("Получатель", Получатели);
	
	ПараметрыСообщения.Вставить("СохранитьИнформациюОбОтправке", СохранитьИнформациюОбОтправке);
	Если ЭтоПисьмоЗапрос Тогда 
		ПараметрыСообщения.Вставить("гкс_ОтправлятьПисьмаРаздельно", Истина);
	КонецЕсли;
	
	Возврат ПараметрыСообщения;
	
КонецФункции

&НаСервере
Функция ПолучитьУчетнуюЗаписьЭлектроннойПочты(ТекПользователь)
	
	Отправитель = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	
	Если ЗначениеЗаполнено(ТекПользователь) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочты.ВладелецУчетнойЗаписи = &ТекПользователь";
		Запрос.УстановитьПараметр("ТекПользователь", ТекПользователь);
		Выборка = Запрос.Выполнить().Выбрать();		
		Пока Выборка.Следующий() Цикл		
			Отправитель = Выборка.Ссылка;			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Отправитель;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПоEmail_ПолученыФайлы(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		
		ПараметрыФормы	= ПолучитьПараметрыСообщения();
		ПараметрыФормы.Вставить("Вложения", Новый Массив);
		
		Для Каждого ТекСтрока Из Результат Цикл
			ДвоичныеДанныеФайла	= Новый ДвоичныеДанные(ТекСтрока);
			
			МассивПути	= СтрРазделить(ТекСтрока, "\");
			ИмяФайла	= МассивПути[МассивПути.Количество() - 1];
			
			ПараметрыФормы.Вложения.Добавить(
				Новый Структура("Представление, АдресВоВременномХранилище", 
					ИмяФайла, ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор)));
			
		КонецЦикла;
		
		МодульШаблоныСообщенийКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШаблоныСообщенийКлиент");
		Оповещение = Новый ОписаниеОповещения("ОтправитьПоEmail_ОткрытьФормуОтправки", ЭтаФорма, ПараметрыФормы);
		ПредметСообщения = ?(ЗначениеЗаполнено(Источник), Источник, "Общий");
		МодульШаблоныСообщенийКлиент.ПодготовитьСообщениеПоШаблону(ПредметСообщения, "Письмо", Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоEmail_ОткрытьФормуОтправки(РезультатФормированияСообщения, ПараметрыФормы) Экспорт
	
	Если НЕ РезультатФормированияСообщения = Неопределено Тогда
		ПараметрыФормы.Вставить("Тема", РезультатФормированияСообщения.Тема);
		ПараметрыФормы.Вставить("Текст", РезультатФормированияСообщения.Текст);
		Для Каждого ТекВложение Из РезультатФормированияСообщения.Вложения Цикл
			ПараметрыФормы.Вложения.Добавить(ТекВложение);
		КонецЦикла;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ОтправкаСообщения", ПараметрыФормы, ЭтаФорма, , , , , 
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Проверяет подключение к ДО, выводя окно авторизации, если необходимо, и изменяя форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьПодключениеЗавершение", ЭтотОбъект, Неопределено);
	ИнтеграцияС1СДокументооборотКлиент.ПроверитьПодключение(
		ОписаниеОповещения, ЭтотОбъект, "ПроверитьПодключение");
	
КонецПроцедуры

// Вызывается после проверки подключения к ДО и изменяет форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, Параметры) Экспорт
	
	ОбработатьФормуСогласноВерсииСервиса();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьИОбновитьСписокФайлов(ID, Тип)
	
	Если Не ЗначениеЗаполнено(ID) Тогда
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	ОбъектИд = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ID, Тип);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
	Запрос.objectIds.Добавить(ОбъектИд);
	Запрос.columnSet.Добавить("files");
	
	Если Тип = "DMInternalDocument"
		Или Тип = "DMIncomingDocument"
		Или Тип = "DMOutgoingDocument" Тогда
		Запрос.columnSet.Добавить("enabledProperties");
	КонецЕсли;
	
	Результат = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	ОбъектXDTO = Результат.objects[0];
	ИнтеграцияС1СДокументооборотВызовСервера.ОбновитьСписокФайлов(ОбъектXDTO.files, Файлы);
	
КонецПроцедуры

// Изменяет форму согласно доступности сервиса ДО и номеру его версии.
//
&НаСервере
Процедура ОбработатьФормуСогласноВерсииСервиса()
	
	ТаблицаФайлов	= РеквизитФормыВЗначение("Файлы");
	ТаблицаФайлов.Очистить();
	
	Файлы.Очистить();
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборот.ВерсияСервиса();
	
	Если ПустаяСтрока(ВерсияСервиса) Тогда // идет подключение
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОжидаетсяПодключение;
		Элементы.СтраницаОжидаетсяПодключение.Видимость = Истина;
		
	Иначе // версия известна
		
		Если ВерсияСервиса = "0.0.0.0" Тогда
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДокументооборотНедоступен;
			Элементы.СтраницаОжидаетсяПодключение.Видимость = Ложь;
			
		Иначе
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДокументооборотДоступен;
			
			Для Каждого ТекЭлемент Из ВладельцыФайловСпецификации Цикл
				
				Файлы.Очистить();
				
				Владелец	= ТекЭлемент.Документ;
				
				ВернутьсяВНачалоЦикла = Ложь;
				ПолучитьФайлыПоВладельцу(Владелец, ВернутьсяВНачалоЦикла);
				Если ВернутьсяВНачалоЦикла Тогда
					Продолжить;
				КонецЕсли;
				
				ОбработатьФайлы(Файлы, ТекЭлемент, ТаблицаФайлов);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТаблицаФайлов, "Файлы");
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьФайлы(Файлы, ТекЭлемент, ТаблицаФайлов)
	
	Для Каждого ТекСтрока Из Файлы Цикл
		НоваяСтрока	= ТаблицаФайлов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.Спецификация = ТекЭлемент.Спецификация;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет инициализацию фалов владельца.
//
&НаСервере
Процедура ПолучитьФайлыПоВладельцу(Владелец, ВернутьсяВНачалоЦикла)
	
	Если ИдентификацияФайловПоИД Тогда
		ID	= Строка(Владелец.УникальныйИдентификатор());
		Тип = Владелец.Метаданные().ПолноеИмя();
		Если Не ЗначениеЗаполнено(ID) Тогда
			ВернутьсяВНачалоЦикла = Истина;
			Возврат;
		КонецЕсли;
		ОбъектXDTO = ИнтеграцияС1СДокументооборотВызовСервера.ФайлыПоОбъектуПотребителю(ID, "", Тип);					
		ИнтеграцияС1СДокументооборотВызовСервера.ОбновитьСписокФайлов(ОбъектXDTO.files, Файлы);
	Иначе				
		ДанныеОбъектаДО = ИнтеграцияС1СДокументооборотВызовСервера.
			ДанныеОбъектаДОПоВнешнемуОбъекту(Владелец);
		Если ДанныеОбъектаДО <> Неопределено Тогда
			ID = ДанныеОбъектаДО.id;
			Тип = ДанныеОбъектаДО.type;
			ОбъектИС = РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.
				СсылкаНаОбъектПоДаннымДокументооборота(ID, Тип);
			Если ОбъектИС = Неопределено Тогда
				РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.ДобавитьСвязь(ID, Тип, Владелец);
			КонецЕсли;
		Иначе
			ID = "";
			Тип = "";
		КонецЕсли;
		
		ПрочитатьИОбновитьСписокФайлов(ID, Тип);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет инициализацию фалов владельца.
//
&НаСервере
Процедура ИнициализироватьИдентификациюФайловПоИД(Владелец)
	
	Если Метаданные.ОпределяемыеТипы.гкс_ИнтеграцияС1СДокументоборотСсылкиПрисоединенныеФайлы.Тип.СодержитТип(
		ТипЗнч(Владелец)) И Не ИдентификацияФайловПоИД Тогда
		
		ИдентификацияФайловПоИД	= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти