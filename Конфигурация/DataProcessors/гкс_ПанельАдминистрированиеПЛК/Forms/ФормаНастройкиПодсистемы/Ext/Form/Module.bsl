
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьИнтеграциюСWarehouseПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьДокументыПриемкиИРегистрацииНаПЛК(Команда)
	ОткрытьФорму("РегистрСведений.гкс_СвязьРегистрацииИТранспортногоДокумента.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонтрольПревышенияВесаБрутто(Команда)
	ОткрытьФорму("РегистрСведений.гкс_КонтрольПревышенияВесаБрутто.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиПользователейИПриемкиНаПЛК(Команда)
	ОткрытьФорму("РегистрСведений.гкс_НастройкиПользователейПриемкаНаПЛК.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЭлектронногоТабло(Команда)
	ОткрытьФорму("РегистрСведений.гкс_НастройкаЭлектронногоТабло.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиПриемкиПЛК(Команда)
	ОткрытьФорму("РегистрСведений.гкс_НастройкиПриемкаПЛКПоТочкамМаршрута.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлектронныеТабло(Команда)
	ОткрытьФорму("РегистрСведений.гкс_ЭлектронныеТабло.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявкиНаОформлениеПропускаНаАвтотранспорт(Команда)
	ОткрытьФорму("РегистрСведений.гкс_ЗаявкиНаОформлениеПропускаНаАвтотранспорт.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтатусыЗаписейОчередиПЛК(Команда)
	ОткрытьФорму("РегистрСведений.гкс_СтатусыЗаписейВОчередиПриемкиПЛК.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОчередьПриемкиПЛК(Команда)
	 ОткрытьФорму("РегистрСведений.гкс_ОчередьПриемкиПЛК.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКомпозитныеПробы(Команда)
	ОткрытьФорму("РегистрСведений.гкс_КомпозитныеПробы.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЭтикеток(Команда)
	ОткрытьФорму("РегистрСведений.гкс_НастройкиПечатиФормированияПроб.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВнешниеПробы(Команда)
	ОткрытьФорму("РегистрСведений.гкс_ВнешниеПробы.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРСАРМПриемкиНаПЛКСписокРегистраций(Команда)
	ОткрытьФорму("РегистрСведений.гкс_АРМПриемкиНаПЛКСписокРегистраций.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтатусыДопускаВагоновКВскрытию(Команда)
	ОткрытьФорму("РегистрСведений.гкс_СтатусыДопускаВагоновКВскрытию.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияНаПроверкуКачества(Команда)
	ОткрытьФорму("РегистрСведений.гкс_ЗаданияНаПроверкуКачества.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНоменклатуруПЛК(Команда)
	ОткрытьФорму("РегистрСведений.гкс_НоменклатураПЛК.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправочникСчитывателиRFID(Команда)
	
	ОткрытьФорму("Справочник.гкс_СчитывателиUHFRFID.ФормаСписка", 
	             Новый Структура,
				 ЭтотОбъект,
				 ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСмещениеНачалаПроизводственныхСуток(Команда)
	
	ОткрытьФорму("Константа.гкс_СмещениеПроизводственныхСуток.ФормаКонстант", 
	             Новый Структура,
				 ЭтотОбъект,
				 ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	ИмяКонстанты = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если ИмяКонстанты <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, ИмяКонстанты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	ИмяКонстанты = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат ИмяКонстанты;
	
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	ЧастиИмени 				= СтрРазделить(РеквизитПутьКДанным, ".");
	ЧастиИмениКоличество 	= ЧастиИмени.Количество();
	
	КоличествоДва 			= 2;
	Символы9 				= 9;
	Символы10 				= 10;
	
	Если ЧастиИмениКоличество = КоличествоДва Тогда
		КонстантаИмя = ЧастиИмени[1];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
	ИначеЕсли ЧастиИмениКоличество = 1 И НРег(Лев(РеквизитПутьКДанным, Символы9)) = "константа" Тогда
		КонстантаИмя = Сред(РеквизитПутьКДанным, Символы10);
		КонстантаЗначение = ЭтотОбъект[РеквизитПутьКДанным];
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если Константы[КонстантаИмя].Получить() <> КонстантаЗначение Тогда
		Константы[КонстантаИмя].Установить(КонстантаЗначение);
	КонецЕсли;
	
	Если КонстантаИмя = "ИспользоватьДополнительныеРеквизитыИСведения" И КонстантаЗначение = Ложь Тогда
		Прочитать();
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

#КонецОбласти