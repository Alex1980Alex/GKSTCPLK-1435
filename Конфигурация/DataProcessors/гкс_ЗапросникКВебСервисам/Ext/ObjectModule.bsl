#Если ТолстыйКлиентОбычноеПриложение ИЛИ Сервер ИЛИ ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

Перем ПараметрыКоннектораHTTP;
Перем РезультатЗапроса;
Перем МетодСервиса;
Перем ПолныйАдресРесурса;
Перем Ресурс;
Перем НачалоЗамера;
Перем Длительность;
Перем ФиксироватьСобытие;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция Инициализировать(СсылкаНаРесурс, ПараметрыВыполненияЗапроса = Неопределено) Экспорт
	
	Ресурс = СсылкаНаРесурс;
	МетодСервиса = МетодСервиса();
	ПолныйАдресРесурса = ПолныйАдресРесурса();
	ФиксироватьСобытие = ФиксироватьСобытие();
	
	Если НЕ ПараметрыВыполненияЗапроса = Неопределено Тогда
		ЗаполнитьПараметрыКоннектораHTTP(ПараметрыВыполненияЗапроса);
	КонецЕсли;
		
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ВыполнитьЗапрос() Экспорт
	
	НачатьЗамер();
	ВыполнитьЗапросВнутренний(); 
	ЗакончитьЗамер();
	
	ЗафиксироватьСобытиеПриНеобходимости();

	Возврат ЭтотОбъект;
	
КонецФункции

Функция РезультатЗапроса() Экспорт
	Возврат РезультатЗапроса;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФиксацияСобытийВебСервисов

Процедура НачатьЗамер()
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
КонецПроцедуры

Процедура ЗакончитьЗамер()
	Длительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
КонецПроцедуры

Функция ФиксироватьСобытие()
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ресурс, "Логировать");
КонецФункции

Процедура ЗафиксироватьСобытиеПриНеобходимости()
	
	Если НЕ ФиксироватьСобытие Тогда
		Возврат;
	КонецЕсли;
	
	СобытиеЛога = гкс_РаботаСВебСервисами.СобытиеЛога(Ресурс);
	СобытиеЛога.КодСостояния = РезультатЗапроса.КодСостояния;
	СобытиеЛога.Длительность = Длительность;
	
	ЗаголовокContentType = КоннекторHTTP.ЗначениеЗаголовка("content-type", РезультатЗапроса.Заголовки);
	Если ЗаголовокContentType = Ложь Тогда
		ЗаголовокContentType = "";
	КонецЕсли;
	СобытиеЛога.ТипСодержимого = ЗаголовокContentType;
	
	ТипаПараметраДанные = ТипЗнч(ПараметрыКоннектораHTTP.Данные);
	Если РезультатЗапроса.Свойство("ТелоЗапроса") Тогда
		СобытиеЛога.ХранилищеЗапроса = Новый ХранилищеЗначения(РезультатЗапроса.ТелоЗапроса, Новый СжатиеДанных(9));
	ИначеЕсли ТипаПараметраДанные = Тип("Строка") Тогда 
		СобытиеЛога.ХранилищеЗапроса = Новый ХранилищеЗначения(ПараметрыКоннектораHTTP.Данные, Новый СжатиеДанных(9));
	ИначеЕсли ТипаПараметраДанные = Тип("ДвоичныеДанные") Тогда
		СобытиеЛога.ХранилищеЗапроса = 
		 	Новый ХранилищеЗначения(ПолучитьСтрокуИзДвоичныхДанных(ПараметрыКоннектораHTTP.Данные), Новый СжатиеДанных(9));
	КонецЕсли;
	
	Если ТипЗнч(РезультатЗапроса.ТелоВСтроке) = Тип("Строка") Тогда 
		СобытиеЛога.ХранилищеОтвета = Новый ХранилищеЗначения(РезультатЗапроса.ТелоВСтроке, Новый СжатиеДанных(9));
	КонецЕсли; 
	
	Если ТипЗнч(РезультатЗапроса.Заголовки) = Тип("Соответствие") Тогда 
		СобытиеЛога.ХранилищеЗаголовковОтвета = Новый ХранилищеЗначения(РезультатЗапроса.Заголовки, Новый СжатиеДанных(9));
	КонецЕсли; 
	
	Если ТипЗнч(ПараметрыКоннектораHTTP.Заголовки) = Тип("Соответствие") Тогда 
		СобытиеЛога.ХранилищеЗаголовковЗапроса = Новый ХранилищеЗначения(ПараметрыКоннектораHTTP.Заголовки, Новый СжатиеДанных(9));
	КонецЕсли; 

	гкс_РаботаСВебСервисами.Логировать(СобытиеЛога);
	
КонецПроцедуры

#КонецОбласти

Процедура ВыполнитьЗапросВнутренний()
	
	РезультатЗапроса = КоннекторHTTP.ВызватьМетод(МетодСервиса, ПолныйАдресРесурса, ПараметрыКоннектораHTTP);
	РезультатЗапроса.Вставить("ТелоВСтроке", КоннекторHTTP.КакТекст(РезультатЗапроса, КодировкаТекста.UTF8));

КонецПроцедуры

Функция ПолныйАдресРесурса()
	Возврат гкс_РаботаСВебСервисами.ПолныйАдресРесурса(Ресурс);
КонецФункции

Функция МетодСервиса()
	Возврат гкс_РаботаСВебСервисами.МетодСервиса(Ресурс);
КонецФункции

Функция ЗаголовкиСервисаКакСоотвествие()
	Возврат гкс_РаботаСВебСервисами.ЗаголовкиСервисаКакСоотвествие(Ресурс);
КонецФункции

Процедура ЗаполнитьПараметрыКоннектораHTTP(ПараметрыВыполненияЗапроса)
	
	Подключение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ресурс, "Подключение");
	Если НЕ ЗначениеЗаполнено(Подключение) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подключение, "Сервер,Порт,Таймаут,
				                                                        |ИспользоватьЗащищенноеСоединение,
				                                                        |ИспользоватьАутентификациюОС,ИспользоватьПрокси,
				                                                        |ПроксиСервер,ПроксиПорт");
	
	ПараметрыКоннектораHTTP.Заголовки = ЗаголовкиСервисаКакСоотвествие(); 
	ПараметрыКоннектораHTTP.ПроверятьSSL = Реквизиты.ИспользоватьЗащищенноеСоединение;	
	ПараметрыКоннектораHTTP.Таймаут = Реквизиты.Таймаут;
	
	ПараметрыКоннектораHTTP.Прокси = ОпределитьПроксиПоПараметрамПодключения(Реквизиты);
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяПароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Подключение, "ИмяПарольПользователя");
	
	Аутентификация = Новый Структура;
	Аутентификация.Вставить("ИспользоватьАутентификациюОС", Реквизиты.ИспользоватьАутентификациюОС);
	Аутентификация.Вставить("Тип", "Basic"); // пока так хардкод лютый
	Если ЗначениеЗаполнено(ИмяПароль) Тогда     
		
		Аутентификация.Вставить("Пользователь", ИмяПароль.ИмяПользователя);
		Аутентификация.Вставить("Пароль", ИмяПароль.ПарольПользователя);	
		
	КонецЕсли;
	ПараметрыКоннектораHTTP.Аутентификация = Аутентификация;
	
	ДополнитьПараметрыКоннектораПоПараметрамВыполненияЗапроса(ПараметрыКоннектораHTTP, ПараметрыВыполненияЗапроса);
	                                        	
КонецПроцедуры

Процедура ДополнитьПараметрыКоннектораПоПараметрамВыполненияЗапроса(ПараметрыКоннектораHTTP, ПараметрыВыполненияЗапроса)
	
	Если ТипЗнч(ПараметрыВыполненияЗапроса) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполненияЗапроса.Свойство("ПараметрыЗапроса") Тогда
		ПараметрыКоннектораHTTP.ПараметрыЗапроса = ПараметрыВыполненияЗапроса.ПараметрыЗапроса; 	
	КонецЕсли;
	
	Если ПараметрыВыполненияЗапроса.Свойство("Заголовки") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ПараметрыКоннектораHTTP.Заголовки, 
															ПараметрыВыполненияЗапроса.Заголовки);
	КонецЕсли;
	
	ПараметрыКоннектораHTTP.Данные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияЗапроса, "Данные");
	ПараметрыКоннектораHTTP.ПроверятьSSL = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияЗапроса, "ПроверятьSSL", Истина);
	ПараметрыКоннектораHTTP.Файлы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияЗапроса, "Файлы");
	
КонецПроцедуры

Функция ОпределитьПроксиПоПараметрамПодключения(ПараметрыПодключения)
	
	Если ПараметрыПодключения.ИспользоватьПрокси Тогда
		Прокси = Новый ИнтернетПрокси;
		Протокол = ?(ПараметрыПодключения.ИспользоватьЗащищенноеСоединение, "https", "http");
		Прокси.Установить(Протокол, ПараметрыПодключения.ПроксиСервер, ПараметрыПодключения.ПроксиПорт, , , Истина);
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

#КонецОбласти

#Область Инициализация

ФиксироватьСобытие = Ложь;
ПараметрыКоннектораHTTP = КоннекторHTTP.НовыеПараметры();

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте!'");
#КонецЕсли

