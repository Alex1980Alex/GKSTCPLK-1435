#Область ОписаниеПеременных

&НаКлиенте
Перем ИнтервалСрабатывания0_5;
&НаКлиенте
Перем ВыбранныеРегистрации;
&НаКлиенте
Перем 
ВыбранныеСтроки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗагрузитьНастройкиФормыИзХранилища();
	
	ИнициализироватьРеквизитыФормы(); 	
	ИнициализироватьЭлементыФормы();
	УстановитьВидимостьДоступностьЭлементовФормы();
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(ОтборТочкаМаршрута) Тогда	                                  
		ШаблонСообщения = НСтр("ru = 'Не определена рабочая точка маршрута! %1'"); 
		Если ИспользоватьНесколькоАЛЦ Тогда
			ТекстУточнениея = НСтр("ru = 'Проверьте ""Настройки ролей пользователей приемки траснпорта""'");
		Иначе
			ТекстУточнениея = НСтр("ru = 'Проверьте константу ""Точка маршрута базы""'");
		КонецЕсли;	
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекстУточнениея);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ОтборТочкаМаршрута");
		ТолькоПросмотр = Истина;
	Иначе
		
		ОбновитьСписокРегистраций(ВыбранныеРегистрации);
	
		ИнтервалСрабатывания0_5 = 0.5;
		
		ИнтервалОбработчика = 15;
		ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновитьДанные15", ИнтервалОбработчика);
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ГрупповаяОбработкаРегистраций" Тогда
		ОбновитьСписокРегистраций(ВыбранныеРегистрации);
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидПеревозкиПриИзменении(Элемент)
	
	ВидПеревозкиПриИзмененииНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ТипРегистрацииПриИзменении(Элемент)

    УстановитьЗаголовкиЭлементовПоТипуРегистрации(ОтборТипРегистрации);
	ТипРегистрацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТочкаМаршрутаПриИзменении(Элемент)
	
	ОтборТочкаМаршрутаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРегистрации

&НаКлиенте
Процедура СписокРегистрацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	ЭтоЖД = ОтборВидПеревозки = 
		ПредопределенноеЗначение("Перечисление.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт");
	
	Если Поле.Имя = "СписокРегистрацииДоговор" Тогда		
		ПоказатьЗначениеВДиалоге(ТекущиеДанные.Спецификация);
		
	ИначеЕсли Поле.Имя = "СписокРегистрацииНомерДокументаПоставщика" И ЭтоЖДПеревозка Тогда		
		ПоказатьЗначениеВДиалоге(ТекущиеДанные.ТранспортныйДокумент);
		
	ИначеЕсли Поле.Имя = "СписокРегистрацииНомер" Тогда 		
		ПоказатьЗначениеВДиалоге(ТекущиеДанные.ДокументРегистрации);	
	ИначеЕсли Поле.Имя = "СписокРегистрацииОтметка" Тогда
		Если ВыбранныеРегистрации = Неопределено Тогда
			ВыбранныеРегистрации = Новый Массив;
		КонецЕсли;
		Если ТекущиеДанные.Отметка Тогда
			СнятьОтметку(ТекущиеДанные.ДокументРегистрации);
		Иначе
			ПоставитьОтметку(ТекущиеДанные.ДокументРегистрации);
		КонецЕсли;
		
		ОбновитьСписокРегистраций(ВыбранныеРегистрации);
	ИначеЕсли Поле.Имя = "СписокРегистрацииПунктПогрузки"
		И ЭтоЖД Тогда 		
		ПоказатьЗначениеВДиалоге(ТекущиеДанные.СтанцияЖД);		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокРегистрацииПриАктивизацииСтроки(Элемент)
	
	ИнтервалОбработчика = 0.5;
	ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновитьДанные", ИнтервалОбработчика, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрибытиеВагонов

&НаКлиенте
Процедура ПрибытиеВагоновВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Поле.Имя = "ПрибытиеВагоновТранспортныйДокумент" Тогда 		
		ПоказатьЗначениеВДиалоге(ТекущиеДанные.ТранспортныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьРегистрацию(Команда)
	
	ДанныеЗаполнения = ЗначенияЗаполненияРегистрацииНаПЛК();	
	ОткрытьФормуНовогоДокументаРегистрацияНаПЛК(ДанныеЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРегистрациюКПП(Команда)
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ДобавитьРегистрациюНаОснованииВъездаНаКПП", ЭтотОбъект);		
	ОткрытьФорму("Документ.гкс_ВъездНаКПП.Форма.ФормаВыбора", , ЭтотОбъект,,,, ОписаниеОповещенияОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьРегистрацию(Команда)
		
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработчикОжиданияОбновитьФорму", ЭтотОбъект);
	
	ПараметрыОткрываемойФормы = Новый Структура;
	ПараметрыОткрываемойФормы.Вставить("ИзАРМа", Истина);
	ПараметрыОткрываемойФормы.Вставить("Ключ", ТекущиеДанные.ДокументРегистрации);
	
	ИдентификаторЗамера = 
	ОценкаПроизводительностиКлиент.ЗамерВремени("ПриемкаТранспорта.ОткрытиеФормыСуществующегоДокументаРегистрацияТранспорта", Истина);
	
	ОткрытьФорму("Документ.гкс_РегистрацияНаПЛК.ФормаОбъекта", 
		ПараметрыОткрываемойФормы, ЭтотОбъект, УникальныйИдентификатор, Неопределено, Неопределено, 
		ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				 
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера, Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВесНаВъезде(Команда)
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРегистрацииВеса = ТекущиеДанные.ДокументРегистрацииВъезда;
	ДокументРегистрации = ТекущиеДанные.ДокументРегистрации;
		                                                                                         
	РедактироватьВесНаКлиенте(ПредопределенноеЗначение("Перечисление.гкс_ТипыВзвешивания.Въезд"),
		ДокументРегистрации, ДокументРегистрацииВеса, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВесНаВыезде(Команда)
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРегистрацииВеса = ТекущиеДанные.ДокументРегистрацииВыезда;
	ДокументРегистрации = ТекущиеДанные.ДокументРегистрации;
	СостояниеКачествоНеПринято = ТекущиеДанные.Состояние = 
		ПредопределенноеЗначение("Перечисление.гкс_СостоянияРегистрации.КачествоНеПринято");
		
	РедактироватьВесНаКлиенте(ПредопределенноеЗначение("Перечисление.гкс_ТипыВзвешивания.Выезд"),
		ДокументРегистрации, ДокументРегистрацииВеса, СостояниеКачествоНеПринято);
		
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеПриемка(Команда)
	
	ИнтервалОбработчика	= 0.5;
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДокументРегистрации = ТекущиеДанные.ДокументРегистрации;
	Если ДокументРегистрации = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если АвтоматическоеФормированиеДокументов Тогда

	    ИдентификаторЗамера = 
	    			ОценкаПроизводительностиКлиент
	    				.ЗамерВремени("ПриемкаТранспорта.ФормированиеКомплектаДокументовНаКлиенте", Истина);
	    
		ДанныеРегистрации = ДанныеРегистрацииДляФормированияКомплектаДокументов(ТекущиеДанные);
		СформироватьКомплектДокументовПриемкиИЗарегистрироватьУбытиеТранспорта(
			ТекущиеДанные.ДокументРегистрации, ДанныеРегистрации);
		
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера, Ложь);

	Иначе
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("ПриемкаТранспорта.РегистрацияСостояния", Ложь, Истина);
		
		ЗарегистрироватьНовоеСостояние(
			ПредопределенноеЗначение("Перечисление.гкс_СостоянияРегистрации.Убыл"), ДокументРегистрации);
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновитьДанные", ИнтервалОбработчика, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьРегистрациюАвто(Команда)
	
	ВыделенныеСтроки = Элементы.СписокРегистрации.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивРегистрации = Новый Массив;
	Для Каждого НомерСтроки Из ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.СписокРегистрации.ДанныеСтроки(НомерСтроки);
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументРегистрации) Тогда
			МассивРегистрации.Добавить(Новый Структура("ДокументРегистрации, ТранспортныйДокумент",
				ТекущиеДанные.ДокументРегистрации, ТекущиеДанные.ТранспортныйДокумент));
		КонецЕсли;	
	КонецЦикла;
	
	Если МассивРегистрации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Комментарий = "";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивРегистрации", МассивРегистрации);
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ОтклонитьРегистрациюПослеВводаКомментария",
		ЭтотОбъект, ДополнительныеПараметры);
		
	ТекстЗаголовка = НСтр("ru = 'Прокомментируйте причину отклонения'");
	ПоказатьВводСтроки(ОписаниеОповещенияОЗавершении, Комментарий, ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНомерПробы(Команда)
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = ПолучитьСписокРегистрацийНаСервере(,Истина);
	КоличествоВыбранных = ВыбранныеСтроки.Количество();
	
	Если КоличествоВыбранных > 1 Тогда
		ГрупповоеСозданиеНомерПробы(ВыбранныеСтроки);
		ВыполнитьКомандуПечатиЭтикетки();
		Возврат;
	ИначеЕсли КоличествоВыбранных = 1 Тогда
		ТекущиеДанные = ВыбранныеСтроки[0];
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИзАРМа", Истина);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументФормированиеНомераПробы) Тогда
		ПараметрыОткрытияФормы.Вставить("Ключ", ТекущиеДанные.ДокументФормированиеНомераПробы);			
	Иначе
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ТочкаМаршрута", ОтборТочкаМаршрута);
		ЗначенияЗаполнения.Вставить("ДокументРегистрации", ТекущиеДанные.ДокументРегистрации);
		ЗначенияЗаполнения.Вставить("ТипПробы", ПредопределенноеЗначение("Перечисление.гкс_ТипыПроб.Единичная"));
			
		ПараметрыОткрытияФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	КонецЕсли;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("РедактироватьНомерПробыЗавершение", ЭтотОбъект);
		
	ОткрытьФорму("Документ.гкс_ФормированиеНомераПробы.ФормаОбъекта", ПараметрыОткрытияФормы, 
					ЭтотОбъект, УникальныйИдентификатор, Неопределено, Неопределено, 
					ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПанельДеталей(Команда)
	
	ИнтервалОбработчика = 0.5;
	Элементы.ГруппаДетальнаяИнформация.Видимость = НЕ Элементы.ГруппаДетальнаяИнформация.Видимость;
	Если Элементы.ГруппаДетальнаяИнформация.Видимость Тогда
		ПодключитьОбработчикОжидания("ЗаполнитьДетальнальныеЗаписиРегистрацииНаКлиенте", ИнтервалОбработчика, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНаправлениеНаРазгрузку(Команда)
		
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = ПолучитьСписокРегистрацийНаСервере(,Истина);
	КоличествоВыбранных = ВыбранныеСтроки.Количество();
	
	Если КоличествоВыбранных > 1 Тогда
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ГрупповоеРедактированиеНаправленийНаРазгрузку", ЭтотОбъект);
		ПараметрыОткрытияФормы = ПараметрыОткрытияФормыГрупповыхНастроек(Истина);
	
		ОткрытьФорму("Обработка.гкс_ПриемкаТранспорта.Форма.ФормаНастроекГрупповогоИзменения",
						ПараметрыОткрытияФормы,
						ЭтотОбъект,,,,
						ОповещениеОЗакрытии,
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	ИначеЕсли КоличествоВыбранных = 1 Тогда
		ТекущиеДанные = ВыбранныеСтроки[0];
	КонецЕсли;
	
	НаправлениеНаРазгрузкуСсылка = ПолучитьНаправлениеНаРазгрузку(ТекущиеДанные.ДокументРегистрации);
	
	ПараметрыОткрытия = Новый Структура;
	
	Если Не ЗначениеЗаполнено(НаправлениеНаРазгрузкуСсылка) Тогда		
		ЗначенияЗаполнения = СтруктураЗаполненияДанныхНаправлениеНаРазгрузку(ТекущиеДанные);
		  
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	Иначе		
		ПараметрыОткрытия.Вставить("Ключ", НаправлениеНаРазгрузкуСсылка);
		ПараметрыОткрытия.Вставить("ИзАРМа", Истина);	
	КонецЕсли;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработчикОжиданияОбновитьФорму", ЭтотОбъект);
		
	ОткрытьФорму("Документ.гкс_НаправлениеНаРазгрузку.ФормаОбъекта", ПараметрыОткрытия, 
					ЭтотОбъект, УникальныйИдентификатор, Неопределено, Неопределено, 
					ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			         
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция СлужебнаяНоменклатураДляФормированияНаправленияНаРагрузку(ЛабораторныйАнализ)
	
	Если ЗначениеЗаполнено(ЛабораторныйАнализ) Тогда
		ДокументЛабораторныйАнализ = ЛабораторныйАнализ.ПолучитьОбъект();	
		Возврат 
			гкс_ПриемкаТранспорта.ПодходящаяСлужебнаяНоменклатураДляФормированияНаправленияНаРагрузку(
			ЛабораторныйАнализ.Дата, ДокументЛабораторныйАнализ.гкс_ДокументРегистрации, ДокументЛабораторныйАнализ);
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура РедактироватьАнализ(Команда)
	
	ИмяКлючевойОперации = "ПриемкаТранспорта.ОткрытиеФормыДокументаЛабораторныйАнализ";

	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументРегистрацииАнализов) Тогда
		ПараметрыОткрытия.Вставить("Ключ", ТекущиеДанные.ДокументРегистрацииАнализов);
		ПараметрыОткрытия.Вставить("ИзАРМа", Истина);
	Иначе
		ДокументРегистрации = ТекущиеДанные.ДокументРегистрации;
		ПодготовитьПараметрыОткрытия(ДокументРегистрации, ПараметрыОткрытия);
	
		Если Не ПараметрыОткрытия.Свойство("Ключ") Тогда
			ИмяКлючевойОперации = "ПриемкаТранспорта.ОткрытиеФормыНовогоДокументаЛабораторныйАнализ";
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработчикОжиданияОбновитьФорму", ЭтотОбъект);
	
	ИдентификаторЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени(ИмяКлючевойОперации, Истина);
	
	ОткрытьФорму("Документ.гкс_ЛабораторныйАнализ.ФормаОбъекта", 
		ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор, , , 
		ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПробыПриняты(Команда)
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ВыбранныеСтроки = ПолучитьСписокРегистрацийНаСервере(,Истина);
	КоличествоВыбранных = ВыбранныеСтроки.Количество();
	
	Если КоличествоВыбранных > 1 Тогда
		ГрупповоеПодтверждениеПробы(ВыбранныеСтроки);
		Возврат;
	ИначеЕсли КоличествоВыбранных = 1 Тогда
		ТекущиеДанные = ВыбранныеСтроки[0];
	КонецЕсли;

	ДокументРегистрации = ТекущиеДанные.ДокументРегистрации;
	
	Если ЗначениеЗаполнено(ДокументРегистрации) Тогда
		
		НомерПробы = ПолучитьНомерПробы(ДокументРегистрации);
		Если НомерПробы	<> Неопределено Тогда
			
			ДополнительныеПараметры = ЗаполнитьДополнительныеПараметрыДляПробыПриняты(ДокументРегистрации);
			Если ДополнительныеПараметры <> Неопределено Тогда
				
				ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПодверждениеПробыПриняты",
					ЭтотОбъект, ДополнительныеПараметры); 
					
				ТекстВопроса = СтрШаблон(НСтр("ru = 'Подтвердите, что проба с номером %1 принята'"), НомерПробы);
				
				ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, 
					РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодтверждениеРазгрузки(Команда)
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	ДокументРегистрации = ТекущиеДанные.ДокументРегистрации;
	Если ЗначениеЗаполнено(ДокументРегистрации) Тогда
		
		УИД = Строка(Новый УникальныйИдентификатор());
		ДополнительныеПараметры = Новый Структура("ДокументРегистрации, УИД", ДокументРегистрации, УИД);
		
		Если ТекущиеДанные.ТипРегистрации = ПредопределенноеЗначение("Перечисление.гкс_ТипРегистрации.Приемка") Тогда
			
			ДополнительныеПараметры.Вставить("Оповещение", "ИзменениеПодтверждениеРазгрузки");
			ДополнительныеПараметры.Вставить("Состояние", 
				ПредопределенноеЗначение("Перечисление.гкс_СостоянияРегистрации.Выгружен"));
			
			ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПодверждениеРазгрузки",
				ЭтотОбъект, ДополнительныеПараметры);
				
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Подтвердите, что транспорт с номером %1 разгружен'"), 
				ТекущиеДанные.ТранспортноеСредство);
		Иначе
			ДополнительныеПараметры.Вставить("Оповещение", "ИзменениеПодтверждениеПогрузки");	
			ДополнительныеПараметры.Вставить("Состояние",
				ПредопределенноеЗначение("Перечисление.гкс_СостоянияРегистрации.Погружен"));	
			
			ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПодверждениеРазгрузки", 
				ЭтотОбъект, ДополнительныеПараметры);
				
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Подтвердите, что транспорт с номером %1 погружен'"), 
				ТекущиеДанные.ТранспортноеСредство); 
		КонецЕсли;

		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменитьРазрешение(Команда)
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.ДокументНаправлениеНаРазгрузку) Тогда

		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", ТекущиеДанные.ДокументНаправлениеНаРазгрузку);
		ПараметрыОткрытия.Вставить("ИзАРМа", Истина);
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработчикОжиданияОбновитьФорму", ЭтотОбъект);
		
		ОткрытьФорму("Документ.гкс_НаправлениеНаРазгрузку.ФормаОбъекта", 
			ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор, Неопределено, Неопределено, 
			ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьСпецификацию(Команда)
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументРегистрации) Тогда
		
		Спецификация = ПолучитьСпецификацию(ТекущиеДанные.ДокументРегистрации);
		
		Если ЗначениеЗаполнено(Спецификация) Тогда
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("Ключ", Спецификация);
			
			ОценкаПроизводительностиКлиент.ЗамерВремени(
				"АРМПриемка.ДокументСпецификацияКДоговоруКонтрагента.ОткрытиеФормы");
			
			ОткрытьФорму("Документ.гкс_СпецификацияКДоговоруКонтрагента.ФормаОбъекта", 
				ПараметрыОткрытия, ЭтотОбъект, ЭтотОбъект, , , , 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикетки(Команда)
	
	ВыполнитьКомандуПечатиЭтикетки();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечатьАктОтбораПробЭкспресс(Команда)
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;

	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ДокументРегистрацииАнализов) Тогда

		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ТекущиеДанные.ДокументРегистрацииАнализов);
                  
		ОписаниеКоманды = Новый Структура();
		ОписаниеКоманды.Вставить("ОбъектыПечати", 	МассивОбъектов);
		ОписаниеКоманды.Вставить("Форма", 			ЭтотОбъект);
		ОписаниеКоманды.Вставить("Идентификатор", 	"ПФ_MXL_АктОтбораПроб_ru");
		ОписаниеКоманды.Вставить("Представление", 	НСтр("ru = 'Акт отбора проб'"));
		ОписаниеКоманды.Вставить("МенеджерПечати", 	"Обработка.гкс_ПечатьДокументаЛабораторныйАнализ");
		ОписаниеКоманды.Вставить("ПроверкаПроведенияПередПечатью", Истина);
		ОписаниеКоманды.Вставить("Обработчик",  
		 "гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФ_MXL_АктОтбораПроб_ru");

		гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФ_MXL_АктОтбораПроб_ru(ОписаниеКоманды);

	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен лабораторный анализ'"));		
	КонецЕсли;

	
КонецПроцедуры    

&НаКлиенте
Процедура КомандаПечатьАктОтбораПроб(Команда)
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ДокументРегистрацииАнализов) Тогда
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ТекущиеДанные.ДокументРегистрацииАнализов);
						
		ОписаниеКоманды = Новый Структура();
		ОписаниеКоманды.Вставить("ОбъектыПечати", 	МассивОбъектов);
		ОписаниеКоманды.Вставить("Форма", 			ЭтотОбъект);
		ОписаниеКоманды.Вставить("Идентификатор", 	"ПФ_MXL_АктОтбораПроб");
		ОписаниеКоманды.Вставить("Представление", 	НСтр("ru = 'Акт отбора проб'"));
    	ОписаниеКоманды.Вставить("МенеджерПечати", 	"Обработка.гкс_ПечатьДокументаЛабораторныйАнализ");
		ОписаниеКоманды.Вставить("ПроверкаПроведенияПередПечатью", Истина);
		ОписаниеКоманды.Вставить("Обработчик",  
									"гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФ_MXL_АктОтбораПроб");
		
		гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФ_MXL_АктОтбораПроб(ОписаниеКоманды);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен лабораторный анализ'"));		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечатьАктЗабраковкиПартии(Команда)
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;

	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ДокументРегистрацииАнализов) Тогда

		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ТекущиеДанные.ДокументРегистрацииАнализов);

		ОписаниеКоманды = Новый Структура();
		ОписаниеКоманды.Вставить("ОбъектыПечати", 	МассивОбъектов);
		ОписаниеКоманды.Вставить("Форма", 			ЭтотОбъект);
		ОписаниеКоманды.Вставить("Идентификатор", 	"ПФ_MXL_АктЗабраковкиПартии_ru");
		ОписаниеКоманды.Вставить("Представление", 	НСтр("ru = 'Акт забраковки'"));
		ОписаниеКоманды.Вставить("МенеджерПечати", 	"Обработка.гкс_ПечатьДокументаЛабораторныйАнализ");
		ОписаниеКоманды.Вставить("ПроверкаПроведенияПередПечатью", Истина);
		ОписаниеКоманды.Вставить("Обработчик",  
		 "гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФ_MXL_АктЗабраковкиПартии_ru");

		гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФ_MXL_АктЗабраковкиПартии_ru(ОписаниеКоманды);  

	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен лабораторный анализ'"));		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечатьАктРасхожденияВВесе(Команда)
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
		
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ДокументРегистрации) Тогда
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ТекущиеДанные.ДокументРегистрации);
		
		ОписаниеКоманды = Новый Структура();
		ОписаниеКоманды.Вставить("ОбъектыПечати", 	МассивОбъектов);
		ОписаниеКоманды.Вставить("Форма", 			ЭтотОбъект);
		ОписаниеКоманды.Вставить("Идентификатор", 	"ПФ_MXL_АктРасхожденияВеса_by");
		ОписаниеКоманды.Вставить("Представление", 	НСтр("ru = 'Акт расхождения веса'"));
    	ОписаниеКоманды.Вставить("МенеджерПечати", 	"Обработка.гкс_ПечатьАктРасхожденияВеса");
		ОписаниеКоманды.Вставить("ПроверкаПроведенияПередПечатью", Истина);
		ОписаниеКоманды.Вставить("Обработчик",  
									"гкс_УправлениеПечатьюКлиент_by.ВыполнитьКомандуПечати_АктРасхожденияВеса");
		
		гкс_УправлениеПечатьюКлиент_by.ВыполнитьКомандуПечати_АктРасхожденияВеса(ОписаниеКоманды);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнена регистрация на ПЛК'"));		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьРегистрацию(Команда)
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.ДокументРегистрации) Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработчикОжиданияОбновитьФорму", ЭтотОбъект); 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущиеДанные.ДокументРегистрации);
	ПараметрыФормы.Вставить("ИзАРМа", Истина);
	
	ИдентификаторЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени(
		"ПриемкаТранспорта.ОткрытиеФормыСкопированногоДокументаРегистрацияТранспорта", Истина);
	
	ОткрытьФорму("Документ.гкс_РегистрацияНаПЛК.Форма.ФормаДокумента", 
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор, Неопределено, Неопределено, 
		ОписаниеОповещенияОЗакрытии);
	              
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера, Ложь);
	              
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкаНазначенияРазгрузки(Команда)
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("НастройкаЯмРазгрузки_Завершение", ЭтотОбъект);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ТочкаМаршрута", 	ОтборТочкаМаршрута);
	ЗначенияЗаполнения.Вставить("ВидПеревозки", 	ОтборВидПеревозки);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", 	ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("ИзАРМа", 				Истина);

	ОткрытьФорму("Документ.гкс_УстановкаНастроекНазначенияРазгрузки.ФормаОбъекта", 
					ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор, , ,
					ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ДопускФумигационный(Команда)
	
	ИзменитьДопуск(Новый Структура("ИмяДопуска", "Фумигационный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДопускФитосанитарный(Команда)
	
	ИзменитьДопуск(Новый Структура("ИмяДопуска", "Фитосанитарный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДопускПретензионный(Команда)
	
	ИзменитьДопуск(Новый Структура("ИмяДопуска", "Претензионный"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьФормуПринятыеТС(Команда)
	
	ПараметрыФормы = Новый Структура;
		
	Если ЭтоАвтоПеревозка 
		И гкс_ПриемкаТранспортаВызовСервера.ФормироватьКомпозитныйЛабораторныйАнализ() Тогда
		ИмяНовойФормы = "Обработка.гкс_ПриемкаТранспорта.Форма.ФормаПринятыеТС_by";
		ПараметрыФормы.Вставить("ВидПеревозки", 
			ПредопределенноеЗначение("Перечисление.гкс_ТипРегистрации.Приемка"));
		ПараметрыФормы.Вставить("ТипРегистрации", 
			ПредопределенноеЗначение("Перечисление.гкс_ТипыТранспортныхСредствДоставки.Автомобиль"));	
	Иначе
		ИмяНовойФормы = "Обработка.гкс_ПриемкаТранспорта.Форма.ФормаПринятыеТС";
		ПараметрыФормы.Вставить("ВидПеревозки", ОтборВидПеревозки);
		ПараметрыФормы.Вставить("ТипРегистрации", ОтборТипРегистрации);
	КонецЕсли;
	
	ОткрытьФорму(ИмяНовойФормы, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьПричинуПретензионности(Команда)
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Претензионный Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтроки = Новый Структура;
	ПараметрыСтроки.Вставить("Вагон", 				ТекущиеДанные.ТранспортноеСредство); 
	ПараметрыСтроки.Вставить("ДокументРегистрации", ТекущиеДанные.ДокументРегистрации);	
	
	ТекстПричины = ПолучитьПричинуПретензионности(ПараметрыСтроки);
	
	ПоказатьЗначение(, ТекстПричины);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормы(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПодготовитьПараметрыОткрытияФормыНастроек(ПараметрыОткрытия);	
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗакрытиеНастройкиФормыЭлементов", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.гкс_ХранилищеНастроек.Форма.НастройкаЭлементовФормы", ПараметрыОткрытия, 
					ЭтотОбъект, УникальныйИдентификатор, , , 
					ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсеСтроки(Команда)
	
	ВыбранныеРегистрации = ПолучитьСписокРегистрацийНаСервере();
	
	ОбновитьСписокРегистраций(ВыбранныеРегистрации);

КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделениеСтрок(Команда)
	
	ВыбранныеРегистрации = Новый Массив;
	
	ОбновитьСписокРегистраций(ВыбранныеРегистрации);

КонецПроцедуры

&НаКлиенте
Процедура ГрупповаяОбработкаРегистраций(Команда)
	
	Если ВыбранныеРегистрации = Неопределено 
		Или ВыбранныеРегистрации.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Необходимо выбрать строки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = ПараметрыОткрытияФормыГрупповыхНастроек();
	
	ОткрытьФорму("Обработка.гкс_ПриемкаТранспорта.Форма.ФормаНастроекГрупповогоИзменения",
					ПараметрыОткрытияФормы,
					ЭтотОбъект,,,,,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Инициалиализация

#Область ПодготовкаКРаботеФормы

#КонецОбласти

&НаСервере
Процедура ИнициализироватьЭлементыФормы()
	
	УстановитьЗаголовкиВКолонкахСпискаРегистрации();
	ОбновитьНаправленияРазгрузки();

КонецПроцедуры 

&НаСервере
Процедура ИнициализироватьРеквизитыФормы()
	
	ИнициализироватьЗаголовокФормы();
	ИнициализироватьТекущегоПользователя();
	ИнициализироватьРеквизитыОтбора();
	ИнициализироватьСтруктуруДоступов();
	ИнициализироватьРеквизитыПравПользователя();
	
	ИнициализироватьРеквизитыПризнакиТипаПеревозки();
	ИнициализироватьРеквизитыПриемкиЖД();
	ИнициализироватьРеквизитыВремяОжиданияТС();
	ИнициализироватьАвтоматическоеФормированиеДокументов(); 
	ИнициализироватьСписокРегистрации(); 
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьЗаголовокФормы()
	
	Если Параметры.Свойство("АвтоПриемка") Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru='Рабочее место ""Приемка и отгрузка на ПЛК""'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТекущегоПользователя()
	
	Пользователь = Пользователи.ТекущийПользователь();
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(); 
	
КонецПроцедуры
 
&НаСервере
Процедура ИнициализироватьРеквизитыОтбора()
	
	Если Параметры.Свойство("АвтоПриемка") Тогда
		ОтборТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка;
	КонецЕсли;
	
	ИнициализироватьОтборТочкаМаршрута();
	
	Если ЗначениеЗаполнено(ОтборТочкаМаршрута) Тогда
		ОтборВидПеревозки = гкс_ПриемкаНаПЛКСервер.ПолучитьВидПеревозкиПоУмолчанию(ОтборТочкаМаршрута);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОтборТочкаМаршрута()
	
	ИспользоватьНесколькоАЛЦ = ПолучитьФункциональнуюОпцию("гкс_ИспользоватьНесколькоАЛЦ");
	
	Элементы.ОтборТочкаМаршрута.Доступность = ИспользоватьНесколькоАЛЦ;
	Элементы.ОтборТочкаМаршрута.РежимВыбораИзСписка = ИспользоватьНесколькоАЛЦ;
	
	Если ИспользоватьНесколькоАЛЦ Тогда
		АЛЦПользователя = РегистрыСведений.гкс_НастройкиПользователейПриемкаНаПЛК
			.НастроенныеТочкиМаршрутаПользователя();
		Если ЗначениеЗаполнено(АЛЦПользователя) Тогда
			ПервыйЭлемент = 0;
			СписокВыбора = Элементы.ОтборТочкаМаршрута.СписокВыбора;
			СписокВыбора.ЗагрузитьЗначения(АЛЦПользователя);
			ОтборТочкаМаршрута = СписокВыбора.Получить(ПервыйЭлемент).Значение; 
		КонецЕсли;	
	Иначе
		ОтборТочкаМаршрута = Константы.гкс_ТочкаМаршрутаБазы.Получить();	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтруктуруДоступов()
	
	Если ЗначениеЗаполнено(ОтборТочкаМаршрута) И ЗначениеЗаполнено(ОтборВидПеревозки) Тогда
		СтруктураДоступов = ПолучитьСтруктуруДоступовНаСервере(Истина);
	Иначе
		СтруктураДоступов = ПолучитьСтруктуруДоступовНаСервере(Ложь);
	КонецЕсли;   	
		
КонецПроцедуры 

&НаСервере
Процедура ИнициализироватьРеквизитыПравПользователя()
	
	ЕстьПравоНаРедактированиеРегистрации 	= ПравоНаРедактированияРегистрации(); 
	ЕстьПравоНаРедактированиеВзвешивания 	= ЕстьПравоНаРедактирование("гкс_Взвешивание");
	ЕстьПравоНаРедактированиеНомераПробы 	= ЕстьПравоНаРедактирование("гкс_ФормированиеНомераПробы");
	ЕстьПравоНаРедактированиеЛабАнализа 	= ЕстьПравоНаРедактирование("гкс_ЛабораторныйАнализ");
	ЕстьПравоНаРедактированиеНаправленияНаРазгрузку = ЕстьПравоНаРедактирование("гкс_НаправлениеНаРазгрузку");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоПриемкаТранспорта(ТипРегистрации)
	
	Возврат ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка;
	
КонецФункции 

&НаСервере
Процедура ИнициализироватьРеквизитыПризнакиТипаПеревозки()
	
	ТипыТранспортныхСредств = Перечисления.гкс_ТипыТранспортныхСредствДоставки;
	
	ЭтоЖДПеревозка 		= ТипыТранспортныхСредств.ЭтоЖДПеревозка(ОтборВидПеревозки);
	ЭтоАвтоПеревозка 	= ТипыТранспортныхСредств.ЭтоАвтоПеревозка(ОтборВидПеревозки);
		
КонецПроцедуры                       

&НаСервере
Процедура ИнициализироватьРеквизитыПриемкиЖД()
	
	РазрешитьВходнойКонтрольДоВзвешивания =   
		гкс_ПриемкаТранспорта.РазрешитьВходнойКонтрольДоВзвешивания(
			ОтборТипРегистрации, ОтборВидПеревозки);		
			
КонецПроцедуры	

&НаСервере
Процедура ИнициализироватьРеквизитыВремяОжиданияТС()
	
	Если ЗначениеЗаполнено(ОтборТочкаМаршрута) Тогда
		ЧасовойПоясПЛК = УстановитьЧасовойПоясПЛК();
	КонецЕсли; 
	
КонецПроцедуры
  
&НаСервере
Процедура ИнициализироватьАвтоматическоеФормированиеДокументов()
	
	АвтоматическоеФормированиеДокументов = 
		гкс_РаботаСНастройками.ЕстьАвтоматическоеФормированиеДокументовДляТочкиМаршрута(ОтборТочкаМаршрута);

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокРегистрации()
	
	УстановитьТекстЗапросаСпискаРегистрации();
	УстановитьОтборыСпискаРегистрации();
	
КонецПроцедуры

#КонецОбласти 

#Область ВидимостьДоступность

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовФормы()
		
	УстановитьВидимостьДоступностьКомандФормы();
	УстановитьВидимостьЭлементовСпискаРегистрации();
	УстановитьВидимостьДоступностьИныхЭлемнотовФормы();
	УстановитьВидимостьДоступностьПринятыеТС();

КонецПроцедуры                                       
 
&НаСервере
Процедура УстановитьВидимостьДоступностьКомандФормы()
		
	Элементы.СписокРегистрацииДопускФумигационный.Видимость = СтруктураДоступов.ДоступенДопускФумигационный; 
	Элементы.СписокРегистрацииДопускФитосанитарный.Видимость = СтруктураДоступов.ДоступенДопускФитосанитарный;  	
	Элементы.СписокРегистрацииДопускПретензионный.Видимость = СтруктураДоступов.ДоступенДопускПретензионный;
	
	Элементы.ДопускаКВскрытию.Видимость = СтруктураДоступов.ДоступенДопускаКВскрытиюВагонов И ЭтоЖДПеревозка;
	Элементы.СписокРегистрацииКонтекстноеМенюПричинаПретензионности.Видимость = ЭтоЖДПеревозка;  
	
	Элементы.СписокРегистрацииСкопироватьРегистрацию.Видимость = СтруктураДоступов.ДоступенРегистрация; 
		   		
	Элементы.СписокРегистрацииКнопкаДобавить.Видимость = 
		ЕстьПравоНаРедактированиеРегистрации Или ЭтоПолноправныйПользователь;
		
	Элементы.СписокРегистрацииКПП.Видимость = 
		(ЕстьПравоНаРедактированиеРегистрации Или ЭтоПолноправныйПользователь) И ЭтоАвтоПеревозка;
		 
	Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Видимость = 
		СписокРегистрацииОтклонитьРегистрациюАвтоВидимость(СтруктураДоступов);
	
	Элементы.РедактироватьРегистрацию.Видимость = 
		СтруктураДоступов.ДоступенРегистрация;
	
	Элементы.РедактироватьВесНаВъезде.Видимость = 
		СтруктураДоступов.ДоступенВзвешиваниеНаВъезде;

	ЭтоПриемкаТранспорта = ЭтоПриемкаТранспорта(ОтборТипРегистрации);	
		
	Элементы.РедактироватьНомерПробы.Видимость = 
		СтруктураДоступов.ДоступенОтборПроб И ЭтоПриемкаТранспорта;
	
	Элементы.КомандаПробыПриняты.Видимость = 
		СтруктураДоступов.ДоступенПринятиеПроб И ЭтоПриемкаТранспорта;
	
	Элементы.РедактироватьАнализ.Видимость = 
		СтруктураДоступов.ДоступенЛабАнализ И ЭтоПриемкаТранспорта;
	
	Элементы.РедактироватьНаправлениеНаРазгрузку.Видимость = 
		СтруктураДоступов.ДоступенДиспетчер И ЭтоПриемкаТранспорта;
		
	Элементы.КомандаОтменитьРазрешение.Видимость = 
		СтруктураДоступов.ДоступенПодтверждениеРазгрузки И ЭтоПриемкаТранспорта;	
	
	Элементы.КомандаПодтверждениеРазгрузки.Видимость = 
		СтруктураДоступов.ДоступенПодтверждениеРазгрузки;
	
	Элементы.РедактироватьВесНаВыезде.Видимость =
		СтруктураДоступов.ДоступенВзвешиваниеНаВыезде;
		
	Элементы.РедактированиеПриемка.Видимость = 
		СтруктураДоступов.ДоступенОформлениеПриемки;
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокРегистрацииОтклонитьРегистрациюАвтоВидимость(СтруктураДоступов)

	Возврат СтруктураДоступов.ДоступенРегистрация
		Или СтруктураДоступов.ДоступенДиспетчер
		Или СтруктураДоступов.ДоступенЛабАнализ
		Или СтруктураДоступов.ДоступенВзвешиваниеНаВъезде
		Или СтруктураДоступов.ДоступенОтборПроб;
		
КонецФункции	

&НаСервере
Процедура УстановитьВидимостьЭлементовСпискаРегистрации()
	
	Элементы.СписокРегистрацииТочкаМаршрута.Видимость 	= Не ЗначениеЗаполнено(ОтборТочкаМаршрута);
	Элементы.СписокРегистрацииВидПеревозки.Видимость 	= Не ЗначениеЗаполнено(ОтборВидПеревозки);
	Элементы.СписокРегистрацииИндексКартинки.Видимость 	= Не ЗначениеЗаполнено(ОтборТипРегистрации);
	
	
	
	Если ЗначениеЗаполнено(ОтборТочкаМаршрута) И ЗначениеЗаполнено(ОтборВидПеревозки) Тогда
		
		Элементы.СписокРегистрацииФумигационный.Видимость 	= ЭтоЖДПеревозка;
		Элементы.СписокРегистрацииФитосанитарный.Видимость 	= ЭтоЖДПеревозка;
		Элементы.СписокРегистрацииПретензионный.Видимость 	= ЭтоЖДПеревозка; 
		 
		Элементы.СписокРегистрацииЖиваяОчередь.Видимость 	= ЭтоАвтоПеревозка; 
		Элементы.СписокРегистрацииВремяЗаписи.Видимость 	= ЭтоАвтоПеревозка;  
		Элементы.СписокРегистрацииВодитель.Видимость 		= ЭтоАвтоПеревозка;
	КонецЕсли;
	
	ЕстьКолонкаПротеин 
		= ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "СписокРегистрацииПротеин");
	
	Если ЕстьКолонкаПротеин Тогда 
		ИспользоватьИнтеграциюСWarehouse = ПолучитьФункциональнуюОпцию("гкс_ИспользоватьИнтеграциюСWarehouse");
		Элементы.СписокРегистрацииПротеин.Видимость = ИспользоватьИнтеграциюСWarehouse;
	КонецЕсли;
			
КонецПроцедуры  

&НаСервере
Процедура УстановитьВидимостьДоступностьИныхЭлемнотовФормы()
	
	УстановленОтборТочкаМаршрута 	= ЗначениеЗаполнено(ОтборТочкаМаршрута);
	УстановленОтборВидПеревозки 	= ЗначениеЗаполнено(ОтборВидПеревозки);
			
	Элементы.ГруппаОсновная.Видимость 	= УстановленОтборТочкаМаршрута И УстановленОтборВидПеревозки; 
	Элементы.ГруппаГлавная.Видимость 	= УстановленОтборТочкаМаршрута И УстановленОтборВидПеревозки;
		
	Элементы.Водитель.Видимость = ЭтоАвтоПеревозка;
	
	Элементы.ГруппаПрибытиеТС.Видимость = Не ЭтоАвтоПеревозка;
	Элементы.ГруппаПрибытиеТС.Заголовок = "Прибытие вагонов";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьПринятыеТС()
	
	ЕстьПравоНаЗПП3 = ЕстьПравоНаРедактирование("гкс_РеестрНакладныхЗПП3");
	
	Элементы.ГруппаПринятыеТС.Видимость = ЕстьПравоНаЗПП3;
	
КонецПроцедуры

#КонецОбласти 

#Область РаботаСДопускамиЖДПеревозок

&НаКлиенте
Процедура ИзменитьДопуск(Знач ОписаниеДопуска)
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСоСтрокойПеревозокЖД(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ДокументРегистрации) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДопуски = Новый Структура;
	ТекущиеДопуски.Вставить("Фитосанитарный", 	ТекущиеДанные.Фитосанитарный);
	ТекущиеДопуски.Вставить("Фумигационный", 	ТекущиеДанные.Фумигационный);
	ТекущиеДопуски.Вставить("Претензионный", 	ТекущиеДанные.Претензионный);
	
	ИмяДопуска = ОписаниеДопуска.ИмяДопуска;
	НовоеЗначениеВскрытиеЗапрещено = Не ТекущиеДанные[ИмяДопуска];
	
	ПараметрыДопуска = Новый Структура;
	ПараметрыДопуска.Вставить("Вагон", 					ТекущиеДанные.ТранспортноеСредство);
	ПараметрыДопуска.Вставить("ДокументРегистрации", 	ТекущиеДанные.ДокументРегистрации);
	ПараметрыДопуска.Вставить("ВскрытиеЗапрещено", 		НовоеЗначениеВскрытиеЗапрещено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыДопуска", 	ПараметрыДопуска);
	ДополнительныеПараметры.Вставить("ТекущиеДопуски", 		ТекущиеДопуски);
	ДополнительныеПараметры.Вставить("ИмяДопуска", 			ИмяДопуска);	                                          
	                                          
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ИзменитьДопускЗавершение", ЭтотОбъект, 
															 ДополнительныеПараметры);

	ПоказатьВводСтроки(ОписаниеОповещенияОЗавершении, Неопределено, 
		ТекстПодсказкиДляИзмененияУровняДопуска(ИмяДопуска, ТекущиеДанные.ТранспортноеСредство));
			
КонецПроцедуры

&НаКлиенте
Функция ТекстПодсказкиДляИзмененияУровняДопуска(ИмяДопуска, Транспорт)

	ТекстШаблон = НСтр("ru = 'Изменение допуска %1 для транспорт с номером %2'");
	Возврат СтрШаблон(ТекстШаблон, ИмяДопуска, Транспорт);

КонецФункции

&НаКлиенте
Процедура ИзменитьДопускЗавершение(Комментарий, ДополнительныеПараметры) Экспорт
	
	Перем ПараметрыДопуска, ТекущиеДопуски, ИмяДопуска;
	
	МинимальноДопустимаяДлинаКомментария = 4;
	Если СтрДлина(Комментарий) < МинимальноДопустимаяДлинаКомментария Тогда
	
		ОбщегоНазначенияКлиент
		     .СообщитьПользователю(НСтр("ru = 'Комментарий не может быть меньше 5 символов. Допуск не изменен'"));
		Возврат;
	
	КонецЕсли;
	
	ДополнительныеПараметры.Свойство("ПараметрыДопуска", 	ПараметрыДопуска);
	ДополнительныеПараметры.Свойство("ТекущиеДопуски", 		ТекущиеДопуски);
	ДополнительныеПараметры.Свойство("ИмяДопуска", 			ИмяДопуска);
	
	Если Не ЗначениеЗаполнено(ПараметрыДопуска) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДопуска.Вставить("Комментарий", Комментарий);
	
	ЗарегистрироватьИзменениеДопуска(ИмяДопуска, ПараметрыДопуска, ТекущиеДопуски);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновитьДанные", ИнтервалСрабатывания0_5, Истина);	

КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьИзменениеДопуска(ИмяДопуска, ПараметрыДопуска, ТекущиеДопуски) 
	
	// Дополним параметры доступа значениями для регистрации
	ПараметрыДопуска.Вставить("Период", 			ТекущаяДатаСеанса());
	ПараметрыДопуска.Вставить("Ответственный", 		Пользователь);
	ПараметрыДопуска.Вставить("ДопускКВскрытию", 	Перечисления.гкс_ДопускиКВскрытиюВагонов[ИмяДопуска]);
	
	ВыбранныеСтроки = ПолучитьСписокРегистрацийНаСервере(Истина);
	
	ТекущиеДопуски[ИмяДопуска] = ПараметрыДопуска.ВскрытиеЗапрещено;
	
	Если ВыбранныеСтроки.Количество() > 0 Тогда
		Для Каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
			
			ПараметрыДопуска.Вагон 					= ВыбраннаяСтрока.ТранспортноеСредство;
			ПараметрыДопуска.ДокументРегистрации 	= ВыбраннаяСтрока.ДокументРегистрации;
			
			РегистрыСведений.гкс_СтатусыДопускаВагоновКВскрытию.ЗарегистрироватьИзменениеДопуска(ПараметрыДопуска);
			
			ОбновитьСостояниеРегистрацииПоНеобходимости(ПараметрыДопуска.ДокументРегистрации,
				                                         ПараметрыДопуска.Комментарий, 
				                                         ЕстьДопускПоКонтролямСтатусов(ТекущиеДопуски));
		КонецЦикла;	
	Иначе
		РегистрыСведений.гкс_СтатусыДопускаВагоновКВскрытию.ЗарегистрироватьИзменениеДопуска(ПараметрыДопуска);
		ОбновитьСостояниеРегистрацииПоНеобходимости(ПараметрыДопуска.ДокументРегистрации,
			                                            ПараметрыДопуска.Комментарий, 
			                                            ЕстьДопускПоКонтролямСтатусов(ТекущиеДопуски));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДопускПоКонтролямСтатусов(ТекущиеДопуски)
	
	Возврат  Не ТекущиеДопуски.Фитосанитарный 
		     И Не ТекущиеДопуски.Фумигационный 
		     И Не ТекущиеДопуски.Претензионный;
	
КонецФункции

&НаСервере
Процедура ОбновитьСостояниеРегистрацииПоНеобходимости(ДокументРегистрации, 
	                                                  КоментарийИзмененияУровняДопуска,
                                                      ЕстьДопускПоКонтролямСтатусов)
	
	ТекущееСостояние = гкс_ПриемкаТранспорта.ТекущееСостояниеРегистрации(ДокументРегистрации);

	Если ТекущееСостояние = Перечисления.гкс_СостоянияРегистрации.ВзвешенБрутто И ЕстьДопускПоКонтролямСтатусов Тогда
		
 		ЗарегистрироватьНовоеСостояние(Перечисления.гкс_СостоянияРегистрации.ГотовКОтборуПроб, 
 		                               ДокументРегистрации, 
 		                               КоментарийИзмененияУровняДопуска);
	КонецЕсли;

КонецПроцедуры

#Область РаботаССостояниемРегистрации

&НаСервере
Процедура ЗарегистрироватьНовоеСостояние(НовоеСостояние, ДокументРегистрации, Комментарий = "")
	
	гкс_ПриемкаТранспорта.ЗарегистрироватьНовоеСостояние(ДокументРегистрации, НовоеСостояние, Комментарий);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбратныеВызовы

&НаКлиенте
Процедура НастройкаЯмРазгрузки_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьНаправленияРазгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНомерПробыЗавершение(Результат, ДопПараметры) Экспорт
	
	//@skip-warning
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ЗаписатьДанныеДляСАРА") И Результат.ЗаписатьДанныеДляСАРА Тогда
			
		ЗаписатьДанныеДляСАРАНаКлиенте(Результат);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновитьДанные", 
	                             ИнтервалСрабатывания0_5, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияОбновитьФорму(Результат, ДопПараметры) Экспорт
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновитьДанные", 
	                             ИнтервалСрабатывания0_5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВесНаВыездеЗавершение(Результат, ДопПараметры) Экспорт
	
	Элементы.СписокРегистрации.Обновить();
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновитьДанные", 
	                             ИнтервалСрабатывания0_5, Истина);
		Возврат;
	КонецЕсли;
		
	Если ВозможноАвтоЗавершениеПроцесса(ОтборТипРегистрации, ТекущиеДанные.Состояние) Тогда
		РедактированиеПриемка(Команды.РедактированиеПриемка);
	Иначе
		ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновитьДанные", 
	                             ИнтервалСрабатывания0_5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВозможноАвтоЗавершениеПроцесса(ТипРегистрации, ТекущееСостояние)
			
	Возврат ТекущееСостояние = Перечисления.гкс_СостоянияРегистрации.ВзвешенБрутто
		И ТипРегистрации = Перечисления.гкс_ТипРегистрации.Отгрузка
		Или ТекущееСостояние = Перечисления.гкс_СостоянияРегистрации.ВзвешенТара 
		И ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка;
			
КонецФункции

&НаКлиенте
Процедура ДобавитьРегистрациюНаОснованииВъездаНаКПП(Результат, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("ДокументСсылка.гкс_ВъездНаКПП") Тогда
						
		ЗначенияЗаполнения = ЗначенияЗаполненияРегистрацииНаПЛК();		
		ЗначенияЗаполнения.Вставить("ДокументОснование", Результат);
		
		ОткрытьФормуНовогоДокументаРегистрацияНаПЛК(ЗначенияЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНовогоДокументаРегистрацияНаПЛК(ЗначенияЗаполнения)  
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработчикОжиданияОбновитьФорму", ЭтотОбъект);
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИзАРМа", 				Истина);
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", 	ЗначенияЗаполнения);
	
	Если ЗначенияЗаполнения.Свойство("ТранспортныйДокумент") Тогда
		ПараметрыОткрытия.Вставить("ТранспортныйДокумент", ЗначенияЗаполнения.ТранспортныйДокумент);	
	КонецЕсли;	
	
	ИдентификаторЗамера = 
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"ПриемкаТранспорта.ОткрытиеФормыНовогоДокументаРегистрацияТранспорта", Истина);
	
	ОткрытьФорму("Документ.гкс_РегистрацияНаПЛК.ФормаОбъекта", 
					ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор, Неопределено, Неопределено,
					ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера, Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ЗначенияЗаполненияРегистрацииНаПЛК()
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ТочкаМаршрута", 	ОтборТочкаМаршрута);
	ЗначенияЗаполнения.Вставить("ТипРегистрации", 	ОтборТипРегистрации);
	ЗначенияЗаполнения.Вставить("ВидПеревозки", 	ОтборВидПеревозки);	
	ЗначенияЗаполнения.Вставить("Внутригрупповой", 	Истина);
	
	Возврат ЗначенияЗаполнения;
		
КонецФункции		

#КонецОбласти

#Область ОбновлениеДоступностиКомандУправелнияРегистрацейПоТекущемуСостоянию

#Область ОбщиеПроцедурыУправленияДоступностьюКомандамиРегистрации

&НаКлиенте
Процедура УстановитьДоступностьКнопокУправленияРегистрациейТранспортаПоУмолчанию()
	
	Элементы.РедактироватьРегистрацию.Доступность 				= Ложь;
	Элементы.КомандаПробыПриняты.Доступность 					= Ложь;
	Элементы.РедактироватьНаправлениеНаРазгрузку.Доступность 	= Ложь;
	Элементы.КомандаПодтверждениеРазгрузки.Доступность 			= Ложь;
	Элементы.РедактироватьАнализ.Доступность 					= Ложь;
	Элементы.РедактироватьВесНаВъезде.Доступность 				= Ложь;
	Элементы.РедактироватьНомерПробы.Доступность 				= Ложь;
	Элементы.РедактироватьВесНаВыезде.Доступность 				= Ложь;
	Элементы.РедактированиеПриемка.Доступность 					= Ложь;
	Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Доступность = Ложь;
	Элементы.КомандаОтменитьРазрешение.Доступность 				= Ложь; 
	Элементы.СписокРегистрацииДопускФумигационный.Доступность 	= Ложь;
	Элементы.СписокРегистрацииДопускФитосанитарный.Доступность 	= Ложь;
	Элементы.СписокРегистрацииДопускПретензионный.Доступность 	= Ложь;
	Элементы.СписокРегистрацииПечатьЭтикетки.Доступность 		= Истина;
	Элементы.СписокРегистрацииКонтекстноеМенюПричинаПретензионности.Доступность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандУправленияДопусками()

	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ЭтоПриемкаЖДТранспорта = ЭтоЖДПеревозка И ЭтоПриемкаТранспорта(ОтборТипРегистрации);

	Элементы.СписокРегистрацииДопускФумигационный.Доступность 	= ЭтоПриемкаЖДТранспорта;
	Элементы.СписокРегистрацииДопускФитосанитарный.Доступность 	= ЭтоПриемкаЖДТранспорта;
	Элементы.СписокРегистрацииДопускПретензионный.Доступность 	= ЭтоПриемкаЖДТранспорта;
	
	Элементы.СписокРегистрацииКонтекстноеМенюПричинаПретензионности.Доступность = 
		ЭтоПриемкаЖДТранспорта И ТекущиеДанные.Претензионный;

КонецПроцедуры 
	
&НаКлиенте
Функция ДоступностьКнопкиВесНаВъезде(СтруктураДоступов)
	Возврат 
		РазрешитьВходнойКонтрольДоВзвешивания
		И СтруктураДоступов.ДоступенВзвешиваниеНаВъезде
		И ЕстьПравоНаРедактированиеВзвешивания;
КонецФункции  

&НаКлиенте
Функция ДоступностьКнопкиНомерПробы(СтруктураДоступов)
	Возврат
		РазрешитьВходнойКонтрольДоВзвешивания
		И СтруктураДоступов.ДоступенОтборПроб 
		И ЕстьПравоНаРедактированиеНомераПробы;
КонецФункции
	
&НаКлиенте
Функция ДоступностьКнопкиНаправлениеНаРазгрузку(РегистрацияНаПЛК, СтруктураДоступов)
	
	Возврат
	    ЕстьПраваНаправлениеНаРазгрузку(СтруктураДоступов)
		И НаправлятьНаРазгрузкуРазрешение(РегистрацияНаПЛК, РазрешитьВходнойКонтрольДоВзвешивания);
	
КонецФункции   

&НаСервереБезКонтекста
Функция НаправлятьНаРазгрузкуРазрешение(Регистрация, РазрешитьВходнойКонтрольДоВзвешивания)
	
	Возврат 
		гкс_ПриемкаТранспорта.НаправлятьНаРазгрузкуРазрешение(
			Регистрация, РазрешитьВходнойКонтрольДоВзвешивания);
	
КонецФункции


&НаКлиенте
Функция ЕстьПраваНаправлениеНаРазгрузку(СтруктураДоступов)
	Возврат
		СтруктураДоступов.ДоступенДиспетчер 
		И ЕстьПравоНаРедактированиеНаправленияНаРазгрузку;
КонецФункции
#КонецОбласти

#Область ОбновлениеДоступностиКнопокПоСостояниюПрибыл

&НаСервереБезКонтекста
Функция СоотвествуютСостояниюПрибыл(Состояние)
	
	СостоянияПроверки = Новый Массив;
	СостоянияПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.Прибыл); 
	СостоянияПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.ПрибылАвторизован); 
	СостоянияПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.НаВесахБрутто); 
	
	Возврат СостоянияПроверки.Найти(Состояние) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьКомандУправленияДляСостоянияПрибыл()
		
	Элементы.СписокРегистрацииПечатьЭтикетки.Доступность = Ложь;
	
	Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Доступность = 
	                        СтруктураДоступов.ДоступенРегистрация 
		                    Или СтруктураДоступов.ДоступенВзвешиваниеНаВъезде 
		                    Или СтруктураДоступов.ДоступенДиспетчер;
	
	Элементы.РедактироватьРегистрацию.Доступность = СтруктураДоступов.ДоступенРегистрация 
		                                            И ЕстьПравоНаРедактированиеРегистрации;
	
	Элементы.РедактироватьВесНаВъезде.Доступность = СтруктураДоступов.ДоступенВзвешиваниеНаВъезде 
	                                                И ЕстьПравоНаРедактированиеВзвешивания;
	Элементы.РедактироватьНомерПробы.Доступность = ДоступностьКнопкиНомерПробы(СтруктураДоступов); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДоступностиКнопокПоСостояниюГотовКОтборуПроб

&НаСервереБезКонтекста
Функция СоотвествуютСостояниюГотовКОтборуПроб(Состояние)
	
	СостоянияПроверки = Новый Массив;
	СостоянияПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.ГотовКОтборуПроб); 

	Возврат СостоянияПроверки.Найти(Состояние) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьКомандУправленияДляСостоянияГотовКОтборуПроб()

	Элементы.РедактироватьВесНаВъезде.Доступность = СтруктураДоступов.ДоступенВзвешиваниеНаВъезде	
		                                            И ЕстьПравоНаРедактированиеВзвешивания;
	
	Элементы.РедактироватьНомерПробы.Доступность = СтруктураДоступов.ДоступенОтборПроб 
	                                               И ЕстьПравоНаРедактированиеНомераПробы;
	
	Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Доступность = СтруктураДоступов.ДоступенВзвешиваниеНаВъезде 
		                                                             Или СтруктураДоступов.ДоступенОтборПроб 
		                                                             Или СтруктураДоступов.ДоступенДиспетчер;

	Элементы.РедактироватьРегистрацию.Доступность = СтруктураДоступов.ДоступенРегистрация 
		                                            И ЕстьПравоНаРедактированиеРегистрации;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДоступностиКнопокПоСостояниюВзвешенБрутто

&НаСервереБезКонтекста
Функция СоотвествуютСостояниюВзвешенБрутто(Состояние)
	
	СостоянияПроверки = Новый Массив;
	СостоянияПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.ВзвешенБрутто); 

	Возврат СостоянияПроверки.Найти(Состояние) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьКомандУправленияДляСостоянияВзвешенБрутто()

	Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Доступность = СтруктураДоступов.ДоступенВзвешиваниеНаВъезде
		                                                             Или СтруктураДоступов.ДоступенОтборПроб 
		                                                             Или СтруктураДоступов.ДоступенДиспетчер;
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		                                                             
	Если ТекущиеДанные.ТипРегистрации = ПредопределенноеЗначение("Перечисление.гкс_ТипРегистрации.Приемка") Тогда
		
			Элементы.РедактироватьВесНаВъезде.Доступность = СтруктураДоступов.ДоступенВзвешиваниеНаВъезде
			                                            И ЕстьПравоНаРедактированиеВзвешивания;
			                                            
			Элементы.РедактироватьРегистрацию.Доступность = СтруктураДоступов.ДоступенРегистрация
			                                            И ЕстьПравоНаРедактированиеРегистрации;
	Иначе
		Элементы.РедактированиеПриемка.Доступность = СтруктураДоступов.ДоступенОформлениеПриемки;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДоступностиКнопокПоСостояниюВзвешенТара

&НаСервереБезКонтекста
Функция СоотвествуютСостояниюВзвешенТара(Состояние)
	
	СостоянияПроверки = Новый Массив;
	СостоянияПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.ВзвешенТара);
	СостоянияПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.НеПринятоПоПревышениюМаксимальногоВеса);

	Возврат СостоянияПроверки.Найти(Состояние) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьКомандУправленияДляСостоянияВзвешенТара()

	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
			                                                             
	Если ТекущиеДанные.ТипРегистрации = ПредопределенноеЗначение("Перечисление.гкс_ТипРегистрации.Приемка") Тогда
		
		Элементы.РедактироватьВесНаВыезде.Доступность = СтруктураДоступов.ДоступенВзвешиваниеНаВыезде 
		                                                И ЕстьПравоНаРедактированиеВзвешивания;
		                                                
		Элементы.РедактированиеПриемка.Доступность = СтруктураДоступов.ДоступенОформлениеПриемки;
		Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Доступность = СтруктураДоступов.ДоступенДиспетчер;
	
	
	ИначеЕсли ТекущиеДанные.ТипРегистрации = ПредопределенноеЗначение("Перечисление.гкс_ТипРегистрации.Отгрузка") Тогда
		
		Элементы.РедактироватьВесНаВъезде.Доступность = СтруктураДоступов.ДоступенВзвешиваниеНаВъезде	
		                                                И ЕстьПравоНаРедактированиеВзвешивания;
		                                                
		Элементы.КомандаПодтверждениеРазгрузки.Доступность = СтруктураДоступов.ДоступенДиспетчер 
		                                                И ЕстьПравоНаРедактированиеНаправленияНаРазгрузку;
		                                                
	Иначе
			                                                
		Элементы.РедактироватьВесНаВыезде.Доступность 					= Ложь;
		Элементы.РедактированиеПриемка.Доступность 						= Ложь;
		Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Доступность 	= Ложь;
		Элементы.РедактироватьВесНаВъезде.Доступность 					= Ложь;
		Элементы.КомандаПодтверждениеРазгрузки.Доступность 				= Ложь; 	                                                
		                                                
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДоступностиКнопокПоСостояниюНеПринято

&НаСервереБезКонтекста
Функция СоотвествуютСостояниюНеПринято(Состояние)
	
	СостоянияПроверки = Новый Массив;
	СостоянияПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.НеПринятоПоПревышениюМаксимальногоВеса);

	Возврат СостоянияПроверки.Найти(Состояние) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьКомандУправленияДляСостоянияНеПринято()

	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
			                                                             
	Если ТекущиеДанные.ТипРегистрации = ПредопределенноеЗначение("Перечисление.гкс_ТипРегистрации.Приемка") Тогда
		
		Элементы.РедактироватьВесНаВыезде.Доступность = Ложь;                                                
		Элементы.РедактированиеПриемка.Доступность = СтруктураДоступов.ДоступенОформлениеПриемки;
		Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Доступность = СтруктураДоступов.ДоступенДиспетчер;
		                                                
	Иначе
			                                                
		Элементы.РедактироватьВесНаВыезде.Доступность 					= Ложь;
		Элементы.РедактированиеПриемка.Доступность 						= Ложь;
		Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Доступность 	= Ложь;
		Элементы.РедактироватьВесНаВъезде.Доступность 					= Ложь;
		Элементы.КомандаПодтверждениеРазгрузки.Доступность 				= Ложь; 	                                                
		                                                
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДоступностиКнопокПоСостояниюВзятыПробы

&НаСервереБезКонтекста
Функция СоотвествуютСостояниюВзятыПробы(Состояние)
	
	СостоянияПроверки = Новый Массив;
	СостоянияПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.ВзятыПробы); 

	Возврат СостоянияПроверки.Найти(Состояние) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьКомандУправленияДляСостоянияВзятыПробы()
	
	Элементы.РедактироватьНомерПробы.Доступность = СтруктураДоступов.ДоступенЛабАнализ 
	                                               И ЕстьПравоНаРедактированиеНомераПробы;
	                                               
	Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Доступность = СтруктураДоступов.ДоступенОтборПроб 
	                                                                 Или СтруктураДоступов.ДоступенЛабАнализ 
	                                                                 Или СтруктураДоступов.ДоступенДиспетчер;
	                                                                 
	Элементы.КомандаПробыПриняты.Доступность = СтруктураДоступов.ДоступенПринятиеПроб;
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущийВидПеревозки = ТекущиеДанные.ВидПеревозки;
	Если ТекущийВидПеревозки = ПредопределенноеЗначение("Перечисление.гкс_ТипыТранспортныхСредствДоставки.Автомобиль") Тогда
		Элементы.РедактироватьАнализ.Доступность = СтруктураДоступов.ДоступенЛабАнализ 
		                                           И ЕстьПравоНаРедактированиеЛабАнализа;
	КонецЕсли;	    
											   
	Элементы.РедактироватьВесНаВъезде.Доступность = ДоступностьКнопкиВесНаВъезде(СтруктураДоступов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДоступностиКнопокПоСостояниюПринятыПробы

&НаСервереБезКонтекста
Функция СоотвествуютСостояниюПринятыПробы(Состояние)
	
	СостоянияПроверки = Новый Массив;
	СостоянияПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.ПринятыПробы); 

	Возврат СостоянияПроверки.Найти(Состояние) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьКомандУправленияДляСостоянияПринятыПробы()

	Элементы.РедактироватьАнализ.Доступность = СтруктураДоступов.ДоступенЛабАнализ 
	                                           И ЕстьПравоНаРедактированиеЛабАнализа;
	                                           
    Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Доступность = СтруктураДоступов.ДоступенЛабАнализ 
                                                                     ИЛИ СтруктураДоступов.ДоступенДиспетчер;
	Элементы.РедактироватьВесНаВъезде.Доступность = ДоступностьКнопкиВесНаВъезде(СтруктураДоступов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДоступностиКнопокПоСостояниюПринятыПробы

&НаСервереБезКонтекста
Функция СоотвествуютСостояниюРезультатыПробПолучены(Состояние)
	
	СостоянияПроверки = Новый Массив;
	СостоянияПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.РезультатыПробПолучены); 

	Возврат Не СостоянияПроверки.Найти(Состояние) = Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьКомандУправленияДляСостоянияРезультатыПробПолучены()

	Элементы.РедактироватьАнализ.Доступность = СтруктураДоступов.ДоступенЛабАнализ 
	                                            И ЕстьПравоНаРедактированиеЛабАнализа;
	                                            
	Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Доступность = СтруктураДоступов.ДоступенЛабАнализ 
	                                                                 Или СтруктураДоступов.ДоступенДиспетчер;
	                                                                 
	Элементы.РедактироватьНаправлениеНаРазгрузку.Доступность = СтруктураДоступов.ДоступенДиспетчер 
	                                                           И ЕстьПравоНаРедактированиеНаправленияНаРазгрузку;
															   
	Элементы.РедактироватьВесНаВъезде.Доступность = ДоступностьКнопкиВесНаВъезде(СтруктураДоступов);
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДоступностиКнопокПоСостояниюКачествоНеПринято

&НаСервереБезКонтекста
Функция СоотвествуютСостояниюКачествоНеПринято(Состояние)
	
	СостоянияПроверки = Новый Массив;
	СостоянияПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.КачествоНеПринято); 

	Возврат СостоянияПроверки.Найти(Состояние) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьКомандУправленияДляСостоянияКачествоНеПринято()
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.РедактироватьАнализ.Доступность = СтруктураДоступов.ДоступенЛабАнализ 
	                                           И ЕстьПравоНаРедактированиеЛабАнализа;
	
	Элементы.РедактироватьНаправлениеНаРазгрузку.Доступность = 
		ДоступностьКнопкиНаправлениеНаРазгрузку(ТекущиеДанные.ДокументРегистрации, СтруктураДоступов);  
	
	Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Доступность = СтруктураДоступов.ДоступенЛабАнализ
		                                                             Или СтруктураДоступов.ДоступенДиспетчер;
	
	Элементы.РедактироватьВесНаВыезде.Доступность = СтруктураДоступов.ДоступенВзвешиваниеНаВыезде
		                                            И ЕстьПравоНаРедактированиеВзвешивания;
	Элементы.РедактироватьВесНаВъезде.Доступность = ДоступностьКнопкиВесНаВъезде(СтруктураДоступов);		
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДоступностиКнопокПоСостояниюКачествоПринято

&НаСервереБезКонтекста
Функция СоотвествуютСостояниюКачествоПринято(Состояние)
	
	СостоянияПроверки = Новый Массив;
	СостоянияПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.КачествоПринято); 

	Возврат СостоянияПроверки.Найти(Состояние) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьКомандУправленияДляСостоянияКачествоПринято()

	Элементы.РедактироватьАнализ.Доступность = СтруктураДоступов.ДоступенЛабАнализ 
	                                           И ЕстьПравоНаРедактированиеЛабАнализа;
											   
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.РедактироватьНаправлениеНаРазгрузку.Доступность = 
		ДоступностьКнопкиНаправлениеНаРазгрузку(ТекущиеДанные.ДокументРегистрации, СтруктураДоступов);  
		
	Элементы.РедактироватьВесНаВъезде.Доступность = ДоступностьКнопкиВесНаВъезде(СтруктураДоступов);
	                                                           
	Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Доступность = СтруктураДоступов.ДоступенЛабАнализ 
	                                                                 Или СтруктураДоступов.ДоступенДиспетчер;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДоступностиКнопокПоСостояниюКачествоПринято

&НаСервереБезКонтекста
Функция СоотвествуютСостояниюПогрузкаРазрешена(Состояние)
	
	СостоянияПроверки = Новый Массив;
	СостоянияПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.ПогрузкаРазрешена); 

	Возврат СостоянияПроверки.Найти(Состояние) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьКомандУправленияДляСостоянияПогрузкаРазрешена()

	Элементы.РедактироватьНаправлениеНаРазгрузку.Доступность = СтруктураДоступов.ДоступенДиспетчер 
	                                                           И ЕстьПравоНаРедактированиеНаправленияНаРазгрузку;
	                                                           
	Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Доступность = СтруктураДоступов.ДоступенДиспетчер;
	Элементы.КомандаПодтверждениеРазгрузки.Доступность = СтруктураДоступов.ДоступенПодтверждениеРазгрузки;
	Элементы.КомандаОтменитьРазрешение.Доступность = СтруктураДоступов.ДоступенПодтверждениеРазгрузки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДоступностиКнопокПоСостояниюВыгрузкаРазрешена

&НаСервереБезКонтекста
Функция СоотвествуютСостояниюВыгрузкаРазрешена(Состояние)
	
	СостоянияПроверки = Новый Массив;
	СостоянияПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.ВыгрузкаРазрешена); 

	Возврат СостоянияПроверки.Найти(Состояние) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьКомандУправленияДляСостоянияВыгрузкаРазрешена()

	Элементы.РедактироватьНаправлениеНаРазгрузку.Доступность = СтруктураДоступов.ДоступенДиспетчер 
	                                                           И ЕстьПравоНаРедактированиеНаправленияНаРазгрузку;
			
	Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Доступность = СтруктураДоступов.ДоступенДиспетчер;
	Элементы.КомандаПодтверждениеРазгрузки.Доступность = СтруктураДоступов.ДоступенПодтверждениеРазгрузки;
	Элементы.КомандаОтменитьРазрешение.Доступность = СтруктураДоступов.ДоступенПодтверждениеРазгрузки;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДоступностиКнопокПоСостояниюПогружен

&НаСервереБезКонтекста
Функция СоотвествуютСостояниюПогружен(Состояние)
	
	СостоянияПроверки = Новый Массив;
	СостоянияПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.Погружен); 

	Возврат СостоянияПроверки.Найти(Состояние) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьКомандУправленияДляСостоянияПогружен()

	Элементы.РедактироватьВесНаВыезде.Доступность = СтруктураДоступов.ДоступенВзвешиваниеНаВыезде 
	                                                И ЕстьПравоНаРедактированиеВзвешивания;
	                                                
	Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Доступность = СтруктураДоступов.ДоступенДиспетчер;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДоступностиКнопокПоСостояниюВыгружен

&НаСервереБезКонтекста
Функция СоотвествуютСостояниюВыгружен(Состояние)
	
	СостоянияПроверки = Новый Массив;
	СостоянияПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.Выгружен);

	Возврат СостоянияПроверки.Найти(Состояние) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьКомандУправленияДляСостоянияВыгружен()

	Элементы.РедактироватьВесНаВыезде.Доступность = СтруктураДоступов.ДоступенВзвешиваниеНаВыезде 
	                                                И ЕстьПравоНаРедактированиеВзвешивания;
	                                                
	Элементы.СписокРегистрацииОтклонитьРегистрациюАвто.Доступность = СтруктураДоступов.ДоступенДиспетчер;
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбновитьКнопки() 
	
	УстановитьДоступностьКнопокУправленияРегистрациейТранспортаПоУмолчанию();
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если Не (ТекущиеДанные <> Неопределено И ТекущиеДанные.Свойство("Состояние")) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьКомандУправленияДопусками();
	
	ТекущееСостояние = ТекущиеДанные.Состояние;
	
	Если СоотвествуютСостояниюПрибыл(ТекущееСостояние) Тогда
		ОбновитьДоступностьКомандУправленияДляСостоянияПрибыл();
		
	ИначеЕсли СоотвествуютСостояниюГотовКОтборуПроб(ТекущееСостояние) Тогда
		ОбновитьДоступностьКомандУправленияДляСостоянияГотовКОтборуПроб();
		
	ИначеЕсли СоотвествуютСостояниюВзвешенБрутто(ТекущееСостояние) Тогда
		ОбновитьДоступностьКомандУправленияДляСостоянияВзвешенБрутто();
		
	ИначеЕсли СоотвествуютСостояниюВзятыПробы(ТекущееСостояние) Тогда
		ОбновитьДоступностьКомандУправленияДляСостоянияВзятыПробы();
		
	ИначеЕсли СоотвествуютСостояниюПринятыПробы(ТекущееСостояние) Тогда
		ОбновитьДоступностьКомандУправленияДляСостоянияПринятыПробы();
		
	ИначеЕсли СоотвествуютСостояниюРезультатыПробПолучены(ТекущееСостояние) Тогда
		ОбновитьДоступностьКомандУправленияДляСостоянияРезультатыПробПолучены();
		
	ИначеЕсли СоотвествуютСостояниюКачествоНеПринято(ТекущееСостояние) Тогда
		ОбновитьДоступностьКомандУправленияДляСостоянияКачествоНеПринято();
		
	ИначеЕсли СоотвествуютСостояниюКачествоПринято(ТекущееСостояние) Тогда
		ОбновитьДоступностьКомандУправленияДляСостоянияКачествоПринято();
		
	ИначеЕсли СоотвествуютСостояниюПогрузкаРазрешена(ТекущееСостояние) Тогда
		ОбновитьДоступностьКомандУправленияДляСостоянияПогрузкаРазрешена();
		
	ИначеЕсли СоотвествуютСостояниюВыгрузкаРазрешена(ТекущееСостояние) Тогда
		ОбновитьДоступностьКомандУправленияДляСостоянияВыгрузкаРазрешена();
		
	ИначеЕсли СоотвествуютСостояниюПогружен(ТекущееСостояние) Тогда
		ОбновитьДоступностьКомандУправленияДляСостоянияПогружен();
		
	ИначеЕсли СоотвествуютСостояниюВыгружен(ТекущееСостояние) Тогда
		ОбновитьДоступностьКомандУправленияДляСостоянияВыгружен();
		
	ИначеЕсли СоотвествуютСостояниюНеПринято(ТекущееСостояние) Тогда
		ОбновитьДоступностьКомандУправленияДляСостоянияНеПринято();	
		
	ИначеЕсли СоотвествуютСостояниюВзвешенТара(ТекущееСостояние) Тогда
		ОбновитьДоступностьКомандУправленияДляСостоянияВзвешенТара();
			
	КонецЕсли;
	
КонецПроцедуры
		
#КонецОбласти

#Область ПодключаемыеКоманды 
// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	Если Элементы.СписокРегистрации.ТекущиеДанные <> Неопределено Тогда
		
		ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, 
			Элементы.СписокРегистрации.ТекущиеДанные.ДокументРегистрации);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокРегистрации);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
#КонецОбласти

#Область Заметки

&НаСервере
Процедура ОбновитьНаправленияРазгрузки()
	
	Пока Элементы.ГруппаНаправленияРазгрузкиЭлементы.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элементы.Удалить(Элементы.ГруппаНаправленияРазгрузкиЭлементы.ПодчиненныеЭлементы.Получить(0));
	КонецЦикла;
	
	НаправленияРазгрузки = НаправленияРазгрузкиПоВидуПеревозки(ОтборТочкаМаршрута, ОтборВидПеревозки);
	Для Каждого КлючЗначение Из НаправленияРазгрузки Цикл
		
		СформироватьЭлементИнформацияНаправленияРазгрузки(
			ПредставлениеНаправленияРазгрузкиПоНоменклатуре(НаправленияРазгрузки, КлючЗначение.Ключ));
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЭлементИнформацияНаправленияРазгрузки(Знач ТекстЭлемента)
	
	Ключ = "Ключ" + СтрЗаменить(Строка(Новый УникальныйИдентификатор),"-", "");
			
	НовыйТекст = Элементы.Добавить(Ключ + "Надпись", Тип("ДекорацияФормы"), Элементы.ГруппаНаправленияРазгрузкиЭлементы);
	НовыйТекст.Вид       = ВидДекорацииФормы.Надпись;
	НовыйТекст.Заголовок = ТекстЭлемента;
	//НовыйТекст.АвтоМаксимальнаяШирина = Ложь;
	НовыйТекст.Рамка		= Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
	НовыйТекст.Ширина		= 28;
	НовыйТекст.Высота		= 4;
	НовыйТекст.ГоризонтальноеПоложение	= ГоризонтальноеПоложениеЭлемента.Центр;
	НовыйТекст.ВертикальноеПоложение	= ВертикальноеПоложениеЭлемента.Центр;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеНаправленияРазгрузкиПоНоменклатуре(НаправленияРазгрузки, Номенклатура)	
	МассивСтрок	= Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Номенклатура + Символы.ПС, Новый Шрифт(, 8, Истина)));
	
	ДанныеМассива = НаправленияРазгрузки.Получить(Номенклатура); 
	МассивПодстрок = Новый Массив;
	Для Каждого ЭлементМассива Из ДанныеМассива Цикл	
		МассивПодстрок.Добавить(СтрШаблон("%1 - %2", ЭлементМассива.Силос, ЭлементМассива.СлужебнаяНоменклатура));	
	КонецЦикла;
	
	МассивСтрок.Добавить(СтрСоединить(МассивПодстрок, Символы.ПС));
	
	Возврат	Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции	

&НаСервереБезКонтекста
Функция НаправленияРазгрузкиПоВидуПеревозки(ТочкаМаршрута, ВидПеревозки)
	
	НаправленияРазгрузки = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(НастройкиНазначенияРазгрузки.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(НастройкиНазначенияРазгрузки.СлужебнаяНоменклатура) КАК СлужебнаяНоменклатура,
	|	ПРЕДСТАВЛЕНИЕ(НастройкиНазначенияРазгрузки.Силос) КАК Силос
	|ИЗ
	|	РегистрСведений.гкс_НастройкиНазначенияРазгрузки.СрезПоследних(
	|			,
	|			ТочкаМаршрута = &ТочкаМаршрута
	|				И ВидПеревозки = &ВидПеревозки) КАК НастройкиНазначенияРазгрузки
	|ГДЕ
	|	НастройкиНазначенияРазгрузки.Действует
	|ИТОГИ ПО
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("ВидПеревозки", ВидПеревозки);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка	= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		МассивСтрок = Новый Массив;
		
		ВыборкаДетальная = Выборка.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл		
			ДанныеОтображения = Новый Структура("Силос, СлужебнаяНоменклатура");
			ЗаполнитьЗначенияСвойств(ДанныеОтображения, ВыборкаДетальная); 
			МассивСтрок.Добавить(ДанныеОтображения);			
		КонецЦикла;
		
		НаправленияРазгрузки.Вставить(Выборка.Номенклатура, МассивСтрок);	
	КонецЦикла;
	
	Возврат НаправленияРазгрузки;
	
КонецФункции

#КонецОбласти 

#Область Прочее

&НаКлиенте
Процедура ЗаписатьДанныеДляСАРАНаКлиенте(ПараметрыЗаписиДанныхСАРА)
	
	Перем СсылкаНаПробу;
	
	Если Не ПараметрыЗаписиДанныхСАРА.Свойство("СсылкаНаСформированнуюПробу", СсылкаНаПробу) Тогда
		Возврат;
	КонецЕсли;
	
	гкс_ИнтеграцияСАРАКлиент.СформироватьФайлДляСАРА(СсылкаНаПробу);

КонецПроцедуры

&НаКлиенте
Функция РаботаСоСтрокойПеревозокЖД(СтрокаСписка)
	
	Возврат ЭтоЖДПеревозка 
		И СтрокаСписка.ВидПеревозки = ОтборВидПеревозки
		И СтрокаСписка.ТипРегистрации = ОтборТипРегистрации
		И ЭтоПриемкаТранспорта(ОтборТипРегистрации);
	 
КонецФункции

&НаСервере
Функция ПолучитьПричинуПретензионности(ПараметрыСтроки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СтатусыДопускаВагоновСрезПоследних.Комментарий КАК СТРОКА(500)) КАК Комментарий
	|ИЗ
	|	РегистрСведений.гкс_СтатусыДопускаВагоновКВскрытию.СрезПоследних(
	|			&Период,
	|			ДокументРегистрации = &ДокументРегистрации
	|				И Вагон = &Вагон
	|				И ДопускКВскрытию = &ДопускКВскрытию) КАК СтатусыДопускаВагоновСрезПоследних";
	
	Запрос.УстановитьПараметр("Вагон", ПараметрыСтроки.Вагон);
	Запрос.УстановитьПараметр("ДокументРегистрации", ПараметрыСтроки.ДокументРегистрации);
	Запрос.УстановитьПараметр("ДопускКВскрытию", Перечисления.гкс_ДопускиКВскрытиюВагонов.Претензионный);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ТекстПричины = Выборка.Комментарий;
	Иначе		
		ТекстПричины = НСтр("ru = 'Комментарий пустой'");
	КонецЕсли;
	
	Возврат ТекстПричины;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ПодготовитьПараметрыОткрытия(ДокументРегистрации, ПараметрыОткрытия)
		
	ЛабАнализРегистрации = НайтиЛабАнализПоРегистрации(ДокументРегистрации);
	
	Если ЗначениеЗаполнено(ЛабАнализРегистрации) Тогда
		ПараметрыОткрытия.Вставить("Ключ", ЛабАнализРегистрации);
		ПараметрыОткрытия.Вставить("ИзАРМа", Истина);
	КонецЕсли;
	
	ДополнительныеПараметры = ЗаполнитьДополнительныеПараметрыДляПробыПриняты(ДокументРегистрации);
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗначениеВДиалоге(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ПоказатьЗначение(Неопределено, Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДополнительныеПараметрыДляПробыПриняты(ДокументРегистрации)
	
	УИД = Строка(Новый УникальныйИдентификатор());
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументРегистрации", ДокументРегистрации); 
	ДополнительныеПараметры.Вставить("УИД", УИД);
	ДополнительныеПараметры.Вставить("Состояние", 
		ПредопределенноеЗначение("Перечисление.гкс_СостоянияРегистрации.ПринятыПробы"));
			
	Возврат ДополнительныеПараметры;
	
КонецФункции  

&НаКлиенте
Функция ЗаполнитьДополнительныеПараметрыДляПробыПринятыГрупповаяОбработка(ВыбранныеСтроки)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеДляОбработки", ВыбранныеСтроки); 
	ДополнительныеПараметры.Вставить("Состояние", 
		ПредопределенноеЗначение("Перечисление.гкс_СостоянияРегистрации.ПринятыПробы"));
		
	Возврат ДополнительныеПараметры;
	
КонецФункции  

&НаСервереБезКонтекста
Функция НайтиЛабАнализПоРегистрации(ДокументРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокЛабораторныйАнализ.Ссылка КАК ЛабАнализ
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ КАК ДокЛабораторныйАнализ
	|ГДЕ
	|	ДокЛабораторныйАнализ.гкс_ДокументРегистрации = &ДокументРегистрации";
	
	Запрос.УстановитьПараметр("ДокументРегистрации", ДокументРегистрации);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
	 	Выборка.Следующий();
		ЛабАнализ = Выборка.ЛабАнализ;
	Иначе	
		ЛабАнализ = Документы.гкс_ЛабораторныйАнализ.ПустаяСсылка();
	КонецЕсли;
		
	Возврат ЛабАнализ;
	
КонецФункции

&НаСервере
Процедура УстановитьТекстЗапросаСпискаРегистрации()
	
	Если ЗначениеЗаполнено(ОтборВидПеревозки) Тогда 
		
		Если ЭтоЖДПеревозка Тогда
			ТекстЗапроса = РегистрыСведений.гкс_АРМПриемкиНаПЛКСписокРегистраций.
				ПолучитьТекстЗапросаДинамическогоСпискаДопуски();
		Иначе
			ТекстЗапроса = "";
		КонецЕсли;
		
		СписокРегистрации.ТекстЗапроса = ТекстЗапроса + РегистрыСведений.гкс_АРМПриемкиНаПЛКСписокРегистраций.
			ПолучитьТекстЗапросаДинамическогоСписка(ЭтоЖДПеревозка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьЧасовойПоясПЛК()
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборТочкаМаршрута, "гкс_ЧасовойПоясТочкиМаршрута");
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруДоступовНаСервере(НужноЗаполнять)
	
	Если НужноЗаполнять Тогда
		СтруктураДоступов = гкс_ПриемкаНаПЛКСервер.ПолучитьРолиНаПЛК(
			ОтборТочкаМаршрута, ОтборВидПеревозки, Пользователь, ЭтоПолноправныйПользователь);
	Иначе
		СтруктураДоступов = гкс_ПриемкаНаПЛКСервер.ИнициализироватьСтруктуруДоступовПриемкаПЛК();
	КонецЕсли;

	Возврат СтруктураДоступов;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОжиданияОбновитьДанные15()
	
	ОбработчикОжиданияОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияОбновитьДанные()
	
	Если Не Элементы.ГруппаОсновная.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СписокРегистрации.Обновить();
	
	РежимПросмотраДетальныхЗаписей = Элементы.ГруппаДетальнаяИнформация.Видимость;
	
	Если РежимПросмотраДетальныхЗаписей Тогда
		ЗаполнитьДетальнальныеЗаписиРегистрацииНаКлиенте();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Свойство("ТипРегистрации")
		И Не ОтборТипРегистрации = ТекущиеДанные.ТипРегистрации Тогда
			
		УстановитьЗаголовкиЭлементовПоТипуРегистрации(ТекущиеДанные.ТипРегистрации);
	КонецЕсли;
	
	ОбновитьКнопки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовкиЭлементовПоТипуРегистрации(ТипРегистрацииТранспорта)
	
	ЭтоОтгрузка = (ТипРегистрацииТранспорта = ПредопределенноеЗначение("Перечисление.гкс_ТипРегистрации.Отгрузка"));
	 
	Элементы.ОтправительПолучатель.Заголовок = ?(ЭтоОтгрузка, НСтр("ru='Грузополучатель'"), НСтр("ru='Грузоотправитель'"));
	Элементы.Организация.Заголовок = ?(ЭтоОтгрузка, НСтр("ru='Грузоотправитель'"), НСтр("ru='Грузополучатель'"));	
	Элементы.Контрагент.Заголовок = ?(ЭтоОтгрузка, НСтр("ru='Покупатель'"), НСтр("ru='Поставщик'"));
	Элементы.РедактироватьНаправлениеНаРазгрузку.Заголовок = ?(ЭтоОтгрузка, НСтр("ru='На погрузку'"), НСтр("ru='На разгрузку'"));
	Элементы.КомандаПодтверждениеРазгрузки.Заголовок = ?(ЭтоОтгрузка, НСтр("ru='Погрузка'"), НСтр("ru='Разгрузка'"));
	Элементы.РедактированиеПриемка.Заголовок = ?(ЭтоОтгрузка, НСтр("ru='Отгрузка'"), НСтр("ru='Приемка'"));
		
	Элементы.ГруппаАнализы.Видимость = ?(ЭтоОтгрузка, Ложь, Истина);
	
КонецПроцедуры

#Область РаботаСОкномДетальныеЗаписиРегистраций

&НаКлиенте
Процедура ЗаполнитьДетальнальныеЗаписиРегистрацииНаКлиенте()
	
	УстановитьЗначенияПоУмолчаниюДляДетальныхЗаписейНаКлиенте();
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ТекущиеДанные, "НомерПробы, СкладПлан");
		            
	КомментарийРегистрации = ТекущиеДанные.Комментарий;
	
	Если ОтборТипРегистрации = ПредопределенноеЗначение("Перечисление.гкс_ТипРегистрации.Приемка") Тогда
		
		ВесНаВъезде	= ТекущиеДанные.ВесБрутто;
		ВесНаВыезде	= ТекущиеДанные.ВесТары;
		
	ИначеЕсли ОтборТипРегистрации = ПредопределенноеЗначение("Перечисление.гкс_ТипРегистрации.Отгрузка") Тогда
		
		ВесНаВыезде = ТекущиеДанные.ВесБрутто;
		ВесНаВъезде	= ТекущиеДанные.ВесТары;
		
	Иначе
		ВесНаВъезде	= 0;
		ВесНаВыезде	= 0;	
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ДокументРегистрации) Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДетальнальныеЗаписиРегистрацииНаСервере(ТекущиеДанные.ДокументРегистрации, 
	                                                 ТекущиеДанные.ДокументРегистрацииАнализов);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДетальнальныеЗаписиРегистрацииНаСервере(ДокументРегистрации, ДокументРегистрацииАнализов)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	ДанныеДляДетальныхЗаписей = Обработка.ДанныеДляДетальныхЗаписей(ДокументРегистрации, ДокументРегистрацииАнализов);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеДляДетальныхЗаписей.ДанныеРегистрации);
	
	КачественныеПоказатели.Очистить();
	КачественныеПоказатели.Загрузить(ДанныеДляДетальныхЗаписей.КачественныеПоказатели);
	
	Если ЗначениеЗаполнено(ДокументРегистрацииАнализов) Тогда
		ДатаРегистрацииАнализов	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРегистрацииАнализов, "Дата");
	КонецЕсли;
	
	ВесБруттоПоДокументам = ДанныеДляДетальныхЗаписей.ДанныеРегистрации.ВесБруттоПоДокументам;
	ВесТарыПоДокументам = ДанныеДляДетальныхЗаписей.ДанныеРегистрации.ВесТарыПоДокументам;
	
	ТаблицаСписокПоказанийВесаЗаполнить(); 
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаСписокПоказанийВесаЗаполнить()
	
	Если ОтборТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка Тогда
		ВесНетто	= ВесНаВъезде - ВесНаВыезде;
		ВесРазница	= ВесНетто - ВесПоДокументам;
		ВесРазницаБрутто = ВесБруттоПоДокументам - ВесНаВъезде;
		ВесРазницаТара = ВесТарыПоДокументам - ВесНаВыезде; 		 
	Иначе
		ВесНетто	= ВесНаВыезде - ВесНаВъезде;
		ВесРазница	= 0;
		ВесРазницаБрутто = 0;
		ВесРазницаТара = 0;		
	КонецЕсли;
	
	ТаблицаСписокПоказанийВеса.Очистить();
	
	НоваяСтрока = ТаблицаСписокПоказанийВеса.Добавить();
	НоваяСтрока.ВидВеса       = "Брутто";
	НоваяСтрока.ПоДокументам  = ВесБруттоПоДокументам;
	НоваяСтрока.ПоВзвешиванию = ?(ОтборТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка, 
								  ВесНаВъезде, ВесНаВыезде);
	НоваяСтрока.РазницаВеса   = ВесРазницаБрутто;
	
	НоваяСтрока = ТаблицаСписокПоказанийВеса.Добавить();
	НоваяСтрока.ВидВеса       = "Тара";
	НоваяСтрока.ПоДокументам  = ВесТарыПоДокументам;
	НоваяСтрока.ПоВзвешиванию = ?(ОтборТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка,
								  ВесНаВыезде, ВесНаВъезде);
	НоваяСтрока.РазницаВеса   = ВесРазницаТара;
	
	НоваяСтрока = ТаблицаСписокПоказанийВеса.Добавить();
	НоваяСтрока.ВидВеса       = "Нетто";
	НоваяСтрока.ПоДокументам  = ВесПоДокументам;
	НоваяСтрока.ПоВзвешиванию = ВесНетто;
	НоваяСтрока.РазницаВеса   = ВесРазница; 

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияПоУмолчаниюДляДетальныхЗаписейНаКлиенте()
	
	ВесНетто 		= 0;
	ВесРазница 		= 0;
	ВесНаВъезде		= 0;
	ВесНаВыезде 	= 0;
	ВесПоДокументам	= 0;
	
	НомерТТН 				= Неопределено;
	Водитель 				= Неопределено;
	СкладПлан 				= Неопределено;
	НомерПробы 				= Неопределено;
	Контрагент 				= Неопределено;
	Организация 			= Неопределено;
	Собственник				= Неопределено;
	Номенклатура 			= Неопределено;
	ДатаРегистрации			= Неопределено;
	ТранспортноеСредство 	= Неопределено;
	ОтправительПолучатель 	= Неопределено;
	КомментарийРегистрации 	= Неопределено;
	ДатаРегистрацииАнализов	= Неопределено;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьОтборыСпискаРегистрации()
	
	Если ЗначениеЗаполнено(ОтборТочкаМаршрута) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРегистрации, "ТочкаМаршрута", 
			ОтборТочкаМаршрута, ВидСравненияКомпоновкиДанных.Равно);
	Иначе	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРегистрации, "ТочкаМаршрута", 
			ОтборТочкаМаршрута, ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборВидПеревозки) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРегистрации, "ВидПеревозки", 
			ОтборВидПеревозки, ВидСравненияКомпоновкиДанных.Равно);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРегистрации, "ВидПеревозки", 
			ОтборВидПеревозки, ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборТипРегистрации) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРегистрации, "ТипРегистрации", 
			ОтборТипРегистрации, ВидСравненияКомпоновкиДанных.Равно);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРегистрации, "ТипРегистрации", 
			ОтборТипРегистрации, ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;
	
КонецПроцедуры                                  

&НаСервере 
Процедура УстановитьНастройкиСортировки()
	
	Если ОтборВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль Тогда
		ЭлементыПользовательскихНастроек = СписокРегистрации.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
 
    	Для Каждого НастройкаСписка Из ЭлементыПользовательскихНастроек Цикл
			
			Если ТипЗнч(НастройкаСписка) = ТипЗнч(СписокРегистрации.КомпоновщикНастроек.Настройки.Порядок)
            	И НастройкаСписка.Элементы.Количество() > 0 Тогда
            	Если НастройкаСписка.Элементы[0].Поле = Новый ПолеКомпоновкиДанных("Протеин") Тогда
            		НастройкаСписка.Элементы.Очистить();
            		Прервать;
            	КонецЕсли;
			КонецЕсли;
			
    	КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСпецификацию(ДокументРегистрации)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРегистрации, "Спецификация");
	
КонецФункции

&НаКлиенте
Процедура РедактироватьВесНаКлиенте(ТипВзвешивания, ДокументРегистрации,
	ДокументРегистрацииВеса, КачествоНеПринято = Ложь)
	
	ПараметрыФормы = Новый Структура;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ДокументРегистрации", ДокументРегистрации);
	ЗначенияЗаполнения.Вставить("ТипВзвешивания", ТипВзвешивания);        
	ЗначенияЗаполнения.Вставить("ТочкаМаршрута", ОтборТочкаМаршрута);
	
	Если ЗначениеЗаполнено(ДокументРегистрацииВеса) Тогда
		ПараметрыФормы = Новый Структура("Ключ", ДокументРегистрацииВеса);
	Иначе
		ЗначенияЗаполнения.Вставить("КачествоНеПринято", КачествоНеПринято);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("ИзАРМа", Истина);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработчикОжиданияОбновитьФорму", ЭтотОбъект);
	
	Если ЭтоЖДПеревозка И ТипВзвешивания = ПредопределенноеЗначение("Перечисление.гкс_ТипыВзвешивания.Выезд") Тогда
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("РедактироватьВесНаВыездеЗавершение", ЭтотОбъект);
	КонецЕсли;
	
	ИдентификаторЗамера =
	ОценкаПроизводительностиКлиент.ЗамерВремени(ИмяКлючевойОперацииПоТипуВзвешивания(ТипВзвешивания), Истина);
		
	ОткрытьФорму("Документ.гкс_Взвешивание.ФормаОбъекта", ПараметрыФормы, 
		ЭтотОбъект, УникальныйИдентификатор, Неопределено, Неопределено, 
		ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера, Ложь);	
				 	
КонецПроцедуры

&НаКлиенте
Функция ИмяКлючевойОперацииПоТипуВзвешивания(ТипВзвешивания)
	
	Результат = "ПриемкаТранспорта.Въезд.ОткрытиеФормыНовогоДокументаВзвешивания"; 
	
	Если ТипВзвешивания = ПредопределенноеЗначение("Перечисление.гкс_ТипыВзвешивания.Выезд") Тогда
		Результат = "ПриемкаТранспорта.Выезд.ОткрытиеФормыНовогоДокументаВзвешивания"; 
	КонецЕсли;
	 
	Возврат Результат;
	
КонецФункции

#Область ФормированиеКомплектаДокументовПриемки

&НаКлиенте
Функция ДанныеРегистрацииДляФормированияКомплектаДокументов(ВходящиеДанныеРегистрации)
	
	ДанныеРегистрации = Новый Структура;

	ДанныеРегистрации.Вставить("ЛабораторныйАнализ", ВходящиеДанныеРегистрации.ДокументРегистрацииАнализов);
	
	ДанныеРегистрации.Вставить("ВесНеттоФакт",	ВходящиеДанныеРегистрации.ВесНетто);
	ДанныеРегистрации.Вставить("ВесНетто", 		ВходящиеДанныеРегистрации.ВесНеттоДокумент);
	
	ДанныеРегистрации.Вставить("ВесБруттоФакт", ВходящиеДанныеРегистрации.ВесБрутто);
	ДанныеРегистрации.Вставить("ВесБрутто", 	ВходящиеДанныеРегистрации.ВесБруттоДокумент);
	
	ДанныеРегистрации.Вставить("ВесТарыФакт", 	ВходящиеДанныеРегистрации.ВесТары);
	ДанныеРегистрации.Вставить("ВесТары", 		ВходящиеДанныеРегистрации.ВесТарыДокумент);
	
	ДанныеРегистрации.Вставить("ПунктРазгрузки", ВходящиеДанныеРегистрации.СкладПлан);

	Возврат ДанныеРегистрации;
	
КонецФункции

&НаСервере
Процедура СформироватьКомплектДокументовПриемкиИЗарегистрироватьУбытиеТранспорта(ДокументРегистрации, ДанныеРегистрации)
	
	РеквизитФормыВЗначение("Объект")
	      .СформироватьКомплектДокументовПриемкиИЗарегистрироватьУбытиеТранспорта(ДокументРегистрации, ДанныеРегистрации);

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОтклонитьРегистрациюНаСервере(Комментарий, ДополнительныеПараметры)
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	
	Для Каждого ДанныеРегистрации Из ДополнительныеПараметры.МассивРегистрации Цикл
		
		ДополнитьКомментарийОтклоненияРегистрации(Комментарий, ДанныеРегистрации.ТранспортныйДокумент);
		МодульОбъекта.ВыполнитьУдалениеСвязиРегистрацииИТранспортногоДокумента(ДанныеРегистрации.ДокументРегистрации);

		ЗарегистрироватьНовоеСостояние(Перечисления.гкс_СостоянияРегистрации.НеПринято, 
			ДанныеРегистрации.ДокументРегистрации, Комментарий);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьКомментарийОтклоненияРегистрации(Комментарий, ТранспортныйДокумент)
	
	ТекстПользователя = Комментарий;
	ТекДата = ТекущаяДатаСеанса();
	
	Если ЗначениеЗаполнено(ТранспортныйДокумент) Тогда
		ШаблонКомментария = НСтр("ru='%1 : %2. Дата отклонения: %3'");
		Комментарий = СтрШаблон(ШаблонКомментария, ТранспортныйДокумент, 
			ТекстПользователя, ТекДата);
	Иначе
		ШаблонКомментария = НСтр("ru='%1. Дата отклонения: %2'");
		Комментарий = СтрШаблон(ШаблонКомментария, ТекстПользователя, ТекДата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Оповещение после отклонения регистрации
//
// Параметры:
//  Комментарий - Строка - комментарий с причинами отклонения.
//  ДополнительныеПараметры - Структура - Параметры для формирования записи в регистре при подтверждении отклонения.
//
Процедура ОтклонитьРегистрациюПослеВводаКомментария(Комментарий, ДополнительныеПараметры) Экспорт
	
	ИнтервалОбработчика = 0.5;
	
	Если ЗначениеЗаполнено(Комментарий) Тогда	
		ОтклонитьРегистрациюНаСервере(Комментарий, ДополнительныеПараметры);
		ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновитьДанные", ИнтервалОбработчика, Истина);
		Оповестить("ИзменениеОтклонитьРегистрацию");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНомерПробы(ДокументРегистрации)
	
	РезультатВозврата = Неопределено;
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НомерПробы.Код КАК Код
	|ИЗ
	|	Справочник.гкс_НомерПробы.СписокРегистраций КАК НомерПробыТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гкс_НомерПробы КАК НомерПробы
	|		ПО НомерПробыТаблица.Ссылка = НомерПробы.Ссылка
	|ГДЕ
	|	НомерПробыТаблица.ДокументРегистрации = &ДокументРегистрации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код УБЫВ";
	
	Запрос.УстановитьПараметр("ДокументРегистрации", ДокументРегистрации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		РезультатВозврата = Выборка.Код;
	КонецЕсли;
	
	Возврат РезультатВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНаправлениеНаРазгрузку(Регистрация)
	
	Возврат гкс_ПриемкаТранспорта.НаправлениеНаРазгрузкуПоРегистрации(Регистрация);
	
КонецФункции

&НаСервереБезКонтекста
Функция СостоянияПриемкиДляРазгрузки()
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.гкс_СостоянияРегистрации.ВзвешенТара);
	Состояния.Добавить(Перечисления.гкс_СостоянияРегистрации.КачествоПринято);	
	Возврат Состояния;
			
КонецФункции

&НаКлиенте
// Оповещение после подтверждения принятия проб
//
// Параметры:
//  Результат - КодВозвратаДиалога - Да или Нет.
//  Параметры - Структура - Параметры для формирования записи в регистре при подтверждении разгрузки.
//
Процедура ПодверждениеПробыПриняты(Результат, Параметры) Экспорт
	
	ПодготовитьКРегистрации(Результат, Параметры);
	
КонецПроцедуры

&НаКлиенте
// Оповещение после подтверждения принятия проб
//
// Параметры:
//  Результат - КодВозвратаДиалога - Да или Нет.
//  СтруктураПараметров - Структура - Параметры для формирования записи в регистре при подтверждении разгрузки.
//
Процедура ПодверждениеПробыПринятыГрупповаяОбработка(Результат, СтруктураПараметров) Экспорт
	
	ПодготовитьКРегистрацииГрупповаяОбработка(Результат, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
// Оповещение после подтверждения разгрузки
//
// Параметры:
//  Результат - КодВозвратаДиалога - Да или Нет.
//  Параметры - Структура - Параметры для формирования записи в регистре при подтверждении разгрузки.
//
Процедура ПодверждениеРазгрузки(Результат, Параметры) Экспорт
	
	ПодготовитьКРегистрации(Результат, Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьКРегистрации(Результат, СтруктураПараметров)
	
	ИнтервалОбработчика = 0.5;
	
	РегистрироватьНовоеСостояние = Результат = КодВозвратаДиалога.Да;
	ОбработатьПодтверждениеНаСервере(СтруктураПараметров, СтруктураПараметров.Состояние, РегистрироватьНовоеСостояние);
	
	Если РегистрироватьНовоеСостояние Тогда
			
		Элементы.СписокРегистрации.Обновить();
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновитьДанные", ИнтервалОбработчика, Истина);
		Если СтруктураПараметров.Свойство("Оповещение") Тогда
			Оповестить(СтруктураПараметров.Оповещение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры      

&НаКлиенте
Процедура ПодготовитьКРегистрацииГрупповаяОбработка(Результат, СтруктураПараметров)
	
	ИнтервалОбработчика = 0.5;
	
	РегистрироватьНовоеСостояние = Результат = КодВозвратаДиалога.Да;  
	
	Для каждого СтрокаДанных из СтруктураПараметров.ДанныеДляОбработки цикл
		Если СтрокаДанных.Состояние <> ПредопределенноеЗначение("Перечисление.гкс_СостоянияРегистрации.ВзятыПробы") Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru='Невозможно изменить состояние ТС %1'"), СтрокаДанных.ТранспортноеСредство);
			гкс_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			ОбработатьПодтверждениеНаСервере(СтрокаДанных, СтруктураПараметров.Состояние, РегистрироватьНовоеСостояние);
		КонецЕсли;
	КонецЦикла;	
	
	Если РегистрироватьНовоеСостояние Тогда
			
		Элементы.СписокРегистрации.Обновить();
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновитьДанные", ИнтервалОбработчика, Истина);
		Если СтруктураПараметров.Свойство("Оповещение") Тогда
			Оповестить(СтруктураПараметров.Оповещение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбработатьПодтверждениеНаСервере(СтруктураПараметров, Состояние, РегистрироватьНовоеСостояние)
	
	Если РегистрироватьНовоеСостояние Тогда
		ЗарегистрироватьНовоеСостояние(Состояние, СтруктураПараметров.ДокументРегистрации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПравоНаРедактирование(ИмяОбъекта)
	
	Возврат ПравоДоступа("Добавление", Метаданные.Документы[ИмяОбъекта]);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьКомандуПечатиЭтикетки()
	
	ТекущиеДанные = Элементы.СписокРегистрации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = ПолучитьСписокРегистрацийНаСервере(,Истина);
	КоличествоВыбранных = ВыбранныеСтроки.Количество();
	
	Если КоличествоВыбранных = 0 Тогда   
		ВыбранныеСтроки.Добавить(ТекущиеДанные);
	КонецЕсли;	
	
	МассивОбъектов = Новый Массив;
	МассивРегистраций = Новый Массив;
	Для каждого СтрокаДанных из ВыбранныеСтроки цикл
		Если ЗначениеЗаполнено(СтрокаДанных.ДокументФормированиеНомераПробы) Тогда
			МассивОбъектов.Добавить(СтрокаДанных.ДокументФормированиеНомераПробы);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.ДокументРегистрации) 
			И МассивРегистраций.Найти(СтрокаДанных.ДокументРегистрации) = Неопределено Тогда
			МассивРегистраций.Добавить(СтрокаДанных.ДокументРегистрации);
		КонецЕсли;	
	КонецЦикла;	
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ДокументРегистрацияНаПЛК", МассивРегистраций);
	
	АвтоматическаяПечатьЭтикеток = гкс_ОбщегоНазначенияВызовСервера.ЗначениеКонстанты(
		"гкс_АвтоматическаяПечатьЭтикеток");
	
	Если АвтоматическаяПечатьЭтикеток Тогда
		ПараметрыПечати.Вставить("АвтоматическаяПечатьЭтикеток", АвтоматическаяПечатьЭтикеток);
		гкс_УправлениеПечатьюКлиент.ПечатьЭтикеткаНаПринтер(
			"Документ.гкс_ФормированиеНомераПробы", "ПФ_MXL_Этикетка", МассивОбъектов, ПараметрыПечати);
	Иначе
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.гкс_ФормированиеНомераПробы",
			"ПФ_MXL_Этикетка", МассивОбъектов, ЭтотОбъект, ПараметрыПечати);
	КонецЕсли;
			
КонецПроцедуры                           
                    
&НаСервере
Процедура ВидПеревозкиПриИзмененииНаСервере()
	
	ИнициализироватьРеквизитыПризнакиТипаПеревозки(); 
	ИнициализироватьРеквизитыПриемкиЖД();
	УстановитьЗаголовкиВКолонкахСпискаРегистрации();
	УстановитьТекстЗапросаСпискаРегистрации();	   
	УстановитьОтборыСпискаРегистрации();
	УстановитьНастройкиСортировки();

	ПриИзмененииОтборовТочкаМаршрутаВидПеревозкиСервер();
		                                     	
КонецПроцедуры    

&НаСервере
Процедура ТипРегистрацииПриИзмененииНаСервере()
	
	ИнициализироватьРеквизитыПриемкиЖД();
	УстановитьВидимостьДоступностьКомандФормы();
	УстановитьОтборыСпискаРегистрации();
	УстановитьВидимостьЭлементовСпискаРегистрации();
	
КонецПроцедуры

&НаСервере
Процедура ОтборТочкаМаршрутаПриИзмененииНаСервере()
	
	УстановитьОтборыСпискаРегистрации();
	УстановитьВидимостьЭлементовСпискаРегистрации();
	УстановитьВидимостьДоступностьИныхЭлемнотовФормы();
	УстановитьВидимостьДоступностьПринятыеТС();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтборовТочкаМаршрутаВидПеревозкиСервер()
	
	ИнициализироватьСтруктуруДоступов();
	
	ЕстьПравоНаРедактированиеРегистрации = ПравоНаРедактированияРегистрации();
	
	ИнициализироватьРеквизитыВремяОжиданияТС();
	ИнициализироватьАвтоматическоеФормированиеДокументов();     	
	
	УстановитьВидимостьДоступностьКомандФормы();
	УстановитьВидимостьДоступностьИныхЭлемнотовФормы();
	УстановитьВидимостьЭлементовСпискаРегистрации();
	
	ОбновитьНаправленияРазгрузки();
	
КонецПроцедуры                                           

&НаСервере
Процедура УстановитьЗаголовкиВКолонкахСпискаРегистрации()
	
	Элементы.СписокРегистрацииТранспортноеСредство.Заголовок = 
		СписокРегистрацииТранспортноеСредствоЗаголовок(ОтборВидПеревозки);
	
	Элементы.СписокРегистрацииНомерДокументаПоставщика.Заголовок = 
		СписокРегистрацииНомерДокументаПоставщикаЗаголовок(ОтборВидПеревозки);
	
	Элементы.СписокРегистрацииПунктПогрузки.Заголовок = 
		СписокРегистрацииПунктПогрузкиЗаголовок (ОтборВидПеревозки); 
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокРегистрацииТранспортноеСредствоЗаголовок(ВидПеревозки)
	
	ТипыТранспортныхСредств = Перечисления.гкс_ТипыТранспортныхСредствДоставки;
	
	Если ТипыТранспортныхСредств.ЭтоАвтоПеревозка(ВидПеревозки) Тогда
	    Результат = "Авто";	
	ИначеЕсли ТипыТранспортныхСредств.ЭтоЖДПеревозка(ВидПеревозки) Тогда
		Результат = "Вагон";	
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаСервереБезКонтекста
Функция СписокРегистрацииНомерДокументаПоставщикаЗаголовок(ВидПеревозки)
	
	ТипыТранспортныхСредств = Перечисления.гкс_ТипыТранспортныхСредствДоставки;
	
	Если ТипыТранспортныхСредств.ЭтоАвтоПеревозка(ВидПеревозки) Тогда
	    Результат = "Номер ТТН";	
	ИначеЕсли ТипыТранспортныхСредств.ЭтоЖДПеревозка(ВидПеревозки) Тогда
		Результат = "Номер ЖД";	
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокРегистрацииПунктПогрузкиЗаголовок(ВидПеревозки)
	
	ТипыТранспортныхСредств = Перечисления.гкс_ТипыТранспортныхСредствДоставки;
	
	Если ТипыТранспортныхСредств.ЭтоАвтоПеревозка(ВидПеревозки) Тогда
	    Результат = "Пункт погрузки";	
	ИначеЕсли ТипыТранспортныхСредств.ЭтоЖДПеревозка(ВидПеревозки) Тогда
		Результат = "ЖД станция";	
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
    
&НаСервере
Функция ПравоНаРедактированияРегистрации()
	
	Возврат СтруктураДоступов.Свойство("ДоступенРегистрация")
			И СтруктураДоступов.ДоступенРегистрация 
			И ЕстьПравоНаРедактирование("гкс_РегистрацияНаПЛК");	
	
КонецФункции

#Область НастройкаФормы

&НаСервере
Процедура ПодготовитьПараметрыОткрытияФормыНастроек(ПараметрыОткрытия) 
	
	ТекПользователь = Пользователи.ТекущийПользователь();	
	РеквизитыТекПользователь = РеквизитыТекПользователь(ТекПользователь);
	
	КлючОбъекта 	= ИмяФормы;
	КлючНастроек 	= СтрШаблон("%1_%2", РеквизитыТекПользователь.Наименование, 
											РеквизитыТекПользователь.ИдентификаторПользователяИБ);
	
	ДанныеЭлементов = ИнициализироватьЭлементыДляФормыНастроек(КлючОбъекта, КлючНастроек);
	ПараметрыОткрытия.Вставить("ДанныеЭлементов", 	ДанныеЭлементов);
	ПараметрыОткрытия.Вставить("КлючОбъекта", 		КлючОбъекта);
	ПараметрыОткрытия.Вставить("КлючНастроек", 		КлючНастроек);
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьЭлементыДляФормыНастроек(КлючОбъекта, КлючНастроек) 

	ДанныеЭлементов = РегистрыСведений.гкс_ХранилищеНастроек.ПолучитьСохраненныеНастройки(КлючОбъекта, КлючНастроек);	
	
	Если Не ЗначениеЗаполнено(ДанныеЭлементов) Тогда		
		ДанныеЭлементов = ПолучитьНастройкиПоУмолчанию(Элементы.СписокРегистрации);
	Иначе
		// Сбросить настройки формы на стандартные
		КлючНастройкиФормы = ИмяФормы + "/НастройкиОкна"; 
		ХранилищеСистемныхНастроек.Удалить(КлючНастройкиФормы, "", ИмяПользователя());
    	КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ДанныеЭлементов;
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиПоУмолчанию(ЭлементСписок, ЭтоВГруппеКолонок = Ложь)
	
	ДанныеЭлементов 			= Новый Соответствие;		
	ДанныеПодчиненныхЭлементов 	= Новый Соответствие;
	СписокЭлементов 			= ЭлементСписок.ПодчиненныеЭлементы;
	
	ПеребратьСписокЭлементов(СписокЭлементов, ДанныеПодчиненныхЭлементов, ДанныеЭлементов, ЭтоВГруппеКолонок);
	
	Если Не ЭтоВГруппеКолонок Тогда
		ДанныеЭлементов.Вставить(ЭлементСписок.Имя, ДанныеПодчиненныхЭлементов);
	КонецЕсли;
	
	Возврат ДанныеЭлементов;
	
КонецФункции

&НаСервере
Процедура ПеребратьСписокЭлементов(СписокЭлементов, ДанныеПодчиненныхЭлементов, ДанныеЭлементов, ЭтоВГруппеКолонок) 
	
	НомерПП = 1;
	
	Для Каждого ЭлСписка Из СписокЭлементов Цикл
		
		НастройкиЭлементов = Новый Структура;
			
		Если ЭлСписка.Имя = "СписокРегистрацииИндексКартинки" Тогда
			Продолжить;
		ИначеЕсли ЭлСписка.Вид = ВидГруппыФормы.ГруппаКолонок Тогда
			Ширина 					= ЭлСписка.Ширина;
			ЭтоФлажок 				= Ложь;
			ЭтоГруппаКолонок 		= Истина;
			МаксимальнаяШирина 		= Неопределено;
			АвтоМаксимальнаяШирина 	= Неопределено;
			ИндексКартинки			= 1;
			
			ЭлементыГруппы 			= ПолучитьНастройкиПоУмолчанию(ЭлСписка, Истина);
			НастройкиЭлементов.Вставить("ЭлементыГруппы", ЭлементыГруппы);
			
		ИначеЕсли ЭлСписка.Вид = ВидПоляФормы.ПолеФлажка Тогда
			Ширина 					= ЭлСписка.ШиринаЭлемента;
			ЭтоФлажок 				= Истина;
			ЭтоГруппаКолонок 		= Ложь;
			МаксимальнаяШирина 		= Неопределено;
			АвтоМаксимальнаяШирина 	= Неопределено;
			ИндексКартинки			= 2;
		Иначе
			Ширина 					= ЭлСписка.Ширина;
			ЭтоФлажок 				= Ложь;
			ЭтоГруппаКолонок 		= Ложь;
			МаксимальнаяШирина 		= ЭлСписка.МаксимальнаяШирина;
			АвтоМаксимальнаяШирина 	= ЭлСписка.АвтоМаксимальнаяШирина;
			ИндексКартинки			= 2;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлСписка.Заголовок) Тогда
			ЗаголовокПоля = ЭлСписка.Заголовок;
		Иначе
			ЗаголовокПоля = СтрЗаменить(ЭлСписка.Имя, "СписокРегистрации", "");
		КонецЕсли;
		
		ИндексЭлемента = СписокЭлементов.Индекс(ЭлСписка);
		
		НастройкиЭлементов.Вставить("Видимость", 				ЭлСписка.Видимость);
		НастройкиЭлементов.Вставить("НомерПП", 					НомерПП);
		НастройкиЭлементов.Вставить("НовыйИндекс", 				ИндексЭлемента);
		НастройкиЭлементов.Вставить("СтарыйИндекс", 			ИндексЭлемента);
		НастройкиЭлементов.Вставить("ИзмененПорядок", 			Ложь);
		НастройкиЭлементов.Вставить("Ширина", 					Ширина);
		НастройкиЭлементов.Вставить("МаксимальнаяШирина", 		МаксимальнаяШирина);
		НастройкиЭлементов.Вставить("АвтоМаксимальнаяШирина", 	АвтоМаксимальнаяШирина);
		НастройкиЭлементов.Вставить("ЭтоГруппаКолонок", 		ЭтоГруппаКолонок);
		НастройкиЭлементов.Вставить("ЭтоФлажок", 				ЭтоФлажок);
		НастройкиЭлементов.Вставить("Заголовок", 				ЗаголовокПоля);
		НастройкиЭлементов.Вставить("ИндексКартинки", 			ИндексКартинки);
		
		Если Не ЭтоВГруппеКолонок Тогда
			ДанныеПодчиненныхЭлементов.Вставить(ЭлСписка.Имя, НастройкиЭлементов);
		Иначе
			ДанныеЭлементов.Вставить(ЭлСписка.Имя, НастройкиЭлементов);
		КонецЕсли;
		
		НомерПП = НомерПП + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеНастройкиФормыЭлементов(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = Неопределено И Результат Тогда
		ЗагрузитьНастройкиФормыИзХранилища();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиФормыИзХранилища() 
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	РеквизитыТекПользователь = РеквизитыТекПользователь(ТекПользователь);
	
	КлючОбъекта 	= ИмяФормы;
	КлючНастроек 	= СтрШаблон("%1_%2", РеквизитыТекПользователь.Наименование, 
											РеквизитыТекПользователь.ИдентификаторПользователяИБ);
	НастройкиПорядок.Очистить();
	
	ДанныеЭлементов = ИнициализироватьЭлементыДляФормыНастроек(КлючОбъекта, КлючНастроек);
	ПрочитатьНастройкиФормы(ДанныеЭлементов);
	ИзменитьПоложенияЭлементаИзНастройки();
	ИзменитьПорядокВСохраненныеНастройкиФормы(ДанныеЭлементов, КлючОбъекта, КлючНастроек);	
		
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиФормы(ДанныеЭлементов) 
	
	Для Каждого СтрокаЭлементов Из ДанныеЭлементов Цикл
		
		ТекЭлемент = Элементы.Найти(СтрокаЭлементов.Ключ);		
		Если ТекЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеСтроки = СтрокаЭлементов.Значение;		
		
		Если ТипЗнч(ЗначениеСтроки) = Тип("Соответствие") И ТипЗнч(ТекЭлемент) = Тип("ТаблицаФормы") Тогда
			ПрочитатьНастройкиФормы(ЗначениеСтроки);
		ИначеЕсли ЗначениеСтроки.ЭтоГруппаКолонок Тогда
			ДобавитьНастройкуПорядка(ТекЭлемент, СтрокаЭлементов.Ключ, ЗначениеСтроки);
			ПрочитатьНастройкиФормы(ЗначениеСтроки.ЭлементыГруппы);
		Иначе
			ДобавитьНастройкуПорядка(ТекЭлемент, СтрокаЭлементов.Ключ, ЗначениеСтроки);
			ЗаполнитьНастройкиФормы(ЗначениеСтроки, ТекЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ИзменитьПорядокВСохраненныеНастройкиФормы(ДанныеЭлементов, КлючОбъекта, КлючНастроек) 
	
	Если Не ЗначениеЗаполнено(НастройкиПорядок) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКолонок = ДанныеЭлементов.Получить("СписокРегистрации");
	Если ДанныеКолонок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки = Ложь;
	
	Для Каждого Настройка Из НастройкиПорядок Цикл
				
		НастройкиКолонки = ДанныеКолонок.Получить(Настройка.Ключ);
		Если ЗначениеЗаполнено(НастройкиКолонки) Тогда
			НастройкиКолонки.ИзмененПорядок = Ложь;
			СохранитьНастройки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СохранитьНастройки Тогда
		РегистрыСведений.гкс_ХранилищеНастроек.СохраненитьНастройку(КлючОбъекта, КлючНастроек, ДанныеЭлементов);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиФормы(Настройки, ТекЭлемент) 

	Если Настройки.ЭтоФлажок Тогда
		СписокСвойств = "Видимость,ШиринаЭлемента";
		Настройки.Вставить("ШиринаЭлемента", Настройки.Ширина);
	ИначеЕсли Настройки.ЭтоГруппаКолонок Тогда
		СписокСвойств = "Видимость,Ширина";	
	Иначе
		СписокСвойств = "АвтоМаксимальнаяШирина,Видимость,МаксимальнаяШирина,Ширина";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекЭлемент, Настройки, СписокСвойств);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНастройкуПорядка(ТекЭлемент, Ключ, ЗначениеСтроки) 

	Родитель = ТекЭлемент.Родитель;
	Индекс = Родитель.ПодчиненныеЭлементы.Индекс(ТекЭлемент);
	
	Если ЗначениеСтроки.ИзмененПорядок Тогда
		НоваяСтрока = НастройкиПорядок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначениеСтроки); 
		НоваяСтрока.Ключ 			= Ключ;
		НоваяСтрока.ТекущийИндекс 	= Индекс;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПоложенияЭлементаИзНастройки() 

	Если Не ЗначениеЗаполнено(НастройкиПорядок) Тогда
		Возврат;
	КонецЕсли;
	
	ВременнаяТаблица = НастройкиПорядок.Выгрузить();
	ВременнаяТаблица.Очистить();
	
	Для Каждого Настройка Из НастройкиПорядок Цикл
		
		НайденныйЭлемент = Элементы.Найти(Настройка.Ключ);
		
		Если НайденныйЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РодительЭлемента = НайденныйЭлемент.Родитель;
		Если Настройка.ТекущийИндекс > Настройка.НовыйИндекс Тогда
			ИндексПередКоторымРазместить = Настройка.НовыйИндекс;
		Иначе
			ИндексПередКоторымРазместить = Настройка.НовыйИндекс + 1;
		КонецЕсли;
		Месторасположение = РодительЭлемента.ПодчиненныеЭлементы.Получить(ИндексПередКоторымРазместить);
		
		Элементы.Переместить(НайденныйЭлемент, РодительЭлемента, Месторасположение);
		
		Если Настройка.СтарыйИндекс = Настройка.НовыйИндекс Тогда
			ЗаполнитьЗначенияСвойств(ВременнаяТаблица.Добавить(), Настройка);
		КонецЕсли;
		
	КонецЦикла;
	
	// Если нет настроек с одинаковым индексом, то очистится НастройкиПорядок. 
	// Иначе заполним настроками с одинаковым индексом для изменения сохраненных настроек в регистре. 
	НастройкиПорядок.Загрузить(ВременнаяТаблица);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбновитьСписокРегистраций(ВыбранныеРегистрации)
	
	СписокРегистрации.Параметры.УстановитьЗначениеПараметра("ВыбранныеРегистрации", ВыбранныеРегистрации);
	Элементы.СписокРегистрации.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставитьОтметку(ДокументРегистрации)
	
	Индекс = ВыбранныеРегистрации.Найти(ДокументРегистрации);
	Если Индекс = Неопределено Тогда
		ВыбранныеРегистрации.Добавить(ДокументРегистрации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметку(ДокументРегистрации)
	
	Индекс = ВыбранныеРегистрации.Найти(ДокументРегистрации);
	Если Индекс >= 0 Тогда
		ВыбранныеРегистрации.Удалить(Индекс);
	КонецЕсли;
	
КонецПроцедуры

//  Возвращает обновленные данные списка регистрации.
//
//  Параметры:
//		ПолучитьВыбранныеСТроки - Булево - возвращает таблицу значений выбранных строк.
//		ПолучитьМассивВыбранныхСтрок - Булево - возвращает массив структур выбранных строк.
//
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица выбранных строк.
//		Массив из Структура - массив структур выбранных строк.
//		Массив из ДокументСсылка.гкс_РегистрацияНаПЛК
//
&НаСервере
Функция ПолучитьСписокРегистрацийНаСервере(ПолучитьВыбранныеСТроки = Ложь, ПолучитьМассивВыбранныхСтрок = Ложь)
	
	Схема = Элементы.СписокРегистрации.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.СписокРегистрации.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Если ПолучитьВыбранныеСТроки Или ПолучитьМассивВыбранныхСтрок Тогда
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Отметка");
		НовыйЭлементОтбора.ЛевоеЗначение 	= ПолеОтбора;
		НовыйЭлементОтбора.Использование 	= Истина;
		НовыйЭлементОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение 	= Истина;
	КонецЕсли; 
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, 
													Настройки,,,
													Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	
	ТаблицаРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если ПолучитьВыбранныеСТроки Тогда
		Возврат ТаблицаРезультат;
	ИначеЕсли ПолучитьМассивВыбранныхСтрок Тогда
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаРезультат);
	Иначе
		Возврат ТаблицаРезультат.ВыгрузитьКолонку("ДокументРегистрации");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПараметрыОткрытияФормыГрупповыхНастроек(КомандаНаРазгрузку = Ложь)
	
	ВидПеревозкиЖД = ПредопределенноеЗначение("Перечисление.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт");
	ЭтоВидПеревозкиЖД = ОтборВидПеревозки = ВидПеревозкиЖД;
	ЕстьРазнаяНоменклатураВСторках = ПроверкаНоменклатурыВВыбранныхСтроках(ВыбранныеРегистрации);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("МассивРегистраций", 		ВыбранныеРегистрации);
	ПараметрыОткрытияФормы.Вставить("ЭтоВидПеревозкиЖД", 		ЭтоВидПеревозкиЖД);
	ПараметрыОткрытияФормы.Вставить("РазнаяНоменклатура", 		ЕстьРазнаяНоменклатураВСторках);
	ПараметрыОткрытияФормы.Вставить("ЭтоКомандаНаРазгрузку", 	КомандаНаРазгрузку);
	
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции

&НаСервере
Функция ПроверкаНоменклатурыВВыбранныхСтроках(ВыбранныеРегистрации)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрацияНаПЛК.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК РегистрацияНаПЛК
	|ГДЕ
	|	РегистрацияНаПЛК.Ссылка В (&СписокРегистраций)
	|СГРУППИРОВАТЬ ПО
	|	РегистрацияНаПЛК.Номенклатура";
	
	Запрос.УстановитьПараметр("СписокРегистраций", ВыбранныеРегистрации);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.Количество() > 1;
	
КонецФункции

&НаКлиенте
Функция СтруктураЗаполненияДанныхНаправлениеНаРазгрузку(ТекущиеДанные)

	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Дата", 				ОбщегоНазначенияКлиент.ДатаСеанса());	
	ЗначенияЗаполнения.Вставить("ДокументРегистрации", 	ТекущиеДанные.ДокументРегистрации);
	ЗначенияЗаполнения.Вставить("ТочкаМаршрута", 		ОтборТочкаМаршрута);
	ЗначенияЗаполнения.Вставить("ПервичныйСтатус", 		ТекущиеДанные.Состояние);
	
	// определим силос и яму разгрузки 
	Если ОтборТипРегистрации = ПредопределенноеЗначение("Перечисление.гкс_ТипРегистрации.Приемка") Тогда
		
		СостоянияПриемки = СостоянияПриемкиДляРазгрузки();
		Если СостоянияПриемки.Найти(ТекущиеДанные.Состояние) <> Неопределено Тогда 		
			ЗначенияЗаполнения.Вставить("Склад", 		ТекущиеДанные.СкладПлан);
			ЗначенияЗаполнения.Вставить("ЯмаРазгрузки", ТекущиеДанные.ЯмаРазгрузки);
		КонецЕсли;
			
		СлужебнаяНоменклатура = СлужебнаяНоменклатураДляФормированияНаправленияНаРагрузку(
			ТекущиеДанные.ДокументРегистрацииАнализов);
			
		Если ЗначениеЗаполнено(СлужебнаяНоменклатура) Тогда	
			ЯмаСилосРазгрузки = гкс_ПриемкаТранспортаВызовСервера.ЯмаСилосРазгрузки(
				ОтборТочкаМаршрута, ОтборВидПеревозки, ТекущиеДанные.Номенклатура, СлужебнаяНоменклатура);
				
			Если ЗначениеЗаполнено(ЯмаСилосРазгрузки) Тогда	
				ЗначенияЗаполнения.Вставить("Склад", 					ЯмаСилосРазгрузки.Силос);
				ЗначенияЗаполнения.Вставить("ЯмаРазгрузки", 			ЯмаСилосРазгрузки.ЯмаРазгрузки);
				ЗначенияЗаполнения.Вставить("СлужебнаяНоменклатура", 	СлужебнаяНоменклатура);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ГрупповоеРедактированиеНаправленийНаРазгрузку(НастройкиЗаполнения, ДополнительныеПараметры) Экспорт
	
	Если НастройкиЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;         
	
	ГрупповоеРедактированиеНаправленийНаСервере(НастройкиЗаполнения, ВыбранныеСтроки, ВыбранныеРегистрации);
		
КонецПроцедуры 

&НаСервере
Процедура ГрупповоеРедактированиеНаправленийНаСервере(НастройкиЗаполнения, ВыбранныеСтроки, ВыбранныеРегистрации) 
	
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.КачествоПринято);
	МассивСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.ВыгрузкаРазрешена);
	МассивСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.РезультатыПробПолучены); 
	
	Для Каждого Строка Из ВыбранныеСтроки Цикл
		
		ОбработатьСтроку = Ложь;
		
		СтатусПодходит = Не МассивСостояний.Найти(Строка.Состояние) = Неопределено;
		
		СостояниеРезультатыПробПолучены = 
			Строка.Состояние = Перечисления.гкс_СостоянияРегистрации.РезультатыПробПолучены;
		
		УсловияДляПолученныхПроб = 
			СостояниеРезультатыПробПолучены И НастройкиЗаполнения.ПринятьКачество;
		
		Если СтатусПодходит Тогда
			Если гкс_ПриемкаТранспорта.НаправлятьНаРазгрузкуРазрешение(
					Строка.ДокументРегистрации, РазрешитьВходнойКонтрольДоВзвешивания) Тогда
				Если СостояниеРезультатыПробПолучены Тогда
					ОбработатьСтроку = УсловияДляПолученныхПроб;
				Иначе
					ОбработатьСтроку = Истина;
				КонецЕсли;
			КонецЕсли;	      
			
		КонецЕсли;
		
		Если ОбработатьСтроку Тогда
			ОбработатьСтокуРегистрацииДляРазгрузки(Строка, НастройкиЗаполнения, Строка.Состояние, ВыбранныеРегистрации);
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru='%1 не может быть обработана.'"), Строка.ДокументРегистрации);
			гкс_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;       
	КонецЦикла;

	
КонецПроцедуры	

&НаСервере
Процедура ОбработатьСтокуРегистрацииДляРазгрузки(СтрокаДанных, НастройкиЗаполнения, Состояние, ВыбранныеРегистрации)
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
			
	МестнаяДата = ПолучитьМестнуюДатуНаСервере(СтрокаДанных.ТочкаМаршрута);
			
	ДанныеЗаполнения.Вставить("МестнаяДата", МестнаяДата);	
	ДанныеЗаполнения.Вставить("ДокументРегистрации", СтрокаДанных.ДокументРегистрации);
	ДанныеЗаполнения.Вставить("ТочкаМаршрута", ОтборТочкаМаршрута);
	ДанныеЗаполнения.Вставить("ПервичныйСтатус", Состояние);
	ДанныеЗаполнения.Вставить("Склад", НастройкиЗаполнения.Склад);
	ДанныеЗаполнения.Вставить("ЯмаРазгрузки", НастройкиЗаполнения.ЯмаРазгрузки);
	ДанныеЗаполнения.Вставить("СлужебнаяНоменклатура", НастройкиЗаполнения.СлужебнаяНоменклатура);
	Если Состояние = Перечисления.гкс_СостоянияРегистрации.РезультатыПробПолучены Тогда
		ДанныеЗаполнения.Вставить("ПринятьКачество", НастройкиЗаполнения.ПринятьКачество);
		ДанныеЗаполнения.Вставить("Комментарий", НастройкиЗаполнения.Комментарий);
	КонецЕсли;
			
	СоздатьИзменитьНаправлениеНаРазгрузку(
			СтрокаДанных.ДокументРегистрации, ДанныеЗаполнения, ВыбранныеРегистрации);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьМестнуюДатуНаСервере(ТочкаМаршрута)
	
	ЧасовойПоясПЛК 	= гкс_ПриемкаТранспорта.ЧасовойПоясПЛК(ТочкаМаршрута);
	МестнаяДата 	= ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(ЧасовойПоясПЛК) Тогда
		МестнаяДата = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПоясПЛК);
	КонецЕсли;
	
	Возврат МестнаяДата;
	
КонецФункции

&НаСервере
Процедура СоздатьИзменитьНаправлениеНаРазгрузку(ДокументРегистрации, ДанныеЗаполнения, ВыбранныеРегистрации)
	
	НайденныеНаправленияНаРазгрузку = НаправлениеНаРазгрузкуПолучитьПоРегистрациям(ВыбранныеРегистрации);
	
	ДокументСуществует 		= Ложь;
	НаправлениеНаРазгрузку 	= Неопределено;
	ДанныеПоРегистрации 	= НайденныеНаправленияНаРазгрузку.Найти(ДокументРегистрации);
	
	Если ЗначениеЗаполнено(ДанныеПоРегистрации.НаправлениеНаРагрузку) Тогда
		ДокументСуществует 		= Истина;
		НаправлениеНаРазгрузку 	= ДанныеПоРегистрации.НаправлениеНаРагрузку;
	КонецЕсли;
	
	Документы.гкс_НаправлениеНаРазгрузку.
				СоздатьИзменитьИзАРМПриемки(ДанныеЗаполнения, ДокументСуществует, НаправлениеНаРазгрузку);
	
КонецПроцедуры

&НаСервере
Функция НаправлениеНаРазгрузкуПолучитьПоРегистрациям(ВыбранныеРегистрации)
	
	Возврат Документы.гкс_НаправлениеНаРазгрузку.ПолучитьПоРегистрациям(ВыбранныеРегистрации);
	
КонецФункции

&НаСервере
Процедура ГрупповоеСозданиеНомерПробы(ВыбранныеСтроки)
	
	Для Каждого Строка Из ВыбранныеСтроки Цикл
		
		СостояниеГотовКОтборуПроб = МожноФормироватьПробы(Строка.Состояние, РазрешитьВходнойКонтрольДоВзвешивания);
		
		Если СостояниеГотовКОтборуПроб И Не ЗначениеЗаполнено(Строка.ДокументФормированиеНомераПробы) Тогда
			ЗначенияЗаполнения = Новый Структура;
			ЗначенияЗаполнения.Вставить("Дата", 				ТекущаяДатаСеанса());
			ЗначенияЗаполнения.Вставить("ТочкаМаршрута", 		ОтборТочкаМаршрута);
			ЗначенияЗаполнения.Вставить("ДокументРегистрации", 	Строка.ДокументРегистрации);
			ЗначенияЗаполнения.Вставить("ТипПробы", 			Перечисления.гкс_ТипыПроб.Единичная);
			
			ЧасовойПоясТочки 
						= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборТочкаМаршрута, "гкс_ЧасовойПоясТочкиМаршрута");
		
			Если ЗначениеЗаполнено(ЧасовойПоясТочки) Тогда
				МестнаяДата = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПоясТочки);			
			Иначе
				МестнаяДата = ТекущаяДатаСеанса();
			КонецЕсли;
			
			ЗначенияЗаполнения.Вставить("МестнаяДата", МестнаяДата);
			
			Документы.гкс_ФормированиеНомераПробы.СоздатьНовыйДокумент(ЗначенияЗаполнения);
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru='%1 не может быть обработана.'"), Строка.ДокументРегистрации);
			гкс_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  

&НаСервереБезКонтекста
Функция МожноФормироватьПробы(Состояние, РазрешитьВходнойКонтрольДоВзвешивания)  
	СтатусыДляПроверки = Новый Массив;
	СтатусыДляПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.ГотовКОтборуПроб);
	Если РазрешитьВходнойКонтрольДоВзвешивания Тогда
		СтатусыДляПроверки.Добавить(Перечисления.гкс_СостоянияРегистрации.Прибыл);
	КонецЕсли;	
	Возврат 
		СтатусыДляПроверки.Найти(Состояние) <> Неопределено;
КонецФункции
	
&НаКлиенте
Процедура ГрупповоеПодтверждениеПробы(ВыбранныеСтроки)
	
	ДополнительныеПараметры = ЗаполнитьДополнительныеПараметрыДляПробыПринятыГрупповаяОбработка(ВыбранныеСтроки);
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПодверждениеПробыПринятыГрупповаяОбработка",
		ЭтотОбъект, ДополнительныеПараметры); 
					
	ТекстВопроса = НСтр("ru = 'Подтвердите, что все выбранные пробы будут приняты'");
				
	ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, 
		РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция РеквизитыТекПользователь(ТекПользователь)
	
	Возврат	 ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекПользователь, "Наименование, ИдентификаторПользователяИБ");
		
КонецФункции

#КонецОбласти
