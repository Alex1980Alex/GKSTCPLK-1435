#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ДанныеДляДетальныхЗаписей(ДокументРегистрации, ДокументРегистрацииАнализов) Экспорт
	
	Результат = Новый Структура;
	
	Запрос	= Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеДляДетальныхЗаписей();  
	
	Запрос.УстановитьПараметр("Ссылка", ДокументРегистрации);
	Запрос.УстановитьПараметр("СсылкаАнализов", ДокументРегистрацииАнализов);
	
	ПакетныйРезультат	= Запрос.ВыполнитьПакет();
	
	ДанныеРегистрацииВТаблице = ПакетныйРезультат[0].Выгрузить();
	Результат.Вставить("ДанныеРегистрации", 
	                      ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДанныеРегистрацииВТаблице[0]));
	
	Результат.Вставить("КачественныеПоказатели", ПакетныйРезультат[1].Выгрузить());
	
	Возврат Результат;
	
КонецФункции

// Формирует транспортный документ и основание движения запасов при установлении состояния "убыл"
//
// Параметры:
//  ДокументРегистрации  - ДокументСсылка.гкс_РегистрацияНаПЛК - документ регистрации транспорта
//            
//  ПараметрыРегистрации  - Структура - данные регитсрации
//               
//
Процедура СформироватьКомплектДокументовПриемкиИЗарегистрироватьУбытиеТранспорта(ДокументРегистрации, ПараметрыРегистрации) Экспорт
	 
	ПараметрыФормированияКомплектаДокументов = ПараметрыФормированияКомплектаДокументов(
		ДокументРегистрации, ПараметрыРегистрации);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьТаблицуДокументовПриемкиПоРегистрации(ДокументРегистрации);
		
		ТранспортныйДокумент = Документы.гкс_ТранспортныйДокумент.
			СформироватьТранспортныйДокументПоНеобходимости(ДокументРегистрации);
			
		Если ЗначениеЗаполнено(ТранспортныйДокумент) Тогда
			
			ПараметрыФормированияКомплектаДокументов.Вставить("ТранспортныйДокумент", ТранспортныйДокумент);
			
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("ДокументРегистрации", ДокументРегистрации);
			СтруктураЗаписи.Вставить("ТранспортныйДокумент", ТранспортныйДокумент);
			СтруктураЗаписи.Вставить("ТранспортноеСредство", ПараметрыФормированияКомплектаДокументов.ТранспортноеСредство);
			
			гкс_ПриемкаТранспорта.УстановитьСвязьРегистрацииИТранспортногоДокумента(СтруктураЗаписи);
		КонецЕсли;
					
		ОснованиеДляДвиженияЗапасов = Документы.гкс_ОснованиеДляДвиженияЗапасов
			.СформироватьДокументПоНеобходимости(ДокументРегистрации, ПараметрыФормированияКомплектаДокументов);
														  
		гкс_ПриемкаТранспорта.ЗарегистрироватьНовоеСостояние(
			ДокументРегистрации, Перечисления.гкс_СостоянияРегистрации.Убыл);
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьУдалениеСвязиРегистрацииИТранспортногоДокумента(ДокументРегистрации) Экспорт
	
	НачатьТранзакцию();
	Попытка		
		ЗаблокироватьТаблицуДокументовПриемкиПоРегистрации(ДокументРегистрации);							
		гкс_ПриемкаТранспорта.УдалитьСвязьРегистрацииИТранспортногоДокумента(
			Новый Структура("ДокументРегистрации", ДокументРегистрации));	
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Изменить запись в электронной очереди.
// 
// Параметры:
//  ЗаписьВОчередь - ДокументСсылка.гкс_ЗаписьВОчередьПриемкиПЛК - 
//  ПараметрыИзменения - Структура - 
//
Процедура ИзменитьЗаписьВЭлектроннойОчереди(ЗаписьВОчередь, ПараметрыИзменения) Экспорт
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ЗаписьВОчередь);
	Исключение
		ВызватьИсключение СтрШаблон(НСтр("ru='Ошибка блокировки записи в очередь %1'"), Строка(ЗаписьВОчередь));
	КонецПопытки;
		
	ЗаписьВОчередьДокумент = ЗаписьВОчередь.ПолучитьОбъект();
	ЗаписьВОчередьДокумент.Заполнить(ПараметрыИзменения);
	
	Попытка
		ЗаписьВОчередьДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеКомплектаЗавершающихДокументовПоПриемке

Функция ПараметрыФормированияКомплектаДокументов(ДокументРегистрации, ПараметрыРегистрации)
		
	ПараметрыФормирования = ПараметрыФормированияКомплектаДокументовПоУмолчанию();
	
	ДанныеРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРегистрации, 
	    "ТочкаМаршрута, ВидПеревозки, ТипРегистрации, Собственник, Организация, Внутригрупповой, Дата, Контрагент,
	    |НомерДокументаПоставщика, ДатаДокументаПоставщика, ТранспортноеСредство, Номенклатура,ВесНетто, Спецификация");
	        
	ЗаполнитьЗначенияСвойств(ПараметрыФормирования, ДанныеРегистрации);
	
	ПараметрыФормирования.ДатаДокумента = ДанныеРегистрации.Дата;
	ПараметрыФормирования.Грузополучатель = ДанныеРегистрации.Организация;
	ПараметрыФормирования.ЭтоПриемка = (ДанныеРегистрации.ТипРегистрации = Перечисления.гкс_ТипРегистрации.Приемка);
	
	ПараметрыФормирования.Вставить("ЭтоАвтоперевозка", 
		ПараметрыФормирования.ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.Автомобиль);
		
	ПараметрыФормирования.Вставить("ЭтоЖДперевозка", 
		ПараметрыФормирования.ВидПеревозки = Перечисления.гкс_ТипыТранспортныхСредствДоставки.ЖДТранспорт);                 
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормирования, ПараметрыРегистрации, Истина); 
	
	// попытка найти уже принятый композитный анализ
	ПереопределитьЛабораторныйАнализ(ДокументРегистрации, ПараметрыФормирования);
	
	Возврат ПараметрыФормирования;
	
КонецФункции

Процедура ПереопределитьЛабораторныйАнализ(ДокументРегистрации, ПараметрыФормирования)
	
	// для режима отправки лаб. анализа входного контроля переопределять анализ не нужно 
	Если гкс_ПриемкаТранспорта.ЭтоЛабораторныйАнализДляОснованияДвиженияЗапасов(
		ПараметрыФормирования.ЛабораторныйАнализ) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛабораторныйАнализ.Ссылка КАК АнализСсылка
	|ПОМЕСТИТЬ ВТ_ПоФормированиюПроб
	|ИЗ
	|	Документ.гкс_ФормированиеНомераПробы.СписокРегистраций КАК ФормированиеНомераПробыСписокРегистраций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гкс_ЛабораторныйАнализ КАК ЛабораторныйАнализ
	|		ПО ФормированиеНомераПробыСписокРегистраций.Ссылка = ЛабораторныйАнализ.гкс_ДокументРегистрации
	|			И (ЛабораторныйАнализ.Проведен)
	|			И (ЛабораторныйАнализ.гкс_НазначениеИспользованияКачества = ЗНАЧЕНИЕ(Перечисление.гкс_НазначенияИспользованияКачества.ПриемкаКомпозит))
	|			И (ФормированиеНомераПробыСписокРегистраций.ДокументРегистрации = &ДокументРегистрацииНаПЛК)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛабораторныйАнализ.Ссылка КАК АнализСсылка
	|ПОМЕСТИТЬ ВТ_ПоРегистрации
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ КАК ЛабораторныйАнализ
	|ГДЕ
	|	ЛабораторныйАнализ.Проведен
	|	И ЛабораторныйАнализ.гкс_НазначениеИспользованияКачества = ЗНАЧЕНИЕ(Перечисление.гкс_НазначенияИспользованияКачества.ПриемкаКомпозит)
	|	И ЛабораторныйАнализ.гкс_ДокументРегистрации = &ДокументРегистрацииНаПЛК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоРегистрации.АнализСсылка КАК КомпозитныйАнализ
	|ИЗ
	|	ВТ_ПоРегистрации КАК ВТ_ПоРегистрации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПоФормированиюПроб.АнализСсылка
	|ИЗ
	|	ВТ_ПоФормированиюПроб КАК ВТ_ПоФормированиюПроб";
	
	Запрос.УстановитьПараметр("ДокументРегистрацииНаПЛК", ДокументРегистрации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПараметрыФормирования.Вставить("ЛабораторныйАнализ", ВыборкаДетальныеЗаписи.КомпозитныйАнализ);
	КонецЦикла;
			
КонецПроцедуры	

Функция ПараметрыФормированияКомплектаДокументовПоУмолчанию()
		
	СтруктураПараметровПоУмолчанию = Новый Структура;
	СтруктураПараметровПоУмолчанию.Вставить("Дата");
	СтруктураПараметровПоУмолчанию.Вставить("Организация");
	СтруктураПараметровПоУмолчанию.Вставить("ТочкаМаршрута");
	СтруктураПараметровПоУмолчанию.Вставить("ВидПеревозки");
	СтруктураПараметровПоУмолчанию.Вставить("ТипРегистрации");
	СтруктураПараметровПоУмолчанию.Вставить("Собственник");
	СтруктураПараметровПоУмолчанию.Вставить("Грузополучатель");
	СтруктураПараметровПоУмолчанию.Вставить("Внутригрупповой");
	СтруктураПараметровПоУмолчанию.Вставить("ДатаДокумента");
	СтруктураПараметровПоУмолчанию.Вставить("Контрагент");
	СтруктураПараметровПоУмолчанию.Вставить("ФактическийСклад");
	СтруктураПараметровПоУмолчанию.Вставить("ЭтоПриемка");
	СтруктураПараметровПоУмолчанию.Вставить("НомерДокументаПоставщика");
	СтруктураПараметровПоУмолчанию.Вставить("ДатаДокументаПоставщика");
	СтруктураПараметровПоУмолчанию.Вставить("ТранспортноеСредство");
	СтруктураПараметровПоУмолчанию.Вставить("Номенклатура");
	СтруктураПараметровПоУмолчанию.Вставить("Спецификация");
	
	СтруктураПараметровПоУмолчанию.Вставить("ЛабораторныйАнализ");
	СтруктураПараметровПоУмолчанию.Вставить("ПунктРазгрузки");
	
	СтруктураПараметровПоУмолчанию.Вставить("ВесНетто");
	СтруктураПараметровПоУмолчанию.Вставить("ВесНеттоФакт");
	СтруктураПараметровПоУмолчанию.Вставить("ВесБрутто");
	СтруктураПараметровПоУмолчанию.Вставить("ВесБруттоФакт");
	СтруктураПараметровПоУмолчанию.Вставить("ВесТары");
	СтруктураПараметровПоУмолчанию.Вставить("ВесТарыФакт");
	
	Возврат СтруктураПараметровПоУмолчанию;
	
КонецФункции

#Область ФормированиеТранспортногоДокумента

Процедура ЗаблокироватьТаблицуДокументовПриемкиПоРегистрации(ДокументРегистрации)
	
	Если Не ТранзакцияАктивна() Тогда
		Возврат;
	КонецЕсли;
	
	БлокировкаДанных = Новый БлокировкаДанных();
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.гкс_СвязьРегистрацииИТранспортногоДокумента");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументРегистрации", ДокументРегистрации);
	
	БлокировкаДанных.Заблокировать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапросаДанныеДляДетальныхЗаписей() 
	
	Возврат 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистрация.Ссылка КАК Ссылка,
	|	Регистрация.ВерсияДанных КАК ВерсияДанных,
	|	Регистрация.ПометкаУдаления КАК ПометкаУдаления,
	|	Регистрация.ТипРегистрации КАК ТипРегистрации,
	|	Регистрация.Номер КАК Номер,
	|	Регистрация.Дата КАК ДатаРегистрации,
	|	Регистрация.Проведен КАК Проведен,
	|	Регистрация.ТранспортноеСредство КАК ТранспортноеСредство,
	|	Регистрация.Организация КАК Организация,
	|	Регистрация.ОтправительПолучатель КАК ОтправительПолучатель,
	|	Регистрация.Собственник КАК Собственник,
	|	Регистрация.Контрагент КАК Контрагент,
	|	Регистрация.Водитель КАК Водитель,
	|	Регистрация.Номенклатура КАК Номенклатура,
	|	Регистрация.НомерДокументаПоставщика КАК НомерТТН,
	|	Регистрация.ДатаДокументаПоставщика КАК ДатаДокументаПоставщика,
	|	Регистрация.ВесБрутто КАК ВесБруттоПоДокументам,
	|	Регистрация.ВесТары КАК ВесТарыПоДокументам,
	|	Регистрация.ВесНетто КАК ВесПоДокументам
	|ИЗ
	|	Документ.гкс_РегистрацияНаПЛК КАК Регистрация
	|ГДЕ
	|	Регистрация.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КачественныеПоказателиАнализа.Показатель КАК Показатель,
	|	КачественныеПоказателиАнализа.Значение КАК Значение,
	|	КачественныеПоказателиАнализа.СоответствуетНормативу КАК СоответствуетНормативу,
	|	КачественныеПоказателиАнализа.ОтклонениеОтБазиса КАК ОтклонениеОтБазиса,
	|	КачественныеПоказателиАнализа.гкс_Примечание КАК Примечание
	|ИЗ
	|	Документ.гкс_ЛабораторныйАнализ.КачественныеПоказатели КАК КачественныеПоказателиАнализа
	|ГДЕ
	|	КачественныеПоказателиАнализа.Ссылка = &СсылкаАнализов";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли