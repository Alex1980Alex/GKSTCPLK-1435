
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнициализироватьРеквизитыФормы();
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.гкс_ФормированиеНомераПробы"));
	
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(МассивТипов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокКомпозитныхПроб.КоманднаяПанель;
	ПараметрыРазмещения.ПрефиксГрупп = "";
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов("ДокументСсылка.гкс_РеестрНакладныхЗПП3");
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ПодменюПечатьЗПП3;
	ПараметрыРазмещения.ПрефиксГрупп = "ПодменюПечатьЗПП3";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Программное создание переключателей режима группировки
	СоздатьПереключателиРежимаГруппировки();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборНоменклатураПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	Элементы.СписокРегистраций.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	Элементы.СписокРегистраций.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДоговорПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	Элементы.СписокРегистраций.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСилосПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	Элементы.СписокРегистраций.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТочкаМаршрутаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидПеревозкиПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

 &НаКлиенте
 Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "СтраницаКомпозитныеПробы" Тогда
		УправлениеСтраницейКомпозитныеПробы();
	КонецЕсли;
	
 КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьВсеПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СуткиПриИзменении(Элемент)
	
	УстановитьПериодВыбораРегистраций();
	УстановитьПараметрыДинамическихСписков();
	Элементы.СписокРегистраций.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРегистраций

&НаКлиенте
Процедура СписокРегистрацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокРегистраций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Поле.Имя = "СписокРегистрацийДатаРегистрации" Тогда		
		ДокументОткрытия 	= ТекущиеДанные.ДокументРегистрации;
		ИмяФормыДокумента 	= "Документ.гкс_РегистрацияНаПЛК.Форма.ФормаДокумента";					
	ИначеЕсли Поле.Имя = "СписокРегистрацийНомерПробы" Тогда		
		ДокументОткрытия 	= ТекущиеДанные.ФормированиеПробы;
		ИмяФормыДокумента 	= "Документ.гкс_ФормированиеНомераПробы.Форма.ФормаДокумента";		
	ИначеЕсли Поле.Имя = "СписокРегистрацийНомерКомпозитнойПробы" Тогда		
		ДокументОткрытия 	= ТекущиеДанные.ДокументКомпозитнаяПроба;
		ИмяФормыДокумента 	= "Документ.гкс_ФормированиеНомераПробы.Форма.ФормаДокумента";		
	ИначеЕсли Поле.Имя = "СписокРегистрацийСилос" Тогда		
		ДокументОткрытия 	= ТекущиеДанные.НаправлениеНаРазгрузку;
		ИмяФормыДокумента 	= "Документ.гкс_НаправлениеНаРазгрузку.Форма.ФормаДокумента";		
	ИначеЕсли Поле.Имя = "СписокРегистрацийБруттоФакт" Тогда		
		ДокументОткрытия 	= ТекущиеДанные.ВзвешиваниеВъезд;
		ИмяФормыДокумента 	= "Документ.гкс_Взвешивание.Форма.ФормаДокумента";			
	ИначеЕсли Поле.Имя = "СписокРегистрацийТараФакт" Тогда		
		ДокументОткрытия 	= ТекущиеДанные.ВзвешиваниеВыезд;
		ИмяФормыДокумента 	= "Документ.гкс_Взвешивание.Форма.ФормаДокумента";		
	Иначе		
		ИмяФормыДокумента 	= "";
		ДокументОткрытия 	= Неопределено;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяФормыДокумента) И ЗначениеЗаполнено(ДокументОткрытия) Тогда
		гкс_ПриемкаНаПЛККлиент.ОткрытьДокумент(ЭтотОбъект, ДокументОткрытия, ИмяФормыДокумента, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРегистрацийПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокРегистраций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФильтрКомпозитнаяПроба <> ТекущиеДанные.ДокументКомпозитнаяПроба Тогда
		
		ТекущаяСтрокаДС = Элементы.СписокРегистраций.ТекущаяСтрока;
		ФильтрКомпозитнаяПроба = ТекущиеДанные.ДокументКомпозитнаяПроба;
		НовоеПолеКД = Новый ПолеКомпоновкиДанных("ДокументКомпозитнаяПроба");
		
		СписокЭлементов = СписокРегистрации.УсловноеОформление.Элементы[0].Отбор.Элементы;
		Для Каждого СтрокаЭлемент Из СписокЭлементов Цикл
			Если СтрокаЭлемент.ЛевоеЗначение = НовоеПолеКД И 
					СтрокаЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					
				СтрокаЭлемент.ПравоеЗначение = ФильтрКомпозитнаяПроба;
			КонецЕсли;
		КонецЦикла;
	
		Элементы.СписокРегистраций.ТекущаяСтрока = ТекущаяСтрокаДС;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКомпозитныхПроб

&НаКлиенте
Процедура СписокКомпозитныхПробВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокКомпозитныхПроб.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Поле.Имя = "СписокКомпозитныхПробКомпозитнаяПроба" Тогда
		
		ДокументОткрытия = ТекущиеДанные.ДокументКомпозитнаяПроба;
		Если ЗначениеЗаполнено(ДокументОткрытия) Тогда
			ИмяФормыДокумента = "Документ.гкс_ФормированиеНомераПробы.Форма.ФормаДокумента";
			гкс_ПриемкаНаПЛККлиент.ОткрытьДокумент(ЭтотОбъект, ДокументОткрытия, ИмяФормыДокумента, Истина);
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "СписокКомпозитныхПробЛабораторныйАнализ" Тогда
		
		ДокументОткрытия = ТекущиеДанные.ДокументЛабораторныйАнализ;

		Если ЗначениеЗаполнено(ДокументОткрытия) Тогда
			ИмяФормыДокумента = "Документ.гкс_ЛабораторныйАнализ.Форма.ФормаДокумента";
			гкс_ПриемкаНаПЛККлиент.ОткрытьДокумент(ЭтотОбъект, ДокументОткрытия, ИмяФормыДокумента, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКомпозитныхПробПриАктивизацииСтроки(Элемент)
	
	УстановитьПараметрыДинамическихСписковРегистрацииКомПробы();
	Элементы.СписокРегистрацийКомпозитныеПробы.Обновить();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРегистрацийКомпозитныеПробы

&НаКлиенте
Процедура СписокРегистрацийКомпозитныеПробыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокРегистрацийКомпозитныеПробы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Поле.Имя = "СписокРегистрацийКомпозитныеПробыДокументРегистрации" Тогда
		
		ДокументОткрытия = ТекущиеДанные.ДокументРегистрации;
		Если ЗначениеЗаполнено(ДокументОткрытия) Тогда
			ИмяФормыДокумента = "Документ.гкс_РегистрацияНаПЛК.Форма.ФормаДокумента";
			гкс_ПриемкаНаПЛККлиент.ОткрытьДокумент(ЭтотОбъект, ДокументОткрытия, ИмяФормыДокумента, Истина);
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "СписокРегистрацийКомпозитныеПробыЗПП3" Тогда
		
		ДокументОткрытия = ТекущиеДанные.ЗПП3;
		Если ЗначениеЗаполнено(ДокументОткрытия) Тогда
			ИмяФормыДокумента = "Документ.гкс_РеестрНакладныхЗПП3.Форма.ФормаДокумента";
			гкс_ПриемкаНаПЛККлиент.ОткрытьДокумент(ЭтотОбъект, ДокументОткрытия, ИмяФормыДокумента, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДобавитьСутки(Команда)
	
	ДобавитьСутки(1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУбавитьСутки(Команда)
	
	ДобавитьСутки(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьПробы(Команда)
	
	ТекущиеДанные = Элементы.СписокРегистраций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ДопПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ОбработчикОжиданияСписокРегистраций", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументКомпозитнаяПроба) Тогда
		
		ПараметрыОткрытия.Вставить("Ключ", ТекущиеДанные.ДокументКомпозитнаяПроба);
		ИмяФормыДокумента = "Документ.гкс_ФормированиеНомераПробы.Форма.ФормаДокумента";
		
	Иначе		
		ТипПробыКомпозитная = ПредопределенноеЗначение("Перечисление.гкс_ТипыПроб.Композитная");
		
		Если ДетализироватьПоСилосам Тогда
			Силос = ТекущиеДанные.Силос;
		Иначе
			Силос = ПредопределенноеЗначение("Справочник.гкс_ТочкиМаршрута.ПустаяСсылка");
		КонецЕсли;	
				
		ДопПараметры.Вставить("ТочкаМаршрута", 			Объект.ТочкаМаршрута);
		ДопПараметры.Вставить("ВидПеревозки", 			Объект.ВидПеревозки);
		ДопПараметры.Вставить("Номенклатура", 			ТекущиеДанные.Номенклатура);
		ДопПараметры.Вставить("Контрагент", 			ТекущиеДанные.Контрагент);
		ДопПараметры.Вставить("Силос", 					Силос);
		ДопПараметры.Вставить("ПоказатьВсе", 			ПоказыватьВсе);
		ДопПараметры.Вставить("ТипПробы", 				ТипПробыКомпозитная);				
		ДопПараметры.Вставить("СписокСостояний", 		СписокСостояний);
		ДопПараметры.Вставить("НачалоПериода", 			НачалоПериодаРегистраций);
		ДопПараметры.Вставить("КонецПериода", 			КонецПериодаРегистраций);
		ДопПараметры.Вставить("СтанцияОтправления", 	ТекущиеДанные.СтанцияОтправления); 
		ДопПараметры.Вставить("СтанцияОтправленияПредставление", 	ТекущиеДанные.СтанцияОтправленияПредставление);
		ДопПараметры.Вставить("Грузоотправитель", 		ТекущиеДанные.Грузоотправитель);
		ДопПараметры.Вставить("СлужебнаяНоменклатура", 	ТекущиеДанные.СлужебнаяНоменклатура);
		ДопПараметры.Вставить("ПроизводственныеСуткиРегистрации", Сутки);
				
		ПараметрыОткрытия.Вставить("ДопПараметры", 					ДопПараметры);
		ПараметрыОткрытия.Вставить("СформироватьКомпозитнуюПробу", 	Истина);
		
		// Передача режима группировки композитных проб
		Если ПроверитьРеквизитФормы("РежимГруппировки") Тогда
			ДопПараметры.Вставить("РежимГруппировки", ЭтотОбъект.РежимГруппировки);
		КонецЕсли;
		// Передача пункта погрузки для группировки
		ДопПараметры.Вставить("ПунктПогрузки", 			ТекущиеДанные.ПунктПогрузки);
		
		
		ИмяФормыДокумента = "Обработка.гкс_АРМКомпозитныеПробы.Форма.ФормаФормированиеКомпозитнойФормы";
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыДокумента, ПараметрыОткрытия, ЭтотОбъект, ЭтотОбъект, , , Оповещение, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьЛабораторныйАнализ(Команда)
	
	ТекущиеДанные = Элементы.СписокКомпозитныхПроб.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКлючевойОперации = "АРМКомпозитныеПробы.ДокументЛабораторныйАнализ.ОткрытиеФормы";
	
	Оповещение = Новый ОписаниеОповещения("ОбработчикОжиданияОбновитьСписокКомпозитныхПроб", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументЛабораторныйАнализ) Тогда
		
		ПараметрыОткрытия.Вставить("Ключ", ТекущиеДанные.ДокументЛабораторныйАнализ);
		
	Иначе
		
		ИмяКлючевойОперации = "АРМКомпозитныеПробы.ДокументЛабораторныйАнализ.ОткрытиеФормыНового";
		
		ДокументРегистрации = ТекущиеДанные.ДокументКомпозитнаяПроба;
		
		ЗначенияЗаполнения = Новый Структура;
		
		Если ЗначениеЗаполнено(ДокументРегистрации) Тогда
			
			ДанныеИзРегистрации = ПолучитьДанныеИзКомпозитнойПробы(ДокументРегистрации);
			
			ЗначенияЗаполнения.Вставить("Организация", 		ДанныеИзРегистрации.Организация);
			ЗначенияЗаполнения.Вставить("Номенклатура", 		ДанныеИзРегистрации.Номенклатура);
			ЗначенияЗаполнения.Вставить("НомерПробы", 		ДанныеИзРегистрации.НомерПробы);
			ЗначенияЗаполнения.Вставить("Ответственный", 		ДанныеИзРегистрации.Пользователь);
			ЗначенияЗаполнения.Вставить("гкс_ВидПеревозки", 	ДанныеИзРегистрации.ВидПеревозки);
			ЗначенияЗаполнения.Вставить("гкс_НазначениеИспользованияКачества", 
				ДанныеИзРегистрации.НазначениеИспользованияКачества);
			
		КонецЕсли;
		
		ЗначенияЗаполнения.Вставить("гкс_ДокументРегистрации", ТекущиеДанные.ДокументКомпозитнаяПроба);
		ЗначенияЗаполнения.Вставить("ТочкаМаршрута", Объект.ТочкаМаршрута);
		
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(ИмяКлючевойОперации);
	
	ОткрытьФорму("Документ.гкс_ЛабораторныйАнализ.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект, ЭтотОбъект, , , 
					Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры
	
&НаКлиенте
Процедура КомандаПечатьЭтикетки(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "СтраницаСписокРегистраций" Тогда
		ТекущиеДанные = Элементы.СписокРегистраций.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.СписокКомпозитныхПроб.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не отмечена проба'");	
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	КомпозитнаяПроба = ТекущиеДанные.ДокументКомпозитнаяПроба;
	Если Не ЗначениеЗаполнено(КомпозитнаяПроба) Тогда		
		ТекстСообщения = НСтр("ru='Не заполнена композитная проба'");	
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
		
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(КомпозитнаяПроба);
	
	АвтоматическаяПечатьЭтикеток = гкс_ОбщегоНазначенияВызовСервера.ЗначениеКонстанты(
			"гкс_АвтоматическаяПечатьЭтикеток");
	
	Если АвтоматическаяПечатьЭтикеток Тогда
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("АвтоматическаяПечатьЭтикеток", АвтоматическаяПечатьЭтикеток);
		
		гкс_УправлениеПечатьюКлиент.ПечатьЭтикеткаНаПринтер(
			"Документ.гкс_ФормированиеНомераПробы", "ПФ_MXL_Этикетка", МассивОбъектов, ПараметрыПечати);
	Иначе
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.гкс_ФормированиеНомераПробы",
			"ПФ_MXL_Этикетка", МассивОбъектов, ЭтотОбъект);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечатьЗПП47(Команда)
	
	ТекущиеДанные = Элементы.СписокКомпозитныхПроб.ТекущиеДанные;
		
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументЛабораторныйАнализ) Тогда
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ТекущиеДанные.ДокументЛабораторныйАнализ);
						
 		ОписаниеКоманды = Новый Структура();
		ОписаниеКоманды.Вставить("ОбъектыПечати", 	МассивОбъектов);
		ОписаниеКоманды.Вставить("Форма", 			ЭтотОбъект);
		ОписаниеКоманды.Вставить("Идентификатор", 	"ПФ_MXL_ЗПП47_ru");
		ОписаниеКоманды.Вставить("Представление", 	НСтр("ru = 'Зпп-47'"));
		ОписаниеКоманды.Вставить("МенеджерПечати", 	"Обработка.гкс_ПечатьДокументаЛабораторныйАнализ");
		ОписаниеКоманды.Вставить("Обработчик",  
		 "гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФ_MXL_АктОтбораПроб_ru");

		гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФЗПП47(ОписаниеКоманды);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен лабораторный анализ'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечатьЗПП47АЛЦ(Команда)
	
	ТекущиеДанные = Элементы.СписокКомпозитныхПроб.ТекущиеДанные;
		
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументЛабораторныйАнализ) Тогда
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ТекущиеДанные.ДокументЛабораторныйАнализ);
						
 		ОписаниеКоманды = Новый Структура();
		ОписаниеКоманды.Вставить("ОбъектыПечати", 	МассивОбъектов);
		ОписаниеКоманды.Вставить("Форма", 			ЭтотОбъект);
		ОписаниеКоманды.Вставить("Идентификатор", 	"ПФ_MXL_ЗПП47_АЛЦ_ru");
		ОписаниеКоманды.Вставить("Представление", 	НСтр("ru = 'Зпп-47 АЛЦ'"));
		ОписаниеКоманды.Вставить("МенеджерПечати", 	"Обработка.гкс_ПечатьДокументаЛабораторныйАнализ");
		ОписаниеКоманды.Вставить("Обработчик",  
		 "гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФ_MXL_АктОтбораПроб_ru");

		гкс_УправлениеПечатьюКлиент.ВыполнитьКомандуПечати_ПФЗПП47(ОписаниеКоманды);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен лабораторный анализ'"));
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура КомандаСформироватьЗПП3(Команда)
	
	ТекущиеДанные = Элементы.СписокКомпозитныхПроб.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ДокументЛабораторныйАнализ) Тогда	
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен лабораторный анализ'"));
		Возврат;
	КонецЕсли;

	ИмяКлючевойОперации = "АРМПриемка.ДокументРеестрЗПП3.ОткрытиеФормыНового";
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Анализ", ТекущиеДанные.ДокументЛабораторныйАнализ);
	ЗначенияЗаполнения.Вставить("КомпозитнаяПроба", ТекущиеДанные.ДокументКомпозитнаяПроба);

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);	

	ОбратныйВызов = Новый ОписаниеОповещения("ОбработчикОжиданияОбновитьСписокКомпозитныхПроб", ЭтотОбъект);
	ОценкаПроизводительностиКлиент.ЗамерВремени(ИмяКлючевойОперации);
	ОткрытьФорму("Документ.гкс_РеестрНакладныхЗПП3.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект, ЭтотОбъект, , ,
		ОбратныйВызов, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьСписокРегистраций(Команда)
	
	УстановитьПериодВыбораРегистраций();
	УстановитьПараметрыДинамическихСписков();
	Элементы.СписокРегистраций.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьКомпозитныеПробы(Команда)
	
	УправлениеСтраницейКомпозитныеПробы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьСредневзвешенными(Команда)
	
	ТекущиеДанные = Элементы.СписокКомпозитныхПроб.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не отмечена проба'");	
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеЗакрытияВопроса = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект,
		Новый Структура("КомпозитныйАнализ", ТекущиеДанные.ДокументЛабораторныйАнализ));
		
	ПоказатьВопрос(ОповещениеПослеЗакрытияВопроса,
				НСтр("ru = 'Заполнить лабораторный анализ средневзвешенными значениями показателей?'"),
				РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#Область ОбработчикиОжидания

&НаКлиенте
Процедура ОбработчикОжиданияСписокРегистраций(Результат, ДополнительныеПараметры) Экспорт
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияОбновитьСписокКомпозитныхПроб(Результат, ДополнительныеПараметры) Экспорт
	
	УправлениеСтраницейКомпозитныеПробы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		ОчиститьСообщения();
		КомандаЗаполнитьСредневзвешеннымиНаСервере(ДополнительныеПараметры.КомпозитныйАнализ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьЗаголовокФормы()
	
	Если Параметры.Свойство("КомпозитныеПробы") Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru='Рабочее место ""Композитные пробы""'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизитыФормы()
	
	Сутки = НачалоДня(НачалоДня(ТекущаяДатаСеанса()) - 1);	
	ОбновлениеУсловногоОформления = Истина;
	
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.Выгружен);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.ВзвешенТара);
	СписокСостояний.Добавить(Перечисления.гкс_СостоянияРегистрации.Убыл);
	
	ИнициализироватьОтборТочкаМаршрута();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОтборТочкаМаршрута()
	
	ИспользоватьНесколькоАЛЦ = ПолучитьФункциональнуюОпцию("гкс_ИспользоватьНесколькоАЛЦ");
	
	Элементы.ОтборТочкаМаршрута.Доступность = ИспользоватьНесколькоАЛЦ;
	Элементы.ОтборТочкаМаршрута.РежимВыбораИзСписка = ИспользоватьНесколькоАЛЦ;
	
	Если ИспользоватьНесколькоАЛЦ Тогда
		АЛЦПользователя = РегистрыСведений.гкс_НастройкиПользователейПриемкаНаПЛК
			.НастроенныеТочкиМаршрутаПользователя();
		Если ЗначениеЗаполнено(АЛЦПользователя) Тогда
			ПервыйЭлемент = 0;
			СписокВыбора = Элементы.ОтборТочкаМаршрута.СписокВыбора;
			СписокВыбора.ЗагрузитьЗначения(АЛЦПользователя);
			Объект.ТочкаМаршрута = СписокВыбора.Получить(ПервыйЭлемент).Значение;
		КонецЕсли;	
	Иначе
		Объект.ТочкаМаршрута = Константы.гкс_ТочкаМаршрутаБазы.Получить();	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ИнициализироватьЗаголовокФормы();
	
	ЭлементОформления = СписокРегистрации.УсловноеОформление.Элементы.Добавить();
	
	ПустаяФормированиеНомераПробы = Документы.гкс_ФормированиеНомераПробы.ПустаяСсылка();
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "ДокументКомпозитнаяПроба",
		ВидСравненияКомпоновкиДанных.Равно, ФильтрКомпозитнаяПроба, , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "ДокументКомпозитнаяПроба",
		ВидСравненияКомпоновкиДанных.НеРавно, ПустаяФормированиеНомераПробы, , Истина);
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Желтый);
	ЭлементОформления.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСутки(КоличествоСуток)
	
	Сутки = Сутки + КоличествоСуток * гкс_ОбщегоНазначенияКлиентСервер.СекундВДне();
	
	УстановитьПериодВыбораРегистраций();
	УстановитьПараметрыДинамическихСписков();
	
	Элементы.СписокРегистраций.Обновить();
	УправлениеСтраницейКомпозитныеПробы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыДинамическихСписковКомПробы()
	
	Если ЗначениеЗаполнено(Объект.ВидПеревозки) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокКомпозитныхПроб,
			"ТочкаМаршрута", Объект.ТочкаМаршрута);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокКомпозитныхПроб,
			"ВидПеревозки", Объект.ВидПеревозки);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокКомпозитныхПроб,
			"ПроизводственныеСутки", Сутки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыДинамическихСписковРегистрацииКомПробы()
	
	Если ЗначениеЗаполнено(Объект.ТочкаМаршрута) И ЗначениеЗаполнено(Объект.ВидПеревозки) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРегистрацийКомпозитныеПробы,
			"ТочкаМаршрута", Объект.ТочкаМаршрута);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРегистрацийКомпозитныеПробы,
			"ВидПеревозки", Объект.ВидПеревозки);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРегистрацийКомпозитныеПробы,
			"ПроизводственныеСутки", Сутки);
		
		ТекущиеДанные = Элементы.СписокКомпозитныхПроб.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			ПараметрКомпозитнаяПроба = Неопределено;
			ПараметрЛабораторныйАнализ = Неопределено;
		Иначе
			ПараметрКомпозитнаяПроба = ТекущиеДанные.ДокументКомпозитнаяПроба;
			ПараметрЛабораторныйАнализ = ТекущиеДанные.ДокументЛабораторныйАнализ;	
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРегистрацийКомпозитныеПробы,
			"ДокументКомпозитнаяПроба", ПараметрКомпозитнаяПроба);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРегистрацийКомпозитныеПробы,
			"ЛабораторныйАнализ", ПараметрЛабораторныйАнализ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыДинамическихСписков()
	
	Если ЗначениеЗаполнено(Объект.ВидПеревозки) Тогда
			
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРегистрации,
			"ВидПеревозки", Объект.ВидПеревозки);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРегистрации,
			"ТочкаМаршрута", Объект.ТочкаМаршрута);
										
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРегистрации,
			"НачалоПериода", НачалоПериодаРегистраций);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРегистрации,
			"КонецПериода", КонецПериодаРегистраций);
			
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРегистрации,
			"ПроизводственныеСутки", Сутки);		
					
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДинамическихСписков()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРегистрации, "Номенклатура", 
		Объект.Номенклатура, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(Объект.Номенклатура));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРегистрации, "Контрагент", 
		Объект.Контрагент, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(Объект.Контрагент));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРегистрации, "Договор", 
		Объект.Договор, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(Объект.Договор));	
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРегистрации, "Силос", 
		Объект.Силос, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(Объект.Силос));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРегистрации, 
		"ДокументКомпозитнаяПроба", ПредопределенноеЗначение("Документ.гкс_ФормированиеНомераПробы.ПустаяСсылка"),
		ВидСравненияКомпоновкиДанных.Равно, , Не ПоказыватьВсе);
						
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодВыбораРегистраций()
	
	НачалоПериодаРегистраций = гкс_ПриемкаТранспорта.НачалоПроизводственныхСуток(Сутки);
	КонецПериодаРегистраций = гкс_ПриемкаТранспорта.ОкончаниеПроизводственныхСуток(Сутки);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	Если ЗначениеЗаполнено(Объект.ТочкаМаршрута) И ЗначениеЗаполнено(Объект.ВидПеревозки) Тогда
		
		Элементы.ГруппаСтраницы.Видимость = Истина;
		Элементы.ГруппаОтборы.Видимость = Истина;
			
		УстановитьПериодВыбораРегистраций();
		УстановитьПараметрыДинамическихСписков();
		Элементы.СписокРегистраций.Обновить();
		
	Иначе
		Элементы.ГруппаСтраницы.Видимость = Ложь;
		Элементы.ГруппаОтборы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеСтраницейКомпозитныеПробы()
	
	УстановитьПараметрыДинамическихСписковКомПробы();
	Элементы.СписокКомпозитныхПроб.Обновить();
	
	УстановитьПараметрыДинамическихСписковРегистрацииКомПробы();
	Элементы.СписокРегистрацийКомпозитныеПробы.Обновить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеИзКомпозитнойПробы(ДокументКомпозитнойПробы)
	
	Если ДокументКомпозитнойПробы.СписокРегистраций.Количество() > 0 Тогда
		
		КодПробы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументКомпозитнойПробы.НомерПробы, "Код"); 	
		
		РегистрацияНаПЛК = ДокументКомпозитнойПробы.СписокРегистраций[0].ДокументРегистрации;
		
		ДанныеИзРегистрации = Новый Структура;
		ДанныеИзРегистрации.Вставить("Организация", 	РегистрацияНаПЛК.Организация);
		ДанныеИзРегистрации.Вставить("Номенклатура", 	РегистрацияНаПЛК.Номенклатура);
		ДанныеИзРегистрации.Вставить("НомерПробы", 		КодПробы);
		ДанныеИзРегистрации.Вставить("Пользователь", 	Пользователи.ТекущийПользователь());
		ДанныеИзРегистрации.Вставить("ВидПеревозки", 	РегистрацияНаПЛК.ВидПеревозки);
		ДанныеИзРегистрации.Вставить("НазначениеИспользованияКачества", 
			Перечисления.гкс_НазначенияИспользованияКачества.ПриемкаКомпозит);
					
	Иначе
		ДанныеИзРегистрации = Неопределено;
	КонецЕсли;
	
	Возврат ДанныеИзРегистрации;
	
КонецФункции

&НаСервере
Процедура КомандаЗаполнитьСредневзвешеннымиНаСервере(ЛабораторныйАнализ)
	
	Менеджер = Документы.гкс_ЛабораторныйАнализ;
	СредневзвешенныеПоказатели = Менеджер.СредневзвешенныеПоказателиКомпозитногоАнализа(ЛабораторныйАнализ);
	
	Если ЗначениеЗаполнено(СредневзвешенныеПоказатели) Тогда
		
		ДокументАнализаОбъект = ЛабораторныйАнализ.ПолучитьОбъект();	
		ДокументАнализаОбъект.УстановитьСвойствоПроведенияСостоянияРегистрации();
		
		ДокументАнализаОбъект.ЗаполнитьСредневзвешенныеПоказатели(СредневзвешенныеПоказатели);
		
		ДокументАнализаОбъект.ЗаписатьДокументПослеОбработки();
	КонецЕсли;	
	
КонецПроцедуры 

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.СписокКомпозитныхПроб);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокКомпозитныхПроб);
	
КонецПроцедуры


// Программное создание переключателей режима группировки
&НаСервере
Процедура СоздатьПереключателиРежимаГруппировки()
	РежимГруппировкиПриИзменении = "РежимГруппировкиПриИзменении";	
	КоличествоКолонок = 2;
	// Программно добавляем атрибут РежимГруппировки
	НовыйАтрибут = Новый РеквизитФормы("РежимГруппировки", Новый ОписаниеТипов("Число"), , "Группировка");
	МассивАтрибутов = Новый Массив;
	МассивАтрибутов.Добавить(НовыйАтрибут);
	ИзменитьРеквизиты(МассивАтрибутов); 

	// Создаем переключатель "по группировки"
	ПереключательПоГруппировки = Элементы.Добавить("РежимГруппировки", Тип("ПолеФормы"), Элементы.ГруппаНастройки);  
	ПереключательПоГруппировки.ПутьКДанным = "РежимГруппировки";  
	ПереключательПоГруппировки.Вид = ВидПоляФормы.ПолеПереключателя;  
	ПереключательПоГруппировки.КоличествоКолонок = КоличествоКолонок;  
	ПереключательПоГруппировки.СписокВыбора.Добавить(0, "По грузоотправителю");  
	ПереключательПоГруппировки.СписокВыбора.Добавить(1, "По пункту погрузки");  
	
	// Устанавливаем обработчики событий для обоих переключателей
	ПереключательПоГруппировки.УстановитьДействие("ПриИзменении", РежимГруппировкиПриИзменении);
	
		
	ЭтотОбъект.РежимГруппировки = 0;
КонецПроцедуры


// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Проверить реквизит формы.
// 
// Параметры:
//  ИмяРеквизитаДляПроверки - Строка - Имя реквизита для проверки
// 
// Возвращаемое значение:
//  Булево - Проверить реквизит формы
&НаКлиенте
Функция ПроверитьРеквизитФормы(ИмяРеквизитаДляПроверки)
	ЭлементСуществует = Ложь;
	ЭлементФормы = Элементы.Найти(ИмяРеквизитаДляПроверки);
	Если ТипЗнч(ЭлементФормы) <> Тип("Неопределено") Тогда
		ЭлементСуществует = Истина;
	КонецЕсли;
	
	Возврат ЭлементСуществует;
КонецФункции

#КонецОбласти


