#Если ТолстыйКлиентОбычноеПриложение ИЛИ Сервер ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучателиСообщенияПоСобытиюОбъекта(Событие, ОбъектСобытия) Экспорт
	
	// Коллекция получатель - массив структур со свойствами, необходимыми для маршрутизации отправки сообщения
	Перем Получатели; 	
	// Хранит признак необходимости применения отбора по условию
	// (Справочник.гкс_ПолучателиДанныхRMQ.ВыгружаемыеДанные.Условие) для получателей.
	Перем ФильтроватьПоУсловиюВыгрузки; 			
	ФильтроватьПоУсловиюВыгрузки = Истина; // По умолчанию - применять условие нужно всегда 
	
    Если ОбъектСобытия.ДополнительныеСвойства.Свойство("ДанныеСинхронизацииRMQ") Тогда   
		
		ДанныеСинхронизацииRMQ = ОбъектСобытия.ДополнительныеСвойства["ДанныеСинхронизацииRMQ"]; 
		
		ДанныеСинхронизацииRMQ.Свойство("Получатели", Получатели);
		Если ДанныеСинхронизацииRMQ.Свойство("ФильтрПоУсловиюВыгрузки") Тогда
			ФильтроватьПоУсловиюВыгрузки = ДанныеСинхронизацииRMQ["ФильтрПоУсловиюВыгрузки"];
		КонецЕсли;
			    
	КонецЕсли; 
	
	// Получатели могут быть указаны явно. 
	// Если это так, то считаем что вызывающий код сам знает что кому и как отправить
	Если НЕ ЗначениеЗаполнено(Получатели) Тогда
		Получатели = ПолучателиСобытияОбъекта(ОбъектСобытия);
	КонецЕсли;
	
	Если ФильтроватьПоУсловиюВыгрузки И гкс_ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектСобытия.Метаданные()) Тогда	// Фильтр только для объектных данных		
		Получатели = ПрименитьФильтрПолучателейПоУсловиюВыгрузки(Получатели, ОбъектСобытия.Ссылка);		
	КонецЕсли;
	
	ДополнитьЗначенияСвойствПолучателей(Получатели, ОбъектСобытия);
	
	Возврат Получатели;
	
КонецФункции

Функция СформироватьСообщения(Данные, Параметры) Экспорт 
	
	Перем Формат, Сообщение, ФиксироватьПроблемуОбменаПриФормировании;
	
	Параметры.Свойство("Формат", Формат);
	Параметры.Свойство("ФиксироватьПроблемуОбменаПриФормировании", ФиксироватьПроблемуОбменаПриФормировании);
	Если НЕ ЗначениеЗаполнено(ФиксироватьПроблемуОбменаПриФормировании) Тогда
		ФиксироватьПроблемуОбменаПриФормировании = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Формат) Тогда		
		ВызватьИсключение НСтр("ru='Не заполнен формат. Формирование сообщения отменено.'");		
	КонецЕсли;
		
	НастройкиФормата = НастройкиФормата(Формат);
	
	Если НЕ ЗначениеЗаполнено(НастройкиФормата) Тогда		
		ВызватьИсключение гкс_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru='У формата %1 не указаны "" Настройки обмена ""'", Строка(Формат));			
	КонецЕсли;
	
	Менеджер = гкс_ОбщегоНазначения.ОбщийМодуль(НастройкиФормата.МенеджерФормирования);		
	Параметры.Вставить("НастройкиФормата", НастройкиФормата);

	Попытка 	
		Сообщение = Менеджер.СформироватьСообщение(Данные, Параметры);
	Исключение	
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Если ФиксироватьПроблемуОбменаПриФормировании Тогда
			ЗафиксироватьПробелемуОбмена(Данные, 
			               ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	Возврат Сообщение;
	
КонецФункции

Процедура ЗафиксироватьПробелемуОбмена(ПроблемныйОбъект, ТекстОшибкиСоСтеком)
	
	Пока ТранзакцияАктивна() Цикл
		ОтменитьТранзакцию();
	КонецЦикла;
	
	СтруктураПроблемы = Новый Структура;
	СтруктураПроблемы.Вставить("ТипПроблемы", Справочники.гкс_ТипыПроблемОбменаДанными.Неструктурированная);
	СтруктураПроблемы.Вставить("ПроблемныйОбъект", ПроблемныйОбъект.Ссылка);
	СтруктураПроблемы.Вставить("Текст", ТекстОшибкиСоСтеком);
	
	гкс_ОчередьСообщенийRMQВызовСервера.ЗафиксироватьПроблемуОбработкиОбъекта(СтруктураПроблемы);
	
КонецПроцедуры

// Инициализирует дополнительные свойства объекта, структурами, вспомогательными для алгоритмов 
// формирования сообщений RMQ 
//
// Параметры:
//  Источник - СправочникОбъект, ДокументОбъект - 
//  ДополнительныеСвойства  - Структура - контейнер дополнительных свойств
//
Процедура ИнициализироватьСвойстваОбъекта(Источник, ДополнительныеСвойства) Экспорт
	
	Если ДополнительныеСвойства.Свойство("ДанныеСинхронизацииRMQ") Тогда		
		Возврат; // Свойства были инициализированы ранее		
	КонецЕсли;
	
	ДанныеСинхронизацииRMQ = Новый Структура;
	ДанныеСинхронизацииRMQ.Вставить("ТипМетаданных", Источник.Метаданные().ПолноеИмя());
	
	СвойстваДляИнициализации = СвойстваДляИнициализации();
	Для Каждого Свойство Из СвойстваДляИнициализации Цикл
		
		Если ДополнительныеСвойства.Свойство(Свойство.Ключ) Тогда
			ДанныеСинхронизацииRMQ.Вставить(Свойство.Значение, ДополнительныеСвойства[Свойство.Ключ]); 	
		КонецЕсли;
		ДополнительныеСвойства.Удалить(Свойство.Ключ);

	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("ДанныеСинхронизацииRMQ", ДанныеСинхронизацииRMQ);
				
КонецПроцедуры

// Устанавливает все свойства сообщения RMQ, за исключением свойства "Номер сообщения", которое устанавливается 
// при непосредственно при отправке
//
// Параметры:
//  Параметры - Структура - объект, сождержащий описание свойств получателя
//
Функция СформироватьСвойстваСообщения(Параметры) Экспорт
				
	СвойстваСообщения = Новый Структура;
	СвойстваСообщения.Вставить("Тип", ТипСообщения(Параметры.ТипМетаданных));
	СвойстваСообщения.Вставить("ТипСодержимого", ТипСодержимого(Параметры));
	СвойстваСообщения.Вставить("ИмяПриложения", ИмяПриложения());
	СвойстваСообщения.Вставить("ОтметкаВремени", ТекущаяУниверсальнаяДатаВМиллисекундах());
	СвойстваСообщения.Вставить("Заголовки", ЗаголовкиСообщения(Параметры));
	
	УстановитьСвойствоИЗПараметров(СвойстваСообщения, Параметры, "КлючСоответствия");
	УстановитьСвойствоИЗПараметров(СвойстваСообщения, Параметры, "ОбратныйАдрес");

	Возврат СвойстваСообщения;
	
КонецФункции

Функция ЗаписатьСообщениеВИсходящие(Сообщение, СвойстваСообщения, ПараметрыПолучателя) Экспорт
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Сообщение", Сообщение);
	ПараметрыСообщения.Вставить("СвойстваСообщения", СвойстваСообщения);
	
	УстановитьСвойствоИЗПараметров(ПараметрыСообщения, ПараметрыПолучателя, "ТочкаОбмена", "ТочкаПубликации"); 
	УстановитьСвойствоИЗПараметров(ПараметрыСообщения, ПараметрыПолучателя, "СерверRMQ", "СерверОчередей");
	
	Для Каждого КлючИЗначения Из ПараметрыПолучателя Цикл		
		ПараметрыСообщения.Вставить(КлючИЗначения.Ключ, КлючИЗначения.Значение);			
	КонецЦикла;
	
	Если НЕ ПараметрыСообщения.Свойство("УниверсальнаяДатаСобытияВМиллисекундах") Тогда
		ВремяСобытия = ОчередьСообщенийВызовСервера.ТекущаяУниверсальнаяДатаВМиллисекундахНаСервере();
		ПараметрыСообщения.Вставить("УниверсальнаяДатаСобытияВМиллисекундах", ВремяСобытия);
	КонецЕсли;
	
	Возврат Справочники.ИсходящиеСообщения.СформироватьИОтправитьПоПараметрам(ПараметрыСообщения);
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучателиСобытияОбъекта(ОбъектСобытия)
	
	ДанныеСинхронизацииRMQ = Неопределено;
	ОтложеннаяВыгрузка = Неопределено;
	ИсключаемыеПолучатели = Неопределено;
	
	ОбъектСобытия.ДополнительныеСвойства.Свойство("ДанныеСинхронизацииRMQ", ДанныеСинхронизацииRMQ);
	Если ЗначениеЗаполнено(ДанныеСинхронизацииRMQ) Тогда
		ДанныеСинхронизацииRMQ.Свойство("ИсключаемыеПолучатели", ИсключаемыеПолучатели);
		ДанныеСинхронизацииRMQ.Свойство("ОтложеннаяВыгрузка", ОтложеннаяВыгрузка);
	КонецЕсли;
	
	Если ОтложеннаяВыгрузка = Неопределено Тогда
		ОтложеннаяВыгрузка = Ложь;
	КонецЕсли;
	
	ТипМетаданных = ОбъектСобытия.Метаданные().ПолноеИмя();
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОтложеннаяВыгрузка", ОтложеннаяВыгрузка);
	
	ВсеПолучатели = гкс_ОчередьСообщенийRMQВызовСервера.ПолучателиRabbitMQПоТипуМетаданных(ТипМетаданных, ДопПараметры);
	Если ЗначениеЗаполнено(ИсключаемыеПолучатели) Тогда
		ВсеПолучатели = ФильтроватьВсехПолучателейПоИсключаемымПолучателям(ВсеПолучатели, ИсключаемыеПолучатели);
	КонецЕсли;
	
	Возврат ВсеПолучатели;
	                                                                    		
КонецФункции

// Фильтровать всех получателей по исключаемым получаетелям.
// 
// Параметры:
//  ВсеПолучатели - Массив Из Структура:
//  ИсключаемыеПолучатели - Массив - Исключаемые получатели
//
// Возвращаемое значение:
//  Массив из Структура:
//
Функция ФильтроватьВсехПолучателейПоИсключаемымПолучателям(ВсеПолучатели, ИсключаемыеПолучатели)

	ПолучателиПослеФильтра = Новый Массив; 

	Для Каждого Получатель Из ВсеПолучатели Цикл
		
		Если НЕ ИсключаемыеПолучатели.Найти(Получатель.СсылкаНаПолучателя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучателиПослеФильтра.Добавить(Получатель);
		
	КонецЦикла;
	
	Возврат ПолучателиПослеФильтра;

КонецФункции

#Область ФормированиеСообщенийRMQ

Функция ПрименитьФильтрПолучателейПоУсловиюВыгрузки(Знач Получатели, Знач СсылкаНаОбъект)
	
	ПолучателиВСписке = Новый СписокЗначений;
	ПолучателиВСписке.ЗагрузитьЗначения(Получатели);
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для Каждого Получатель Из ПолучателиВСписке Цикл
		
		Условие = Получатель.Значение.Условие;
		Если ЗначениеЗаполнено(Условие) И 
			НЕ гкс_ОчередьСообщенийRMQВызовСервера.ОбъектПодходитПоУсловию(СсылкаНаОбъект, Условие) Тогда			
			УдаляемыеЭлементы.Добавить(Получатель);				
		КонецЕсли;
				
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл 	
		ПолучателиВСписке.Удалить(УдаляемыйЭлемент);		
	КонецЦикла;

	Возврат ПолучателиВСписке.ВыгрузитьЗначения();

КонецФункции

#КонецОбласти

#Область ФормированиеСвойствСообщения

Функция ТипСообщения(ТипМетаданных) Экспорт
	
	Шаблон = "1С.%1";
	ТипСообщения = СтрЗаменить(Шаблон, "%1", ТипМетаданных);
	
	Возврат ТипСообщения;
	
КонецФункции

Функция ТипСодержимого(Параметры)
	
	Перем Формат;
	
	Параметры.Свойство("Формат", Формат);
	
	СтруктураСодержимого = Новый Структура;
	СтруктураСодержимого.Вставить("Формат", Строка(Формат));
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураСодержимого);
	
	Содержимое = ЗаписьJSON.Закрыть();
	
	Возврат Содержимое;
	
КонецФункции

Функция ИмяПриложения()
	
	ТекущееПриложение = гкс_ОчередьСообщенийRMQВызовСервера.ТекущееПриложение(); 
	
	Реквизиты = гкс_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущееПриложение, "Код, Наименование");
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, Реквизиты);
	
	ИмяПриложения = ЗаписьJSON.Закрыть();

	Возврат ИмяПриложения; 
	
КонецФункции

Функция ЗаголовкиСообщения(Параметры)
	
	Автор = ПараметрыАвтораСообщения();
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("КлючОбъекта", Параметры.КлючОбъекта);
	Заголовки.Вставить("Автор", Автор);
	
	УстановитьСвойствоИЗПараметров(Заголовки, Параметры, "Хоп", "Hop");
	УстановитьСвойствоИЗПараметров(Заголовки, Параметры, "КорневойИдентификаторСообщения", 
	"КорневойИдентификаторСообщения");
	
	Возврат Заголовки;
	
КонецФункции

Функция ПараметрыАвтораСообщения()
	
	ПредставлениеАвтора = Новый Структура;
	
	ДанныеСеанса = ПолучитьТекущийСеансИнформационнойБазы();
		
	Пользователь = "Не авторизован"; // Не локалируется
	ИД = "00000000-0000-0000-0000-000000000000";
	
	Если НЕ ДанныеСеанса.Пользователь = Неопределено Тогда
		
		Пользователь = ДанныеСеанса.Пользователь.Имя; // Не локалируется
		ИД = Строка(ДанныеСеанса.Пользователь.УникальныйИдентификатор);
	
	КонецЕсли;
	
	ОписаниеПользователя = Новый Структура;
	ОписаниеПользователя.Вставить("Пользователь", Пользователь);
	ОписаниеПользователя.Вставить("ИД", ИД);

	ПредставлениеАвтора.Вставить("Пользователь", ОписаниеПользователя);
	ПредставлениеАвтора.Вставить("ИмяКомпьютера", ДанныеСеанса.ИмяКомпьютера);
	ПредставлениеАвтора.Вставить("ИмяПриложения", ДанныеСеанса.ИмяПриложения);
	ПредставлениеАвтора.Вставить("НачалоСеанса", Строка(ДанныеСеанса.НачалоСеанса));
	ПредставлениеАвтора.Вставить("НомерСеанса", Строка(ДанныеСеанса.НомерСеанса));
	ПредставлениеАвтора.Вставить("НомерСоединения", Строка(ДанныеСеанса.НомерСоединения));
	ПредставлениеАвтора.Вставить("ИнформационнаяБаза", НРег(СтрокаСоединенияИнформационнойБазы()));

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, ПредставлениеАвтора); 
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Процедура УстановитьСвойствоИЗПараметров(СвойстваСообщения, Знач Параметры, Знач ИмяПараметра, 
	Знач ИмяСвойства = Неопределено)
	
	Перем ЗначениеСвойства;
	
	Если ИмяСвойства = Неопределено Тогда		
		ИмяСвойства = ИмяПараметра;		
	КонецЕсли;
	
	Если Параметры.Свойство(ИмяПараметра, ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда		
		СвойстваСообщения.Вставить(ИмяСвойства, ЗначениеСвойства);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область Прочее

Функция СвойстваДляИнициализации()
	
	Свойства = Новый Структура;
	Свойства.Вставить("ХопRMQ", "Хоп");
	Свойства.Вставить("СквознойНомерRMQ", "НомерСообщения");
	Свойства.Вставить("ОтложеннаяВыгрузка", "ОтложеннаяВыгрузка");
	Свойства.Вставить("ПорядокСообщения", "ПорядокСообщения");
	Свойства.Вставить("ИсключаемыеПолучатели", "ИсключаемыеПолучатели");
	Свойства.Вставить("ФиксироватьПроблемуОбменаПриФормировании", "ФиксироватьПроблемуОбменаПриФормировании");
	#Область ТестыИспытания
	Свойства.Вставить("ТестыИспытания", "ТестыИспытания");
	#КонецОбласти
	
	Возврат Свойства;
	
КонецФункции

Функция НастройкиФормата(Формат)
	
	Возврат гкс_ОчередьСообщенийRMQВызовСервера.ПолучитьОбщиеНастройкиФормата(Формат);
	
КонецФункции

Процедура ДополнитьЗначенияСвойствПолучателей(Получатели, Объект)
	
	Перем ДанныеСинхронизацииRMQ;
	
	Объект.ДополнительныеСвойства.Свойство("ДанныеСинхронизацииRMQ", ДанныеСинхронизацииRMQ);
	
	Ключ = ПолучитьКлючОбъекта(Объект);
	
	Для Каждого Получатель Из Получатели Цикл
		
		Получатель.Вставить("КлючОбъекта", Ключ);
		Если гкс_ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(Объект.Метаданные()) Тогда
			Получатель.Вставить("гкс_ОбъектСобытия", Объект.Ссылка);
		КонецЕсли;
		
		Если ТипЗнч(ДанныеСинхронизацииRMQ) = Тип("Структура") Тогда
			
			УстановитьСвойствоИЗПараметров(Получатель, ДанныеСинхронизацииRMQ, "НомерСообщения", 
			                               "КорневойИдентификаторСообщения");
			УстановитьСвойствоИЗПараметров(Получатель, ДанныеСинхронизацииRMQ, "Хоп", "Хоп"); 
			УстановитьСвойствоИЗПараметров(Получатель, ДанныеСинхронизацииRMQ, "Синхронно", "Синхронно"); 
			УстановитьСвойствоИЗПараметров(Получатель, ДанныеСинхронизацииRMQ, "ПорядокСообщения", 
			                               "УниверсальнаяДатаСобытияВМиллисекундах");
			УстановитьСвойствоИЗПараметров(Получатель, 
			                               ДанныеСинхронизацииRMQ, 
			                               "ФиксироватьПроблемуОбменаПриФормировании", 
			                               "ФиксироватьПроблемуОбменаПриФормировании");
			#Область ТестыИспытания
			УстановитьСвойствоИЗПараметров(Получатель, 
			                               ДанныеСинхронизацииRMQ, 
			                               "ТестыИспытания", 
			                               "ТестыИспытания");
			#КонецОбласти
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКлючОбъекта(Объект)
	
	Перем Ключ;
	
	гкс_ОчередьСообщенийRMQПереопределяемый.ПриОпределенииКлючаОбъекта(Объект, Ключ);
	
	Если Ключ = Неопределено Тогда
		
		Ключ = гкс_ОчередьСообщенийRMQ.КлючОбъекта(Объект);
		
	КонецЕсли;
	
	Ключ = СтрЗаменить(Ключ, " ", "");
	
	Возврат Ключ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли