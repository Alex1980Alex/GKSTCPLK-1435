#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - см. УправлениеПечатьюПереопределяемый.ПриПечати.МассивОбъектов
//  ПараметрыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//  КоллекцияПечатныхФорм - см. УправлениеПечатьюПереопределяемый.ПриПечати.КоллекцияПечатныхФорм
//  ОбъектыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//  ПараметрыВывода - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыВывода
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	СтруктураТипов = гкс_ОбщегоНазначенияПЛК.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктВозврата_by") Тогда
		
		ТабличныйДокумент = ПечатнаяФормаАктаВозврата(СтруктураТипов, ОбъектыПечати, ПараметрыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
																"ПФ_MXL_АктВозврата_by",
																НСтр("ru='Акт возврата'"),
																ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти	
	
#Область СлужебныеПроцедурыИФункции

#Область Печать_АктВозврата

Функция ПечатнаяФормаАктаВозврата(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПФ_MXL_АктВозврата_by";
	
	УстановитьПривилегированныйРежим(Истина);
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл

		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = гкс_ЛокализацияСервер.МодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		КонецЕсли;
		
			ДанныеДляПечати = МенеджерОбъекта.
			ДанныеДляПечатнойФормыАктВозврата(СтруктураОбъектов.Значение);
		
		Если Не ДанныеДляПечати = Неопределено Тогда
			ЗаполнитьТабличныйДокументАктВозврата(ТабличныйДокумент,
															ДанныеДляПечати,
															ОбъектыПечати,
															ПараметрыПечати);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Процедура заполняет табличный документ "акт расхождения веса"
//
Процедура ЗаполнитьТабличныйДокументАктВозврата(ТабличныйДокумент,
														ДанныеДляПечати,
														ОбъектыПечати,
														ПараметрыПечати)
	
	ДанныеПечати = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам	= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.гкс_ПечатьАктВозврата_Беларусь.ПФ_MXL_АктВозврата_by",
													гкс_ЛокализацияСервер.КодЛокализацииБазы());
	
	ДанныеДополнительные = Новый Структура;
	ПараметрыПечати.Свойство("ДанныеПечати", ДанныеДополнительные);
	
	ДанныеШапки = СтруктураПоРезультатуЗапроса(ДанныеДляПечати.РезультатПоШапке);
	ДанныеСтроки = СтруктураПоРезультатуЗапроса(ДанныеДляПечати.РезультатПоТабличнойЧасти);
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеШапки, ДанныеПечати);
        ДобавитьШаблоныВДанныеШапки(ДанныеШапки);
		СтруктураПоиска = Новый Структура("ЛабАнализ", ДанныеШапки.ЛабАнализ);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
	
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТЧ");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал"); 
		
		ПараметрыШапки = ОбластьШапка.Параметры;
		
		ПараметрыШапки.Заполнить(ДанныеШапки);
		ПараметрыШапки.Заполнить(ДанныеДополнительные);
		
		ПараметрыШапки.ДатаЛабАнализ = Формат(ДанныеШапки.ДатаЛабАнализ,"ДФ=dd.MM.yyyy");
		ПараметрыШапки.НомерЛабАнализ = СокрЛП(ДанныеШапки.НомерЛабАнализ);
		ПараметрыШапки.Водитель = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ПараметрыШапки.Водитель);
		
		Лаборант = ПараметрыШапки.Лаборант;
		Если ЗначениеЗаполнено(Лаборант) Тогда
			ПараметрыШапки.Лаборант = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ПараметрыШапки.Лаборант);
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		Пока СтрокаТовары.Следующий() Цикл
			
			ПараметрыСтроки = ОбластьСтрока.Параметры;
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТовары);
			
			ПараметрыСтроки.Заполнить(ДанныеСтроки);
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		Если СтрокаТовары.Количество() = 0 Тогда
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЕсли;
			
		ПараметрыПодвала = ОбластьПодвал.Параметры;
		ПараметрыПодвала.Заполнить(ДанныеШапки);
		ПараметрыПодвала.Заполнить(ДанныеДополнительные);
		ПараметрыПодвала.Водитель = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ПараметрыПодвала.Водитель);
		
		Лаборант = ПараметрыПодвала.Лаборант;
		Если ЗначениеЗаполнено(Лаборант) Тогда
			ПараметрыПодвала.Лаборант = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ПараметрыПодвала.Лаборант);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		ПервыйДокумент = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьШаблоныВДанныеШапки(ДанныеШапки)    
	
	Шаблоны = Новый Структура();
	
	Если ДанныеШапки.ПродуктоваяГруппа = Справочники.гкс_ПродуктоваяГруппа.Соя Тогда
		Шаблоны.Вставить("Наименование1", "семена сои на пищевые цели");
		Шаблоны.Вставить("Наименование2", "семенам сои");
		Шаблоны.Вставить("Наименование3", "Семена сои");
		Шаблоны.Вставить("Наименование4", "Соя. Требования при заготовках и поставках");
	ИначеЕсли ДанныеШапки.ПродуктоваяГруппа = Справочники.гкс_ПродуктоваяГруппа.Рыжик Тогда
		Шаблоны.Вставить("Наименование1", "рыжик");
		Шаблоны.Вставить("Наименование2", "рыжику");
		Шаблоны.Вставить("Наименование3", "Рыжик");
		Шаблоны.Вставить("Наименование4", "Рыжик для переработки. Технические условия");
	ИначеЕсли ДанныеШапки.ПродуктоваяГруппа = Справочники.гкс_ПродуктоваяГруппа.Лен Тогда
		Шаблоны.Вставить("Наименование1", "семена льна масличного");
		Шаблоны.Вставить("Наименование2", "семенам льна масличного");
		Шаблоны.Вставить("Наименование3", "Семена льна масличного");
		Шаблоны.Вставить("Наименование4", "Семена льна масличного. Промышленное сырье. Технические условия");
	Иначе
		Шаблоны.Вставить("Наименование1", "рапс россия маслосемян рапса");
		Шаблоны.Вставить("Наименование2", "маслосеменам рапса");
		Шаблоны.Вставить("Наименование3", "Маслосемена рапса");
		Шаблоны.Вставить("Наименование4", "Маслосемена рапса. Требования при заготовках и поставках");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеШапки, Шаблоны, Ложь);
	
КонецПроцедуры

Функция СтруктураПоРезультатуЗапроса(РезультатЗапроса)
	
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
#КонецОбласти

#КонецОбласти

#КонецЕсли