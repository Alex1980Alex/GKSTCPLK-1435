#Если ТолстыйКлиентОбычноеПриложение ИЛИ Сервер ИЛИ ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

Перем Сообщение;
Перем Формат;
Перем Результат;
Перем МенеджерФорматов;
Перем Читатор;
Перем ТипФорматаСтрокой;

#КонецОбласти
		
#Область ПрограммныйИнтерфейс

Процедура Прочитать() Экспорт
	
	ПроверитьВозможностьЧтенияСообщения();
	
	ПрочитатьОбъектыИзПотока();
	
КонецПроцедуры

Процедура Загрузить() Экспорт
	
	ЗагрузитьПрочитанныеОбъектыБезПроверок();
	
	ПровестиДокументыСоВсемиПроверками();
	
	ЗагрузитьОбъектыСоВсемиПроверками();
	
КонецПроцедуры

Функция Результат() Экспорт
	
	Возврат Результат;
	
КонецФункции

#Область ГеттерыСеттеры

Процедура УстановитьСообщение(Значение) Экспорт
	
	Сообщение = Значение;
	
КонецПроцедуры

Процедура УстановитьФормат(Значение) Экспорт
	
	Формат = Значение;
	Если МенеджерФорматов.ЭтоСтандартнаяСериализацияXDTOJSON(Формат) Тогда
		ТипФорматаСтрокой = "XDTOJSON";	
	ИначеЕсли МенеджерФорматов.ЭтоСтандартнаяСериализацияXDTOXML(Формат) Тогда
		ТипФорматаСтрокой = "XDTOXML";
	ИначеЕсли МенеджерФорматов.ЭтоСтандартнаяСериализацияXML(Формат) Тогда
		ТипФорматаСтрокой = "XML";
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИсключаемыхПолучателей(Значение) Экспорт 
	
	Если Тип("Массив") = ТипЗнч(Значение) Тогда
		Для Каждого ЗначениеМассива Из Значение Цикл
			Результат.ИсключаемыеПолучатели.Добавить(ЗначениеМассива);	
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ОчиститьПрочитанныеОбъекты() Экспорт
	Результат.ПрочитанныеОбъекты.Очистить();
КонецПроцедуры

Функция ПрочитанныеОбъекты() Экспорт
	Возврат Результат.ПрочитанныеОбъекты;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЧтениеСообщений

Процедура ПрочитатьОбъектыИзПотока()
	
	ИнициализироватьЧитаторПотокаЗагрузки();
	
	ПрочитатьСообщениеИзПотока();
	
КонецПроцедуры

Процедура ПрочитатьСообщениеИзПотока()
	
	Если ЭтоЗагрузкаВФорматеXML() ИЛИ  ЭтоЗагрузкаВФорматеXDTOXML() Тогда
		ПрочитатьСообщениеИзПотокаXML();
	ИначеЕсли ЭтоЗагрузкаВФорматеXDTOJSON() Тогда
		ПрочитатьСообщениеИзПотокаJSON();	
	КонецЕсли;
 	
КонецПроцедуры

Процедура ПрочитатьСообщениеИзПотокаJSON()    
	
	ПрочитатьОбъектыИзУзлаExchangeObjectsJSON();
	
КонецПроцедуры

Процедура ПрочитатьСообщениеИзПотокаXML()
	
	ПрочитатьОбъектИзПотокаXMLДобавитьВРезультат();
					
КонецПроцедуры

Процедура ПрочитатьОбъектыИзУзлаExchangeObjectsJSON()
	
	ПрочитанныйОбъект = СериализаторXDTO.ПрочитатьJSON(Читатор);	
	
	ДобавитьПрочитанныйОбъектВРезультат(ПрочитанныйОбъект);	
		
КонецПроцедуры

Процедура ПрочитатьОбъектИзПотокаXMLДобавитьВРезультат()
	
	Перем ПрочитанныйОбъект;
	
	Если ЭтоЗагрузкаВФорматеXML() Тогда
		ПрочитанныйОбъект = ПрочитатьXML(Читатор);	
	ИначеЕсли ЭтоЗагрузкаВФорматеXDTOXML() Тогда
		ПрочитанныйОбъект = СериализаторXDTO.ПрочитатьXML(Читатор);	
	КонецЕсли;
	
	ДобавитьПрочитанныйОбъектВРезультат(ПрочитанныйОбъект);	
		
КонецПроцедуры

Процедура ДобавитьПрочитанныйОбъектВРезультат(ПрочитанныйОбъект)
	
	Если ПрочитанныйОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	гкс_СтандартнаяСериализацияОбменПереопределяемый.ПередДобавлениемОбъектаВСписокПрочитанных(Результат, 
	                                                                                           ПрочитанныйОбъект);
	Результат.ПрочитанныеОбъекты.Добавить(ПрочитанныйОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализаторЧитатора

Процедура ИнициализироватьЧитаторПотокаЗагрузки()
	
	Если ЭтоЗагрузкаВФорматеXML() ИЛИ  ЭтоЗагрузкаВФорматеXDTOXML() Тогда
		
		Читатор = Новый ЧтениеXML;
		Читатор.УстановитьСтроку(Сообщение);
		Читатор.ПерейтиКСодержимому();
		
	ИначеЕсли ЭтоЗагрузкаВФорматеXDTOJSON() Тогда
		
		Читатор = Новый ЧтениеJSON();
		Читатор.УстановитьСтроку(Сообщение);
		
	КонецЕсли;
 	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаСообщений

Процедура ПровестиДокументыСоВсемиПроверками()
	
	УпорядочитьДокументыДляПроведения();
	Для Каждого СтрокаДокумент ИЗ ДокументыДляПроведения() Цикл
		гкс_ОбменДаннымиСервер.ВыполнитьПроведениеДокументаПриЗагрузке(Результат, СтрокаДокумент.Документ);
	КонецЦикла;
	
КонецПроцедуры

Процедура УпорядочитьДокументыДляПроведения()
	ДокументыДляПроведения().Сортировать("Дата");
КонецПроцедуры
	
Процедура ЗагрузитьОбъектыСоВсемиПроверками()
	
	Для Каждого ЗагруженныйОбъект Из ЗагруженныеОбъектыБезПроверок() Цикл
	
		СтандартнаяОбработка = Истина;
		гкс_СтандартнаяСериализацияОбменПереопределяемый.ПередЗагрузкойОбъектаСоВсемиПроверками(Результат, 
		                                                                                        ЗагруженныйОбъект,
		                                                                                        СтандартнаяОбработка);
		Если НЕ СтандартнаяОбработка Тогда
			Продолжить;	
		КонецЕсли;
		
		гкс_ОбменДаннымиСервер.ЗаписатьОбъектВИБСПроверкойЗаполнения(Результат, ЗагруженныйОбъект);
	
	КонецЦикла;
	
	гкс_СтандартнаяСериализацияОбменПереопределяемый.ПослеЗагрузкиВсехОбъектовСоВсемиПроверками(Результат);
	
КонецПроцедуры 

Процедура ЗагрузитьПрочитанныеОбъектыБезПроверок()
	
	Для Каждого ПрочитанныйОбъект Из ПрочитанныеОбъекты() Цикл
		
		СтандартнаяОбработка = Истина;
		гкс_СтандартнаяСериализацияОбменПереопределяемый.ПередЗагрузкойОбъектаВПервыйРаз(Результат, 
		                                                                                 ПрочитанныйОбъект,
		                                                                                 СтандартнаяОбработка);
		Если НЕ ВозможнаЗаписьВИБ(Результат, ПрочитанныйОбъект) ИЛИ НЕ СтандартнаяОбработка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ПрочитанныйОбъект) = Тип("УдалениеОбъекта") Тогда
			ВыполнитьУдалениеОбъекта(ПрочитанныйОбъект);	
			Продолжить;		
		КонецЕсли;
				
		МетаданныеОбъекта = ПрочитанныйОбъект.Метаданные();
		
		ЭтоДокумент = гкс_ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта);
		ДокументНужноПровести = Ложь;
		Если ЭтоДокумент Тогда
			ДокументНужноПровести = ПрочитанныйОбъект.Проведен;
		КонецЕсли;	
		
		Если ЭтоДокумент 
		     И МетаданныеОбъекта.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить 
		     И НЕ ПрочитанныйОбъект.ЭтоНовый() 
		     И ПрочитанныйОбъект.Проведен Тогда
			гкс_ОбменДаннымиСервер.ОтменитьПроведениеОбъектаВИБ(ПрочитанныйОбъект);
		КонецЕсли;
		
		ЗаписанныйОбъект = гкс_ОбменДаннымиСервер.ЗаписатьОбъектВИБ(ПрочитанныйОбъект, Истина);
		Если ЭтоДокумент И ДокументНужноПровести Тогда
			ДобавитьДокументДляПроведения(ЗаписанныйОбъект);
		Иначе
			ДобавитьОбъектВСписокЗагруженныхОбъектовБезПроверок(ЗаписанныйОбъект);
		КонецЕсли;
		
		ДобавитьОбъектВЗагруженныеОбъекты(ЗаписанныйОбъект); // Сюда пихаем все загруженные объекты 
		
	КонецЦикла; 
	
	гкс_СтандартнаяСериализацияОбменПереопределяемый.ПослеЗагрузкиВсехПрочитанныхОбъектовБезПроверки(Результат);
		
КонецПроцедуры

Процедура ДобавитьДокументДляПроведения(СсылкаДокумент)
	
	НовСтрока = Результат.ДокументыДляПроведения.Добавить();
	
	НовСтрока.Документ = СсылкаДокумент;
	НовСтрока.Дата = СсылкаДокумент.Дата; 
	
КонецПроцедуры

Функция ВозможнаЗаписьВИБ(Результат, ПрочитанныйОбъект)
	
	ТипЗнчПрочитанныйОбъект = ТипЗнч(ПрочитанныйОбъект);
	
	ИслючаемыеТипы = Новый Массив();
	ИслючаемыеТипы.Добавить(Тип("Структура"));
	ИслючаемыеТипы.Добавить(Тип("Соответствие"));
	
	Возврат (ИслючаемыеТипы.Найти(ТипЗнчПрочитанныйОбъект) = Неопределено);
	
КонецФункции

Процедура ДобавитьОбъектВСписокЗагруженныхОбъектовБезПроверок(ОбъектЗагруженныйБезПроверки)
	Результат.ЗагруженныеОбъектыБезПроверок.Добавить(ОбъектЗагруженныйБезПроверки);
КонецПроцедуры

Процедура ДобавитьОбъектВЗагруженныеОбъекты(ЗагруженныйОбъект) 
	Результат.ЗагруженныеОбъекты.Добавить(ЗагруженныйОбъект);
КонецПроцедуры

#Область УдалениеОбъекта

Процедура ВыполнитьУдалениеОбъекта(УдалениеОбъекта)
		
	Если НЕ гкс_ОбщегоНазначения.СсылкаСуществует(УдалениеОбъекта.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	
	гкс_ОбменДаннымиСервер.УдалитьОбъект(УдалениеОбъекта.Ссылка.ПолучитьОбъект(), 
	                                     Ложь, 
	                                     гкс_ОбщегоНазначения.ВидОбъектаПоТипу(ТипЗнч(УдалениеОбъекта.Ссылка)));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Исключения

Процедура ИсключениеНевозможноОпределитьТипФорматаЗагрузки()
	ВызватьИсключение НСтр("ru='Невозможно опеределить тип формата загрузки сообщения'");
КонецПроцедуры

#КонецОбласти

#Область Вспомогательное

Функция ЗагруженныеОбъектыБезПроверок()
	Возврат Результат.ЗагруженныеОбъектыБезПроверок;	
КонецФункции

Функция ДокументыДляПроведения()
	Возврат Результат.ДокументыДляПроведения;
КонецФункции

Функция ЭтоЗагрузкаВФорматеXML()
	Возврат ВРег(ТипФорматаСтрокой) = "XML";
КонецФункции

Функция ЭтоЗагрузкаВФорматеXDTOXML()
	Возврат ВРег(ТипФорматаСтрокой) = "XDTOXML";
КонецФункции

Функция ЭтоЗагрузкаВФорматеXDTOJSON()
	Возврат ВРег(ТипФорматаСтрокой) = "XDTOJSON";
КонецФункции

Процедура ПроверитьВозможностьЧтенияСообщения()
	
	Если НЕ ЗначениеЗаполнено(ТипФорматаСтрокой) Тогда
		ИсключениеНевозможноОпределитьТипФорматаЗагрузки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

Процедура Инициализация()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПрочитанныеОбъекты", Новый Массив);
	Результат.Вставить("ЗагруженныеОбъектыБезПроверок", Новый Массив);
	Результат.Вставить("ДокументыДляПроведения", ИнициализацияТаблицыДокументыДляПроведения());
	Результат.Вставить("ДополнительныеПараметры", Новый Структура);
	Результат.Вставить("ЗагруженныеОбъекты", Новый Массив);
	Результат.Вставить("ОшибкиОбработки", Новый Структура);
	Результат.Вставить("ИсключаемыеПолучатели", Новый Массив);
	
	Результат = Новый ФиксированнаяСтруктура(Результат);
	
	Сообщение = "";
	
	МенеджерФорматов = Справочники.гкс_ФорматыОбменаИАС;
	
КонецПроцедуры

Функция ИнициализацияТаблицыДокументыДляПроведения()
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Документ");
	Таблица.Колонки.Добавить("Дата");
	
	Таблица.Индексы.Добавить("Дата");

	Возврат Таблица;
		
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ИнициализацияПеременных

Инициализация();

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте'");
#КонецЕсли